
nucleo-h753zi2_m00765_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001596c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000216c  08015c0c  08015c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017d78  08017d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017d80  08017d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017d84  08017d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e4  24000000  08017d88  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1        0000083e  240000e4  08017e6c  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .sram4        00000227  24000924  080186aa  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037c8  24000b50  080188d1  00019b50  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24004318  080188d1  0001a318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00019b4b  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dd7c  00000000  00000000  00019b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000708b  00000000  00000000  000478f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  0004e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000195d  00000000  00000000  00050a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040e24  00000000  00000000  000523ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032406  00000000  00000000  00093211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c103  00000000  00000000  000c5617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024171a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f0c  00000000  00000000  00241760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0024a66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000b50 	.word	0x24000b50
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015bf4 	.word	0x08015bf4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000b54 	.word	0x24000b54
 80002dc:	08015bf4 	.word	0x08015bf4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_BDMA_Init+0x4c>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <MX_BDMA_Init+0x4c>)
 80006ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <MX_BDMA_Init+0x4c>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2081      	movs	r0, #129	@ 0x81
 80006e6:	f001 fafa 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80006ea:	2081      	movs	r0, #129	@ 0x81
 80006ec:	f001 fb11 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2082      	movs	r0, #130	@ 0x82
 80006f6:	f001 faf2 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
 80006fa:	2082      	movs	r0, #130	@ 0x82
 80006fc:	f001 fb09 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	58024400 	.word	0x58024400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_DMA_Init+0x4c>)
 8000714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000718:	4a0f      	ldr	r2, [pc, #60]	@ (8000758 <MX_DMA_Init+0x4c>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <MX_DMA_Init+0x4c>)
 8000724:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	200b      	movs	r0, #11
 8000736:	f001 fad2 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800073a:	200b      	movs	r0, #11
 800073c:	f001 fae9 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	200c      	movs	r0, #12
 8000746:	f001 faca 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800074a:	200c      	movs	r0, #12
 800074c:	f001 fae1 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	58024400 	.word	0x58024400

0800075c <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	@ 0x38
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b9a      	ldr	r3, [pc, #616]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4a98      	ldr	r2, [pc, #608]	@ (80009dc <MX_GPIO_Init+0x280>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4b96      	ldr	r3, [pc, #600]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000790:	4b92      	ldr	r3, [pc, #584]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a91      	ldr	r2, [pc, #580]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b8e      	ldr	r3, [pc, #568]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
 80007ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ae:	4b8b      	ldr	r3, [pc, #556]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a89      	ldr	r2, [pc, #548]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b87      	ldr	r3, [pc, #540]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b83      	ldr	r3, [pc, #524]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a82      	ldr	r2, [pc, #520]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b7f      	ldr	r3, [pc, #508]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b7c      	ldr	r3, [pc, #496]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f0:	4a7a      	ldr	r2, [pc, #488]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007fa:	4b78      	ldr	r3, [pc, #480]	@ (80009dc <MX_GPIO_Init+0x280>)
 80007fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000808:	4b74      	ldr	r3, [pc, #464]	@ (80009dc <MX_GPIO_Init+0x280>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800080e:	4a73      	ldr	r2, [pc, #460]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000818:	4b70      	ldr	r3, [pc, #448]	@ (80009dc <MX_GPIO_Init+0x280>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	4b6d      	ldr	r3, [pc, #436]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800082c:	4a6b      	ldr	r2, [pc, #428]	@ (80009dc <MX_GPIO_Init+0x280>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000836:	4b69      	ldr	r3, [pc, #420]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000844:	4b65      	ldr	r3, [pc, #404]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084a:	4a64      	ldr	r2, [pc, #400]	@ (80009dc <MX_GPIO_Init+0x280>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000854:	4b61      	ldr	r3, [pc, #388]	@ (80009dc <MX_GPIO_Init+0x280>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000868:	485d      	ldr	r0, [pc, #372]	@ (80009e0 <MX_GPIO_Init+0x284>)
 800086a:	f004 fa7d 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M00765_OM0_Pin|M00765_OM2_Pin|M00765_OM1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f646 0102 	movw	r1, #26626	@ 0x6802
 8000874:	485b      	ldr	r0, [pc, #364]	@ (80009e4 <MX_GPIO_Init+0x288>)
 8000876:	f004 fa77 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000880:	4859      	ldr	r0, [pc, #356]	@ (80009e8 <MX_GPIO_Init+0x28c>)
 8000882:	f004 fa71 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M00765_SPI_SS_GPIO_Port, M00765_SPI_SS_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800088c:	4856      	ldr	r0, [pc, #344]	@ (80009e8 <MX_GPIO_Init+0x28c>)
 800088e:	f004 fa6b 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, M00765_RESET_Pin|M00765_OM3_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8000898:	4854      	ldr	r0, [pc, #336]	@ (80009ec <MX_GPIO_Init+0x290>)
 800089a:	f004 fa65 	bl	8004d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	484f      	ldr	r0, [pc, #316]	@ (80009f0 <MX_GPIO_Init+0x294>)
 80008b4:	f004 f890 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_BTN_S1_Pin */
  GPIO_InitStruct.Pin = M00765_BTN_S1_Pin;
 80008b8:	2308      	movs	r3, #8
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(M00765_BTN_S1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	484a      	ldr	r0, [pc, #296]	@ (80009f4 <MX_GPIO_Init+0x298>)
 80008cc:	f004 f884 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008d0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	483d      	ldr	r0, [pc, #244]	@ (80009e0 <MX_GPIO_Init+0x284>)
 80008ea:	f004 f875 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_IRQ_Pin */
  GPIO_InitStruct.Pin = M00765_IRQ_Pin;
 80008ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(M00765_IRQ_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000900:	4619      	mov	r1, r3
 8000902:	4838      	ldr	r0, [pc, #224]	@ (80009e4 <MX_GPIO_Init+0x288>)
 8000904:	f004 f868 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M00765_OM0_Pin M00765_OM2_Pin M00765_OM1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = M00765_OM0_Pin|M00765_OM2_Pin|M00765_OM1_Pin|LD2_Pin;
 8000908:	f646 0302 	movw	r3, #26626	@ 0x6802
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800091e:	4619      	mov	r1, r3
 8000920:	4830      	ldr	r0, [pc, #192]	@ (80009e4 <MX_GPIO_Init+0x288>)
 8000922:	f004 f859 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	482a      	ldr	r0, [pc, #168]	@ (80009e8 <MX_GPIO_Init+0x28c>)
 8000940:	f004 f84a 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_SPI_SS_Pin */
  GPIO_InitStruct.Pin = M00765_SPI_SS_Pin;
 8000944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M00765_SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x28c>)
 800095e:	f004 f83b 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_SYNC_Pin */
  GPIO_InitStruct.Pin = M00765_SYNC_Pin;
 8000962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800096c:	2302      	movs	r3, #2
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(M00765_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	481c      	ldr	r0, [pc, #112]	@ (80009e8 <MX_GPIO_Init+0x28c>)
 8000978:	f004 f82e 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000980:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4816      	ldr	r0, [pc, #88]	@ (80009ec <MX_GPIO_Init+0x290>)
 8000992:	f004 f821 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_RESET_Pin */
  GPIO_InitStruct.Pin = M00765_RESET_Pin;
 8000996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M00765_RESET_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	@ (80009ec <MX_GPIO_Init+0x290>)
 80009b0:	f004 f812 	bl	80049d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M00765_OM3_Pin */
  GPIO_InitStruct.Pin = M00765_OM3_Pin;
 80009b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009ba:	2311      	movs	r3, #17
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(M00765_OM3_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_GPIO_Init+0x290>)
 80009ce:	f004 f803 	bl	80049d8 <HAL_GPIO_Init>

}
 80009d2:	bf00      	nop
 80009d4:	3738      	adds	r7, #56	@ 0x38
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58020400 	.word	0x58020400
 80009e4:	58021000 	.word	0x58021000
 80009e8:	58020c00 	.word	0x58020c00
 80009ec:	58021800 	.word	0x58021800
 80009f0:	58020800 	.word	0x58020800
 80009f4:	58021400 	.word	0x58021400

080009f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a34:	f004 f9b2 	bl	8004d9c <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 fa03 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a46:	f004 fef9 	bl	800583c <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f9fa 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_I2C1_Init+0x74>)
 8000a58:	f004 ff3b 	bl	80058d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 f9f1 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000b6c 	.word	0x24000b6c
 8000a70:	40005400 	.word	0x40005400
 8000a74:	10707dbc 	.word	0x10707dbc

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	22c0      	movs	r2, #192	@ 0xc0
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f014 fae7 	bl	801506c <memset>
  if(i2cHandle->Instance==I2C1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a27      	ldr	r2, [pc, #156]	@ (8000b40 <HAL_I2C_MspInit+0xc8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d146      	bne.n	8000b36 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa8:	f04f 0208 	mov.w	r2, #8
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f006 f8b4 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000aca:	f000 f9bd 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000af0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b06:	2304      	movs	r3, #4
 8000b08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <HAL_I2C_MspInit+0xd0>)
 8000b14:	f003 ff60 	bl	80049d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b18:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1e:	4a09      	ldr	r2, [pc, #36]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_I2C_MspInit+0xcc>)
 8000b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b36:	bf00      	nop
 8000b38:	37e8      	adds	r7, #232	@ 0xe8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40005400 	.word	0x40005400
 8000b44:	58024400 	.word	0x58024400
 8000b48:	58020400 	.word	0x58020400

08000b4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d013      	beq.n	8000b8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b74:	e000      	b.n	8000b78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0f9      	beq.n	8000b76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_write>:
/*
** Overrides the weak _write function to route printf to the SWV ITM Data
** Console.
*/
int _write(int file, char *ptr, int len)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b086      	sub	sp, #24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e009      	b.n	8000bc0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	60ba      	str	r2, [r7, #8]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ffc9 	bl	8000b4c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf1      	blt.n	8000bac <_write+0x12>
  }
  return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <ABCC_API_CbfUserInit>:
** Place to take action based on ABCC module network type and firmware version.
** Calls ABCC_API_UserInitComplete() to indicate to the abcc_driver to continue.
**------------------------------------------------------------------------------
*/
void ABCC_API_CbfUserInit( ABCC_API_NetworkType iNetworkType, ABCC_API_FwVersionType iFirmwareVersion )
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	80fb      	strh	r3, [r7, #6]
   ABCC_API_UserInitComplete();
 8000bde:	f010 ff8f 	bl	8011b00 <ABCC_API_UserInitComplete>
   return;
 8000be2:	bf00      	nop
}
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
	   ** need variables to keep track of its state.
	   */
	   BOOL  fAbccRestartButtonThen;
	   BOOL  fAbccRestartButtonNow;

	   ABCC_ErrorCodeType eErrorCode = ABCC_EC_NO_ERROR;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	827b      	strh	r3, [r7, #18]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fed5 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f8a5 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000bfe:	f7ff fd85 	bl	800070c <MX_DMA_Init>
  MX_BDMA_Init();
 8000c02:	f7ff fd5b 	bl	80006bc <MX_BDMA_Init>
  MX_GPIO_Init();
 8000c06:	f7ff fda9 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c0a:	f7ff fef5 	bl	80009f8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000c0e:	f000 fc2b 	bl	8001468 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000c12:	f000 f91f 	bl	8000e54 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000c16:	f000 fc73 	bl	8001500 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c1a:	f000 fde9 	bl	80017f0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf( "%c", 12 ); /* 12 = 'form feed' */
 8000c1e:	200c      	movs	r0, #12
 8000c20:	f014 f8dc 	bl	8014ddc <putchar>
  printf( "HMS Industrial Networks\n" );
 8000c24:	483f      	ldr	r0, [pc, #252]	@ (8000d24 <main+0x138>)
 8000c26:	f014 f937 	bl	8014e98 <puts>
  printf( "Embedded ABCC Demo\n" );
 8000c2a:	483f      	ldr	r0, [pc, #252]	@ (8000d28 <main+0x13c>)
 8000c2c:	f014 f934 	bl	8014e98 <puts>
  printf( "NUCLEO-H743ZI2 with M00765 option card\n" );
 8000c30:	483e      	ldr	r0, [pc, #248]	@ (8000d2c <main+0x140>)
 8000c32:	f014 f931 	bl	8014e98 <puts>
  printf( "\n" );
 8000c36:	200a      	movs	r0, #10
 8000c38:	f014 f8d0 	bl	8014ddc <putchar>
  ** assumed that those interfaces already has been claimed/reserved via the
  ** CubeMX configuration tool, and that its code generator has defined the
  ** corresponding structures here in the "main.c" so that the only
  ** remaining task is to pass on pointers to those existing structures.
  */
  if( !ABCC_HAL_Set_I2C_Handle( &hi2c1 ) )
 8000c3c:	483c      	ldr	r0, [pc, #240]	@ (8000d30 <main+0x144>)
 8000c3e:	f013 fa3f 	bl	80140c0 <ABCC_HAL_Set_I2C_Handle>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <main+0x60>
  {
     Error_Handler();
 8000c48:	f000 f8fe 	bl	8000e48 <Error_Handler>
  }
  if( !ABCC_HAL_Set_SPI_Handle( &hspi1 ) )
 8000c4c:	4839      	ldr	r0, [pc, #228]	@ (8000d34 <main+0x148>)
 8000c4e:	f013 fa65 	bl	801411c <ABCC_HAL_Set_SPI_Handle>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <main+0x70>
  {
     Error_Handler();
 8000c58:	f000 f8f6 	bl	8000e48 <Error_Handler>
  }
  if( !ABCC_HAL_Set_UART_Handle( &hlpuart1 ) )
 8000c5c:	4836      	ldr	r0, [pc, #216]	@ (8000d38 <main+0x14c>)
 8000c5e:	f013 fa8b 	bl	8014178 <ABCC_HAL_Set_UART_Handle>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <main+0x80>
  {
     Error_Handler();
 8000c68:	f000 f8ee 	bl	8000e48 <Error_Handler>
  }

  if( ABCC_API_Init() != ABCC_EC_NO_ERROR )
 8000c6c:	f010 ff68 	bl	8011b40 <ABCC_API_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <main+0x8e>
  {
     Error_Handler();
 8000c76:	f000 f8e7 	bl	8000e48 <Error_Handler>
  }

  lTickThen = HAL_GetTick();
 8000c7a:	f000 ff19 	bl	8001ab0 <HAL_GetTick>
 8000c7e:	61f8      	str	r0, [r7, #28]
  fAbccRestartButtonThen = ABCC_HAL_GetRestartButton();
 8000c80:	f013 fb5a 	bl	8014338 <ABCC_HAL_GetRestartButton>
 8000c84:	6178      	str	r0, [r7, #20]

    /* USER CODE BEGIN 3 */
      /*
      ** Handle console input.
      */
      if( HAL_UART_Receive( &huart3, &bConsoleInput, 1, 0 ) == HAL_OK )
 8000c86:	1df9      	adds	r1, r7, #7
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	482b      	ldr	r0, [pc, #172]	@ (8000d3c <main+0x150>)
 8000c8e:	f008 fc4e 	bl	800952e <HAL_UART_Receive>
      }

      /*
      ** Run the ABCC driver and handle any state-dependent actions.
      */
      eErrorCode = ABCC_API_Run();
 8000c92:	f010 ff5d 	bl	8011b50 <ABCC_API_Run>
 8000c96:	4603      	mov	r3, r0
 8000c98:	827b      	strh	r3, [r7, #18]

      if( eErrorCode != ABCC_EC_NO_ERROR )
 8000c9a:	8a7b      	ldrh	r3, [r7, #18]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d005      	beq.n	8000cac <main+0xc0>
      {
         printf( "ABCC_API_Run() returned error code %d\n", eErrorCode );
 8000ca0:	8a7b      	ldrh	r3, [r7, #18]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4826      	ldr	r0, [pc, #152]	@ (8000d40 <main+0x154>)
 8000ca6:	f014 f887 	bl	8014db8 <iprintf>
         break;
 8000caa:	e033      	b.n	8000d14 <main+0x128>

      /*
      ** Poll the system timer and inform ABCC_API_RunTimerSystem() about how
      ** much time that has elapsed.
      */
      lTickNow = HAL_GetTick();
 8000cac:	f000 ff00 	bl	8001ab0 <HAL_GetTick>
 8000cb0:	60f8      	str	r0, [r7, #12]
      if( lTickNow != lTickThen )
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d01d      	beq.n	8000cf6 <main+0x10a>
      {
         lTickDiff = lTickNow - lTickThen;
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	61bb      	str	r3, [r7, #24]
         lTickThen = lTickNow;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	61fb      	str	r3, [r7, #28]

         /*
         ** Make sure that *all* elapsed time is accounted for...
         */
         while( lTickDiff > 0 )
 8000cc6:	e013      	b.n	8000cf0 <main+0x104>
         {
            if( lTickDiff > ABP_SINT16_MAX )
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000cce:	d308      	bcc.n	8000ce2 <main+0xf6>
            {
               ABCC_API_RunTimerSystem( ABP_SINT16_MAX );
 8000cd0:	f647 70ff 	movw	r0, #32767	@ 0x7fff
 8000cd4:	f010 ff20 	bl	8011b18 <ABCC_API_RunTimerSystem>
               lTickDiff -= ABP_SINT16_MAX;
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <main+0x158>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	e006      	b.n	8000cf0 <main+0x104>
            }
            else
            {
               ABCC_API_RunTimerSystem( (INT16)lTickDiff );
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	b21b      	sxth	r3, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f010 ff16 	bl	8011b18 <ABCC_API_RunTimerSystem>
               lTickDiff = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
         while( lTickDiff > 0 )
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1e8      	bne.n	8000cc8 <main+0xdc>

      /*
      ** Restart the ABCC when the S1/RESTART is pushed down. Debouncing is not
      ** needed since the button is wired via a voltage WD chip (U4).
      */
      fAbccRestartButtonNow = ABCC_HAL_GetRestartButton();
 8000cf6:	f013 fb1f 	bl	8014338 <ABCC_HAL_GetRestartButton>
 8000cfa:	60b8      	str	r0, [r7, #8]
      if( fAbccRestartButtonNow != fAbccRestartButtonThen )
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d0c0      	beq.n	8000c86 <main+0x9a>
      {
         fAbccRestartButtonThen = fAbccRestartButtonNow;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	617b      	str	r3, [r7, #20]
         if( !fAbccRestartButtonThen )
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1bb      	bne.n	8000c86 <main+0x9a>
         {
            ABCC_API_Restart();
 8000d0e:	f011 f803 	bl	8011d18 <ABCC_API_Restart>
      if( HAL_UART_Receive( &huart3, &bConsoleInput, 1, 0 ) == HAL_OK )
 8000d12:	e7b8      	b.n	8000c86 <main+0x9a>
         }
      }
  }

  ABCC_API_Shutdown();
 8000d14:	f010 fffa 	bl	8011d0c <ABCC_API_Shutdown>
 8000d18:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	08015c0c 	.word	0x08015c0c
 8000d28:	08015c24 	.word	0x08015c24
 8000d2c:	08015c38 	.word	0x08015c38
 8000d30:	24000b6c 	.word	0x24000b6c
 8000d34:	24000bc0 	.word	0x24000bc0
 8000d38:	24000d3c 	.word	0x24000d3c
 8000d3c:	24000dd0 	.word	0x24000dd0
 8000d40:	08015c60 	.word	0x08015c60
 8000d44:	ffff8001 	.word	0xffff8001

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b09c      	sub	sp, #112	@ 0x70
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	224c      	movs	r2, #76	@ 0x4c
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f014 f988 	bl	801506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2220      	movs	r2, #32
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f014 f982 	bl	801506c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f004 ff2f 	bl	8005bcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b33      	ldr	r3, [pc, #204]	@ (8000e40 <SystemClock_Config+0xf8>)
 8000d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d76:	4a32      	ldr	r2, [pc, #200]	@ (8000e40 <SystemClock_Config+0xf8>)
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d7e:	4b30      	ldr	r3, [pc, #192]	@ (8000e40 <SystemClock_Config+0xf8>)
 8000d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <SystemClock_Config+0xfc>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d90:	4a2c      	ldr	r2, [pc, #176]	@ (8000e44 <SystemClock_Config+0xfc>)
 8000d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <SystemClock_Config+0xfc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da4:	bf00      	nop
 8000da6:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <SystemClock_Config+0xfc>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000db2:	d1f8      	bne.n	8000da6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000db4:	2303      	movs	r3, #3
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000db8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2340      	movs	r3, #64	@ 0x40
 8000dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000dd2:	2318      	movs	r3, #24
 8000dd4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000de2:	230c      	movs	r3, #12
 8000de4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 ff34 	bl	8005c60 <HAL_RCC_OscConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dfe:	f000 f823 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e02:	233f      	movs	r3, #63	@ 0x3f
 8000e04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 fb74 	bl	8006514 <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000e32:	f000 f809 	bl	8000e48 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3770      	adds	r7, #112	@ 0x70
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	58000400 	.word	0x58000400
 8000e44:	58024800 	.word	0x58024800

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e5a:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <MX_SPI1_Init+0xa8>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e6e:	2207      	movs	r2, #7
 8000e70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ea8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eac:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <MX_SPI1_Init+0xa4>)
 8000ee6:	f007 fccd 	bl	8008884 <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000ef0:	f7ff ffaa 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	24000bc0 	.word	0x24000bc0
 8000efc:	40013000 	.word	0x40013000

08000f00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0bc      	sub	sp, #240	@ 0xf0
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	22c0      	movs	r2, #192	@ 0xc0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f014 f8a3 	bl	801506c <memset>
  if(spiHandle->Instance==SPI1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a69      	ldr	r2, [pc, #420]	@ (80010d0 <HAL_SPI_MspInit+0x1d0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	f040 80cb 	bne.w	80010c8 <HAL_SPI_MspInit+0x1c8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fe70 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8000f52:	f7ff ff79 	bl	8000e48 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f56:	4b5f      	ldr	r3, [pc, #380]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f66:	4b5b      	ldr	r3, [pc, #364]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b57      	ldr	r3, [pc, #348]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a56      	ldr	r2, [pc, #344]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b53      	ldr	r3, [pc, #332]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b50      	ldr	r3, [pc, #320]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <HAL_SPI_MspInit+0x1d4>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000fb0:	2360      	movs	r3, #96	@ 0x60
 8000fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4840      	ldr	r0, [pc, #256]	@ (80010d8 <HAL_SPI_MspInit+0x1d8>)
 8000fd6:	f003 fcff 	bl	80049d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <HAL_SPI_MspInit+0x1dc>)
 8001000:	f003 fcea 	bl	80049d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001004:	4b36      	ldr	r3, [pc, #216]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001006:	4a37      	ldr	r2, [pc, #220]	@ (80010e4 <HAL_SPI_MspInit+0x1e4>)
 8001008:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800100a:	4b35      	ldr	r3, [pc, #212]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 800100c:	2225      	movs	r2, #37	@ 0x25
 800100e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001010:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001016:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800101c:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 800101e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001022:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001024:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800102a:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001030:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103c:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001042:	4827      	ldr	r0, [pc, #156]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001044:	f000 fe80 	bl	8001d48 <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_SPI_MspInit+0x152>
    {
      Error_Handler();
 800104e:	f7ff fefb 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 8001056:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_SPI_MspInit+0x1e0>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 800105e:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <HAL_SPI_MspInit+0x1ec>)
 8001062:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001066:	2226      	movs	r2, #38	@ 0x26
 8001068:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106a:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 800106c:	2240      	movs	r2, #64	@ 0x40
 800106e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800109c:	4812      	ldr	r0, [pc, #72]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 800109e:	f000 fe53 	bl	8001d48 <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_SPI_MspInit+0x1ac>
    {
      Error_Handler();
 80010a8:	f7ff fece 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 80010b0:	679a      	str	r2, [r3, #120]	@ 0x78
 80010b2:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <HAL_SPI_MspInit+0x1e8>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2023      	movs	r0, #35	@ 0x23
 80010be:	f000 fe0e 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010c2:	2023      	movs	r0, #35	@ 0x23
 80010c4:	f000 fe25 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c8:	bf00      	nop
 80010ca:	37f0      	adds	r7, #240	@ 0xf0
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013000 	.word	0x40013000
 80010d4:	58024400 	.word	0x58024400
 80010d8:	58020000 	.word	0x58020000
 80010dc:	58020400 	.word	0x58020400
 80010e0:	24000c48 	.word	0x24000c48
 80010e4:	40020010 	.word	0x40020010
 80010e8:	24000cc0 	.word	0x24000cc0
 80010ec:	40020028 	.word	0x40020028

080010f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_MspInit+0x30>)
 80010f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <HAL_MspInit+0x30>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_MspInit+0x30>)
 8001108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	58024400 	.word	0x58024400

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <NMI_Handler+0x4>

0800112c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <MemManage_Handler+0x4>

0800113c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <UsageFault_Handler+0x4>

0800114c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117a:	f000 fc85 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001188:	4802      	ldr	r0, [pc, #8]	@ (8001194 <DMA1_Stream0_IRQHandler+0x10>)
 800118a:	f002 f907 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	24000c48 	.word	0x24000c48

08001198 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <DMA1_Stream1_IRQHandler+0x10>)
 800119e:	f002 f8fd 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000cc0 	.word	0x24000cc0

080011ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b0:	4802      	ldr	r0, [pc, #8]	@ (80011bc <SPI1_IRQHandler+0x10>)
 80011b2:	f007 fe43 	bl	8008e3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	24000bc0 	.word	0x24000bc0

080011c0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <BDMA_Channel0_IRQHandler+0x10>)
 80011c6:	f002 f8e9 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	24000e64 	.word	0x24000e64

080011d4 <BDMA_Channel1_IRQHandler>:

/**
  * @brief This function handles BDMA channel1 global interrupt.
  */
void BDMA_Channel1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80011d8:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <BDMA_Channel1_IRQHandler+0x10>)
 80011da:	f002 f8df 	bl	800339c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel1_IRQn 1 */

  /* USER CODE END BDMA_Channel1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	24000edc 	.word	0x24000edc

080011e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	e00a      	b.n	8001210 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011fa:	f3af 8000 	nop.w
 80011fe:	4601      	mov	r1, r0
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	b2ca      	uxtb	r2, r1
 8001208:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf0      	blt.n	80011fa <_read+0x12>
  }

  return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800124a:	605a      	str	r2, [r3, #4]
  return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_isatty>:

int _isatty(int file)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	@ (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f013 ff24 	bl	8015108 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	@ (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	24080000 	.word	0x24080000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	24000d38 	.word	0x24000d38
 80012f4:	24004318 	.word	0x24004318

080012f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <SystemInit+0x114>)
 80012fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001302:	4a42      	ldr	r2, [pc, #264]	@ (800140c <SystemInit+0x114>)
 8001304:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001308:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800130c:	4b40      	ldr	r3, [pc, #256]	@ (8001410 <SystemInit+0x118>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 030f 	and.w	r3, r3, #15
 8001314:	2b06      	cmp	r3, #6
 8001316:	d807      	bhi.n	8001328 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001318:	4b3d      	ldr	r3, [pc, #244]	@ (8001410 <SystemInit+0x118>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 030f 	bic.w	r3, r3, #15
 8001320:	4a3b      	ldr	r2, [pc, #236]	@ (8001410 <SystemInit+0x118>)
 8001322:	f043 0307 	orr.w	r3, r3, #7
 8001326:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <SystemInit+0x11c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a39      	ldr	r2, [pc, #228]	@ (8001414 <SystemInit+0x11c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001334:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <SystemInit+0x11c>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800133a:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <SystemInit+0x11c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4935      	ldr	r1, [pc, #212]	@ (8001414 <SystemInit+0x11c>)
 8001340:	4b35      	ldr	r3, [pc, #212]	@ (8001418 <SystemInit+0x120>)
 8001342:	4013      	ands	r3, r2
 8001344:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001346:	4b32      	ldr	r3, [pc, #200]	@ (8001410 <SystemInit+0x118>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001352:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <SystemInit+0x118>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 030f 	bic.w	r3, r3, #15
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <SystemInit+0x118>)
 800135c:	f043 0307 	orr.w	r3, r3, #7
 8001360:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001362:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <SystemInit+0x11c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <SystemInit+0x11c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800136e:	4b29      	ldr	r3, [pc, #164]	@ (8001414 <SystemInit+0x11c>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <SystemInit+0x11c>)
 8001376:	4a29      	ldr	r2, [pc, #164]	@ (800141c <SystemInit+0x124>)
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800137a:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <SystemInit+0x11c>)
 800137c:	4a28      	ldr	r2, [pc, #160]	@ (8001420 <SystemInit+0x128>)
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <SystemInit+0x11c>)
 8001382:	4a28      	ldr	r2, [pc, #160]	@ (8001424 <SystemInit+0x12c>)
 8001384:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <SystemInit+0x11c>)
 8001388:	2200      	movs	r2, #0
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <SystemInit+0x11c>)
 800138e:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <SystemInit+0x12c>)
 8001390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <SystemInit+0x11c>)
 8001394:	2200      	movs	r2, #0
 8001396:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <SystemInit+0x11c>)
 800139a:	4a22      	ldr	r2, [pc, #136]	@ (8001424 <SystemInit+0x12c>)
 800139c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <SystemInit+0x11c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <SystemInit+0x11c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <SystemInit+0x11c>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <SystemInit+0x11c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <SystemInit+0x130>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <SystemInit+0x134>)
 80013bc:	4013      	ands	r3, r2
 80013be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013c2:	d202      	bcs.n	80013ca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <SystemInit+0x138>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <SystemInit+0x11c>)
 80013cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d113      	bne.n	8001400 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <SystemInit+0x11c>)
 80013da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013de:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <SystemInit+0x11c>)
 80013e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <SystemInit+0x13c>)
 80013ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80013ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <SystemInit+0x11c>)
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013f6:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <SystemInit+0x11c>)
 80013f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00
 8001410:	52002000 	.word	0x52002000
 8001414:	58024400 	.word	0x58024400
 8001418:	eaf6ed7f 	.word	0xeaf6ed7f
 800141c:	02020200 	.word	0x02020200
 8001420:	01ff0000 	.word	0x01ff0000
 8001424:	01010280 	.word	0x01010280
 8001428:	5c001000 	.word	0x5c001000
 800142c:	ffff0000 	.word	0xffff0000
 8001430:	51008108 	.word	0x51008108
 8001434:	52004000 	.word	0x52004000

08001438 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <ExitRun0Mode+0x2c>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <ExitRun0Mode+0x2c>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001448:	bf00      	nop
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <ExitRun0Mode+0x2c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f9      	beq.n	800144a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	58024800 	.word	0x58024800

08001468 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 800146e:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <MX_LPUART1_UART_Init+0x94>)
 8001470:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 8001474:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001478:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014b0:	4811      	ldr	r0, [pc, #68]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014b2:	f007 ffec 	bl	800948e <HAL_UART_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80014bc:	f7ff fcc4 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c0:	2100      	movs	r1, #0
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014c4:	f009 fcff 	bl	800aec6 <HAL_UARTEx_SetTxFifoThreshold>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014ce:	f7ff fcbb 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014d6:	f009 fd34 	bl	800af42 <HAL_UARTEx_SetRxFifoThreshold>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e0:	f7ff fcb2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_LPUART1_UART_Init+0x90>)
 80014e6:	f009 fcb5 	bl	800ae54 <HAL_UARTEx_DisableFifoMode>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f0:	f7ff fcaa 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	24000d3c 	.word	0x24000d3c
 80014fc:	58000c00 	.word	0x58000c00

08001500 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001506:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <MX_USART3_UART_Init+0x94>)
 8001508:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800154a:	f007 ffa0 	bl	800948e <HAL_UART_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001554:	f7ff fc78 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	480d      	ldr	r0, [pc, #52]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800155c:	f009 fcb3 	bl	800aec6 <HAL_UARTEx_SetTxFifoThreshold>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001566:	f7ff fc6f 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156a:	2100      	movs	r1, #0
 800156c:	4808      	ldr	r0, [pc, #32]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800156e:	f009 fce8 	bl	800af42 <HAL_UARTEx_SetRxFifoThreshold>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001578:	f7ff fc66 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <MX_USART3_UART_Init+0x90>)
 800157e:	f009 fc69 	bl	800ae54 <HAL_UARTEx_DisableFifoMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001588:	f7ff fc5e 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24000dd0 	.word	0x24000dd0
 8001594:	40004800 	.word	0x40004800

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0bc      	sub	sp, #240	@ 0xf0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	22c0      	movs	r2, #192	@ 0xc0
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f013 fd57 	bl	801506c <memset>
  if(uartHandle->Instance==LPUART1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a82      	ldr	r2, [pc, #520]	@ (80017cc <HAL_UART_MspInit+0x234>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f040 80b1 	bne.w	800172c <HAL_UART_MspInit+0x194>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015ca:	f04f 0204 	mov.w	r2, #4
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fb23 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80015ec:	f7ff fc2c 	bl	8000e48 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015f0:	4b77      	ldr	r3, [pc, #476]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 80015f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f6:	4a76      	ldr	r2, [pc, #472]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001600:	4b73      	ldr	r3, [pc, #460]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001614:	4a6e      	ldr	r2, [pc, #440]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001616:	f043 0302 	orr.w	r3, r3, #2
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800161e:	4b6c      	ldr	r3, [pc, #432]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800162c:	2340      	movs	r3, #64	@ 0x40
 800162e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8001644:	2308      	movs	r3, #8
 8001646:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800164e:	4619      	mov	r1, r3
 8001650:	4860      	ldr	r0, [pc, #384]	@ (80017d4 <HAL_UART_MspInit+0x23c>)
 8001652:	f003 f9c1 	bl	80049d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001662:	2301      	movs	r3, #1
 8001664:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800166e:	2308      	movs	r3, #8
 8001670:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001678:	4619      	mov	r1, r3
 800167a:	4856      	ldr	r0, [pc, #344]	@ (80017d4 <HAL_UART_MspInit+0x23c>)
 800167c:	f003 f9ac 	bl	80049d8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8001680:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 8001682:	4a56      	ldr	r2, [pc, #344]	@ (80017dc <HAL_UART_MspInit+0x244>)
 8001684:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8001686:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 8001688:	2209      	movs	r2, #9
 800168a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168c:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001698:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 800169a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a0:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a6:	4b4c      	ldr	r3, [pc, #304]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80016ac:	4b4a      	ldr	r3, [pc, #296]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016b2:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80016b8:	4847      	ldr	r0, [pc, #284]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016ba:	f000 fb45 	bl	8001d48 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80016c4:	f7ff fbc0 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a43      	ldr	r2, [pc, #268]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016d0:	4a41      	ldr	r2, [pc, #260]	@ (80017d8 <HAL_UART_MspInit+0x240>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = BDMA_Channel1;
 80016d6:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016d8:	4a42      	ldr	r2, [pc, #264]	@ (80017e4 <HAL_UART_MspInit+0x24c>)
 80016da:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = BDMA_REQUEST_LPUART1_TX;
 80016dc:	4b40      	ldr	r3, [pc, #256]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016de:	220a      	movs	r2, #10
 80016e0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e2:	4b3f      	ldr	r3, [pc, #252]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016e4:	2240      	movs	r2, #64	@ 0x40
 80016e6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e8:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ee:	4b3c      	ldr	r3, [pc, #240]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	4b3a      	ldr	r3, [pc, #232]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016fc:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001708:	4b35      	ldr	r3, [pc, #212]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800170e:	4834      	ldr	r0, [pc, #208]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 8001710:	f000 fb1a 	bl	8001d48 <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 800171a:	f7ff fb95 	bl	8000e48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a2f      	ldr	r2, [pc, #188]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 8001722:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001724:	4a2e      	ldr	r2, [pc, #184]	@ (80017e0 <HAL_UART_MspInit+0x248>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800172a:	e04b      	b.n	80017c4 <HAL_UART_MspInit+0x22c>
  else if(uartHandle->Instance==USART3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2d      	ldr	r2, [pc, #180]	@ (80017e8 <HAL_UART_MspInit+0x250>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d146      	bne.n	80017c4 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001736:	f04f 0202 	mov.w	r2, #2
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	4618      	mov	r0, r3
 800174e:	f005 fa6d 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8001758:	f7ff fb76 	bl	8000e48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800175c:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 800175e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001762:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001768:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 800176e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001780:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_UART_MspInit+0x238>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001798:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800179c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b2:	2307      	movs	r3, #7
 80017b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017bc:	4619      	mov	r1, r3
 80017be:	480b      	ldr	r0, [pc, #44]	@ (80017ec <HAL_UART_MspInit+0x254>)
 80017c0:	f003 f90a 	bl	80049d8 <HAL_GPIO_Init>
}
 80017c4:	bf00      	nop
 80017c6:	37f0      	adds	r7, #240	@ 0xf0
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	58000c00 	.word	0x58000c00
 80017d0:	58024400 	.word	0x58024400
 80017d4:	58020400 	.word	0x58020400
 80017d8:	24000e64 	.word	0x24000e64
 80017dc:	58025408 	.word	0x58025408
 80017e0:	24000edc 	.word	0x24000edc
 80017e4:	5802541c 	.word	0x5802541c
 80017e8:	40004800 	.word	0x40004800
 80017ec:	58020c00 	.word	0x58020c00

080017f0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017fa:	4b14      	ldr	r3, [pc, #80]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fc:	2209      	movs	r2, #9
 80017fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001802:	2202      	movs	r2, #2
 8001804:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001808:	2200      	movs	r2, #0
 800180a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800180c:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800180e:	2202      	movs	r2, #2
 8001810:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001814:	2201      	movs	r2, #1
 8001816:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800181a:	2200      	movs	r2, #0
 800181c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001820:	2200      	movs	r2, #0
 8001822:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001826:	2201      	movs	r2, #1
 8001828:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800182c:	2201      	movs	r2, #1
 800182e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001832:	2200      	movs	r2, #0
 8001834:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001838:	f004 f897 	bl	800596a <HAL_PCD_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001842:	f7ff fb01 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000f54 	.word	0x24000f54
 8001850:	40080000 	.word	0x40080000

08001854 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b0ba      	sub	sp, #232	@ 0xe8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	22c0      	movs	r2, #192	@ 0xc0
 8001872:	2100      	movs	r1, #0
 8001874:	4618      	mov	r0, r3
 8001876:	f013 fbf9 	bl	801506c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a30      	ldr	r2, [pc, #192]	@ (8001940 <HAL_PCD_MspInit+0xec>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d159      	bne.n	8001938 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001884:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001890:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f005 f9c5 	bl	8006c2c <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80018a8:	f7ff face 	bl	8000e48 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80018ac:	f004 f9c8 	bl	8005c40 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b24      	ldr	r3, [pc, #144]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018ce:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018e8:	230a      	movs	r3, #10
 80018ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4814      	ldr	r0, [pc, #80]	@ (8001948 <HAL_PCD_MspInit+0xf4>)
 80018f6:	f003 f86f 	bl	80049d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <HAL_PCD_MspInit+0xf4>)
 8001916:	f003 f85f 	bl	80049d8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 800191c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001920:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 8001922:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001926:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_PCD_MspInit+0xf0>)
 800192c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001938:	bf00      	nop
 800193a:	37e8      	adds	r7, #232	@ 0xe8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40080000 	.word	0x40080000
 8001944:	58024400 	.word	0x58024400
 8001948:	58020000 	.word	0x58020000

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001988 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001950:	f7ff fd72 	bl	8001438 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001954:	f7ff fcd0 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480c      	ldr	r0, [pc, #48]	@ (800198c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800195a:	490d      	ldr	r1, [pc, #52]	@ (8001990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800195c:	4a0d      	ldr	r2, [pc, #52]	@ (8001994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001970:	4c0a      	ldr	r4, [pc, #40]	@ (800199c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f013 fbc9 	bl	8015114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001982:	f7ff f933 	bl	8000bec <main>
  bx  lr
 8001986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001988:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800198c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001990:	240000e4 	.word	0x240000e4
  ldr r2, =_sidata
 8001994:	08017d88 	.word	0x08017d88
  ldr r2, =_sbss
 8001998:	24000b50 	.word	0x24000b50
  ldr r4, =_ebss
 800199c:	24004318 	.word	0x24004318

080019a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC3_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019aa:	2003      	movs	r0, #3
 80019ac:	f000 f98c 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019b0:	f004 ff66 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_Init+0x68>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	4913      	ldr	r1, [pc, #76]	@ (8001a10 <HAL_Init+0x6c>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a10 <HAL_Init+0x6c>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <HAL_Init+0x70>)
 80019e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <HAL_Init+0x74>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 f814 	bl	8001a1c <HAL_InitTick>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e002      	b.n	8001a04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019fe:	f7ff fb77 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	08017798 	.word	0x08017798
 8001a14:	24000004 	.word	0x24000004
 8001a18:	24000000 	.word	0x24000000

08001a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a24:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_InitTick+0x60>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e021      	b.n	8001a74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a30:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_InitTick+0x64>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <HAL_InitTick+0x60>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f971 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f93b 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	@ (8001a84 <HAL_InitTick+0x68>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2400000c 	.word	0x2400000c
 8001a80:	24000000 	.word	0x24000000
 8001a84:	24000008 	.word	0x24000008

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2400000c 	.word	0x2400000c
 8001aac:	24001438 	.word	0x24001438

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	24001438 	.word	0x24001438

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2400000c 	.word	0x2400000c

08001b10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetREVID+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	0c1b      	lsrs	r3, r3, #16
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	5c001000 	.word	0x5c001000

08001b28 <__NVIC_SetPriorityGrouping>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x40>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <__NVIC_SetPriorityGrouping+0x40>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	05fa0000 	.word	0x05fa0000

08001b70 <__NVIC_GetPriorityGrouping>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff40 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff33 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa4 	bl	8001c84 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff feae 	bl	8001ab0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e316      	b.n	800238e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a66      	ldr	r2, [pc, #408]	@ (8001f00 <HAL_DMA_Init+0x1b8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d04a      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <HAL_DMA_Init+0x1bc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d045      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a63      	ldr	r2, [pc, #396]	@ (8001f08 <HAL_DMA_Init+0x1c0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d040      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a62      	ldr	r2, [pc, #392]	@ (8001f0c <HAL_DMA_Init+0x1c4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d03b      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a60      	ldr	r2, [pc, #384]	@ (8001f10 <HAL_DMA_Init+0x1c8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d036      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5f      	ldr	r2, [pc, #380]	@ (8001f14 <HAL_DMA_Init+0x1cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d031      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5d      	ldr	r2, [pc, #372]	@ (8001f18 <HAL_DMA_Init+0x1d0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d02c      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5c      	ldr	r2, [pc, #368]	@ (8001f1c <HAL_DMA_Init+0x1d4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d027      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f20 <HAL_DMA_Init+0x1d8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a59      	ldr	r2, [pc, #356]	@ (8001f24 <HAL_DMA_Init+0x1dc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01d      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_DMA_Init+0x1e0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a56      	ldr	r2, [pc, #344]	@ (8001f2c <HAL_DMA_Init+0x1e4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a54      	ldr	r2, [pc, #336]	@ (8001f30 <HAL_DMA_Init+0x1e8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a53      	ldr	r2, [pc, #332]	@ (8001f34 <HAL_DMA_Init+0x1ec>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a51      	ldr	r2, [pc, #324]	@ (8001f38 <HAL_DMA_Init+0x1f0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_DMA_Init+0xb8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a50      	ldr	r2, [pc, #320]	@ (8001f3c <HAL_DMA_Init+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_DMA_Init+0xbc>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_DMA_Init+0xbe>
 8001e04:	2300      	movs	r3, #0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 813b 	beq.w	8002082 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a37      	ldr	r2, [pc, #220]	@ (8001f00 <HAL_DMA_Init+0x1b8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04a      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a36      	ldr	r2, [pc, #216]	@ (8001f04 <HAL_DMA_Init+0x1bc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d045      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a34      	ldr	r2, [pc, #208]	@ (8001f08 <HAL_DMA_Init+0x1c0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d040      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a33      	ldr	r2, [pc, #204]	@ (8001f0c <HAL_DMA_Init+0x1c4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d03b      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a31      	ldr	r2, [pc, #196]	@ (8001f10 <HAL_DMA_Init+0x1c8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d036      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a30      	ldr	r2, [pc, #192]	@ (8001f14 <HAL_DMA_Init+0x1cc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f18 <HAL_DMA_Init+0x1d0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d02c      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2d      	ldr	r2, [pc, #180]	@ (8001f1c <HAL_DMA_Init+0x1d4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2b      	ldr	r2, [pc, #172]	@ (8001f20 <HAL_DMA_Init+0x1d8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d022      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f24 <HAL_DMA_Init+0x1dc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d01d      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a28      	ldr	r2, [pc, #160]	@ (8001f28 <HAL_DMA_Init+0x1e0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d018      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a27      	ldr	r2, [pc, #156]	@ (8001f2c <HAL_DMA_Init+0x1e4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a25      	ldr	r2, [pc, #148]	@ (8001f30 <HAL_DMA_Init+0x1e8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00e      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <HAL_DMA_Init+0x1ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <HAL_DMA_Init+0x1f0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Init+0x174>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	@ (8001f3c <HAL_DMA_Init+0x1f4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <HAL_DMA_Init+0x186>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e007      	b.n	8001ede <HAL_DMA_Init+0x196>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ede:	e02f      	b.n	8001f40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee0:	f7ff fde6 	bl	8001ab0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d928      	bls.n	8001f40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e246      	b.n	800238e <HAL_DMA_Init+0x646>
 8001f00:	40020010 	.word	0x40020010
 8001f04:	40020028 	.word	0x40020028
 8001f08:	40020040 	.word	0x40020040
 8001f0c:	40020058 	.word	0x40020058
 8001f10:	40020070 	.word	0x40020070
 8001f14:	40020088 	.word	0x40020088
 8001f18:	400200a0 	.word	0x400200a0
 8001f1c:	400200b8 	.word	0x400200b8
 8001f20:	40020410 	.word	0x40020410
 8001f24:	40020428 	.word	0x40020428
 8001f28:	40020440 	.word	0x40020440
 8001f2c:	40020458 	.word	0x40020458
 8001f30:	40020470 	.word	0x40020470
 8001f34:	40020488 	.word	0x40020488
 8001f38:	400204a0 	.word	0x400204a0
 8001f3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1c8      	bne.n	8001ee0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4b83      	ldr	r3, [pc, #524]	@ (8002168 <HAL_DMA_Init+0x420>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d107      	bne.n	8001fa4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fa4:	4b71      	ldr	r3, [pc, #452]	@ (800216c <HAL_DMA_Init+0x424>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b71      	ldr	r3, [pc, #452]	@ (8002170 <HAL_DMA_Init+0x428>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fb0:	d328      	bcc.n	8002004 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b28      	cmp	r3, #40	@ 0x28
 8001fb8:	d903      	bls.n	8001fc2 <HAL_DMA_Init+0x27a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fc0:	d917      	bls.n	8001ff2 <HAL_DMA_Init+0x2aa>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fc8:	d903      	bls.n	8001fd2 <HAL_DMA_Init+0x28a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b42      	cmp	r3, #66	@ 0x42
 8001fd0:	d90f      	bls.n	8001ff2 <HAL_DMA_Init+0x2aa>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b46      	cmp	r3, #70	@ 0x46
 8001fd8:	d903      	bls.n	8001fe2 <HAL_DMA_Init+0x29a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b48      	cmp	r3, #72	@ 0x48
 8001fe0:	d907      	bls.n	8001ff2 <HAL_DMA_Init+0x2aa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b4e      	cmp	r3, #78	@ 0x4e
 8001fe8:	d905      	bls.n	8001ff6 <HAL_DMA_Init+0x2ae>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b52      	cmp	r3, #82	@ 0x52
 8001ff0:	d801      	bhi.n	8001ff6 <HAL_DMA_Init+0x2ae>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_DMA_Init+0x2b0>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002002:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f023 0307 	bic.w	r3, r3, #7
 800201a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	2b04      	cmp	r3, #4
 800202c:	d117      	bne.n	800205e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f002 fb3f 	bl	80046c4 <DMA_CheckFifoParam>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2240      	movs	r2, #64	@ 0x40
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e197      	b.n	800238e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f002 fa7a 	bl	8004560 <DMA_CalcBaseAndBitshift>
 800206c:	4603      	mov	r3, r0
 800206e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	223f      	movs	r2, #63	@ 0x3f
 800207a:	409a      	lsls	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	e0cd      	b.n	800221e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a3b      	ldr	r2, [pc, #236]	@ (8002174 <HAL_DMA_Init+0x42c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d022      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a39      	ldr	r2, [pc, #228]	@ (8002178 <HAL_DMA_Init+0x430>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01d      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a38      	ldr	r2, [pc, #224]	@ (800217c <HAL_DMA_Init+0x434>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d018      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a36      	ldr	r2, [pc, #216]	@ (8002180 <HAL_DMA_Init+0x438>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a35      	ldr	r2, [pc, #212]	@ (8002184 <HAL_DMA_Init+0x43c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a33      	ldr	r2, [pc, #204]	@ (8002188 <HAL_DMA_Init+0x440>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a32      	ldr	r2, [pc, #200]	@ (800218c <HAL_DMA_Init+0x444>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_DMA_Init+0x38a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a30      	ldr	r2, [pc, #192]	@ (8002190 <HAL_DMA_Init+0x448>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_DMA_Init+0x38e>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_DMA_Init+0x390>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a24      	ldr	r2, [pc, #144]	@ (8002174 <HAL_DMA_Init+0x42c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d021      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <HAL_DMA_Init+0x430>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01c      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_DMA_Init+0x434>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d017      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1f      	ldr	r2, [pc, #124]	@ (8002180 <HAL_DMA_Init+0x438>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d012      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_DMA_Init+0x43c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_DMA_Init+0x440>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d008      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <HAL_DMA_Init+0x444>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <HAL_DMA_Init+0x3e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_DMA_Init+0x448>)
 800212a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_DMA_Init+0x44c>)
 8002148:	4013      	ands	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d021      	beq.n	8002198 <HAL_DMA_Init+0x450>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	d102      	bne.n	8002162 <HAL_DMA_Init+0x41a>
 800215c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002160:	e01b      	b.n	800219a <HAL_DMA_Init+0x452>
 8002162:	2300      	movs	r3, #0
 8002164:	e019      	b.n	800219a <HAL_DMA_Init+0x452>
 8002166:	bf00      	nop
 8002168:	fe10803f 	.word	0xfe10803f
 800216c:	5c001000 	.word	0x5c001000
 8002170:	ffff0000 	.word	0xffff0000
 8002174:	58025408 	.word	0x58025408
 8002178:	5802541c 	.word	0x5802541c
 800217c:	58025430 	.word	0x58025430
 8002180:	58025444 	.word	0x58025444
 8002184:	58025458 	.word	0x58025458
 8002188:	5802546c 	.word	0x5802546c
 800218c:	58025480 	.word	0x58025480
 8002190:	58025494 	.word	0x58025494
 8002194:	fffe000f 	.word	0xfffe000f
 8002198:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b6e      	ldr	r3, [pc, #440]	@ (8002398 <HAL_DMA_Init+0x650>)
 80021e0:	4413      	add	r3, r2
 80021e2:	4a6e      	ldr	r2, [pc, #440]	@ (800239c <HAL_DMA_Init+0x654>)
 80021e4:	fba2 2303 	umull	r2, r3, r2, r3
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f002 f9b5 	bl	8004560 <DMA_CalcBaseAndBitshift>
 80021f6:	4603      	mov	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2201      	movs	r2, #1
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	e008      	b.n	800221e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2203      	movs	r2, #3
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0b7      	b.n	800238e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	@ (80023a0 <HAL_DMA_Init+0x658>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d072      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5d      	ldr	r2, [pc, #372]	@ (80023a4 <HAL_DMA_Init+0x65c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d06d      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5c      	ldr	r2, [pc, #368]	@ (80023a8 <HAL_DMA_Init+0x660>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d068      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5a      	ldr	r2, [pc, #360]	@ (80023ac <HAL_DMA_Init+0x664>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d063      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a59      	ldr	r2, [pc, #356]	@ (80023b0 <HAL_DMA_Init+0x668>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d05e      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a57      	ldr	r2, [pc, #348]	@ (80023b4 <HAL_DMA_Init+0x66c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d059      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_DMA_Init+0x670>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d054      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a54      	ldr	r2, [pc, #336]	@ (80023bc <HAL_DMA_Init+0x674>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d04f      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a53      	ldr	r2, [pc, #332]	@ (80023c0 <HAL_DMA_Init+0x678>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d04a      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a51      	ldr	r2, [pc, #324]	@ (80023c4 <HAL_DMA_Init+0x67c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d045      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a50      	ldr	r2, [pc, #320]	@ (80023c8 <HAL_DMA_Init+0x680>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d040      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a4e      	ldr	r2, [pc, #312]	@ (80023cc <HAL_DMA_Init+0x684>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d03b      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a4d      	ldr	r2, [pc, #308]	@ (80023d0 <HAL_DMA_Init+0x688>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d036      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4b      	ldr	r2, [pc, #300]	@ (80023d4 <HAL_DMA_Init+0x68c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d031      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <HAL_DMA_Init+0x690>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d02c      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a48      	ldr	r2, [pc, #288]	@ (80023dc <HAL_DMA_Init+0x694>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d027      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a47      	ldr	r2, [pc, #284]	@ (80023e0 <HAL_DMA_Init+0x698>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <HAL_DMA_Init+0x69c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01d      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a44      	ldr	r2, [pc, #272]	@ (80023e8 <HAL_DMA_Init+0x6a0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d018      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a42      	ldr	r2, [pc, #264]	@ (80023ec <HAL_DMA_Init+0x6a4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a41      	ldr	r2, [pc, #260]	@ (80023f0 <HAL_DMA_Init+0x6a8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a3f      	ldr	r2, [pc, #252]	@ (80023f4 <HAL_DMA_Init+0x6ac>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3e      	ldr	r2, [pc, #248]	@ (80023f8 <HAL_DMA_Init+0x6b0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_DMA_Init+0x5c6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3c      	ldr	r2, [pc, #240]	@ (80023fc <HAL_DMA_Init+0x6b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_DMA_Init+0x5ca>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_DMA_Init+0x5cc>
 8002312:	2300      	movs	r3, #0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d032      	beq.n	800237e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f002 fa4f 	bl	80047bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b80      	cmp	r3, #128	@ 0x80
 8002324:	d102      	bne.n	800232c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002340:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d010      	beq.n	800236c <HAL_DMA_Init+0x624>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b08      	cmp	r3, #8
 8002350:	d80c      	bhi.n	800236c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f002 facc 	bl	80048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	e008      	b.n	800237e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	a7fdabf8 	.word	0xa7fdabf8
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	40020010 	.word	0x40020010
 80023a4:	40020028 	.word	0x40020028
 80023a8:	40020040 	.word	0x40020040
 80023ac:	40020058 	.word	0x40020058
 80023b0:	40020070 	.word	0x40020070
 80023b4:	40020088 	.word	0x40020088
 80023b8:	400200a0 	.word	0x400200a0
 80023bc:	400200b8 	.word	0x400200b8
 80023c0:	40020410 	.word	0x40020410
 80023c4:	40020428 	.word	0x40020428
 80023c8:	40020440 	.word	0x40020440
 80023cc:	40020458 	.word	0x40020458
 80023d0:	40020470 	.word	0x40020470
 80023d4:	40020488 	.word	0x40020488
 80023d8:	400204a0 	.word	0x400204a0
 80023dc:	400204b8 	.word	0x400204b8
 80023e0:	58025408 	.word	0x58025408
 80023e4:	5802541c 	.word	0x5802541c
 80023e8:	58025430 	.word	0x58025430
 80023ec:	58025444 	.word	0x58025444
 80023f0:	58025458 	.word	0x58025458
 80023f4:	5802546c 	.word	0x5802546c
 80023f8:	58025480 	.word	0x58025480
 80023fc:	58025494 	.word	0x58025494

08002400 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e226      	b.n	800286a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_DMA_Start_IT+0x2a>
 8002426:	2302      	movs	r3, #2
 8002428:	e21f      	b.n	800286a <HAL_DMA_Start_IT+0x46a>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	f040 820a 	bne.w	8002854 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a68      	ldr	r2, [pc, #416]	@ (80025f4 <HAL_DMA_Start_IT+0x1f4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d04a      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a66      	ldr	r2, [pc, #408]	@ (80025f8 <HAL_DMA_Start_IT+0x1f8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d045      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a65      	ldr	r2, [pc, #404]	@ (80025fc <HAL_DMA_Start_IT+0x1fc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d040      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a63      	ldr	r2, [pc, #396]	@ (8002600 <HAL_DMA_Start_IT+0x200>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d03b      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a62      	ldr	r2, [pc, #392]	@ (8002604 <HAL_DMA_Start_IT+0x204>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d036      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a60      	ldr	r2, [pc, #384]	@ (8002608 <HAL_DMA_Start_IT+0x208>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d031      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a5f      	ldr	r2, [pc, #380]	@ (800260c <HAL_DMA_Start_IT+0x20c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d02c      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5d      	ldr	r2, [pc, #372]	@ (8002610 <HAL_DMA_Start_IT+0x210>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d027      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002614 <HAL_DMA_Start_IT+0x214>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d022      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002618 <HAL_DMA_Start_IT+0x218>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01d      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a59      	ldr	r2, [pc, #356]	@ (800261c <HAL_DMA_Start_IT+0x21c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d018      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a57      	ldr	r2, [pc, #348]	@ (8002620 <HAL_DMA_Start_IT+0x220>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a56      	ldr	r2, [pc, #344]	@ (8002624 <HAL_DMA_Start_IT+0x224>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00e      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a54      	ldr	r2, [pc, #336]	@ (8002628 <HAL_DMA_Start_IT+0x228>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d009      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a53      	ldr	r2, [pc, #332]	@ (800262c <HAL_DMA_Start_IT+0x22c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_Start_IT+0xee>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a51      	ldr	r2, [pc, #324]	@ (8002630 <HAL_DMA_Start_IT+0x230>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <HAL_DMA_Start_IT+0x100>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_DMA_Start_IT+0x110>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f001 fe76 	bl	8004208 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a34      	ldr	r2, [pc, #208]	@ (80025f4 <HAL_DMA_Start_IT+0x1f4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	@ (80025f8 <HAL_DMA_Start_IT+0x1f8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_DMA_Start_IT+0x1fc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a30      	ldr	r2, [pc, #192]	@ (8002600 <HAL_DMA_Start_IT+0x200>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	@ (8002604 <HAL_DMA_Start_IT+0x204>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <HAL_DMA_Start_IT+0x208>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_DMA_Start_IT+0x20c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2a      	ldr	r2, [pc, #168]	@ (8002610 <HAL_DMA_Start_IT+0x210>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	@ (8002614 <HAL_DMA_Start_IT+0x214>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	@ (8002618 <HAL_DMA_Start_IT+0x218>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a25      	ldr	r2, [pc, #148]	@ (800261c <HAL_DMA_Start_IT+0x21c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a24      	ldr	r2, [pc, #144]	@ (8002620 <HAL_DMA_Start_IT+0x220>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a22      	ldr	r2, [pc, #136]	@ (8002624 <HAL_DMA_Start_IT+0x224>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	@ (8002628 <HAL_DMA_Start_IT+0x228>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_DMA_Start_IT+0x22c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Start_IT+0x1bc>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_DMA_Start_IT+0x230>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Start_IT+0x1c0>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_DMA_Start_IT+0x1c2>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d036      	beq.n	8002634 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 021e 	bic.w	r2, r3, #30
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0216 	orr.w	r2, r2, #22
 80025d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03e      	beq.n	8002660 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0208 	orr.w	r2, r2, #8
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e035      	b.n	8002660 <HAL_DMA_Start_IT+0x260>
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 020e 	bic.w	r2, r3, #14
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 020a 	orr.w	r2, r2, #10
 8002646:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0204 	orr.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a83      	ldr	r2, [pc, #524]	@ (8002874 <HAL_DMA_Start_IT+0x474>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d072      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a82      	ldr	r2, [pc, #520]	@ (8002878 <HAL_DMA_Start_IT+0x478>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d06d      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a80      	ldr	r2, [pc, #512]	@ (800287c <HAL_DMA_Start_IT+0x47c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d068      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7f      	ldr	r2, [pc, #508]	@ (8002880 <HAL_DMA_Start_IT+0x480>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d063      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7d      	ldr	r2, [pc, #500]	@ (8002884 <HAL_DMA_Start_IT+0x484>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d05e      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a7c      	ldr	r2, [pc, #496]	@ (8002888 <HAL_DMA_Start_IT+0x488>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d059      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a7a      	ldr	r2, [pc, #488]	@ (800288c <HAL_DMA_Start_IT+0x48c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d054      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a79      	ldr	r2, [pc, #484]	@ (8002890 <HAL_DMA_Start_IT+0x490>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d04f      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a77      	ldr	r2, [pc, #476]	@ (8002894 <HAL_DMA_Start_IT+0x494>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d04a      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a76      	ldr	r2, [pc, #472]	@ (8002898 <HAL_DMA_Start_IT+0x498>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d045      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a74      	ldr	r2, [pc, #464]	@ (800289c <HAL_DMA_Start_IT+0x49c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d040      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a73      	ldr	r2, [pc, #460]	@ (80028a0 <HAL_DMA_Start_IT+0x4a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d03b      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a71      	ldr	r2, [pc, #452]	@ (80028a4 <HAL_DMA_Start_IT+0x4a4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d036      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a70      	ldr	r2, [pc, #448]	@ (80028a8 <HAL_DMA_Start_IT+0x4a8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6e      	ldr	r2, [pc, #440]	@ (80028ac <HAL_DMA_Start_IT+0x4ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02c      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6d      	ldr	r2, [pc, #436]	@ (80028b0 <HAL_DMA_Start_IT+0x4b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d027      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6b      	ldr	r2, [pc, #428]	@ (80028b4 <HAL_DMA_Start_IT+0x4b4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6a      	ldr	r2, [pc, #424]	@ (80028b8 <HAL_DMA_Start_IT+0x4b8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d01d      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a68      	ldr	r2, [pc, #416]	@ (80028bc <HAL_DMA_Start_IT+0x4bc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d018      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <HAL_DMA_Start_IT+0x4c0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d013      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	@ (80028c4 <HAL_DMA_Start_IT+0x4c4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a64      	ldr	r2, [pc, #400]	@ (80028c8 <HAL_DMA_Start_IT+0x4c8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a62      	ldr	r2, [pc, #392]	@ (80028cc <HAL_DMA_Start_IT+0x4cc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Start_IT+0x350>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a61      	ldr	r2, [pc, #388]	@ (80028d0 <HAL_DMA_Start_IT+0x4d0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_DMA_Start_IT+0x354>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_DMA_Start_IT+0x356>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01a      	beq.n	8002790 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002776:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800278e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	@ (8002874 <HAL_DMA_Start_IT+0x474>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a36      	ldr	r2, [pc, #216]	@ (8002878 <HAL_DMA_Start_IT+0x478>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d045      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a34      	ldr	r2, [pc, #208]	@ (800287c <HAL_DMA_Start_IT+0x47c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d040      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <HAL_DMA_Start_IT+0x480>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d03b      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	@ (8002884 <HAL_DMA_Start_IT+0x484>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d036      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	@ (8002888 <HAL_DMA_Start_IT+0x488>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d031      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	@ (800288c <HAL_DMA_Start_IT+0x48c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d02c      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	@ (8002890 <HAL_DMA_Start_IT+0x490>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d027      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002894 <HAL_DMA_Start_IT+0x494>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d022      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002898 <HAL_DMA_Start_IT+0x498>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d01d      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <HAL_DMA_Start_IT+0x49c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d018      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_DMA_Start_IT+0x4a0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	@ (80028a4 <HAL_DMA_Start_IT+0x4a4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00e      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	@ (80028a8 <HAL_DMA_Start_IT+0x4a8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d009      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	@ (80028ac <HAL_DMA_Start_IT+0x4ac>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d004      	beq.n	8002830 <HAL_DMA_Start_IT+0x430>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	@ (80028b0 <HAL_DMA_Start_IT+0x4b0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <HAL_DMA_Start_IT+0x442>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e012      	b.n	8002868 <HAL_DMA_Start_IT+0x468>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e009      	b.n	8002868 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002868:	7dfb      	ldrb	r3, [r7, #23]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40020010 	.word	0x40020010
 8002878:	40020028 	.word	0x40020028
 800287c:	40020040 	.word	0x40020040
 8002880:	40020058 	.word	0x40020058
 8002884:	40020070 	.word	0x40020070
 8002888:	40020088 	.word	0x40020088
 800288c:	400200a0 	.word	0x400200a0
 8002890:	400200b8 	.word	0x400200b8
 8002894:	40020410 	.word	0x40020410
 8002898:	40020428 	.word	0x40020428
 800289c:	40020440 	.word	0x40020440
 80028a0:	40020458 	.word	0x40020458
 80028a4:	40020470 	.word	0x40020470
 80028a8:	40020488 	.word	0x40020488
 80028ac:	400204a0 	.word	0x400204a0
 80028b0:	400204b8 	.word	0x400204b8
 80028b4:	58025408 	.word	0x58025408
 80028b8:	5802541c 	.word	0x5802541c
 80028bc:	58025430 	.word	0x58025430
 80028c0:	58025444 	.word	0x58025444
 80028c4:	58025458 	.word	0x58025458
 80028c8:	5802546c 	.word	0x5802546c
 80028cc:	58025480 	.word	0x58025480
 80028d0:	58025494 	.word	0x58025494

080028d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff f8e8 	bl	8001ab0 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e2dc      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e2cd      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a76      	ldr	r2, [pc, #472]	@ (8002ae8 <HAL_DMA_Abort+0x214>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d04a      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a74      	ldr	r2, [pc, #464]	@ (8002aec <HAL_DMA_Abort+0x218>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d045      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a73      	ldr	r2, [pc, #460]	@ (8002af0 <HAL_DMA_Abort+0x21c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d040      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a71      	ldr	r2, [pc, #452]	@ (8002af4 <HAL_DMA_Abort+0x220>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d03b      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a70      	ldr	r2, [pc, #448]	@ (8002af8 <HAL_DMA_Abort+0x224>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d036      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6e      	ldr	r2, [pc, #440]	@ (8002afc <HAL_DMA_Abort+0x228>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d031      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6d      	ldr	r2, [pc, #436]	@ (8002b00 <HAL_DMA_Abort+0x22c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d02c      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a6b      	ldr	r2, [pc, #428]	@ (8002b04 <HAL_DMA_Abort+0x230>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6a      	ldr	r2, [pc, #424]	@ (8002b08 <HAL_DMA_Abort+0x234>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d022      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a68      	ldr	r2, [pc, #416]	@ (8002b0c <HAL_DMA_Abort+0x238>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a67      	ldr	r2, [pc, #412]	@ (8002b10 <HAL_DMA_Abort+0x23c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d018      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a65      	ldr	r2, [pc, #404]	@ (8002b14 <HAL_DMA_Abort+0x240>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a64      	ldr	r2, [pc, #400]	@ (8002b18 <HAL_DMA_Abort+0x244>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00e      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a62      	ldr	r2, [pc, #392]	@ (8002b1c <HAL_DMA_Abort+0x248>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a61      	ldr	r2, [pc, #388]	@ (8002b20 <HAL_DMA_Abort+0x24c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d004      	beq.n	80029aa <HAL_DMA_Abort+0xd6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002b24 <HAL_DMA_Abort+0x250>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d101      	bne.n	80029ae <HAL_DMA_Abort+0xda>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_DMA_Abort+0xdc>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 021e 	bic.w	r2, r2, #30
 80029c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e00a      	b.n	80029f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020e 	bic.w	r2, r2, #14
 80029ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ae8 <HAL_DMA_Abort+0x214>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d072      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a3a      	ldr	r2, [pc, #232]	@ (8002aec <HAL_DMA_Abort+0x218>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d06d      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a39      	ldr	r2, [pc, #228]	@ (8002af0 <HAL_DMA_Abort+0x21c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d068      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a37      	ldr	r2, [pc, #220]	@ (8002af4 <HAL_DMA_Abort+0x220>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d063      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a36      	ldr	r2, [pc, #216]	@ (8002af8 <HAL_DMA_Abort+0x224>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d05e      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a34      	ldr	r2, [pc, #208]	@ (8002afc <HAL_DMA_Abort+0x228>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d059      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a33      	ldr	r2, [pc, #204]	@ (8002b00 <HAL_DMA_Abort+0x22c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d054      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a31      	ldr	r2, [pc, #196]	@ (8002b04 <HAL_DMA_Abort+0x230>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d04f      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a30      	ldr	r2, [pc, #192]	@ (8002b08 <HAL_DMA_Abort+0x234>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d04a      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2e      	ldr	r2, [pc, #184]	@ (8002b0c <HAL_DMA_Abort+0x238>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d045      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_DMA_Abort+0x23c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d040      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2b      	ldr	r2, [pc, #172]	@ (8002b14 <HAL_DMA_Abort+0x240>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d03b      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_DMA_Abort+0x244>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d036      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a28      	ldr	r2, [pc, #160]	@ (8002b1c <HAL_DMA_Abort+0x248>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d031      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_DMA_Abort+0x24c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d02c      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a25      	ldr	r2, [pc, #148]	@ (8002b24 <HAL_DMA_Abort+0x250>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d027      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <HAL_DMA_Abort+0x254>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <HAL_DMA_Abort+0x258>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a21      	ldr	r2, [pc, #132]	@ (8002b30 <HAL_DMA_Abort+0x25c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_DMA_Abort+0x260>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_DMA_Abort+0x264>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b3c <HAL_DMA_Abort+0x268>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_DMA_Abort+0x26c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_DMA_Abort+0x20e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <HAL_DMA_Abort+0x270>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d132      	bne.n	8002b48 <HAL_DMA_Abort+0x274>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e031      	b.n	8002b4a <HAL_DMA_Abort+0x276>
 8002ae6:	bf00      	nop
 8002ae8:	40020010 	.word	0x40020010
 8002aec:	40020028 	.word	0x40020028
 8002af0:	40020040 	.word	0x40020040
 8002af4:	40020058 	.word	0x40020058
 8002af8:	40020070 	.word	0x40020070
 8002afc:	40020088 	.word	0x40020088
 8002b00:	400200a0 	.word	0x400200a0
 8002b04:	400200b8 	.word	0x400200b8
 8002b08:	40020410 	.word	0x40020410
 8002b0c:	40020428 	.word	0x40020428
 8002b10:	40020440 	.word	0x40020440
 8002b14:	40020458 	.word	0x40020458
 8002b18:	40020470 	.word	0x40020470
 8002b1c:	40020488 	.word	0x40020488
 8002b20:	400204a0 	.word	0x400204a0
 8002b24:	400204b8 	.word	0x400204b8
 8002b28:	58025408 	.word	0x58025408
 8002b2c:	5802541c 	.word	0x5802541c
 8002b30:	58025430 	.word	0x58025430
 8002b34:	58025444 	.word	0x58025444
 8002b38:	58025458 	.word	0x58025458
 8002b3c:	5802546c 	.word	0x5802546c
 8002b40:	58025480 	.word	0x58025480
 8002b44:	58025494 	.word	0x58025494
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6d      	ldr	r2, [pc, #436]	@ (8002d18 <HAL_DMA_Abort+0x444>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d04a      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d1c <HAL_DMA_Abort+0x448>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d045      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6a      	ldr	r2, [pc, #424]	@ (8002d20 <HAL_DMA_Abort+0x44c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d040      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a68      	ldr	r2, [pc, #416]	@ (8002d24 <HAL_DMA_Abort+0x450>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d03b      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a67      	ldr	r2, [pc, #412]	@ (8002d28 <HAL_DMA_Abort+0x454>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d036      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a65      	ldr	r2, [pc, #404]	@ (8002d2c <HAL_DMA_Abort+0x458>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d031      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a64      	ldr	r2, [pc, #400]	@ (8002d30 <HAL_DMA_Abort+0x45c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d02c      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a62      	ldr	r2, [pc, #392]	@ (8002d34 <HAL_DMA_Abort+0x460>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d027      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a61      	ldr	r2, [pc, #388]	@ (8002d38 <HAL_DMA_Abort+0x464>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d022      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5f      	ldr	r2, [pc, #380]	@ (8002d3c <HAL_DMA_Abort+0x468>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01d      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d40 <HAL_DMA_Abort+0x46c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d018      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8002d44 <HAL_DMA_Abort+0x470>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a5b      	ldr	r2, [pc, #364]	@ (8002d48 <HAL_DMA_Abort+0x474>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a59      	ldr	r2, [pc, #356]	@ (8002d4c <HAL_DMA_Abort+0x478>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a58      	ldr	r2, [pc, #352]	@ (8002d50 <HAL_DMA_Abort+0x47c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_DMA_Abort+0x32a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a56      	ldr	r2, [pc, #344]	@ (8002d54 <HAL_DMA_Abort+0x480>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <HAL_DMA_Abort+0x33c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e007      	b.n	8002c20 <HAL_DMA_Abort+0x34c>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c20:	e013      	b.n	8002c4a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c22:	f7fe ff45 	bl	8001ab0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	d90c      	bls.n	8002c4a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2203      	movs	r2, #3
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12d      	b.n	8002ea6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e5      	bne.n	8002c22 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <HAL_DMA_Abort+0x444>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_DMA_Abort+0x448>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <HAL_DMA_Abort+0x44c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_DMA_Abort+0x450>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <HAL_DMA_Abort+0x454>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_DMA_Abort+0x458>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a26      	ldr	r2, [pc, #152]	@ (8002d30 <HAL_DMA_Abort+0x45c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <HAL_DMA_Abort+0x460>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a23      	ldr	r2, [pc, #140]	@ (8002d38 <HAL_DMA_Abort+0x464>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <HAL_DMA_Abort+0x468>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_DMA_Abort+0x46c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002d44 <HAL_DMA_Abort+0x470>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d48 <HAL_DMA_Abort+0x474>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d4c <HAL_DMA_Abort+0x478>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d50 <HAL_DMA_Abort+0x47c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Abort+0x422>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <HAL_DMA_Abort+0x480>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Abort+0x426>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_Abort+0x428>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02b      	beq.n	8002d58 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	223f      	movs	r2, #63	@ 0x3f
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	e02a      	b.n	8002d6e <HAL_DMA_Abort+0x49a>
 8002d18:	40020010 	.word	0x40020010
 8002d1c:	40020028 	.word	0x40020028
 8002d20:	40020040 	.word	0x40020040
 8002d24:	40020058 	.word	0x40020058
 8002d28:	40020070 	.word	0x40020070
 8002d2c:	40020088 	.word	0x40020088
 8002d30:	400200a0 	.word	0x400200a0
 8002d34:	400200b8 	.word	0x400200b8
 8002d38:	40020410 	.word	0x40020410
 8002d3c:	40020428 	.word	0x40020428
 8002d40:	40020440 	.word	0x40020440
 8002d44:	40020458 	.word	0x40020458
 8002d48:	40020470 	.word	0x40020470
 8002d4c:	40020488 	.word	0x40020488
 8002d50:	400204a0 	.word	0x400204a0
 8002d54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <HAL_DMA_Abort+0x5dc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_DMA_Abort+0x5e0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb8 <HAL_DMA_Abort+0x5e4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_DMA_Abort+0x5e8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a49      	ldr	r2, [pc, #292]	@ (8002ec0 <HAL_DMA_Abort+0x5ec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a47      	ldr	r2, [pc, #284]	@ (8002ec4 <HAL_DMA_Abort+0x5f0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a46      	ldr	r2, [pc, #280]	@ (8002ec8 <HAL_DMA_Abort+0x5f4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a44      	ldr	r2, [pc, #272]	@ (8002ecc <HAL_DMA_Abort+0x5f8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a43      	ldr	r2, [pc, #268]	@ (8002ed0 <HAL_DMA_Abort+0x5fc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a41      	ldr	r2, [pc, #260]	@ (8002ed4 <HAL_DMA_Abort+0x600>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a40      	ldr	r2, [pc, #256]	@ (8002ed8 <HAL_DMA_Abort+0x604>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3e      	ldr	r2, [pc, #248]	@ (8002edc <HAL_DMA_Abort+0x608>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <HAL_DMA_Abort+0x60c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_DMA_Abort+0x610>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee8 <HAL_DMA_Abort+0x614>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a38      	ldr	r2, [pc, #224]	@ (8002eec <HAL_DMA_Abort+0x618>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a37      	ldr	r2, [pc, #220]	@ (8002ef0 <HAL_DMA_Abort+0x61c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ef4 <HAL_DMA_Abort+0x620>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a34      	ldr	r2, [pc, #208]	@ (8002ef8 <HAL_DMA_Abort+0x624>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a32      	ldr	r2, [pc, #200]	@ (8002efc <HAL_DMA_Abort+0x628>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a31      	ldr	r2, [pc, #196]	@ (8002f00 <HAL_DMA_Abort+0x62c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a2f      	ldr	r2, [pc, #188]	@ (8002f04 <HAL_DMA_Abort+0x630>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002f08 <HAL_DMA_Abort+0x634>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Abort+0x58a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <HAL_DMA_Abort+0x638>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Abort+0x58e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_Abort+0x590>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002e70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002e92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
 8002ef0:	58025408 	.word	0x58025408
 8002ef4:	5802541c 	.word	0x5802541c
 8002ef8:	58025430 	.word	0x58025430
 8002efc:	58025444 	.word	0x58025444
 8002f00:	58025458 	.word	0x58025458
 8002f04:	5802546c 	.word	0x5802546c
 8002f08:	58025480 	.word	0x58025480
 8002f0c:	58025494 	.word	0x58025494

08002f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e237      	b.n	8003392 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e22c      	b.n	8003392 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80030b0 <HAL_DMA_Abort_IT+0x1a0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d04a      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a5b      	ldr	r2, [pc, #364]	@ (80030b4 <HAL_DMA_Abort_IT+0x1a4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d045      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a59      	ldr	r2, [pc, #356]	@ (80030b8 <HAL_DMA_Abort_IT+0x1a8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d040      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a58      	ldr	r2, [pc, #352]	@ (80030bc <HAL_DMA_Abort_IT+0x1ac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d03b      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a56      	ldr	r2, [pc, #344]	@ (80030c0 <HAL_DMA_Abort_IT+0x1b0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d036      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a55      	ldr	r2, [pc, #340]	@ (80030c4 <HAL_DMA_Abort_IT+0x1b4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d031      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a53      	ldr	r2, [pc, #332]	@ (80030c8 <HAL_DMA_Abort_IT+0x1b8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02c      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_DMA_Abort_IT+0x1bc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d027      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a50      	ldr	r2, [pc, #320]	@ (80030d0 <HAL_DMA_Abort_IT+0x1c0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d022      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a4f      	ldr	r2, [pc, #316]	@ (80030d4 <HAL_DMA_Abort_IT+0x1c4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d01d      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80030d8 <HAL_DMA_Abort_IT+0x1c8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_DMA_Abort_IT+0x1cc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80030e0 <HAL_DMA_Abort_IT+0x1d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a49      	ldr	r2, [pc, #292]	@ (80030e4 <HAL_DMA_Abort_IT+0x1d4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a47      	ldr	r2, [pc, #284]	@ (80030e8 <HAL_DMA_Abort_IT+0x1d8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_DMA_Abort_IT+0xc8>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <HAL_DMA_Abort_IT+0x1dc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Abort_IT+0xcc>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <HAL_DMA_Abort_IT+0xce>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8086 	beq.w	80030f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80030b0 <HAL_DMA_Abort_IT+0x1a0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04a      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80030b4 <HAL_DMA_Abort_IT+0x1a4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d045      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2c      	ldr	r2, [pc, #176]	@ (80030b8 <HAL_DMA_Abort_IT+0x1a8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d040      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2b      	ldr	r2, [pc, #172]	@ (80030bc <HAL_DMA_Abort_IT+0x1ac>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d03b      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a29      	ldr	r2, [pc, #164]	@ (80030c0 <HAL_DMA_Abort_IT+0x1b0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d036      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <HAL_DMA_Abort_IT+0x1b4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d031      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a26      	ldr	r2, [pc, #152]	@ (80030c8 <HAL_DMA_Abort_IT+0x1b8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a25      	ldr	r2, [pc, #148]	@ (80030cc <HAL_DMA_Abort_IT+0x1bc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d027      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <HAL_DMA_Abort_IT+0x1c0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <HAL_DMA_Abort_IT+0x1c4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a20      	ldr	r2, [pc, #128]	@ (80030d8 <HAL_DMA_Abort_IT+0x1c8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_DMA_Abort_IT+0x1cc>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1d      	ldr	r2, [pc, #116]	@ (80030e0 <HAL_DMA_Abort_IT+0x1d0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1c      	ldr	r2, [pc, #112]	@ (80030e4 <HAL_DMA_Abort_IT+0x1d4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1a      	ldr	r2, [pc, #104]	@ (80030e8 <HAL_DMA_Abort_IT+0x1d8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_DMA_Abort_IT+0x17c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_DMA_Abort_IT+0x1dc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_DMA_Abort_IT+0x18e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e178      	b.n	8003390 <HAL_DMA_Abort_IT+0x480>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0201 	bic.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e16f      	b.n	8003390 <HAL_DMA_Abort_IT+0x480>
 80030b0:	40020010 	.word	0x40020010
 80030b4:	40020028 	.word	0x40020028
 80030b8:	40020040 	.word	0x40020040
 80030bc:	40020058 	.word	0x40020058
 80030c0:	40020070 	.word	0x40020070
 80030c4:	40020088 	.word	0x40020088
 80030c8:	400200a0 	.word	0x400200a0
 80030cc:	400200b8 	.word	0x400200b8
 80030d0:	40020410 	.word	0x40020410
 80030d4:	40020428 	.word	0x40020428
 80030d8:	40020440 	.word	0x40020440
 80030dc:	40020458 	.word	0x40020458
 80030e0:	40020470 	.word	0x40020470
 80030e4:	40020488 	.word	0x40020488
 80030e8:	400204a0 	.word	0x400204a0
 80030ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 020e 	bic.w	r2, r2, #14
 80030fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6c      	ldr	r2, [pc, #432]	@ (80032b8 <HAL_DMA_Abort_IT+0x3a8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d04a      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6b      	ldr	r2, [pc, #428]	@ (80032bc <HAL_DMA_Abort_IT+0x3ac>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d045      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a69      	ldr	r2, [pc, #420]	@ (80032c0 <HAL_DMA_Abort_IT+0x3b0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d040      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a68      	ldr	r2, [pc, #416]	@ (80032c4 <HAL_DMA_Abort_IT+0x3b4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d03b      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a66      	ldr	r2, [pc, #408]	@ (80032c8 <HAL_DMA_Abort_IT+0x3b8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d036      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a65      	ldr	r2, [pc, #404]	@ (80032cc <HAL_DMA_Abort_IT+0x3bc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d031      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a63      	ldr	r2, [pc, #396]	@ (80032d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02c      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a62      	ldr	r2, [pc, #392]	@ (80032d4 <HAL_DMA_Abort_IT+0x3c4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d027      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a60      	ldr	r2, [pc, #384]	@ (80032d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a5f      	ldr	r2, [pc, #380]	@ (80032dc <HAL_DMA_Abort_IT+0x3cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d01d      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5d      	ldr	r2, [pc, #372]	@ (80032e0 <HAL_DMA_Abort_IT+0x3d0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5c      	ldr	r2, [pc, #368]	@ (80032e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5a      	ldr	r2, [pc, #360]	@ (80032e8 <HAL_DMA_Abort_IT+0x3d8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a59      	ldr	r2, [pc, #356]	@ (80032ec <HAL_DMA_Abort_IT+0x3dc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a57      	ldr	r2, [pc, #348]	@ (80032f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_DMA_Abort_IT+0x290>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a56      	ldr	r2, [pc, #344]	@ (80032f4 <HAL_DMA_Abort_IT+0x3e4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d108      	bne.n	80031b2 <HAL_DMA_Abort_IT+0x2a2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e007      	b.n	80031c2 <HAL_DMA_Abort_IT+0x2b2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3c      	ldr	r2, [pc, #240]	@ (80032b8 <HAL_DMA_Abort_IT+0x3a8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d072      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3a      	ldr	r2, [pc, #232]	@ (80032bc <HAL_DMA_Abort_IT+0x3ac>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d06d      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a39      	ldr	r2, [pc, #228]	@ (80032c0 <HAL_DMA_Abort_IT+0x3b0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d068      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	@ (80032c4 <HAL_DMA_Abort_IT+0x3b4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d063      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a36      	ldr	r2, [pc, #216]	@ (80032c8 <HAL_DMA_Abort_IT+0x3b8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d05e      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	@ (80032cc <HAL_DMA_Abort_IT+0x3bc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d059      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	@ (80032d0 <HAL_DMA_Abort_IT+0x3c0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d054      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	@ (80032d4 <HAL_DMA_Abort_IT+0x3c4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d04f      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	@ (80032d8 <HAL_DMA_Abort_IT+0x3c8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04a      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	@ (80032dc <HAL_DMA_Abort_IT+0x3cc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d045      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	@ (80032e0 <HAL_DMA_Abort_IT+0x3d0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d040      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <HAL_DMA_Abort_IT+0x3d4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d03b      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	@ (80032e8 <HAL_DMA_Abort_IT+0x3d8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <HAL_DMA_Abort_IT+0x3dc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <HAL_DMA_Abort_IT+0x3e0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d02c      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	@ (80032f4 <HAL_DMA_Abort_IT+0x3e4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d027      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	@ (80032f8 <HAL_DMA_Abort_IT+0x3e8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	@ (80032fc <HAL_DMA_Abort_IT+0x3ec>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	@ (8003300 <HAL_DMA_Abort_IT+0x3f0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <HAL_DMA_Abort_IT+0x3f4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1e      	ldr	r2, [pc, #120]	@ (8003308 <HAL_DMA_Abort_IT+0x3f8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_DMA_Abort_IT+0x3fc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003310 <HAL_DMA_Abort_IT+0x400>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x3a2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <HAL_DMA_Abort_IT+0x404>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d132      	bne.n	8003318 <HAL_DMA_Abort_IT+0x408>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e031      	b.n	800331a <HAL_DMA_Abort_IT+0x40a>
 80032b6:	bf00      	nop
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	40020040 	.word	0x40020040
 80032c4:	40020058 	.word	0x40020058
 80032c8:	40020070 	.word	0x40020070
 80032cc:	40020088 	.word	0x40020088
 80032d0:	400200a0 	.word	0x400200a0
 80032d4:	400200b8 	.word	0x400200b8
 80032d8:	40020410 	.word	0x40020410
 80032dc:	40020428 	.word	0x40020428
 80032e0:	40020440 	.word	0x40020440
 80032e4:	40020458 	.word	0x40020458
 80032e8:	40020470 	.word	0x40020470
 80032ec:	40020488 	.word	0x40020488
 80032f0:	400204a0 	.word	0x400204a0
 80032f4:	400204b8 	.word	0x400204b8
 80032f8:	58025408 	.word	0x58025408
 80032fc:	5802541c 	.word	0x5802541c
 8003300:	58025430 	.word	0x58025430
 8003304:	58025444 	.word	0x58025444
 8003308:	58025458 	.word	0x58025458
 800330c:	5802546c 	.word	0x5802546c
 8003310:	58025480 	.word	0x58025480
 8003314:	58025494 	.word	0x58025494
 8003318:	2300      	movs	r3, #0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d028      	beq.n	8003370 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800332c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800334c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003364:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800336e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	@ 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a8:	4b67      	ldr	r3, [pc, #412]	@ (8003548 <HAL_DMA_IRQHandler+0x1ac>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a67      	ldr	r2, [pc, #412]	@ (800354c <HAL_DMA_IRQHandler+0x1b0>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5f      	ldr	r2, [pc, #380]	@ (8003550 <HAL_DMA_IRQHandler+0x1b4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d04a      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5d      	ldr	r2, [pc, #372]	@ (8003554 <HAL_DMA_IRQHandler+0x1b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d045      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5c      	ldr	r2, [pc, #368]	@ (8003558 <HAL_DMA_IRQHandler+0x1bc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d040      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a5a      	ldr	r2, [pc, #360]	@ (800355c <HAL_DMA_IRQHandler+0x1c0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d03b      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a59      	ldr	r2, [pc, #356]	@ (8003560 <HAL_DMA_IRQHandler+0x1c4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d036      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a57      	ldr	r2, [pc, #348]	@ (8003564 <HAL_DMA_IRQHandler+0x1c8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d031      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a56      	ldr	r2, [pc, #344]	@ (8003568 <HAL_DMA_IRQHandler+0x1cc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d02c      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a54      	ldr	r2, [pc, #336]	@ (800356c <HAL_DMA_IRQHandler+0x1d0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d027      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a53      	ldr	r2, [pc, #332]	@ (8003570 <HAL_DMA_IRQHandler+0x1d4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d022      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a51      	ldr	r2, [pc, #324]	@ (8003574 <HAL_DMA_IRQHandler+0x1d8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01d      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a50      	ldr	r2, [pc, #320]	@ (8003578 <HAL_DMA_IRQHandler+0x1dc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d018      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4e      	ldr	r2, [pc, #312]	@ (800357c <HAL_DMA_IRQHandler+0x1e0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4d      	ldr	r2, [pc, #308]	@ (8003580 <HAL_DMA_IRQHandler+0x1e4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00e      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4b      	ldr	r2, [pc, #300]	@ (8003584 <HAL_DMA_IRQHandler+0x1e8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a4a      	ldr	r2, [pc, #296]	@ (8003588 <HAL_DMA_IRQHandler+0x1ec>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <HAL_DMA_IRQHandler+0xd2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a48      	ldr	r2, [pc, #288]	@ (800358c <HAL_DMA_IRQHandler+0x1f0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_DMA_IRQHandler+0xd6>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_DMA_IRQHandler+0xd8>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 842b 	beq.w	8003cd0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2208      	movs	r2, #8
 8003484:	409a      	lsls	r2, r3
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80a2 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <HAL_DMA_IRQHandler+0x1b4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d04a      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2d      	ldr	r2, [pc, #180]	@ (8003554 <HAL_DMA_IRQHandler+0x1b8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d045      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003558 <HAL_DMA_IRQHandler+0x1bc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d040      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2a      	ldr	r2, [pc, #168]	@ (800355c <HAL_DMA_IRQHandler+0x1c0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d03b      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a28      	ldr	r2, [pc, #160]	@ (8003560 <HAL_DMA_IRQHandler+0x1c4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d036      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a27      	ldr	r2, [pc, #156]	@ (8003564 <HAL_DMA_IRQHandler+0x1c8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d031      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a25      	ldr	r2, [pc, #148]	@ (8003568 <HAL_DMA_IRQHandler+0x1cc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d02c      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a24      	ldr	r2, [pc, #144]	@ (800356c <HAL_DMA_IRQHandler+0x1d0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d027      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_DMA_IRQHandler+0x1d4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_DMA_IRQHandler+0x1d8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d01d      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <HAL_DMA_IRQHandler+0x1dc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <HAL_DMA_IRQHandler+0x1e0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_DMA_IRQHandler+0x1e4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_DMA_IRQHandler+0x1e8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <HAL_DMA_IRQHandler+0x1ec>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_DMA_IRQHandler+0x194>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_DMA_IRQHandler+0x1f0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d12f      	bne.n	8003590 <HAL_DMA_IRQHandler+0x1f4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e02e      	b.n	80035a4 <HAL_DMA_IRQHandler+0x208>
 8003546:	bf00      	nop
 8003548:	24000000 	.word	0x24000000
 800354c:	1b4e81b5 	.word	0x1b4e81b5
 8003550:	40020010 	.word	0x40020010
 8003554:	40020028 	.word	0x40020028
 8003558:	40020040 	.word	0x40020040
 800355c:	40020058 	.word	0x40020058
 8003560:	40020070 	.word	0x40020070
 8003564:	40020088 	.word	0x40020088
 8003568:	400200a0 	.word	0x400200a0
 800356c:	400200b8 	.word	0x400200b8
 8003570:	40020410 	.word	0x40020410
 8003574:	40020428 	.word	0x40020428
 8003578:	40020440 	.word	0x40020440
 800357c:	40020458 	.word	0x40020458
 8003580:	40020470 	.word	0x40020470
 8003584:	40020488 	.word	0x40020488
 8003588:	400204a0 	.word	0x400204a0
 800358c:	400204b8 	.word	0x400204b8
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d015      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2208      	movs	r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d06e      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a69      	ldr	r2, [pc, #420]	@ (8003794 <HAL_DMA_IRQHandler+0x3f8>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d04a      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a67      	ldr	r2, [pc, #412]	@ (8003798 <HAL_DMA_IRQHandler+0x3fc>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d045      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a66      	ldr	r2, [pc, #408]	@ (800379c <HAL_DMA_IRQHandler+0x400>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d040      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a64      	ldr	r2, [pc, #400]	@ (80037a0 <HAL_DMA_IRQHandler+0x404>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d03b      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a63      	ldr	r2, [pc, #396]	@ (80037a4 <HAL_DMA_IRQHandler+0x408>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d036      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a61      	ldr	r2, [pc, #388]	@ (80037a8 <HAL_DMA_IRQHandler+0x40c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d031      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a60      	ldr	r2, [pc, #384]	@ (80037ac <HAL_DMA_IRQHandler+0x410>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d02c      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a5e      	ldr	r2, [pc, #376]	@ (80037b0 <HAL_DMA_IRQHandler+0x414>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d027      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5d      	ldr	r2, [pc, #372]	@ (80037b4 <HAL_DMA_IRQHandler+0x418>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d022      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <HAL_DMA_IRQHandler+0x41c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d01d      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a5a      	ldr	r2, [pc, #360]	@ (80037bc <HAL_DMA_IRQHandler+0x420>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d018      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a58      	ldr	r2, [pc, #352]	@ (80037c0 <HAL_DMA_IRQHandler+0x424>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a57      	ldr	r2, [pc, #348]	@ (80037c4 <HAL_DMA_IRQHandler+0x428>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a55      	ldr	r2, [pc, #340]	@ (80037c8 <HAL_DMA_IRQHandler+0x42c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d009      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a54      	ldr	r2, [pc, #336]	@ (80037cc <HAL_DMA_IRQHandler+0x430>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_DMA_IRQHandler+0x2ee>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a52      	ldr	r2, [pc, #328]	@ (80037d0 <HAL_DMA_IRQHandler+0x434>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10a      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x304>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e003      	b.n	80036a8 <HAL_DMA_IRQHandler+0x30c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f043 0202 	orr.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2204      	movs	r2, #4
 80036d2:	409a      	lsls	r2, r3
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 808f 	beq.w	80037fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003794 <HAL_DMA_IRQHandler+0x3f8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d04a      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <HAL_DMA_IRQHandler+0x3fc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d045      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a29      	ldr	r2, [pc, #164]	@ (800379c <HAL_DMA_IRQHandler+0x400>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d040      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <HAL_DMA_IRQHandler+0x404>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d03b      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a26      	ldr	r2, [pc, #152]	@ (80037a4 <HAL_DMA_IRQHandler+0x408>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d036      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <HAL_DMA_IRQHandler+0x40c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d031      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a23      	ldr	r2, [pc, #140]	@ (80037ac <HAL_DMA_IRQHandler+0x410>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d02c      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a21      	ldr	r2, [pc, #132]	@ (80037b0 <HAL_DMA_IRQHandler+0x414>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d027      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <HAL_DMA_IRQHandler+0x418>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1e      	ldr	r2, [pc, #120]	@ (80037b8 <HAL_DMA_IRQHandler+0x41c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01d      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1d      	ldr	r2, [pc, #116]	@ (80037bc <HAL_DMA_IRQHandler+0x420>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	@ (80037c0 <HAL_DMA_IRQHandler+0x424>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_DMA_IRQHandler+0x428>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a18      	ldr	r2, [pc, #96]	@ (80037c8 <HAL_DMA_IRQHandler+0x42c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <HAL_DMA_IRQHandler+0x430>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_DMA_IRQHandler+0x3e2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <HAL_DMA_IRQHandler+0x434>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d12a      	bne.n	80037d4 <HAL_DMA_IRQHandler+0x438>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e023      	b.n	80037dc <HAL_DMA_IRQHandler+0x440>
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2204      	movs	r2, #4
 80037ea:	409a      	lsls	r2, r3
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f4:	f043 0204 	orr.w	r2, r3, #4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	2210      	movs	r2, #16
 8003806:	409a      	lsls	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a6 	beq.w	800395e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a85      	ldr	r2, [pc, #532]	@ (8003a2c <HAL_DMA_IRQHandler+0x690>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a83      	ldr	r2, [pc, #524]	@ (8003a30 <HAL_DMA_IRQHandler+0x694>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a82      	ldr	r2, [pc, #520]	@ (8003a34 <HAL_DMA_IRQHandler+0x698>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a80      	ldr	r2, [pc, #512]	@ (8003a38 <HAL_DMA_IRQHandler+0x69c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a3c <HAL_DMA_IRQHandler+0x6a0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a7d      	ldr	r2, [pc, #500]	@ (8003a40 <HAL_DMA_IRQHandler+0x6a4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7c      	ldr	r2, [pc, #496]	@ (8003a44 <HAL_DMA_IRQHandler+0x6a8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a48 <HAL_DMA_IRQHandler+0x6ac>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a79      	ldr	r2, [pc, #484]	@ (8003a4c <HAL_DMA_IRQHandler+0x6b0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a77      	ldr	r2, [pc, #476]	@ (8003a50 <HAL_DMA_IRQHandler+0x6b4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a76      	ldr	r2, [pc, #472]	@ (8003a54 <HAL_DMA_IRQHandler+0x6b8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a74      	ldr	r2, [pc, #464]	@ (8003a58 <HAL_DMA_IRQHandler+0x6bc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	@ (8003a5c <HAL_DMA_IRQHandler+0x6c0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	@ (8003a60 <HAL_DMA_IRQHandler+0x6c4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	@ (8003a64 <HAL_DMA_IRQHandler+0x6c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0x516>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_DMA_IRQHandler+0x6cc>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d10a      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x52c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e009      	b.n	80038dc <HAL_DMA_IRQHandler+0x540>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03e      	beq.n	800395e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2210      	movs	r2, #16
 80038ea:	409a      	lsls	r2, r3
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d108      	bne.n	800391e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d024      	beq.n	800395e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e01f      	b.n	800395e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01b      	beq.n	800395e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e016      	b.n	800395e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393a:	2b00      	cmp	r3, #0
 800393c:	d107      	bne.n	800394e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0208 	bic.w	r2, r2, #8
 800394c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2220      	movs	r2, #32
 8003968:	409a      	lsls	r2, r3
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8110 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a2c      	ldr	r2, [pc, #176]	@ (8003a2c <HAL_DMA_IRQHandler+0x690>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d04a      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2b      	ldr	r2, [pc, #172]	@ (8003a30 <HAL_DMA_IRQHandler+0x694>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d045      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a29      	ldr	r2, [pc, #164]	@ (8003a34 <HAL_DMA_IRQHandler+0x698>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d040      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <HAL_DMA_IRQHandler+0x69c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d03b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a26      	ldr	r2, [pc, #152]	@ (8003a3c <HAL_DMA_IRQHandler+0x6a0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d036      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a25      	ldr	r2, [pc, #148]	@ (8003a40 <HAL_DMA_IRQHandler+0x6a4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d031      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a23      	ldr	r2, [pc, #140]	@ (8003a44 <HAL_DMA_IRQHandler+0x6a8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_DMA_IRQHandler+0x6ac>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d027      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a20      	ldr	r2, [pc, #128]	@ (8003a4c <HAL_DMA_IRQHandler+0x6b0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d022      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <HAL_DMA_IRQHandler+0x6b4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d01d      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003a54 <HAL_DMA_IRQHandler+0x6b8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d018      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a58 <HAL_DMA_IRQHandler+0x6bc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a5c <HAL_DMA_IRQHandler+0x6c0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00e      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <HAL_DMA_IRQHandler+0x6c4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d009      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <HAL_DMA_IRQHandler+0x6c8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x678>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	@ (8003a68 <HAL_DMA_IRQHandler+0x6cc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d12b      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x6d0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	bf14      	ite	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	2300      	moveq	r3, #0
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	e02a      	b.n	8003a80 <HAL_DMA_IRQHandler+0x6e4>
 8003a2a:	bf00      	nop
 8003a2c:	40020010 	.word	0x40020010
 8003a30:	40020028 	.word	0x40020028
 8003a34:	40020040 	.word	0x40020040
 8003a38:	40020058 	.word	0x40020058
 8003a3c:	40020070 	.word	0x40020070
 8003a40:	40020088 	.word	0x40020088
 8003a44:	400200a0 	.word	0x400200a0
 8003a48:	400200b8 	.word	0x400200b8
 8003a4c:	40020410 	.word	0x40020410
 8003a50:	40020428 	.word	0x40020428
 8003a54:	40020440 	.word	0x40020440
 8003a58:	40020458 	.word	0x40020458
 8003a5c:	40020470 	.word	0x40020470
 8003a60:	40020488 	.word	0x40020488
 8003a64:	400204a0 	.word	0x400204a0
 8003a68:	400204b8 	.word	0x400204b8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8087 	beq.w	8003b94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2220      	movs	r2, #32
 8003a90:	409a      	lsls	r2, r3
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d139      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0216 	bic.w	r2, r2, #22
 8003ab0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_DMA_IRQHandler+0x736>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	223f      	movs	r2, #63	@ 0x3f
 8003aec:	409a      	lsls	r2, r3
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 834a 	beq.w	80041a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
          }
          return;
 8003b14:	e344      	b.n	80041a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d108      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02c      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e027      	b.n	8003b94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
 8003b54:	e01e      	b.n	8003b94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10f      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0210 	bic.w	r2, r2, #16
 8003b72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8306 	beq.w	80041aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8088 	beq.w	8003cbc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2204      	movs	r2, #4
 8003bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7a      	ldr	r2, [pc, #488]	@ (8003da4 <HAL_DMA_IRQHandler+0xa08>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04a      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a79      	ldr	r2, [pc, #484]	@ (8003da8 <HAL_DMA_IRQHandler+0xa0c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d045      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a77      	ldr	r2, [pc, #476]	@ (8003dac <HAL_DMA_IRQHandler+0xa10>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d040      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a76      	ldr	r2, [pc, #472]	@ (8003db0 <HAL_DMA_IRQHandler+0xa14>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d03b      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a74      	ldr	r2, [pc, #464]	@ (8003db4 <HAL_DMA_IRQHandler+0xa18>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d036      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a73      	ldr	r2, [pc, #460]	@ (8003db8 <HAL_DMA_IRQHandler+0xa1c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d031      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a71      	ldr	r2, [pc, #452]	@ (8003dbc <HAL_DMA_IRQHandler+0xa20>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02c      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a70      	ldr	r2, [pc, #448]	@ (8003dc0 <HAL_DMA_IRQHandler+0xa24>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d027      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6e      	ldr	r2, [pc, #440]	@ (8003dc4 <HAL_DMA_IRQHandler+0xa28>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d022      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6d      	ldr	r2, [pc, #436]	@ (8003dc8 <HAL_DMA_IRQHandler+0xa2c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d01d      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003dcc <HAL_DMA_IRQHandler+0xa30>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d018      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6a      	ldr	r2, [pc, #424]	@ (8003dd0 <HAL_DMA_IRQHandler+0xa34>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d013      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	@ (8003dd4 <HAL_DMA_IRQHandler+0xa38>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00e      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a67      	ldr	r2, [pc, #412]	@ (8003dd8 <HAL_DMA_IRQHandler+0xa3c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d009      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a65      	ldr	r2, [pc, #404]	@ (8003ddc <HAL_DMA_IRQHandler+0xa40>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <HAL_DMA_IRQHandler+0x8b8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a64      	ldr	r2, [pc, #400]	@ (8003de0 <HAL_DMA_IRQHandler+0xa44>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d108      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x8ca>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e007      	b.n	8003c76 <HAL_DMA_IRQHandler+0x8da>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d307      	bcc.n	8003c92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f2      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x8da>
 8003c90:	e000      	b.n	8003c94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003c92:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003caa:	e003      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8272 	beq.w	80041aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
 8003cce:	e26c      	b.n	80041aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a43      	ldr	r2, [pc, #268]	@ (8003de4 <HAL_DMA_IRQHandler+0xa48>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a42      	ldr	r2, [pc, #264]	@ (8003de8 <HAL_DMA_IRQHandler+0xa4c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a40      	ldr	r2, [pc, #256]	@ (8003dec <HAL_DMA_IRQHandler+0xa50>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8003df0 <HAL_DMA_IRQHandler+0xa54>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8003df4 <HAL_DMA_IRQHandler+0xa58>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a3c      	ldr	r2, [pc, #240]	@ (8003df8 <HAL_DMA_IRQHandler+0xa5c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a3a      	ldr	r2, [pc, #232]	@ (8003dfc <HAL_DMA_IRQHandler+0xa60>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x984>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a39      	ldr	r2, [pc, #228]	@ (8003e00 <HAL_DMA_IRQHandler+0xa64>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x988>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_DMA_IRQHandler+0x98a>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 823f 	beq.w	80041aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80cd 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xb48>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80c7 	beq.w	8003ee4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2204      	movs	r2, #4
 8003d60:	409a      	lsls	r2, r3
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d049      	beq.n	8003e04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8210 	beq.w	80041a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d8c:	e20a      	b.n	80041a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8206 	beq.w	80041a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da0:	e200      	b.n	80041a4 <HAL_DMA_IRQHandler+0xe08>
 8003da2:	bf00      	nop
 8003da4:	40020010 	.word	0x40020010
 8003da8:	40020028 	.word	0x40020028
 8003dac:	40020040 	.word	0x40020040
 8003db0:	40020058 	.word	0x40020058
 8003db4:	40020070 	.word	0x40020070
 8003db8:	40020088 	.word	0x40020088
 8003dbc:	400200a0 	.word	0x400200a0
 8003dc0:	400200b8 	.word	0x400200b8
 8003dc4:	40020410 	.word	0x40020410
 8003dc8:	40020428 	.word	0x40020428
 8003dcc:	40020440 	.word	0x40020440
 8003dd0:	40020458 	.word	0x40020458
 8003dd4:	40020470 	.word	0x40020470
 8003dd8:	40020488 	.word	0x40020488
 8003ddc:	400204a0 	.word	0x400204a0
 8003de0:	400204b8 	.word	0x400204b8
 8003de4:	58025408 	.word	0x58025408
 8003de8:	5802541c 	.word	0x5802541c
 8003dec:	58025430 	.word	0x58025430
 8003df0:	58025444 	.word	0x58025444
 8003df4:	58025458 	.word	0x58025458
 8003df8:	5802546c 	.word	0x5802546c
 8003dfc:	58025480 	.word	0x58025480
 8003e00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d160      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7f      	ldr	r2, [pc, #508]	@ (8004010 <HAL_DMA_IRQHandler+0xc74>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d04a      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8004014 <HAL_DMA_IRQHandler+0xc78>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d045      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7c      	ldr	r2, [pc, #496]	@ (8004018 <HAL_DMA_IRQHandler+0xc7c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d040      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a7a      	ldr	r2, [pc, #488]	@ (800401c <HAL_DMA_IRQHandler+0xc80>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d03b      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a79      	ldr	r2, [pc, #484]	@ (8004020 <HAL_DMA_IRQHandler+0xc84>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d036      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a77      	ldr	r2, [pc, #476]	@ (8004024 <HAL_DMA_IRQHandler+0xc88>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d031      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a76      	ldr	r2, [pc, #472]	@ (8004028 <HAL_DMA_IRQHandler+0xc8c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d02c      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a74      	ldr	r2, [pc, #464]	@ (800402c <HAL_DMA_IRQHandler+0xc90>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d027      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a73      	ldr	r2, [pc, #460]	@ (8004030 <HAL_DMA_IRQHandler+0xc94>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a71      	ldr	r2, [pc, #452]	@ (8004034 <HAL_DMA_IRQHandler+0xc98>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a70      	ldr	r2, [pc, #448]	@ (8004038 <HAL_DMA_IRQHandler+0xc9c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a6e      	ldr	r2, [pc, #440]	@ (800403c <HAL_DMA_IRQHandler+0xca0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8004040 <HAL_DMA_IRQHandler+0xca4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a6b      	ldr	r2, [pc, #428]	@ (8004044 <HAL_DMA_IRQHandler+0xca8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8004048 <HAL_DMA_IRQHandler+0xcac>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_DMA_IRQHandler+0xb12>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a68      	ldr	r2, [pc, #416]	@ (800404c <HAL_DMA_IRQHandler+0xcb0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d108      	bne.n	8003ec0 <HAL_DMA_IRQHandler+0xb24>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0208 	bic.w	r2, r2, #8
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e007      	b.n	8003ed0 <HAL_DMA_IRQHandler+0xb34>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8165 	beq.w	80041a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ee2:	e15f      	b.n	80041a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2202      	movs	r2, #2
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80c5 	beq.w	8004084 <HAL_DMA_IRQHandler+0xce8>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80bf 	beq.w	8004084 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2202      	movs	r2, #2
 8003f10:	409a      	lsls	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 813a 	beq.w	80041a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f3c:	e134      	b.n	80041a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8130 	beq.w	80041a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f50:	e12a      	b.n	80041a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f040 8089 	bne.w	8004070 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	@ (8004010 <HAL_DMA_IRQHandler+0xc74>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d04a      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a29      	ldr	r2, [pc, #164]	@ (8004014 <HAL_DMA_IRQHandler+0xc78>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d045      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a28      	ldr	r2, [pc, #160]	@ (8004018 <HAL_DMA_IRQHandler+0xc7c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d040      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a26      	ldr	r2, [pc, #152]	@ (800401c <HAL_DMA_IRQHandler+0xc80>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d03b      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	@ (8004020 <HAL_DMA_IRQHandler+0xc84>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d036      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	@ (8004024 <HAL_DMA_IRQHandler+0xc88>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d031      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <HAL_DMA_IRQHandler+0xc8c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d02c      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <HAL_DMA_IRQHandler+0xc90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d027      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004030 <HAL_DMA_IRQHandler+0xc94>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004034 <HAL_DMA_IRQHandler+0xc98>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004038 <HAL_DMA_IRQHandler+0xc9c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_DMA_IRQHandler+0xca0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <HAL_DMA_IRQHandler+0xca4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <HAL_DMA_IRQHandler+0xca8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a16      	ldr	r2, [pc, #88]	@ (8004048 <HAL_DMA_IRQHandler+0xcac>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xc62>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <HAL_DMA_IRQHandler+0xcb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d128      	bne.n	8004050 <HAL_DMA_IRQHandler+0xcb4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0214 	bic.w	r2, r2, #20
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e027      	b.n	8004060 <HAL_DMA_IRQHandler+0xcc4>
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 020a 	bic.w	r2, r2, #10
 800405e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8097 	beq.w	80041a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004082:	e091      	b.n	80041a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8088 	beq.w	80041aa <HAL_DMA_IRQHandler+0xe0e>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8082 	beq.w	80041aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a41      	ldr	r2, [pc, #260]	@ (80041b0 <HAL_DMA_IRQHandler+0xe14>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3f      	ldr	r2, [pc, #252]	@ (80041b4 <HAL_DMA_IRQHandler+0xe18>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3e      	ldr	r2, [pc, #248]	@ (80041b8 <HAL_DMA_IRQHandler+0xe1c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a3c      	ldr	r2, [pc, #240]	@ (80041bc <HAL_DMA_IRQHandler+0xe20>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a3b      	ldr	r2, [pc, #236]	@ (80041c0 <HAL_DMA_IRQHandler+0xe24>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a39      	ldr	r2, [pc, #228]	@ (80041c4 <HAL_DMA_IRQHandler+0xe28>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a38      	ldr	r2, [pc, #224]	@ (80041c8 <HAL_DMA_IRQHandler+0xe2c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a36      	ldr	r2, [pc, #216]	@ (80041cc <HAL_DMA_IRQHandler+0xe30>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a35      	ldr	r2, [pc, #212]	@ (80041d0 <HAL_DMA_IRQHandler+0xe34>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a33      	ldr	r2, [pc, #204]	@ (80041d4 <HAL_DMA_IRQHandler+0xe38>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a32      	ldr	r2, [pc, #200]	@ (80041d8 <HAL_DMA_IRQHandler+0xe3c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a30      	ldr	r2, [pc, #192]	@ (80041dc <HAL_DMA_IRQHandler+0xe40>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a2f      	ldr	r2, [pc, #188]	@ (80041e0 <HAL_DMA_IRQHandler+0xe44>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2d      	ldr	r2, [pc, #180]	@ (80041e4 <HAL_DMA_IRQHandler+0xe48>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <HAL_DMA_IRQHandler+0xe4c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_IRQHandler+0xdaa>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2a      	ldr	r2, [pc, #168]	@ (80041ec <HAL_DMA_IRQHandler+0xe50>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d108      	bne.n	8004158 <HAL_DMA_IRQHandler+0xdbc>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 021c 	bic.w	r2, r2, #28
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e007      	b.n	8004168 <HAL_DMA_IRQHandler+0xdcc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 020e 	bic.w	r2, r2, #14
 8004166:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2201      	movs	r2, #1
 8004172:	409a      	lsls	r2, r3
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
 800419e:	e004      	b.n	80041aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80041a0:	bf00      	nop
 80041a2:	e002      	b.n	80041aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a4:	bf00      	nop
 80041a6:	e000      	b.n	80041aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041aa:	3728      	adds	r7, #40	@ 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40020010 	.word	0x40020010
 80041b4:	40020028 	.word	0x40020028
 80041b8:	40020040 	.word	0x40020040
 80041bc:	40020058 	.word	0x40020058
 80041c0:	40020070 	.word	0x40020070
 80041c4:	40020088 	.word	0x40020088
 80041c8:	400200a0 	.word	0x400200a0
 80041cc:	400200b8 	.word	0x400200b8
 80041d0:	40020410 	.word	0x40020410
 80041d4:	40020428 	.word	0x40020428
 80041d8:	40020440 	.word	0x40020440
 80041dc:	40020458 	.word	0x40020458
 80041e0:	40020470 	.word	0x40020470
 80041e4:	40020488 	.word	0x40020488
 80041e8:	400204a0 	.word	0x400204a0
 80041ec:	400204b8 	.word	0x400204b8

080041f0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004220:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7f      	ldr	r2, [pc, #508]	@ (8004424 <DMA_SetConfig+0x21c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d072      	beq.n	8004312 <DMA_SetConfig+0x10a>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7d      	ldr	r2, [pc, #500]	@ (8004428 <DMA_SetConfig+0x220>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d06d      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7c      	ldr	r2, [pc, #496]	@ (800442c <DMA_SetConfig+0x224>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d068      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7a      	ldr	r2, [pc, #488]	@ (8004430 <DMA_SetConfig+0x228>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d063      	beq.n	8004312 <DMA_SetConfig+0x10a>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a79      	ldr	r2, [pc, #484]	@ (8004434 <DMA_SetConfig+0x22c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d05e      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <DMA_SetConfig+0x230>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d059      	beq.n	8004312 <DMA_SetConfig+0x10a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a76      	ldr	r2, [pc, #472]	@ (800443c <DMA_SetConfig+0x234>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d054      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a74      	ldr	r2, [pc, #464]	@ (8004440 <DMA_SetConfig+0x238>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d04f      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	@ (8004444 <DMA_SetConfig+0x23c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d04a      	beq.n	8004312 <DMA_SetConfig+0x10a>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a71      	ldr	r2, [pc, #452]	@ (8004448 <DMA_SetConfig+0x240>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d045      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a70      	ldr	r2, [pc, #448]	@ (800444c <DMA_SetConfig+0x244>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d040      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <DMA_SetConfig+0x248>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d03b      	beq.n	8004312 <DMA_SetConfig+0x10a>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6d      	ldr	r2, [pc, #436]	@ (8004454 <DMA_SetConfig+0x24c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d036      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004458 <DMA_SetConfig+0x250>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d031      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6a      	ldr	r2, [pc, #424]	@ (800445c <DMA_SetConfig+0x254>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d02c      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a68      	ldr	r2, [pc, #416]	@ (8004460 <DMA_SetConfig+0x258>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d027      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a67      	ldr	r2, [pc, #412]	@ (8004464 <DMA_SetConfig+0x25c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d022      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a65      	ldr	r2, [pc, #404]	@ (8004468 <DMA_SetConfig+0x260>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01d      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a64      	ldr	r2, [pc, #400]	@ (800446c <DMA_SetConfig+0x264>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d018      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a62      	ldr	r2, [pc, #392]	@ (8004470 <DMA_SetConfig+0x268>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a61      	ldr	r2, [pc, #388]	@ (8004474 <DMA_SetConfig+0x26c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d00e      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a5f      	ldr	r2, [pc, #380]	@ (8004478 <DMA_SetConfig+0x270>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d009      	beq.n	8004312 <DMA_SetConfig+0x10a>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a5e      	ldr	r2, [pc, #376]	@ (800447c <DMA_SetConfig+0x274>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d004      	beq.n	8004312 <DMA_SetConfig+0x10a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a5c      	ldr	r2, [pc, #368]	@ (8004480 <DMA_SetConfig+0x278>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <DMA_SetConfig+0x10e>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <DMA_SetConfig+0x110>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004324:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004336:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a39      	ldr	r2, [pc, #228]	@ (8004424 <DMA_SetConfig+0x21c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d04a      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a38      	ldr	r2, [pc, #224]	@ (8004428 <DMA_SetConfig+0x220>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d045      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a36      	ldr	r2, [pc, #216]	@ (800442c <DMA_SetConfig+0x224>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d040      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a35      	ldr	r2, [pc, #212]	@ (8004430 <DMA_SetConfig+0x228>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d03b      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a33      	ldr	r2, [pc, #204]	@ (8004434 <DMA_SetConfig+0x22c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d036      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a32      	ldr	r2, [pc, #200]	@ (8004438 <DMA_SetConfig+0x230>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d031      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a30      	ldr	r2, [pc, #192]	@ (800443c <DMA_SetConfig+0x234>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d02c      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2f      	ldr	r2, [pc, #188]	@ (8004440 <DMA_SetConfig+0x238>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d027      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a2d      	ldr	r2, [pc, #180]	@ (8004444 <DMA_SetConfig+0x23c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a2c      	ldr	r2, [pc, #176]	@ (8004448 <DMA_SetConfig+0x240>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01d      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2a      	ldr	r2, [pc, #168]	@ (800444c <DMA_SetConfig+0x244>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a29      	ldr	r2, [pc, #164]	@ (8004450 <DMA_SetConfig+0x248>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <DMA_SetConfig+0x24c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a26      	ldr	r2, [pc, #152]	@ (8004458 <DMA_SetConfig+0x250>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a24      	ldr	r2, [pc, #144]	@ (800445c <DMA_SetConfig+0x254>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <DMA_SetConfig+0x1d0>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a23      	ldr	r2, [pc, #140]	@ (8004460 <DMA_SetConfig+0x258>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <DMA_SetConfig+0x1d4>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <DMA_SetConfig+0x1d6>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d059      	beq.n	8004496 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	223f      	movs	r2, #63	@ 0x3f
 80043ec:	409a      	lsls	r2, r3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004400:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	d138      	bne.n	8004484 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004422:	e086      	b.n	8004532 <DMA_SetConfig+0x32a>
 8004424:	40020010 	.word	0x40020010
 8004428:	40020028 	.word	0x40020028
 800442c:	40020040 	.word	0x40020040
 8004430:	40020058 	.word	0x40020058
 8004434:	40020070 	.word	0x40020070
 8004438:	40020088 	.word	0x40020088
 800443c:	400200a0 	.word	0x400200a0
 8004440:	400200b8 	.word	0x400200b8
 8004444:	40020410 	.word	0x40020410
 8004448:	40020428 	.word	0x40020428
 800444c:	40020440 	.word	0x40020440
 8004450:	40020458 	.word	0x40020458
 8004454:	40020470 	.word	0x40020470
 8004458:	40020488 	.word	0x40020488
 800445c:	400204a0 	.word	0x400204a0
 8004460:	400204b8 	.word	0x400204b8
 8004464:	58025408 	.word	0x58025408
 8004468:	5802541c 	.word	0x5802541c
 800446c:	58025430 	.word	0x58025430
 8004470:	58025444 	.word	0x58025444
 8004474:	58025458 	.word	0x58025458
 8004478:	5802546c 	.word	0x5802546c
 800447c:	58025480 	.word	0x58025480
 8004480:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]
}
 8004494:	e04d      	b.n	8004532 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <DMA_SetConfig+0x338>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a27      	ldr	r2, [pc, #156]	@ (8004544 <DMA_SetConfig+0x33c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01d      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a26      	ldr	r2, [pc, #152]	@ (8004548 <DMA_SetConfig+0x340>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a24      	ldr	r2, [pc, #144]	@ (800454c <DMA_SetConfig+0x344>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a23      	ldr	r2, [pc, #140]	@ (8004550 <DMA_SetConfig+0x348>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a21      	ldr	r2, [pc, #132]	@ (8004554 <DMA_SetConfig+0x34c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a20      	ldr	r2, [pc, #128]	@ (8004558 <DMA_SetConfig+0x350>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <DMA_SetConfig+0x2de>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <DMA_SetConfig+0x354>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <DMA_SetConfig+0x2e2>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <DMA_SetConfig+0x2e4>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2201      	movs	r2, #1
 80044fa:	409a      	lsls	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d108      	bne.n	8004522 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	60da      	str	r2, [r3, #12]
}
 8004520:	e007      	b.n	8004532 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58025408 	.word	0x58025408
 8004544:	5802541c 	.word	0x5802541c
 8004548:	58025430 	.word	0x58025430
 800454c:	58025444 	.word	0x58025444
 8004550:	58025458 	.word	0x58025458
 8004554:	5802546c 	.word	0x5802546c
 8004558:	58025480 	.word	0x58025480
 800455c:	58025494 	.word	0x58025494

08004560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a42      	ldr	r2, [pc, #264]	@ (8004678 <DMA_CalcBaseAndBitshift+0x118>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d04a      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a41      	ldr	r2, [pc, #260]	@ (800467c <DMA_CalcBaseAndBitshift+0x11c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d045      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a3f      	ldr	r2, [pc, #252]	@ (8004680 <DMA_CalcBaseAndBitshift+0x120>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d040      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a3e      	ldr	r2, [pc, #248]	@ (8004684 <DMA_CalcBaseAndBitshift+0x124>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d03b      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3c      	ldr	r2, [pc, #240]	@ (8004688 <DMA_CalcBaseAndBitshift+0x128>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d036      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3b      	ldr	r2, [pc, #236]	@ (800468c <DMA_CalcBaseAndBitshift+0x12c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d031      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a39      	ldr	r2, [pc, #228]	@ (8004690 <DMA_CalcBaseAndBitshift+0x130>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02c      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a38      	ldr	r2, [pc, #224]	@ (8004694 <DMA_CalcBaseAndBitshift+0x134>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d027      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a36      	ldr	r2, [pc, #216]	@ (8004698 <DMA_CalcBaseAndBitshift+0x138>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d022      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a35      	ldr	r2, [pc, #212]	@ (800469c <DMA_CalcBaseAndBitshift+0x13c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d01d      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a33      	ldr	r2, [pc, #204]	@ (80046a0 <DMA_CalcBaseAndBitshift+0x140>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d018      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <DMA_CalcBaseAndBitshift+0x144>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d013      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a30      	ldr	r2, [pc, #192]	@ (80046a8 <DMA_CalcBaseAndBitshift+0x148>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00e      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2f      	ldr	r2, [pc, #188]	@ (80046ac <DMA_CalcBaseAndBitshift+0x14c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d009      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2d      	ldr	r2, [pc, #180]	@ (80046b0 <DMA_CalcBaseAndBitshift+0x150>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d004      	beq.n	8004608 <DMA_CalcBaseAndBitshift+0xa8>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <DMA_CalcBaseAndBitshift+0x154>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d101      	bne.n	800460c <DMA_CalcBaseAndBitshift+0xac>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <DMA_CalcBaseAndBitshift+0xae>
 800460c:	2300      	movs	r3, #0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d024      	beq.n	800465c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	3b10      	subs	r3, #16
 800461a:	4a27      	ldr	r2, [pc, #156]	@ (80046b8 <DMA_CalcBaseAndBitshift+0x158>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	4a24      	ldr	r2, [pc, #144]	@ (80046bc <DMA_CalcBaseAndBitshift+0x15c>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d908      	bls.n	800464c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004642:	4013      	ands	r3, r2
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58
 800464a:	e00d      	b.n	8004668 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <DMA_CalcBaseAndBitshift+0x160>)
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6593      	str	r3, [r2, #88]	@ 0x58
 800465a:	e005      	b.n	8004668 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40020010 	.word	0x40020010
 800467c:	40020028 	.word	0x40020028
 8004680:	40020040 	.word	0x40020040
 8004684:	40020058 	.word	0x40020058
 8004688:	40020070 	.word	0x40020070
 800468c:	40020088 	.word	0x40020088
 8004690:	400200a0 	.word	0x400200a0
 8004694:	400200b8 	.word	0x400200b8
 8004698:	40020410 	.word	0x40020410
 800469c:	40020428 	.word	0x40020428
 80046a0:	40020440 	.word	0x40020440
 80046a4:	40020458 	.word	0x40020458
 80046a8:	40020470 	.word	0x40020470
 80046ac:	40020488 	.word	0x40020488
 80046b0:	400204a0 	.word	0x400204a0
 80046b4:	400204b8 	.word	0x400204b8
 80046b8:	aaaaaaab 	.word	0xaaaaaaab
 80046bc:	080177a8 	.word	0x080177a8
 80046c0:	fffffc00 	.word	0xfffffc00

080046c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d120      	bne.n	800471a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d858      	bhi.n	8004792 <DMA_CheckFifoParam+0xce>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <DMA_CheckFifoParam+0x24>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	0800470b 	.word	0x0800470b
 80046f0:	080046f9 	.word	0x080046f9
 80046f4:	08004793 	.word	0x08004793
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d048      	beq.n	8004796 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004708:	e045      	b.n	8004796 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004712:	d142      	bne.n	800479a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004718:	e03f      	b.n	800479a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004722:	d123      	bne.n	800476c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004728:	2b03      	cmp	r3, #3
 800472a:	d838      	bhi.n	800479e <DMA_CheckFifoParam+0xda>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <DMA_CheckFifoParam+0x70>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	0800474b 	.word	0x0800474b
 800473c:	08004745 	.word	0x08004745
 8004740:	0800475d 	.word	0x0800475d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
        break;
 8004748:	e030      	b.n	80047ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d025      	beq.n	80047a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800475a:	e022      	b.n	80047a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004764:	d11f      	bne.n	80047a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800476a:	e01c      	b.n	80047a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	2b02      	cmp	r3, #2
 8004772:	d902      	bls.n	800477a <DMA_CheckFifoParam+0xb6>
 8004774:	2b03      	cmp	r3, #3
 8004776:	d003      	beq.n	8004780 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004778:	e018      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        break;
 800477e:	e015      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
    break;
 8004790:	e00b      	b.n	80047aa <DMA_CheckFifoParam+0xe6>
        break;
 8004792:	bf00      	nop
 8004794:	e00a      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        break;
 8004796:	bf00      	nop
 8004798:	e008      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        break;
 800479a:	bf00      	nop
 800479c:	e006      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        break;
 800479e:	bf00      	nop
 80047a0:	e004      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
        break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <DMA_CheckFifoParam+0xe8>
    break;
 80047aa:	bf00      	nop
    }
  }

  return status;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop

080047bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a38      	ldr	r2, [pc, #224]	@ (80048b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a36      	ldr	r2, [pc, #216]	@ (80048b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a35      	ldr	r2, [pc, #212]	@ (80048b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a33      	ldr	r2, [pc, #204]	@ (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a32      	ldr	r2, [pc, #200]	@ (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a30      	ldr	r2, [pc, #192]	@ (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2f      	ldr	r2, [pc, #188]	@ (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2d      	ldr	r2, [pc, #180]	@ (80048cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	3b08      	subs	r3, #8
 800482c:	4a28      	ldr	r2, [pc, #160]	@ (80048d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004848:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2201      	movs	r2, #1
 8004852:	409a      	lsls	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004858:	e024      	b.n	80048a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3b10      	subs	r3, #16
 8004862:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d806      	bhi.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d902      	bls.n	8004882 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3308      	adds	r3, #8
 8004880:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a16      	ldr	r2, [pc, #88]	@ (80048ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004894:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	58025408 	.word	0x58025408
 80048b4:	5802541c 	.word	0x5802541c
 80048b8:	58025430 	.word	0x58025430
 80048bc:	58025444 	.word	0x58025444
 80048c0:	58025458 	.word	0x58025458
 80048c4:	5802546c 	.word	0x5802546c
 80048c8:	58025480 	.word	0x58025480
 80048cc:	58025494 	.word	0x58025494
 80048d0:	cccccccd 	.word	0xcccccccd
 80048d4:	16009600 	.word	0x16009600
 80048d8:	58025880 	.word	0x58025880
 80048dc:	aaaaaaab 	.word	0xaaaaaaab
 80048e0:	400204b8 	.word	0x400204b8
 80048e4:	4002040f 	.word	0x4002040f
 80048e8:	10008200 	.word	0x10008200
 80048ec:	40020880 	.word	0x40020880

080048f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d04a      	beq.n	800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d847      	bhi.n	800499c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a24      	ldr	r2, [pc, #144]	@ (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01d      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a21      	ldr	r2, [pc, #132]	@ (80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1e      	ldr	r2, [pc, #120]	@ (80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004960:	2300      	movs	r3, #0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4b17      	ldr	r3, [pc, #92]	@ (80049c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	461a      	mov	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004978:	671a      	str	r2, [r3, #112]	@ 0x70
 800497a:	e009      	b.n	8004990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a11      	ldr	r2, [pc, #68]	@ (80049d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800498e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	2201      	movs	r2, #1
 8004996:	409a      	lsls	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	58025408 	.word	0x58025408
 80049ac:	5802541c 	.word	0x5802541c
 80049b0:	58025430 	.word	0x58025430
 80049b4:	58025444 	.word	0x58025444
 80049b8:	58025458 	.word	0x58025458
 80049bc:	5802546c 	.word	0x5802546c
 80049c0:	58025480 	.word	0x58025480
 80049c4:	58025494 	.word	0x58025494
 80049c8:	1600963f 	.word	0x1600963f
 80049cc:	58025940 	.word	0x58025940
 80049d0:	1000823f 	.word	0x1000823f
 80049d4:	40020940 	.word	0x40020940

080049d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	@ 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049e6:	4b89      	ldr	r3, [pc, #548]	@ (8004c0c <HAL_GPIO_Init+0x234>)
 80049e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049ea:	e194      	b.n	8004d16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8186 	beq.w	8004d10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d005      	beq.n	8004a1c <HAL_GPIO_Init+0x44>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d130      	bne.n	8004a7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	2203      	movs	r2, #3
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4013      	ands	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a52:	2201      	movs	r2, #1
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 0201 	and.w	r2, r3, #1
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d017      	beq.n	8004aba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	2203      	movs	r2, #3
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d123      	bne.n	8004b0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	08da      	lsrs	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3208      	adds	r2, #8
 8004ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	220f      	movs	r2, #15
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	2203      	movs	r2, #3
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0203 	and.w	r2, r3, #3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80e0 	beq.w	8004d10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b50:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_GPIO_Init+0x238>)
 8004b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b56:	4a2e      	ldr	r2, [pc, #184]	@ (8004c10 <HAL_GPIO_Init+0x238>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004b60:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_GPIO_Init+0x238>)
 8004b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b6e:	4a29      	ldr	r2, [pc, #164]	@ (8004c14 <HAL_GPIO_Init+0x23c>)
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	3302      	adds	r3, #2
 8004b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	220f      	movs	r2, #15
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a20      	ldr	r2, [pc, #128]	@ (8004c18 <HAL_GPIO_Init+0x240>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d052      	beq.n	8004c40 <HAL_GPIO_Init+0x268>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8004c1c <HAL_GPIO_Init+0x244>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d031      	beq.n	8004c06 <HAL_GPIO_Init+0x22e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c20 <HAL_GPIO_Init+0x248>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02b      	beq.n	8004c02 <HAL_GPIO_Init+0x22a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1d      	ldr	r2, [pc, #116]	@ (8004c24 <HAL_GPIO_Init+0x24c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d025      	beq.n	8004bfe <HAL_GPIO_Init+0x226>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_GPIO_Init+0x250>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <HAL_GPIO_Init+0x222>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <HAL_GPIO_Init+0x254>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d019      	beq.n	8004bf6 <HAL_GPIO_Init+0x21e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8004c30 <HAL_GPIO_Init+0x258>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_GPIO_Init+0x21a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a19      	ldr	r2, [pc, #100]	@ (8004c34 <HAL_GPIO_Init+0x25c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00d      	beq.n	8004bee <HAL_GPIO_Init+0x216>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	@ (8004c38 <HAL_GPIO_Init+0x260>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d007      	beq.n	8004bea <HAL_GPIO_Init+0x212>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <HAL_GPIO_Init+0x264>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d101      	bne.n	8004be6 <HAL_GPIO_Init+0x20e>
 8004be2:	2309      	movs	r3, #9
 8004be4:	e02d      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004be6:	230a      	movs	r3, #10
 8004be8:	e02b      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bea:	2308      	movs	r3, #8
 8004bec:	e029      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bee:	2307      	movs	r3, #7
 8004bf0:	e027      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	e025      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bf6:	2305      	movs	r3, #5
 8004bf8:	e023      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bfa:	2304      	movs	r3, #4
 8004bfc:	e021      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e01f      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e01d      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e01b      	b.n	8004c42 <HAL_GPIO_Init+0x26a>
 8004c0a:	bf00      	nop
 8004c0c:	58000080 	.word	0x58000080
 8004c10:	58024400 	.word	0x58024400
 8004c14:	58000400 	.word	0x58000400
 8004c18:	58020000 	.word	0x58020000
 8004c1c:	58020400 	.word	0x58020400
 8004c20:	58020800 	.word	0x58020800
 8004c24:	58020c00 	.word	0x58020c00
 8004c28:	58021000 	.word	0x58021000
 8004c2c:	58021400 	.word	0x58021400
 8004c30:	58021800 	.word	0x58021800
 8004c34:	58021c00 	.word	0x58021c00
 8004c38:	58022000 	.word	0x58022000
 8004c3c:	58022400 	.word	0x58022400
 8004c40:	2300      	movs	r3, #0
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	f002 0203 	and.w	r2, r2, #3
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	4093      	lsls	r3, r2
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c52:	4938      	ldr	r1, [pc, #224]	@ (8004d34 <HAL_GPIO_Init+0x35c>)
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	3302      	adds	r3, #2
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004cb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3301      	adds	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f ae63 	bne.w	80049ec <HAL_GPIO_Init+0x14>
  }
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	3724      	adds	r7, #36	@ 0x24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	58000400 	.word	0x58000400

08004d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d50:	2301      	movs	r3, #1
 8004d52:	73fb      	strb	r3, [r7, #15]
 8004d54:	e001      	b.n	8004d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	807b      	strh	r3, [r7, #2]
 8004d74:	4613      	mov	r3, r2
 8004d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d78:	787b      	ldrb	r3, [r7, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d7e:	887a      	ldrh	r2, [r7, #2]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d84:	e003      	b.n	8004d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d86:	887b      	ldrh	r3, [r7, #2]
 8004d88:	041a      	lsls	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	619a      	str	r2, [r3, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e08b      	b.n	8004ec6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fe58 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	@ 0x24
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d107      	bne.n	8004e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e006      	b.n	8004e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d108      	bne.n	8004e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	e007      	b.n	8004e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ed0 <HAL_I2C_Init+0x134>)
 8004e5a:	430b      	orrs	r3, r1
 8004e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	02008000 	.word	0x02008000

08004ed4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	817b      	strh	r3, [r7, #10]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	f040 80fd 	bne.w	80050f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_I2C_Master_Transmit+0x30>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0f6      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fc fdd0 	bl	8001ab0 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	2319      	movs	r3, #25
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa0a 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0e1      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2221      	movs	r2, #33	@ 0x21
 8004f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	893a      	ldrh	r2, [r7, #8]
 8004f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2bff      	cmp	r3, #255	@ 0xff
 8004f5e:	d906      	bls.n	8004f6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	22ff      	movs	r2, #255	@ 0xff
 8004f64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e007      	b.n	8004f7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d024      	beq.n	8004fd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	781a      	ldrb	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	8979      	ldrh	r1, [r7, #10]
 8004fc2:	4b4e      	ldr	r3, [pc, #312]	@ (80050fc <HAL_I2C_Master_Transmit+0x228>)
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fc05 	bl	80057d8 <I2C_TransferConfig>
 8004fce:	e066      	b.n	800509e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	8979      	ldrh	r1, [r7, #10]
 8004fd8:	4b48      	ldr	r3, [pc, #288]	@ (80050fc <HAL_I2C_Master_Transmit+0x228>)
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fbfa 	bl	80057d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fe4:	e05b      	b.n	800509e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	6a39      	ldr	r1, [r7, #32]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f9fd 	bl	80053ea <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e07b      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d034      	beq.n	800509e <HAL_I2C_Master_Transmit+0x1ca>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d130      	bne.n	800509e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2200      	movs	r2, #0
 8005044:	2180      	movs	r1, #128	@ 0x80
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f976 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e04d      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2bff      	cmp	r3, #255	@ 0xff
 800505e:	d90e      	bls.n	800507e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	22ff      	movs	r2, #255	@ 0xff
 8005064:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506a:	b2da      	uxtb	r2, r3
 800506c:	8979      	ldrh	r1, [r7, #10]
 800506e:	2300      	movs	r3, #0
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fbae 	bl	80057d8 <I2C_TransferConfig>
 800507c:	e00f      	b.n	800509e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800508c:	b2da      	uxtb	r2, r3
 800508e:	8979      	ldrh	r1, [r7, #10]
 8005090:	2300      	movs	r3, #0
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fb9d 	bl	80057d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d19e      	bne.n	8004fe6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	6a39      	ldr	r1, [r7, #32]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f9e3 	bl	8005478 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e01a      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2220      	movs	r2, #32
 80050c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6859      	ldr	r1, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <HAL_I2C_Master_Transmit+0x22c>)
 80050d0:	400b      	ands	r3, r1
 80050d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	80002000 	.word	0x80002000
 8005100:	fe00e800 	.word	0xfe00e800

08005104 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	607a      	str	r2, [r7, #4]
 800510e:	461a      	mov	r2, r3
 8005110:	460b      	mov	r3, r1
 8005112:	817b      	strh	r3, [r7, #10]
 8005114:	4613      	mov	r3, r2
 8005116:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b20      	cmp	r3, #32
 8005122:	f040 80db 	bne.w	80052dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_I2C_Master_Receive+0x30>
 8005130:	2302      	movs	r3, #2
 8005132:	e0d4      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800513c:	f7fc fcb8 	bl	8001ab0 <HAL_GetTick>
 8005140:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2319      	movs	r3, #25
 8005148:	2201      	movs	r2, #1
 800514a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8f2 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e0bf      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2222      	movs	r2, #34	@ 0x22
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2210      	movs	r2, #16
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	893a      	ldrh	r2, [r7, #8]
 800517e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	2bff      	cmp	r3, #255	@ 0xff
 800518e:	d90e      	bls.n	80051ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	22ff      	movs	r2, #255	@ 0xff
 8005194:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519a:	b2da      	uxtb	r2, r3
 800519c:	8979      	ldrh	r1, [r7, #10]
 800519e:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <HAL_I2C_Master_Receive+0x1e4>)
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fb16 	bl	80057d8 <I2C_TransferConfig>
 80051ac:	e06d      	b.n	800528a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	8979      	ldrh	r1, [r7, #10]
 80051c0:	4b49      	ldr	r3, [pc, #292]	@ (80052e8 <HAL_I2C_Master_Receive+0x1e4>)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fb05 	bl	80057d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051ce:	e05c      	b.n	800528a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	6a39      	ldr	r1, [r7, #32]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f993 	bl	8005500 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e07c      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d034      	beq.n	800528a <HAL_I2C_Master_Receive+0x186>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d130      	bne.n	800528a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2200      	movs	r2, #0
 8005230:	2180      	movs	r1, #128	@ 0x80
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f880 	bl	8005338 <I2C_WaitOnFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04d      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2bff      	cmp	r3, #255	@ 0xff
 800524a:	d90e      	bls.n	800526a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	22ff      	movs	r2, #255	@ 0xff
 8005250:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005256:	b2da      	uxtb	r2, r3
 8005258:	8979      	ldrh	r1, [r7, #10]
 800525a:	2300      	movs	r3, #0
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fab8 	bl	80057d8 <I2C_TransferConfig>
 8005268:	e00f      	b.n	800528a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	b2da      	uxtb	r2, r3
 800527a:	8979      	ldrh	r1, [r7, #10]
 800527c:	2300      	movs	r3, #0
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 faa7 	bl	80057d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d19d      	bne.n	80051d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	6a39      	ldr	r1, [r7, #32]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8ed 	bl	8005478 <I2C_WaitOnSTOPFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e01a      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2220      	movs	r2, #32
 80052ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <HAL_I2C_Master_Receive+0x1e8>)
 80052bc:	400b      	ands	r3, r1
 80052be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	80002400 	.word	0x80002400
 80052ec:	fe00e800 	.word	0xfe00e800

080052f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d103      	bne.n	800530e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d007      	beq.n	800532c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	619a      	str	r2, [r3, #24]
  }
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005348:	e03b      	b.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	6839      	ldr	r1, [r7, #0]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f962 	bl	8005618 <I2C_IsErrorOccurred>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e041      	b.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d02d      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fc fba3 	bl	8001ab0 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d122      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4013      	ands	r3, r2
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	429a      	cmp	r2, r3
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	429a      	cmp	r2, r3
 8005398:	d113      	bne.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e00f      	b.n	80053e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	bf0c      	ite	eq
 80053d2:	2301      	moveq	r3, #1
 80053d4:	2300      	movne	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d0b4      	beq.n	800534a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b084      	sub	sp, #16
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053f6:	e033      	b.n	8005460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f90b 	bl	8005618 <I2C_IsErrorOccurred>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e031      	b.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d025      	beq.n	8005460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7fc fb4c 	bl	8001ab0 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11a      	bne.n	8005460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b02      	cmp	r3, #2
 8005436:	d013      	beq.n	8005460 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e007      	b.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b02      	cmp	r3, #2
 800546c:	d1c4      	bne.n	80053f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005484:	e02f      	b.n	80054e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f8c4 	bl	8005618 <I2C_IsErrorOccurred>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e02d      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fc fb09 	bl	8001ab0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11a      	bne.n	80054e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d013      	beq.n	80054e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	f043 0220 	orr.w	r2, r3, #32
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e007      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d1c8      	bne.n	8005486 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005510:	e071      	b.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f87e 	bl	8005618 <I2C_IsErrorOccurred>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b20      	cmp	r3, #32
 8005532:	d13b      	bne.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d138      	bne.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b04      	cmp	r3, #4
 8005546:	d105      	bne.n	8005554 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b10      	cmp	r3, #16
 8005560:	d121      	bne.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2210      	movs	r2, #16
 8005568:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2204      	movs	r2, #4
 800556e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2220      	movs	r2, #32
 8005576:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6859      	ldr	r1, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b24      	ldr	r3, [pc, #144]	@ (8005614 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005584:	400b      	ands	r3, r1
 8005586:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	75fb      	strb	r3, [r7, #23]
 80055a4:	e002      	b.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80055ac:	f7fc fa80 	bl	8001ab0 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d119      	bne.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d116      	bne.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d00f      	beq.n	80055f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b04      	cmp	r3, #4
 8005602:	d002      	beq.n	800560a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d083      	beq.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	fe00e800 	.word	0xfe00e800

08005618 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	@ 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d068      	beq.n	8005716 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2210      	movs	r2, #16
 800564a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800564c:	e049      	b.n	80056e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d045      	beq.n	80056e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fc fa2b 	bl	8001ab0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_IsErrorOccurred+0x54>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d13a      	bne.n	80056e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005676:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800567e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800568a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568e:	d121      	bne.n	80056d4 <I2C_IsErrorOccurred+0xbc>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005696:	d01d      	beq.n	80056d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005698:	7cfb      	ldrb	r3, [r7, #19]
 800569a:	2b20      	cmp	r3, #32
 800569c:	d01a      	beq.n	80056d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056ae:	f7fc f9ff 	bl	8001ab0 <HAL_GetTick>
 80056b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056b4:	e00e      	b.n	80056d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056b6:	f7fc f9fb 	bl	8001ab0 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b19      	cmp	r3, #25
 80056c2:	d907      	bls.n	80056d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	f043 0320 	orr.w	r3, r3, #32
 80056ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80056d2:	e006      	b.n	80056e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d1e9      	bne.n	80056b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	d003      	beq.n	80056f8 <I2C_IsErrorOccurred+0xe0>
 80056f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0aa      	beq.n	800564e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d103      	bne.n	8005708 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2220      	movs	r2, #32
 8005706:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f043 0308 	orr.w	r3, r3, #8
 8005750:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800575a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f043 0302 	orr.w	r3, r3, #2
 8005772:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01c      	beq.n	80057c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff fdaf 	bl	80052f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <I2C_IsErrorOccurred+0x1bc>)
 800579e:	400b      	ands	r3, r1
 80057a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80057c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3728      	adds	r7, #40	@ 0x28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fe00e800 	.word	0xfe00e800

080057d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	4613      	mov	r3, r2
 80057e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f0:	7a7b      	ldrb	r3, [r7, #9]
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	4313      	orrs	r3, r2
 8005802:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005806:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	0d5b      	lsrs	r3, r3, #21
 8005812:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005816:	4b08      	ldr	r3, [pc, #32]	@ (8005838 <I2C_TransferConfig+0x60>)
 8005818:	430b      	orrs	r3, r1
 800581a:	43db      	mvns	r3, r3
 800581c:	ea02 0103 	and.w	r1, r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	03ff63ff 	.word	0x03ff63ff

0800583c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	d138      	bne.n	80058c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800585c:	2302      	movs	r3, #2
 800585e:	e032      	b.n	80058c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2224      	movs	r2, #36	@ 0x24
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800588e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d139      	bne.n	800595c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058f2:	2302      	movs	r3, #2
 80058f4:	e033      	b.n	800595e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2224      	movs	r2, #36	@ 0x24
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af02      	add	r7, sp, #8
 8005970:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0fe      	b.n	8005b7a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fb ff5f 	bl	8001854 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f005 fbcc 	bl	800b140 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	7c1a      	ldrb	r2, [r3, #16]
 80059b0:	f88d 2000 	strb.w	r2, [sp]
 80059b4:	3304      	adds	r3, #4
 80059b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059b8:	f005 fb50 	bl	800b05c <USB_CoreInit>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0d5      	b.n	8005b7a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2100      	movs	r1, #0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f005 fbc4 	bl	800b162 <USB_SetCurrentMode>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0c6      	b.n	8005b7a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]
 80059f0:	e04a      	b.n	8005a88 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059f2:	7bfa      	ldrb	r2, [r7, #15]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	3315      	adds	r3, #21
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	3314      	adds	r3, #20
 8005a16:	7bfa      	ldrb	r2, [r7, #15]
 8005a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	b298      	uxth	r0, r3
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	332e      	adds	r3, #46	@ 0x2e
 8005a2e:	4602      	mov	r2, r0
 8005a30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3318      	adds	r3, #24
 8005a42:	2200      	movs	r2, #0
 8005a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	331c      	adds	r3, #28
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3320      	adds	r3, #32
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a6e:	7bfa      	ldrb	r2, [r7, #15]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3324      	adds	r3, #36	@ 0x24
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	3301      	adds	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	791b      	ldrb	r3, [r3, #4]
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3af      	bcc.n	80059f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e044      	b.n	8005b22 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ac4:	7bfa      	ldrb	r2, [r7, #15]
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b06:	7bfa      	ldrb	r2, [r7, #15]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	791b      	ldrb	r3, [r3, #4]
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d3b5      	bcc.n	8005a98 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7c1a      	ldrb	r2, [r3, #16]
 8005b34:	f88d 2000 	strb.w	r2, [sp]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b3c:	f005 fb5e 	bl	800b1fc <USB_DevInit>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e013      	b.n	8005b7a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	7b1b      	ldrb	r3, [r3, #12]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d102      	bne.n	8005b6e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f80b 	bl	8005b84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f005 fd19 	bl	800b5aa <USB_DevDisconnect>

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	10000003 	.word	0x10000003

08005bcc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005bd4:	4b19      	ldr	r3, [pc, #100]	@ (8005c3c <HAL_PWREx_ConfigSupply+0x70>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d00a      	beq.n	8005bf6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005be0:	4b16      	ldr	r3, [pc, #88]	@ (8005c3c <HAL_PWREx_ConfigSupply+0x70>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d001      	beq.n	8005bf2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e01f      	b.n	8005c32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e01d      	b.n	8005c32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005bf6:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <HAL_PWREx_ConfigSupply+0x70>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f023 0207 	bic.w	r2, r3, #7
 8005bfe:	490f      	ldr	r1, [pc, #60]	@ (8005c3c <HAL_PWREx_ConfigSupply+0x70>)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c06:	f7fb ff53 	bl	8001ab0 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c0c:	e009      	b.n	8005c22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c0e:	f7fb ff4f 	bl	8001ab0 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c1c:	d901      	bls.n	8005c22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e007      	b.n	8005c32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c22:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_PWREx_ConfigSupply+0x70>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c2e:	d1ee      	bne.n	8005c0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	58024800 	.word	0x58024800

08005c40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005c44:	4b05      	ldr	r3, [pc, #20]	@ (8005c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a04      	ldr	r2, [pc, #16]	@ (8005c5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005c4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c4e:	60d3      	str	r3, [r2, #12]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	58024800 	.word	0x58024800

08005c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08c      	sub	sp, #48	@ 0x30
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	f000 bc48 	b.w	8006504 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8088 	beq.w	8005d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c82:	4b99      	ldr	r3, [pc, #612]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c8c:	4b96      	ldr	r3, [pc, #600]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d007      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x48>
 8005c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9a:	2b18      	cmp	r3, #24
 8005c9c:	d111      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x62>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d10c      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d06d      	beq.n	8005d90 <HAL_RCC_OscConfig+0x130>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d169      	bne.n	8005d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	f000 bc21 	b.w	8006504 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x7a>
 8005ccc:	4b86      	ldr	r3, [pc, #536]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a85      	ldr	r2, [pc, #532]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e02e      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x9c>
 8005ce2:	4b81      	ldr	r3, [pc, #516]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a80      	ldr	r2, [pc, #512]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b7e      	ldr	r3, [pc, #504]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d04:	d10c      	bne.n	8005d20 <HAL_RCC_OscConfig+0xc0>
 8005d06:	4b78      	ldr	r3, [pc, #480]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a77      	ldr	r2, [pc, #476]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b75      	ldr	r3, [pc, #468]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a74      	ldr	r2, [pc, #464]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e00b      	b.n	8005d38 <HAL_RCC_OscConfig+0xd8>
 8005d20:	4b71      	ldr	r3, [pc, #452]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a70      	ldr	r2, [pc, #448]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6d      	ldr	r2, [pc, #436]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fb feb6 	bl	8001ab0 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d48:	f7fb feb2 	bl	8001ab0 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b64      	cmp	r3, #100	@ 0x64
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e3d4      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d5a:	4b63      	ldr	r3, [pc, #396]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0xe8>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fb fea2 	bl	8001ab0 <HAL_GetTick>
 8005d6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fb fe9e 	bl	8001ab0 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	@ 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e3c0      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005d82:	4b59      	ldr	r3, [pc, #356]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x110>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 80ca 	beq.w	8005f34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da0:	4b51      	ldr	r3, [pc, #324]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005da8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005daa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x166>
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	2b18      	cmp	r3, #24
 8005dba:	d156      	bne.n	8005e6a <HAL_RCC_OscConfig+0x20a>
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d151      	bne.n	8005e6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dc6:	4b48      	ldr	r3, [pc, #288]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_RCC_OscConfig+0x17e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e392      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dde:	4b42      	ldr	r3, [pc, #264]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 0219 	bic.w	r2, r3, #25
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	493f      	ldr	r1, [pc, #252]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fb fe5e 	bl	8001ab0 <HAL_GetTick>
 8005df4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fb fe5a 	bl	8001ab0 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e37c      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e0a:	4b37      	ldr	r3, [pc, #220]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e16:	f7fb fe7b 	bl	8001b10 <HAL_GetREVID>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d817      	bhi.n	8005e54 <HAL_RCC_OscConfig+0x1f4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d108      	bne.n	8005e3e <HAL_RCC_OscConfig+0x1de>
 8005e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e34:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e3c:	e07a      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	031b      	lsls	r3, r3, #12
 8005e4c:	4926      	ldr	r1, [pc, #152]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e52:	e06f      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e54:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	061b      	lsls	r3, r3, #24
 8005e62:	4921      	ldr	r1, [pc, #132]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e68:	e064      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d047      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 0219 	bic.w	r2, r3, #25
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	491a      	ldr	r1, [pc, #104]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fb fe14 	bl	8001ab0 <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e8c:	f7fb fe10 	bl	8001ab0 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e332      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eaa:	f7fb fe31 	bl	8001b10 <HAL_GetREVID>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d819      	bhi.n	8005eec <HAL_RCC_OscConfig+0x28c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d108      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x272>
 8005ec0:	4b09      	ldr	r3, [pc, #36]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ec8:	4a07      	ldr	r2, [pc, #28]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ece:	6053      	str	r3, [r2, #4]
 8005ed0:	e030      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
 8005ed2:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	031b      	lsls	r3, r3, #12
 8005ee0:	4901      	ldr	r1, [pc, #4]	@ (8005ee8 <HAL_RCC_OscConfig+0x288>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	604b      	str	r3, [r1, #4]
 8005ee6:	e025      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
 8005ee8:	58024400 	.word	0x58024400
 8005eec:	4b9a      	ldr	r3, [pc, #616]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	4997      	ldr	r1, [pc, #604]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]
 8005f00:	e018      	b.n	8005f34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f02:	4b95      	ldr	r3, [pc, #596]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a94      	ldr	r2, [pc, #592]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fb fdcf 	bl	8001ab0 <HAL_GetTick>
 8005f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fb fdcb 	bl	8001ab0 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e2ed      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f28:	4b8b      	ldr	r3, [pc, #556]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0310 	and.w	r3, r3, #16
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80a9 	beq.w	8006094 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f42:	4b85      	ldr	r3, [pc, #532]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f4c:	4b82      	ldr	r3, [pc, #520]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d007      	beq.n	8005f68 <HAL_RCC_OscConfig+0x308>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b18      	cmp	r3, #24
 8005f5c:	d13a      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x374>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d135      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f68:	4b7b      	ldr	r3, [pc, #492]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_OscConfig+0x320>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	2b80      	cmp	r3, #128	@ 0x80
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e2c1      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f80:	f7fb fdc6 	bl	8001b10 <HAL_GetREVID>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d817      	bhi.n	8005fbe <HAL_RCC_OscConfig+0x35e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x348>
 8005f96:	4b70      	ldr	r3, [pc, #448]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fa4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fa6:	e075      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	069b      	lsls	r3, r3, #26
 8005fb6:	4968      	ldr	r1, [pc, #416]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fbc:	e06a      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fbe:	4b66      	ldr	r3, [pc, #408]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	4962      	ldr	r1, [pc, #392]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fd2:	e05f      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d042      	beq.n	8006062 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fb fd62 	bl	8001ab0 <HAL_GetTick>
 8005fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ff0:	f7fb fd5e 	bl	8001ab0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e280      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006002:	4b55      	ldr	r3, [pc, #340]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800600e:	f7fb fd7f 	bl	8001b10 <HAL_GetREVID>
 8006012:	4603      	mov	r3, r0
 8006014:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006018:	4293      	cmp	r3, r2
 800601a:	d817      	bhi.n	800604c <HAL_RCC_OscConfig+0x3ec>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	2b20      	cmp	r3, #32
 8006022:	d108      	bne.n	8006036 <HAL_RCC_OscConfig+0x3d6>
 8006024:	4b4c      	ldr	r3, [pc, #304]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800602c:	4a4a      	ldr	r2, [pc, #296]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 800602e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006032:	6053      	str	r3, [r2, #4]
 8006034:	e02e      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
 8006036:	4b48      	ldr	r3, [pc, #288]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	069b      	lsls	r3, r3, #26
 8006044:	4944      	ldr	r1, [pc, #272]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006046:	4313      	orrs	r3, r2
 8006048:	604b      	str	r3, [r1, #4]
 800604a:	e023      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
 800604c:	4b42      	ldr	r3, [pc, #264]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	061b      	lsls	r3, r3, #24
 800605a:	493f      	ldr	r1, [pc, #252]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 800605c:	4313      	orrs	r3, r2
 800605e:	60cb      	str	r3, [r1, #12]
 8006060:	e018      	b.n	8006094 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006062:	4b3d      	ldr	r3, [pc, #244]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3c      	ldr	r2, [pc, #240]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606e:	f7fb fd1f 	bl	8001ab0 <HAL_GetTick>
 8006072:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006076:	f7fb fd1b 	bl	8001ab0 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e23d      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006088:	4b33      	ldr	r3, [pc, #204]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d036      	beq.n	800610e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d019      	beq.n	80060dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b4:	f7fb fcfc 	bl	8001ab0 <HAL_GetTick>
 80060b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060bc:	f7fb fcf8 	bl	8001ab0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e21a      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060ce:	4b22      	ldr	r3, [pc, #136]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x45c>
 80060da:	e018      	b.n	800610e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 80060de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e8:	f7fb fce2 	bl	8001ab0 <HAL_GetTick>
 80060ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060f0:	f7fb fcde 	bl	8001ab0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e200      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006102:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d039      	beq.n	800618e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d01c      	beq.n	800615c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a0c      	ldr	r2, [pc, #48]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 8006128:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800612c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800612e:	f7fb fcbf 	bl	8001ab0 <HAL_GetTick>
 8006132:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006136:	f7fb fcbb 	bl	8001ab0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e1dd      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006148:	4b03      	ldr	r3, [pc, #12]	@ (8006158 <HAL_RCC_OscConfig+0x4f8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0f0      	beq.n	8006136 <HAL_RCC_OscConfig+0x4d6>
 8006154:	e01b      	b.n	800618e <HAL_RCC_OscConfig+0x52e>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800615c:	4b9b      	ldr	r3, [pc, #620]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a9a      	ldr	r2, [pc, #616]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006166:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006168:	f7fb fca2 	bl	8001ab0 <HAL_GetTick>
 800616c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006170:	f7fb fc9e 	bl	8001ab0 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e1c0      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006182:	4b92      	ldr	r3, [pc, #584]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8081 	beq.w	800629e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800619c:	4b8c      	ldr	r3, [pc, #560]	@ (80063d0 <HAL_RCC_OscConfig+0x770>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a8b      	ldr	r2, [pc, #556]	@ (80063d0 <HAL_RCC_OscConfig+0x770>)
 80061a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061a8:	f7fb fc82 	bl	8001ab0 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b0:	f7fb fc7e 	bl	8001ab0 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	@ 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e1a0      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061c2:	4b83      	ldr	r3, [pc, #524]	@ (80063d0 <HAL_RCC_OscConfig+0x770>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d106      	bne.n	80061e4 <HAL_RCC_OscConfig+0x584>
 80061d6:	4b7d      	ldr	r3, [pc, #500]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061da:	4a7c      	ldr	r2, [pc, #496]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80061e2:	e02d      	b.n	8006240 <HAL_RCC_OscConfig+0x5e0>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10c      	bne.n	8006206 <HAL_RCC_OscConfig+0x5a6>
 80061ec:	4b77      	ldr	r3, [pc, #476]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f0:	4a76      	ldr	r2, [pc, #472]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061f2:	f023 0301 	bic.w	r3, r3, #1
 80061f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061f8:	4b74      	ldr	r3, [pc, #464]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fc:	4a73      	ldr	r2, [pc, #460]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80061fe:	f023 0304 	bic.w	r3, r3, #4
 8006202:	6713      	str	r3, [r2, #112]	@ 0x70
 8006204:	e01c      	b.n	8006240 <HAL_RCC_OscConfig+0x5e0>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b05      	cmp	r3, #5
 800620c:	d10c      	bne.n	8006228 <HAL_RCC_OscConfig+0x5c8>
 800620e:	4b6f      	ldr	r3, [pc, #444]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006212:	4a6e      	ldr	r2, [pc, #440]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006214:	f043 0304 	orr.w	r3, r3, #4
 8006218:	6713      	str	r3, [r2, #112]	@ 0x70
 800621a:	4b6c      	ldr	r3, [pc, #432]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	4a6b      	ldr	r2, [pc, #428]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70
 8006226:	e00b      	b.n	8006240 <HAL_RCC_OscConfig+0x5e0>
 8006228:	4b68      	ldr	r3, [pc, #416]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800622a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622c:	4a67      	ldr	r2, [pc, #412]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	6713      	str	r3, [r2, #112]	@ 0x70
 8006234:	4b65      	ldr	r3, [pc, #404]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006238:	4a64      	ldr	r2, [pc, #400]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800623a:	f023 0304 	bic.w	r3, r3, #4
 800623e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d015      	beq.n	8006274 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006248:	f7fb fc32 	bl	8001ab0 <HAL_GetTick>
 800624c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800624e:	e00a      	b.n	8006266 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006250:	f7fb fc2e 	bl	8001ab0 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800625e:	4293      	cmp	r3, r2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e14e      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006266:	4b59      	ldr	r3, [pc, #356]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0ee      	beq.n	8006250 <HAL_RCC_OscConfig+0x5f0>
 8006272:	e014      	b.n	800629e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006274:	f7fb fc1c 	bl	8001ab0 <HAL_GetTick>
 8006278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800627a:	e00a      	b.n	8006292 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627c:	f7fb fc18 	bl	8001ab0 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e138      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006292:	4b4e      	ldr	r3, [pc, #312]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1ee      	bne.n	800627c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 812d 	beq.w	8006502 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062a8:	4b48      	ldr	r3, [pc, #288]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062b0:	2b18      	cmp	r3, #24
 80062b2:	f000 80bd 	beq.w	8006430 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	f040 809e 	bne.w	80063fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c0:	4b42      	ldr	r3, [pc, #264]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a41      	ldr	r2, [pc, #260]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80062c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fb fbf0 	bl	8001ab0 <HAL_GetTick>
 80062d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fb fbec 	bl	8001ab0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e10e      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062e6:	4b39      	ldr	r3, [pc, #228]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f2:	4b36      	ldr	r3, [pc, #216]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80062f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062f6:	4b37      	ldr	r3, [pc, #220]	@ (80063d4 <HAL_RCC_OscConfig+0x774>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006302:	0112      	lsls	r2, r2, #4
 8006304:	430a      	orrs	r2, r1
 8006306:	4931      	ldr	r1, [pc, #196]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006308:	4313      	orrs	r3, r2
 800630a:	628b      	str	r3, [r1, #40]	@ 0x28
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006310:	3b01      	subs	r3, #1
 8006312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631a:	3b01      	subs	r3, #1
 800631c:	025b      	lsls	r3, r3, #9
 800631e:	b29b      	uxth	r3, r3
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	3b01      	subs	r3, #1
 8006328:	041b      	lsls	r3, r3, #16
 800632a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	3b01      	subs	r3, #1
 8006336:	061b      	lsls	r3, r3, #24
 8006338:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800633c:	4923      	ldr	r1, [pc, #140]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800633e:	4313      	orrs	r3, r2
 8006340:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006342:	4b22      	ldr	r3, [pc, #136]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	4a21      	ldr	r2, [pc, #132]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800634e:	4b1f      	ldr	r3, [pc, #124]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006352:	4b21      	ldr	r3, [pc, #132]	@ (80063d8 <HAL_RCC_OscConfig+0x778>)
 8006354:	4013      	ands	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800635a:	00d2      	lsls	r2, r2, #3
 800635c:	491b      	ldr	r1, [pc, #108]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006362:	4b1a      	ldr	r3, [pc, #104]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	f023 020c 	bic.w	r2, r3, #12
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	4917      	ldr	r1, [pc, #92]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006370:	4313      	orrs	r3, r2
 8006372:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006374:	4b15      	ldr	r3, [pc, #84]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	f023 0202 	bic.w	r2, r3, #2
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006380:	4912      	ldr	r1, [pc, #72]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006382:	4313      	orrs	r3, r2
 8006384:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006386:	4b11      	ldr	r3, [pc, #68]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638a:	4a10      	ldr	r2, [pc, #64]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006392:	4b0e      	ldr	r3, [pc, #56]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	4a0d      	ldr	r2, [pc, #52]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 8006398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800639c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800639e:	4b0b      	ldr	r3, [pc, #44]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a2:	4a0a      	ldr	r2, [pc, #40]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80063aa:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	4a07      	ldr	r2, [pc, #28]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063b0:	f043 0301 	orr.w	r3, r3, #1
 80063b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a04      	ldr	r2, [pc, #16]	@ (80063cc <HAL_RCC_OscConfig+0x76c>)
 80063bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fb fb75 	bl	8001ab0 <HAL_GetTick>
 80063c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063c8:	e011      	b.n	80063ee <HAL_RCC_OscConfig+0x78e>
 80063ca:	bf00      	nop
 80063cc:	58024400 	.word	0x58024400
 80063d0:	58024800 	.word	0x58024800
 80063d4:	fffffc0c 	.word	0xfffffc0c
 80063d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fb fb68 	bl	8001ab0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e08a      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063ee:	4b47      	ldr	r3, [pc, #284]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x77c>
 80063fa:	e082      	b.n	8006502 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fc:	4b43      	ldr	r3, [pc, #268]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a42      	ldr	r2, [pc, #264]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 8006402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb fb52 	bl	8001ab0 <HAL_GetTick>
 800640c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006410:	f7fb fb4e 	bl	8001ab0 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e070      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006422:	4b3a      	ldr	r3, [pc, #232]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f0      	bne.n	8006410 <HAL_RCC_OscConfig+0x7b0>
 800642e:	e068      	b.n	8006502 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006430:	4b36      	ldr	r3, [pc, #216]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006436:	4b35      	ldr	r3, [pc, #212]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	2b01      	cmp	r3, #1
 8006442:	d031      	beq.n	80064a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f003 0203 	and.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d12a      	bne.n	80064a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	091b      	lsrs	r3, r3, #4
 8006456:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d122      	bne.n	80064a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d11a      	bne.n	80064a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	0a5b      	lsrs	r3, r3, #9
 8006476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d111      	bne.n	80064a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	0c1b      	lsrs	r3, r3, #16
 8006488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006492:	429a      	cmp	r2, r3
 8006494:	d108      	bne.n	80064a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	0e1b      	lsrs	r3, r3, #24
 800649a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e02b      	b.n	8006504 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80064ac:	4b17      	ldr	r3, [pc, #92]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d01f      	beq.n	8006502 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80064c2:	4b12      	ldr	r3, [pc, #72]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a11      	ldr	r2, [pc, #68]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ce:	f7fb faef 	bl	8001ab0 <HAL_GetTick>
 80064d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80064d4:	bf00      	nop
 80064d6:	f7fb faeb 	bl	8001ab0 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064de:	4293      	cmp	r3, r2
 80064e0:	d0f9      	beq.n	80064d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006510 <HAL_RCC_OscConfig+0x8b0>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80064ee:	00d2      	lsls	r2, r2, #3
 80064f0:	4906      	ldr	r1, [pc, #24]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80064f6:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	4a04      	ldr	r2, [pc, #16]	@ (800650c <HAL_RCC_OscConfig+0x8ac>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3730      	adds	r7, #48	@ 0x30
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	58024400 	.word	0x58024400
 8006510:	ffff0007 	.word	0xffff0007

08006514 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e19c      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006528:	4b8a      	ldr	r3, [pc, #552]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d910      	bls.n	8006558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006536:	4b87      	ldr	r3, [pc, #540]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 020f 	bic.w	r2, r3, #15
 800653e:	4985      	ldr	r1, [pc, #532]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006546:	4b83      	ldr	r3, [pc, #524]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d001      	beq.n	8006558 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e184      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	4b7b      	ldr	r3, [pc, #492]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006570:	429a      	cmp	r2, r3
 8006572:	d908      	bls.n	8006586 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006574:	4b78      	ldr	r3, [pc, #480]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4975      	ldr	r1, [pc, #468]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006582:	4313      	orrs	r3, r2
 8006584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	4b70      	ldr	r3, [pc, #448]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800659e:	429a      	cmp	r2, r3
 80065a0:	d908      	bls.n	80065b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	496a      	ldr	r1, [pc, #424]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d010      	beq.n	80065e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	4b64      	ldr	r3, [pc, #400]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d908      	bls.n	80065e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d0:	4b61      	ldr	r3, [pc, #388]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	495e      	ldr	r1, [pc, #376]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69da      	ldr	r2, [r3, #28]
 80065f2:	4b59      	ldr	r3, [pc, #356]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d908      	bls.n	8006610 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80065fe:	4b56      	ldr	r3, [pc, #344]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	4953      	ldr	r1, [pc, #332]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800660c:	4313      	orrs	r3, r2
 800660e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d010      	beq.n	800663e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	4b4d      	ldr	r3, [pc, #308]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	429a      	cmp	r2, r3
 800662a:	d908      	bls.n	800663e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800662c:	4b4a      	ldr	r3, [pc, #296]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f023 020f 	bic.w	r2, r3, #15
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4947      	ldr	r1, [pc, #284]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800663a:	4313      	orrs	r3, r2
 800663c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d055      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800664a:	4b43      	ldr	r3, [pc, #268]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	4940      	ldr	r1, [pc, #256]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006658:	4313      	orrs	r3, r2
 800665a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d107      	bne.n	8006674 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006664:	4b3c      	ldr	r3, [pc, #240]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d121      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0f6      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d107      	bne.n	800668c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800667c:	4b36      	ldr	r3, [pc, #216]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d115      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0ea      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d107      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006694:	4b30      	ldr	r3, [pc, #192]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0de      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0d6      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b4:	4b28      	ldr	r3, [pc, #160]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f023 0207 	bic.w	r2, r3, #7
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4925      	ldr	r1, [pc, #148]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c6:	f7fb f9f3 	bl	8001ab0 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ce:	f7fb f9ef 	bl	8001ab0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0be      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e4:	4b1c      	ldr	r3, [pc, #112]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d1eb      	bne.n	80066ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	4b14      	ldr	r3, [pc, #80]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	429a      	cmp	r2, r3
 8006710:	d208      	bcs.n	8006724 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006712:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f023 020f 	bic.w	r2, r3, #15
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	490e      	ldr	r1, [pc, #56]	@ (8006758 <HAL_RCC_ClockConfig+0x244>)
 8006720:	4313      	orrs	r3, r2
 8006722:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006724:	4b0b      	ldr	r3, [pc, #44]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d214      	bcs.n	800675c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006732:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f023 020f 	bic.w	r2, r3, #15
 800673a:	4906      	ldr	r1, [pc, #24]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	4313      	orrs	r3, r2
 8006740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <HAL_RCC_ClockConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e086      	b.n	8006862 <HAL_RCC_ClockConfig+0x34e>
 8006754:	52002000 	.word	0x52002000
 8006758:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	4b3f      	ldr	r3, [pc, #252]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006774:	429a      	cmp	r2, r3
 8006776:	d208      	bcs.n	800678a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006778:	4b3c      	ldr	r3, [pc, #240]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	4939      	ldr	r1, [pc, #228]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 8006786:	4313      	orrs	r3, r2
 8006788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695a      	ldr	r2, [r3, #20]
 800679a:	4b34      	ldr	r3, [pc, #208]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d208      	bcs.n	80067b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067a6:	4b31      	ldr	r3, [pc, #196]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	492e      	ldr	r1, [pc, #184]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d010      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	4b28      	ldr	r3, [pc, #160]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d208      	bcs.n	80067e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067d4:	4b25      	ldr	r3, [pc, #148]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	4922      	ldr	r1, [pc, #136]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067fe:	429a      	cmp	r2, r3
 8006800:	d208      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006802:	4b1a      	ldr	r3, [pc, #104]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	4917      	ldr	r1, [pc, #92]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 8006810:	4313      	orrs	r3, r2
 8006812:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006814:	f000 f834 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 8006818:	4602      	mov	r2, r0
 800681a:	4b14      	ldr	r3, [pc, #80]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	4912      	ldr	r1, [pc, #72]	@ (8006870 <HAL_RCC_ClockConfig+0x35c>)
 8006826:	5ccb      	ldrb	r3, [r1, r3]
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006832:	4b0e      	ldr	r3, [pc, #56]	@ (800686c <HAL_RCC_ClockConfig+0x358>)
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	4a0d      	ldr	r2, [pc, #52]	@ (8006870 <HAL_RCC_ClockConfig+0x35c>)
 800683c:	5cd3      	ldrb	r3, [r2, r3]
 800683e:	f003 031f 	and.w	r3, r3, #31
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	4a0a      	ldr	r2, [pc, #40]	@ (8006874 <HAL_RCC_ClockConfig+0x360>)
 800684a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800684c:	4a0a      	ldr	r2, [pc, #40]	@ (8006878 <HAL_RCC_ClockConfig+0x364>)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006852:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <HAL_RCC_ClockConfig+0x368>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f7fb f8e0 	bl	8001a1c <HAL_InitTick>
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
 8006870:	08017798 	.word	0x08017798
 8006874:	24000004 	.word	0x24000004
 8006878:	24000000 	.word	0x24000000
 800687c:	24000008 	.word	0x24000008

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	b480      	push	{r7}
 8006882:	b089      	sub	sp, #36	@ 0x24
 8006884:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006886:	4bb3      	ldr	r3, [pc, #716]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800688e:	2b18      	cmp	r3, #24
 8006890:	f200 8155 	bhi.w	8006b3e <HAL_RCC_GetSysClockFreq+0x2be>
 8006894:	a201      	add	r2, pc, #4	@ (adr r2, 800689c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	08006901 	.word	0x08006901
 80068a0:	08006b3f 	.word	0x08006b3f
 80068a4:	08006b3f 	.word	0x08006b3f
 80068a8:	08006b3f 	.word	0x08006b3f
 80068ac:	08006b3f 	.word	0x08006b3f
 80068b0:	08006b3f 	.word	0x08006b3f
 80068b4:	08006b3f 	.word	0x08006b3f
 80068b8:	08006b3f 	.word	0x08006b3f
 80068bc:	08006927 	.word	0x08006927
 80068c0:	08006b3f 	.word	0x08006b3f
 80068c4:	08006b3f 	.word	0x08006b3f
 80068c8:	08006b3f 	.word	0x08006b3f
 80068cc:	08006b3f 	.word	0x08006b3f
 80068d0:	08006b3f 	.word	0x08006b3f
 80068d4:	08006b3f 	.word	0x08006b3f
 80068d8:	08006b3f 	.word	0x08006b3f
 80068dc:	0800692d 	.word	0x0800692d
 80068e0:	08006b3f 	.word	0x08006b3f
 80068e4:	08006b3f 	.word	0x08006b3f
 80068e8:	08006b3f 	.word	0x08006b3f
 80068ec:	08006b3f 	.word	0x08006b3f
 80068f0:	08006b3f 	.word	0x08006b3f
 80068f4:	08006b3f 	.word	0x08006b3f
 80068f8:	08006b3f 	.word	0x08006b3f
 80068fc:	08006933 	.word	0x08006933
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006900:	4b94      	ldr	r3, [pc, #592]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d009      	beq.n	8006920 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800690c:	4b91      	ldr	r3, [pc, #580]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	08db      	lsrs	r3, r3, #3
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	4a90      	ldr	r2, [pc, #576]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800691e:	e111      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006920:	4b8d      	ldr	r3, [pc, #564]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006922:	61bb      	str	r3, [r7, #24]
      break;
 8006924:	e10e      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006926:	4b8d      	ldr	r3, [pc, #564]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006928:	61bb      	str	r3, [r7, #24]
      break;
 800692a:	e10b      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800692c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800692e:	61bb      	str	r3, [r7, #24]
      break;
 8006930:	e108      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006932:	4b88      	ldr	r3, [pc, #544]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800693c:	4b85      	ldr	r3, [pc, #532]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006946:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006948:	4b82      	ldr	r3, [pc, #520]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800694a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006952:	4b80      	ldr	r3, [pc, #512]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 80e1 	beq.w	8006b38 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b02      	cmp	r3, #2
 800697a:	f000 8083 	beq.w	8006a84 <HAL_RCC_GetSysClockFreq+0x204>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b02      	cmp	r3, #2
 8006982:	f200 80a1 	bhi.w	8006ac8 <HAL_RCC_GetSysClockFreq+0x248>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0x114>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d056      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006992:	e099      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006994:	4b6f      	ldr	r3, [pc, #444]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02d      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	4a6b      	ldr	r2, [pc, #428]	@ (8006b58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ca:	4b62      	ldr	r3, [pc, #392]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a02 	vldr	s12, [r7, #8]
 80069de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80069fa:	e087      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006b68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0e:	4b51      	ldr	r3, [pc, #324]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a3e:	e065      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a52:	4b40      	ldr	r3, [pc, #256]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a82:	e043      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006b70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b2f      	ldr	r3, [pc, #188]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aaa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ac6:	e021      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b1e      	ldr	r3, [pc, #120]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006b64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b0c:	4b11      	ldr	r3, [pc, #68]	@ (8006b54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	0a5b      	lsrs	r3, r3, #9
 8006b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b16:	3301      	adds	r3, #1
 8006b18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b30:	ee17 3a90 	vmov	r3, s15
 8006b34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006b36:	e005      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
      break;
 8006b3c:	e002      	b.n	8006b44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006b3e:	4b07      	ldr	r3, [pc, #28]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b40:	61bb      	str	r3, [r7, #24]
      break;
 8006b42:	bf00      	nop
  }

  return sysclockfreq;
 8006b44:	69bb      	ldr	r3, [r7, #24]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3724      	adds	r7, #36	@ 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
 8006b58:	03d09000 	.word	0x03d09000
 8006b5c:	003d0900 	.word	0x003d0900
 8006b60:	007a1200 	.word	0x007a1200
 8006b64:	46000000 	.word	0x46000000
 8006b68:	4c742400 	.word	0x4c742400
 8006b6c:	4a742400 	.word	0x4a742400
 8006b70:	4af42400 	.word	0x4af42400

08006b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b7a:	f7ff fe81 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b10      	ldr	r3, [pc, #64]	@ (8006bc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	0a1b      	lsrs	r3, r3, #8
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	490f      	ldr	r1, [pc, #60]	@ (8006bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b8c:	5ccb      	ldrb	r3, [r1, r3]
 8006b8e:	f003 031f 	and.w	r3, r3, #31
 8006b92:	fa22 f303 	lsr.w	r3, r2, r3
 8006b96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b98:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	4a09      	ldr	r2, [pc, #36]	@ (8006bc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ba2:	5cd3      	ldrb	r3, [r2, r3]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bae:	4a07      	ldr	r2, [pc, #28]	@ (8006bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8006bb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bb2:	4a07      	ldr	r2, [pc, #28]	@ (8006bd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006bb8:	4b04      	ldr	r3, [pc, #16]	@ (8006bcc <HAL_RCC_GetHCLKFreq+0x58>)
 8006bba:	681b      	ldr	r3, [r3, #0]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	08017798 	.word	0x08017798
 8006bcc:	24000004 	.word	0x24000004
 8006bd0:	24000000 	.word	0x24000000

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bd8:	f7ff ffcc 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	091b      	lsrs	r3, r3, #4
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4904      	ldr	r1, [pc, #16]	@ (8006bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	f003 031f 	and.w	r3, r3, #31
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	58024400 	.word	0x58024400
 8006bfc:	08017798 	.word	0x08017798

08006c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c04:	f7ff ffb6 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b06      	ldr	r3, [pc, #24]	@ (8006c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	4904      	ldr	r1, [pc, #16]	@ (8006c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	58024400 	.word	0x58024400
 8006c28:	08017798 	.word	0x08017798

08006c2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c30:	b0ca      	sub	sp, #296	@ 0x128
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006c50:	2500      	movs	r5, #0
 8006c52:	ea54 0305 	orrs.w	r3, r4, r5
 8006c56:	d049      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c62:	d02f      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006c64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c68:	d828      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c6e:	d01a      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006c70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c74:	d822      	bhi.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c7e:	d007      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c80:	e01c      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4bb8      	ldr	r3, [pc, #736]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4ab7      	ldr	r2, [pc, #732]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c8e:	e01a      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c94:	3308      	adds	r3, #8
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 fc8f 	bl	80085bc <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ca4:	e00f      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006caa:	3328      	adds	r3, #40	@ 0x28
 8006cac:	2102      	movs	r1, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fd36 	bl	8008720 <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006cba:	e004      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10a      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cce:	4ba5      	ldr	r3, [pc, #660]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cdc:	4aa1      	ldr	r2, [pc, #644]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ce2:	e003      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	ea58 0309 	orrs.w	r3, r8, r9
 8006d00:	d047      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d82a      	bhi.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d12:	bf00      	nop
 8006d14:	08006d29 	.word	0x08006d29
 8006d18:	08006d37 	.word	0x08006d37
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d6b 	.word	0x08006d6b
 8006d24:	08006d6b 	.word	0x08006d6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d28:	4b8e      	ldr	r3, [pc, #568]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	4a8d      	ldr	r2, [pc, #564]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d34:	e01a      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 fc3c 	bl	80085bc <RCCEx_PLL2_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d4a:	e00f      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d50:	3328      	adds	r3, #40	@ 0x28
 8006d52:	2100      	movs	r1, #0
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 fce3 	bl	8008720 <RCCEx_PLL3_Config>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d60:	e004      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d68:	e000      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d74:	4b7b      	ldr	r3, [pc, #492]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d78:	f023 0107 	bic.w	r1, r3, #7
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d82:	4a78      	ldr	r2, [pc, #480]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d88:	e003      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006d9e:	f04f 0b00 	mov.w	fp, #0
 8006da2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006da6:	d04c      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db2:	d030      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db8:	d829      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dbc:	d02d      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006dbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dc0:	d825      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d018      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006dc6:	2b80      	cmp	r3, #128	@ 0x80
 8006dc8:	d821      	bhi.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006dce:	2b40      	cmp	r3, #64	@ 0x40
 8006dd0:	d007      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006dd2:	e01c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd4:	4b63      	ldr	r3, [pc, #396]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd8:	4a62      	ldr	r2, [pc, #392]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006de0:	e01c      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de6:	3308      	adds	r3, #8
 8006de8:	2100      	movs	r1, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 fbe6 	bl	80085bc <RCCEx_PLL2_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfc:	3328      	adds	r3, #40	@ 0x28
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 fc8d 	bl	8008720 <RCCEx_PLL3_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e0c:	e006      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e14:	e002      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006e24:	4b4f      	ldr	r3, [pc, #316]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e32:	4a4c      	ldr	r2, [pc, #304]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006e4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006e52:	2300      	movs	r3, #0
 8006e54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006e58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	d053      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e6e:	d035      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006e70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e74:	d82e      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e7a:	d031      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006e80:	d828      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e86:	d01a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006e88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e8c:	d822      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e96:	d007      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006e98:	e01c      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9a:	4b32      	ldr	r3, [pc, #200]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	4a31      	ldr	r2, [pc, #196]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ea6:	e01c      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eac:	3308      	adds	r3, #8
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 fb83 	bl	80085bc <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ebc:	e011      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	3328      	adds	r3, #40	@ 0x28
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fc2a 	bl	8008720 <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eda:	e002      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006eea:	4b1e      	ldr	r3, [pc, #120]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006efa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006efc:	430b      	orrs	r3, r1
 8006efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f12:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006f16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006f20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006f24:	460b      	mov	r3, r1
 8006f26:	4313      	orrs	r3, r2
 8006f28:	d056      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f36:	d038      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f3c:	d831      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f42:	d034      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006f44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006f48:	d82b      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f4e:	d01d      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f54:	d825      	bhi.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d006      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f5e:	d00a      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f60:	e01f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006f62:	bf00      	nop
 8006f64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f68:	4ba2      	ldr	r3, [pc, #648]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6c:	4aa1      	ldr	r2, [pc, #644]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f74:	e01c      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fb1c 	bl	80085bc <RCCEx_PLL2_Config>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f8a:	e011      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f90:	3328      	adds	r3, #40	@ 0x28
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 fbc3 	bl	8008720 <RCCEx_PLL3_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa8:	e002      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10b      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fc8:	4a8a      	ldr	r2, [pc, #552]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006fee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d03a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ffe:	2b30      	cmp	r3, #48	@ 0x30
 8007000:	d01f      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007002:	2b30      	cmp	r3, #48	@ 0x30
 8007004:	d819      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007006:	2b20      	cmp	r3, #32
 8007008:	d00c      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800700a:	2b20      	cmp	r3, #32
 800700c:	d815      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d019      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007012:	2b10      	cmp	r3, #16
 8007014:	d111      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007016:	4b77      	ldr	r3, [pc, #476]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701a:	4a76      	ldr	r2, [pc, #472]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800701c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007022:	e011      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	3308      	adds	r3, #8
 800702a:	2102      	movs	r1, #2
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fac5 	bl	80085bc <RCCEx_PLL2_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007042:	bf00      	nop
 8007044:	e000      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007050:	4b68      	ldr	r3, [pc, #416]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007054:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800705e:	4a65      	ldr	r2, [pc, #404]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007060:	430b      	orrs	r3, r1
 8007062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007064:	e003      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800706e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800707a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800707e:	2300      	movs	r3, #0
 8007080:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007084:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007088:	460b      	mov	r3, r1
 800708a:	4313      	orrs	r3, r2
 800708c:	d051      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800708e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007098:	d035      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800709a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800709e:	d82e      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070a4:	d031      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80070a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070aa:	d828      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b0:	d01a      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80070b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b6:	d822      	bhi.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80070bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070c0:	d007      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80070c2:	e01c      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c4:	4b4b      	ldr	r3, [pc, #300]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	4a4a      	ldr	r2, [pc, #296]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070d0:	e01c      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d6:	3308      	adds	r3, #8
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fa6e 	bl	80085bc <RCCEx_PLL2_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070e6:	e011      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3328      	adds	r3, #40	@ 0x28
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 fb15 	bl	8008720 <RCCEx_PLL3_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80070fc:	e006      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007104:	e002      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800710a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007114:	4b37      	ldr	r3, [pc, #220]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007122:	4a34      	ldr	r2, [pc, #208]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6513      	str	r3, [r2, #80]	@ 0x50
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800713e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007148:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800714c:	460b      	mov	r3, r1
 800714e:	4313      	orrs	r3, r2
 8007150:	d056      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800715c:	d033      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800715e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007162:	d82c      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007168:	d02f      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800716a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800716e:	d826      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007174:	d02b      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800717a:	d820      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800717c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007180:	d012      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007186:	d81a      	bhi.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007188:	2b00      	cmp	r3, #0
 800718a:	d022      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800718c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007190:	d115      	bne.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007196:	3308      	adds	r3, #8
 8007198:	2101      	movs	r1, #1
 800719a:	4618      	mov	r0, r3
 800719c:	f001 fa0e 	bl	80085bc <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071a6:	e015      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	3328      	adds	r3, #40	@ 0x28
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fab5 	bl	8008720 <RCCEx_PLL3_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80071bc:	e00a      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071c6:	bf00      	nop
 80071c8:	e004      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ca:	bf00      	nop
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80071d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10d      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80071dc:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ea:	4a02      	ldr	r2, [pc, #8]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80071f0:	e006      	b.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80071f2:	bf00      	nop
 80071f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800720c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007210:	2300      	movs	r3, #0
 8007212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007216:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800721a:	460b      	mov	r3, r1
 800721c:	4313      	orrs	r3, r2
 800721e:	d055      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800722c:	d033      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800722e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007232:	d82c      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007238:	d02f      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800723e:	d826      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007240:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007244:	d02b      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007246:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800724a:	d820      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800724c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007250:	d012      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007256:	d81a      	bhi.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d022      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800725c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007260:	d115      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007266:	3308      	adds	r3, #8
 8007268:	2101      	movs	r1, #1
 800726a:	4618      	mov	r0, r3
 800726c:	f001 f9a6 	bl	80085bc <RCCEx_PLL2_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007276:	e015      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727c:	3328      	adds	r3, #40	@ 0x28
 800727e:	2101      	movs	r1, #1
 8007280:	4618      	mov	r0, r3
 8007282:	f001 fa4d 	bl	8008720 <RCCEx_PLL3_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800728c:	e00a      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007294:	e006      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007296:	bf00      	nop
 8007298:	e004      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800729a:	bf00      	nop
 800729c:	e002      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80072a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80072ac:	4ba3      	ldr	r3, [pc, #652]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072bc:	4a9f      	ldr	r2, [pc, #636]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072be:	430b      	orrs	r3, r1
 80072c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80072c2:	e003      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80072d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072dc:	2300      	movs	r3, #0
 80072de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072e6:	460b      	mov	r3, r1
 80072e8:	4313      	orrs	r3, r2
 80072ea:	d037      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072f6:	d00e      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80072f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072fc:	d816      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d018      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007306:	d111      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007308:	4b8c      	ldr	r3, [pc, #560]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	4a8b      	ldr	r2, [pc, #556]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800730e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007314:	e00f      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	3308      	adds	r3, #8
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f001 f94c 	bl	80085bc <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800733e:	4b7f      	ldr	r3, [pc, #508]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007342:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734c:	4a7b      	ldr	r2, [pc, #492]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800734e:	430b      	orrs	r3, r1
 8007350:	6513      	str	r3, [r2, #80]	@ 0x50
 8007352:	e003      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800736c:	2300      	movs	r3, #0
 800736e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007372:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007376:	460b      	mov	r3, r1
 8007378:	4313      	orrs	r3, r2
 800737a:	d039      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800737c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007382:	2b03      	cmp	r3, #3
 8007384:	d81c      	bhi.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007386:	a201      	add	r2, pc, #4	@ (adr r2, 800738c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073c9 	.word	0x080073c9
 8007390:	0800739d 	.word	0x0800739d
 8007394:	080073ab 	.word	0x080073ab
 8007398:	080073c9 	.word	0x080073c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800739c:	4b67      	ldr	r3, [pc, #412]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800739e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a0:	4a66      	ldr	r2, [pc, #408]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073a8:	e00f      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ae:	3308      	adds	r3, #8
 80073b0:	2102      	movs	r1, #2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f902 	bl	80085bc <RCCEx_PLL2_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80073be:	e004      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80073c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80073d2:	4b5a      	ldr	r3, [pc, #360]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d6:	f023 0103 	bic.w	r1, r3, #3
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e0:	4a56      	ldr	r2, [pc, #344]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e2:	430b      	orrs	r3, r1
 80073e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073e6:	e003      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80073fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007400:	2300      	movs	r3, #0
 8007402:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007406:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800740a:	460b      	mov	r3, r1
 800740c:	4313      	orrs	r3, r2
 800740e:	f000 809f 	beq.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007412:	4b4b      	ldr	r3, [pc, #300]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4a      	ldr	r2, [pc, #296]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800741c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800741e:	f7fa fb47 	bl	8001ab0 <HAL_GetTick>
 8007422:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007426:	e00b      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007428:	f7fa fb42 	bl	8001ab0 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b64      	cmp	r3, #100	@ 0x64
 8007436:	d903      	bls.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800743e:	e005      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007440:	4b3f      	ldr	r3, [pc, #252]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d0ed      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800744c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007450:	2b00      	cmp	r3, #0
 8007452:	d179      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007454:	4b39      	ldr	r3, [pc, #228]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007456:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007460:	4053      	eors	r3, r2
 8007462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800746a:	4b34      	ldr	r3, [pc, #208]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007472:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007476:	4b31      	ldr	r3, [pc, #196]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747a:	4a30      	ldr	r2, [pc, #192]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007480:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007482:	4b2e      	ldr	r3, [pc, #184]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	4a2d      	ldr	r2, [pc, #180]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800748c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800748e:	4a2b      	ldr	r2, [pc, #172]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007490:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007494:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800749e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a2:	d118      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a4:	f7fa fb04 	bl	8001ab0 <HAL_GetTick>
 80074a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ac:	e00d      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ae:	f7fa faff 	bl	8001ab0 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074b8:	1ad2      	subs	r2, r2, r3
 80074ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074be:	429a      	cmp	r2, r3
 80074c0:	d903      	bls.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80074c8:	e005      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ca:	4b1c      	ldr	r3, [pc, #112]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0eb      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d129      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ee:	d10e      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80074f0:	4b12      	ldr	r3, [pc, #72]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007500:	091a      	lsrs	r2, r3, #4
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007504:	4013      	ands	r3, r2
 8007506:	4a0d      	ldr	r2, [pc, #52]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007508:	430b      	orrs	r3, r1
 800750a:	6113      	str	r3, [r2, #16]
 800750c:	e005      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800750e:	4b0b      	ldr	r3, [pc, #44]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4a0a      	ldr	r2, [pc, #40]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007518:	6113      	str	r3, [r2, #16]
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800752a:	4a04      	ldr	r2, [pc, #16]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800752c:	430b      	orrs	r3, r1
 800752e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007530:	e00e      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800753a:	e009      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800753c:	58024400 	.word	0x58024400
 8007540:	58024800 	.word	0x58024800
 8007544:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800754c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f002 0301 	and.w	r3, r2, #1
 800755c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007560:	2300      	movs	r3, #0
 8007562:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800756a:	460b      	mov	r3, r1
 800756c:	4313      	orrs	r3, r2
 800756e:	f000 8089 	beq.w	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007576:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007578:	2b28      	cmp	r3, #40	@ 0x28
 800757a:	d86b      	bhi.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800757c:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800757e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007582:	bf00      	nop
 8007584:	0800765d 	.word	0x0800765d
 8007588:	08007655 	.word	0x08007655
 800758c:	08007655 	.word	0x08007655
 8007590:	08007655 	.word	0x08007655
 8007594:	08007655 	.word	0x08007655
 8007598:	08007655 	.word	0x08007655
 800759c:	08007655 	.word	0x08007655
 80075a0:	08007655 	.word	0x08007655
 80075a4:	08007629 	.word	0x08007629
 80075a8:	08007655 	.word	0x08007655
 80075ac:	08007655 	.word	0x08007655
 80075b0:	08007655 	.word	0x08007655
 80075b4:	08007655 	.word	0x08007655
 80075b8:	08007655 	.word	0x08007655
 80075bc:	08007655 	.word	0x08007655
 80075c0:	08007655 	.word	0x08007655
 80075c4:	0800763f 	.word	0x0800763f
 80075c8:	08007655 	.word	0x08007655
 80075cc:	08007655 	.word	0x08007655
 80075d0:	08007655 	.word	0x08007655
 80075d4:	08007655 	.word	0x08007655
 80075d8:	08007655 	.word	0x08007655
 80075dc:	08007655 	.word	0x08007655
 80075e0:	08007655 	.word	0x08007655
 80075e4:	0800765d 	.word	0x0800765d
 80075e8:	08007655 	.word	0x08007655
 80075ec:	08007655 	.word	0x08007655
 80075f0:	08007655 	.word	0x08007655
 80075f4:	08007655 	.word	0x08007655
 80075f8:	08007655 	.word	0x08007655
 80075fc:	08007655 	.word	0x08007655
 8007600:	08007655 	.word	0x08007655
 8007604:	0800765d 	.word	0x0800765d
 8007608:	08007655 	.word	0x08007655
 800760c:	08007655 	.word	0x08007655
 8007610:	08007655 	.word	0x08007655
 8007614:	08007655 	.word	0x08007655
 8007618:	08007655 	.word	0x08007655
 800761c:	08007655 	.word	0x08007655
 8007620:	08007655 	.word	0x08007655
 8007624:	0800765d 	.word	0x0800765d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	3308      	adds	r3, #8
 800762e:	2101      	movs	r1, #1
 8007630:	4618      	mov	r0, r3
 8007632:	f000 ffc3 	bl	80085bc <RCCEx_PLL2_Config>
 8007636:	4603      	mov	r3, r0
 8007638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800763c:	e00f      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	3328      	adds	r3, #40	@ 0x28
 8007644:	2101      	movs	r1, #1
 8007646:	4618      	mov	r0, r3
 8007648:	f001 f86a 	bl	8008720 <RCCEx_PLL3_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007652:	e004      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800765a:	e000      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800765c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800765e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007666:	4bbf      	ldr	r3, [pc, #764]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800766e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007674:	4abb      	ldr	r2, [pc, #748]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007676:	430b      	orrs	r3, r1
 8007678:	6553      	str	r3, [r2, #84]	@ 0x54
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f002 0302 	and.w	r3, r2, #2
 8007690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007694:	2300      	movs	r3, #0
 8007696:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800769a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800769e:	460b      	mov	r3, r1
 80076a0:	4313      	orrs	r3, r2
 80076a2:	d041      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d824      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	08007701 	.word	0x08007701
 80076b8:	080076cd 	.word	0x080076cd
 80076bc:	080076e3 	.word	0x080076e3
 80076c0:	08007701 	.word	0x08007701
 80076c4:	08007701 	.word	0x08007701
 80076c8:	08007701 	.word	0x08007701
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	3308      	adds	r3, #8
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f000 ff71 	bl	80085bc <RCCEx_PLL2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076e0:	e00f      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	3328      	adds	r3, #40	@ 0x28
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f818 	bl	8008720 <RCCEx_PLL3_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80076f6:	e004      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076fe:	e000      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800770a:	4b96      	ldr	r3, [pc, #600]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800770c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800770e:	f023 0107 	bic.w	r1, r3, #7
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007718:	4a92      	ldr	r2, [pc, #584]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800771a:	430b      	orrs	r3, r1
 800771c:	6553      	str	r3, [r2, #84]	@ 0x54
 800771e:	e003      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f002 0304 	and.w	r3, r2, #4
 8007734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007738:	2300      	movs	r3, #0
 800773a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800773e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007742:	460b      	mov	r3, r1
 8007744:	4313      	orrs	r3, r2
 8007746:	d044      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007750:	2b05      	cmp	r3, #5
 8007752:	d825      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007754:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	080077a9 	.word	0x080077a9
 8007760:	08007775 	.word	0x08007775
 8007764:	0800778b 	.word	0x0800778b
 8007768:	080077a9 	.word	0x080077a9
 800776c:	080077a9 	.word	0x080077a9
 8007770:	080077a9 	.word	0x080077a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	3308      	adds	r3, #8
 800777a:	2101      	movs	r1, #1
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ff1d 	bl	80085bc <RCCEx_PLL2_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007788:	e00f      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	3328      	adds	r3, #40	@ 0x28
 8007790:	2101      	movs	r1, #1
 8007792:	4618      	mov	r0, r3
 8007794:	f000 ffc4 	bl	8008720 <RCCEx_PLL3_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800779e:	e004      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80077a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077b2:	4b6c      	ldr	r3, [pc, #432]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b6:	f023 0107 	bic.w	r1, r3, #7
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077c2:	4a68      	ldr	r2, [pc, #416]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077c8:	e003      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	f002 0320 	and.w	r3, r2, #32
 80077de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077ec:	460b      	mov	r3, r1
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d055      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077fe:	d033      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007804:	d82c      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800780a:	d02f      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800780c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007810:	d826      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007812:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007816:	d02b      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800781c:	d820      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800781e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007822:	d012      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007828:	d81a      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d022      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800782e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007832:	d115      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	3308      	adds	r3, #8
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f000 febd 	bl	80085bc <RCCEx_PLL2_Config>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007848:	e015      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	3328      	adds	r3, #40	@ 0x28
 8007850:	2102      	movs	r1, #2
 8007852:	4618      	mov	r0, r3
 8007854:	f000 ff64 	bl	8008720 <RCCEx_PLL3_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800785e:	e00a      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007866:	e006      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007868:	bf00      	nop
 800786a:	e004      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800786c:	bf00      	nop
 800786e:	e002      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007870:	bf00      	nop
 8007872:	e000      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800787e:	4b39      	ldr	r3, [pc, #228]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007882:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788e:	4a35      	ldr	r2, [pc, #212]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007890:	430b      	orrs	r3, r1
 8007892:	6553      	str	r3, [r2, #84]	@ 0x54
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80078aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078ae:	2300      	movs	r3, #0
 80078b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	d058      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078ca:	d033      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80078cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80078d0:	d82c      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d6:	d02f      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80078d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078dc:	d826      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078e2:	d02b      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80078e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078e8:	d820      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ee:	d012      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80078f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078f4:	d81a      	bhi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d022      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80078fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078fe:	d115      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007904:	3308      	adds	r3, #8
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fe57 	bl	80085bc <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007914:	e015      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791a:	3328      	adds	r3, #40	@ 0x28
 800791c:	2102      	movs	r1, #2
 800791e:	4618      	mov	r0, r3
 8007920:	f000 fefe 	bl	8008720 <RCCEx_PLL3_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800792a:	e00a      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007932:	e006      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007934:	bf00      	nop
 8007936:	e004      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007938:	bf00      	nop
 800793a:	e002      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800793c:	bf00      	nop
 800793e:	e000      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007940:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10e      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800794a:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800794c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800795a:	4a02      	ldr	r2, [pc, #8]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800795c:	430b      	orrs	r3, r1
 800795e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007960:	e006      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007962:	bf00      	nop
 8007964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800796c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800797c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007980:	2300      	movs	r3, #0
 8007982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007986:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800798a:	460b      	mov	r3, r1
 800798c:	4313      	orrs	r3, r2
 800798e:	d055      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007998:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800799c:	d033      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800799e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80079a2:	d82c      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a8:	d02f      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ae:	d826      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079b4:	d02b      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80079b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80079ba:	d820      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079c0:	d012      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80079c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079c6:	d81a      	bhi.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d022      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80079cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079d0:	d115      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d6:	3308      	adds	r3, #8
 80079d8:	2100      	movs	r1, #0
 80079da:	4618      	mov	r0, r3
 80079dc:	f000 fdee 	bl	80085bc <RCCEx_PLL2_Config>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079e6:	e015      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ec:	3328      	adds	r3, #40	@ 0x28
 80079ee:	2102      	movs	r1, #2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fe95 	bl	8008720 <RCCEx_PLL3_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80079fc:	e00a      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a04:	e006      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a06:	bf00      	nop
 8007a08:	e004      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a0a:	bf00      	nop
 8007a0c:	e002      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e000      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a1c:	4ba1      	ldr	r3, [pc, #644]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a2c:	4a9d      	ldr	r2, [pc, #628]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a2e:	430b      	orrs	r3, r1
 8007a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a32:	e003      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f002 0308 	and.w	r3, r2, #8
 8007a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007a56:	460b      	mov	r3, r1
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	d01e      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	3328      	adds	r3, #40	@ 0x28
 8007a70:	2102      	movs	r1, #2
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fe54 	bl	8008720 <RCCEx_PLL3_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a84:	4b87      	ldr	r3, [pc, #540]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a94:	4a83      	ldr	r2, [pc, #524]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a96:	430b      	orrs	r3, r1
 8007a98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f002 0310 	and.w	r3, r2, #16
 8007aa6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007aaa:	2300      	movs	r3, #0
 8007aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ab0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	d01e      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac6:	d10c      	bne.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007acc:	3328      	adds	r3, #40	@ 0x28
 8007ace:	2102      	movs	r1, #2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fe25 	bl	8008720 <RCCEx_PLL3_Config>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ae2:	4b70      	ldr	r3, [pc, #448]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007af2:	4a6c      	ldr	r2, [pc, #432]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007af4:	430b      	orrs	r3, r1
 8007af6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	d03e      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b24:	d022      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007b26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b2a:	d81b      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b34:	d00b      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007b36:	e015      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fd3b 	bl	80085bc <RCCEx_PLL2_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b4c:	e00f      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	3328      	adds	r3, #40	@ 0x28
 8007b54:	2102      	movs	r1, #2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fde2 	bl	8008720 <RCCEx_PLL3_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007b62:	e004      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b6a:	e000      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b76:	4b4b      	ldr	r3, [pc, #300]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b86:	4a47      	ldr	r2, [pc, #284]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b8c:	e003      	b.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ba8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007bac:	460b      	mov	r3, r1
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	d03b      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bbe:	d01f      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007bc4:	d818      	bhi.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bca:	d003      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bd0:	d007      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007bd2:	e011      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd4:	4b33      	ldr	r3, [pc, #204]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	4a32      	ldr	r2, [pc, #200]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007be0:	e00f      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be6:	3328      	adds	r3, #40	@ 0x28
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fd98 	bl	8008720 <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007bf6:	e004      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bfe:	e000      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c0a:	4b26      	ldr	r3, [pc, #152]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c1a:	4a22      	ldr	r2, [pc, #136]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007c36:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c38:	2300      	movs	r3, #0
 8007c3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007c40:	460b      	mov	r3, r1
 8007c42:	4313      	orrs	r3, r2
 8007c44:	d034      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c54:	d007      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007c56:	e011      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c58:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	4a11      	ldr	r2, [pc, #68]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c64:	e00e      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fca4 	bl	80085bc <RCCEx_PLL2_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10d      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c8c:	4b05      	ldr	r3, [pc, #20]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9a:	4a02      	ldr	r2, [pc, #8]	@ (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ca0:	e006      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007ca2:	bf00      	nop
 8007ca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d00c      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd0:	3328      	adds	r3, #40	@ 0x28
 8007cd2:	2102      	movs	r1, #2
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fd23 	bl	8008720 <RCCEx_PLL3_Config>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007cf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	667b      	str	r3, [r7, #100]	@ 0x64
 8007cf8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d038      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d0e:	d018      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007d10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d14:	d811      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d1a:	d014      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d20:	d80b      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d2a:	d106      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d2c:	4bc3      	ldr	r3, [pc, #780]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d30:	4ac2      	ldr	r2, [pc, #776]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007d38:	e008      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d40:	e004      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d54:	4bb9      	ldr	r3, [pc, #740]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d64:	4ab5      	ldr	r2, [pc, #724]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d66:	430b      	orrs	r3, r1
 8007d68:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d6a:	e003      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d82:	2300      	movs	r3, #0
 8007d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d90:	4baa      	ldr	r3, [pc, #680]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d9e:	4aa7      	ldr	r2, [pc, #668]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da0:	430b      	orrs	r3, r1
 8007da2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007db2:	2300      	movs	r3, #0
 8007db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007db6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007dc0:	4b9e      	ldr	r3, [pc, #632]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dcc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007dd0:	4a9a      	ldr	r2, [pc, #616]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd2:	430b      	orrs	r3, r1
 8007dd4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007de4:	2300      	movs	r3, #0
 8007de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007dec:	460b      	mov	r3, r1
 8007dee:	4313      	orrs	r3, r2
 8007df0:	d009      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df2:	4b92      	ldr	r3, [pc, #584]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e00:	4a8e      	ldr	r2, [pc, #568]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e02:	430b      	orrs	r3, r1
 8007e04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007e12:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e14:	2300      	movs	r3, #0
 8007e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e22:	4b86      	ldr	r3, [pc, #536]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	4a85      	ldr	r2, [pc, #532]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e2c:	6113      	str	r3, [r2, #16]
 8007e2e:	4b83      	ldr	r3, [pc, #524]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e30:	6919      	ldr	r1, [r3, #16]
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007e3a:	4a80      	ldr	r2, [pc, #512]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e5c:	4b77      	ldr	r3, [pc, #476]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e6a:	4a74      	ldr	r2, [pc, #464]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e7e:	2300      	movs	r3, #0
 8007e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007e86:	460b      	mov	r3, r1
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	d00a      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e9c:	4a67      	ldr	r2, [pc, #412]	@ (800803c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	2100      	movs	r1, #0
 8007eac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	d011      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fb78 	bl	80085bc <RCCEx_PLL2_Config>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ede:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	2100      	movs	r1, #0
 8007eec:	6239      	str	r1, [r7, #32]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ef4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4313      	orrs	r3, r2
 8007efc:	d011      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f02:	3308      	adds	r3, #8
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb58 	bl	80085bc <RCCEx_PLL2_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	61b9      	str	r1, [r7, #24]
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	61fb      	str	r3, [r7, #28]
 8007f34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	d011      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f42:	3308      	adds	r3, #8
 8007f44:	2102      	movs	r1, #2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 fb38 	bl	80085bc <RCCEx_PLL2_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	6139      	str	r1, [r7, #16]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	d011      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f82:	3328      	adds	r3, #40	@ 0x28
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 fbca 	bl	8008720 <RCCEx_PLL3_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	2100      	movs	r1, #0
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	f003 0310 	and.w	r3, r3, #16
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	d011      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3328      	adds	r3, #40	@ 0x28
 8007fc4:	2101      	movs	r1, #1
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fbaa 	bl	8008720 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	2100      	movs	r1, #0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	607b      	str	r3, [r7, #4]
 8007ff4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	d011      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	3328      	adds	r3, #40	@ 0x28
 8008004:	2102      	movs	r1, #2
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fb8a 	bl	8008720 <RCCEx_PLL3_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800801e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008022:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	e000      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
}
 8008030:	4618      	mov	r0, r3
 8008032:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008036:	46bd      	mov	sp, r7
 8008038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800803c:	58024400 	.word	0x58024400

08008040 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008044:	f7fe fd96 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8008048:	4602      	mov	r2, r0
 800804a:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	091b      	lsrs	r3, r3, #4
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	4904      	ldr	r1, [pc, #16]	@ (8008068 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008056:	5ccb      	ldrb	r3, [r1, r3]
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008060:	4618      	mov	r0, r3
 8008062:	bd80      	pop	{r7, pc}
 8008064:	58024400 	.word	0x58024400
 8008068:	08017798 	.word	0x08017798

0800806c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800806c:	b480      	push	{r7}
 800806e:	b089      	sub	sp, #36	@ 0x24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008074:	4ba1      	ldr	r3, [pc, #644]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800807e:	4b9f      	ldr	r3, [pc, #636]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	0b1b      	lsrs	r3, r3, #12
 8008084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008088:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800808a:	4b9c      	ldr	r3, [pc, #624]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	091b      	lsrs	r3, r3, #4
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008096:	4b99      	ldr	r3, [pc, #612]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800809a:	08db      	lsrs	r3, r3, #3
 800809c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	fb02 f303 	mul.w	r3, r2, r3
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8111 	beq.w	80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	f000 8083 	beq.w	80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	f200 80a1 	bhi.w	800820c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d056      	beq.n	8008184 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080d6:	e099      	b.n	800820c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d8:	4b88      	ldr	r3, [pc, #544]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d02d      	beq.n	8008140 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080e4:	4b85      	ldr	r3, [pc, #532]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	08db      	lsrs	r3, r3, #3
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	4a84      	ldr	r2, [pc, #528]	@ (8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
 80080f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	ee07 3a90 	vmov	s15, r3
 80080fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	ee07 3a90 	vmov	s15, r3
 8008106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800810a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810e:	4b7b      	ldr	r3, [pc, #492]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800812a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800813a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800813e:	e087      	b.n	8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008308 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b6a      	ldr	r3, [pc, #424]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a03 	vldr	s12, [r7, #12]
 8008166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008182:	e065      	b.n	8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008196:	4b59      	ldr	r3, [pc, #356]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081c6:	e043      	b.n	8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008310 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b48      	ldr	r3, [pc, #288]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800820a:	e021      	b.n	8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800830c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b37      	ldr	r3, [pc, #220]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008304 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800824e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008250:	4b2a      	ldr	r3, [pc, #168]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008254:	0a5b      	lsrs	r3, r3, #9
 8008256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800826a:	edd7 6a07 	vldr	s13, [r7, #28]
 800826e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008276:	ee17 2a90 	vmov	r2, s15
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800827e:	4b1f      	ldr	r3, [pc, #124]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008282:	0c1b      	lsrs	r3, r3, #16
 8008284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008288:	ee07 3a90 	vmov	s15, r3
 800828c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008298:	edd7 6a07 	vldr	s13, [r7, #28]
 800829c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a4:	ee17 2a90 	vmov	r2, s15
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80082ac:	4b13      	ldr	r3, [pc, #76]	@ (80082fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b0:	0e1b      	lsrs	r3, r3, #24
 80082b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80082c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80082ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082d2:	ee17 2a90 	vmov	r2, s15
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082da:	e008      	b.n	80082ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	609a      	str	r2, [r3, #8]
}
 80082ee:	bf00      	nop
 80082f0:	3724      	adds	r7, #36	@ 0x24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
 8008300:	03d09000 	.word	0x03d09000
 8008304:	46000000 	.word	0x46000000
 8008308:	4c742400 	.word	0x4c742400
 800830c:	4a742400 	.word	0x4a742400
 8008310:	4af42400 	.word	0x4af42400

08008314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008314:	b480      	push	{r7}
 8008316:	b089      	sub	sp, #36	@ 0x24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800831c:	4ba1      	ldr	r3, [pc, #644]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	f003 0303 	and.w	r3, r3, #3
 8008324:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008326:	4b9f      	ldr	r3, [pc, #636]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	0d1b      	lsrs	r3, r3, #20
 800832c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008330:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008332:	4b9c      	ldr	r3, [pc, #624]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800833e:	4b99      	ldr	r3, [pc, #612]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008342:	08db      	lsrs	r3, r3, #3
 8008344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	fb02 f303 	mul.w	r3, r2, r3
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8111 	beq.w	8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	2b02      	cmp	r3, #2
 8008366:	f000 8083 	beq.w	8008470 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2b02      	cmp	r3, #2
 800836e:	f200 80a1 	bhi.w	80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d056      	beq.n	800842c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800837e:	e099      	b.n	80084b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008380:	4b88      	ldr	r3, [pc, #544]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b00      	cmp	r3, #0
 800838a:	d02d      	beq.n	80083e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800838c:	4b85      	ldr	r3, [pc, #532]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	08db      	lsrs	r3, r3, #3
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	4a84      	ldr	r2, [pc, #528]	@ (80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
 800839c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083b6:	4b7b      	ldr	r3, [pc, #492]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083e6:	e087      	b.n	80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80085b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fa:	4b6a      	ldr	r3, [pc, #424]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840a:	ed97 6a03 	vldr	s12, [r7, #12]
 800840e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800841e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800842a:	e065      	b.n	80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008436:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800843a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800843e:	4b59      	ldr	r3, [pc, #356]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008452:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800845e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800846e:	e043      	b.n	80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800847a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800847e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008482:	4b48      	ldr	r3, [pc, #288]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008492:	ed97 6a03 	vldr	s12, [r7, #12]
 8008496:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800849a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800849e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084b2:	e021      	b.n	80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80085b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c6:	4b37      	ldr	r3, [pc, #220]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80084f8:	4b2a      	ldr	r3, [pc, #168]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084fc:	0a5b      	lsrs	r3, r3, #9
 80084fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800850e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008512:	edd7 6a07 	vldr	s13, [r7, #28]
 8008516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851e:	ee17 2a90 	vmov	r2, s15
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008526:	4b1f      	ldr	r3, [pc, #124]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008530:	ee07 3a90 	vmov	s15, r3
 8008534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800853c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008540:	edd7 6a07 	vldr	s13, [r7, #28]
 8008544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854c:	ee17 2a90 	vmov	r2, s15
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008554:	4b13      	ldr	r3, [pc, #76]	@ (80085a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008558:	0e1b      	lsrs	r3, r3, #24
 800855a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800856a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800856e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800857a:	ee17 2a90 	vmov	r2, s15
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008582:	e008      	b.n	8008596 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	609a      	str	r2, [r3, #8]
}
 8008596:	bf00      	nop
 8008598:	3724      	adds	r7, #36	@ 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	58024400 	.word	0x58024400
 80085a8:	03d09000 	.word	0x03d09000
 80085ac:	46000000 	.word	0x46000000
 80085b0:	4c742400 	.word	0x4c742400
 80085b4:	4a742400 	.word	0x4a742400
 80085b8:	4af42400 	.word	0x4af42400

080085bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085ca:	4b53      	ldr	r3, [pc, #332]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d101      	bne.n	80085da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e099      	b.n	800870e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085da:	4b4f      	ldr	r3, [pc, #316]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a4e      	ldr	r2, [pc, #312]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80085e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e6:	f7f9 fa63 	bl	8001ab0 <HAL_GetTick>
 80085ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085ec:	e008      	b.n	8008600 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085ee:	f7f9 fa5f 	bl	8001ab0 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e086      	b.n	800870e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008600:	4b45      	ldr	r3, [pc, #276]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f0      	bne.n	80085ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800860c:	4b42      	ldr	r3, [pc, #264]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	031b      	lsls	r3, r3, #12
 800861a:	493f      	ldr	r1, [pc, #252]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 800861c:	4313      	orrs	r3, r2
 800861e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	3b01      	subs	r3, #1
 8008626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	3b01      	subs	r3, #1
 8008630:	025b      	lsls	r3, r3, #9
 8008632:	b29b      	uxth	r3, r3
 8008634:	431a      	orrs	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	3b01      	subs	r3, #1
 800863c:	041b      	lsls	r3, r3, #16
 800863e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	3b01      	subs	r3, #1
 800864a:	061b      	lsls	r3, r3, #24
 800864c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008650:	4931      	ldr	r1, [pc, #196]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008652:	4313      	orrs	r3, r2
 8008654:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008656:	4b30      	ldr	r3, [pc, #192]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	492d      	ldr	r1, [pc, #180]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008664:	4313      	orrs	r3, r2
 8008666:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008668:	4b2b      	ldr	r3, [pc, #172]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 800866a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866c:	f023 0220 	bic.w	r2, r3, #32
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	4928      	ldr	r1, [pc, #160]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008676:	4313      	orrs	r3, r2
 8008678:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800867a:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867e:	4a26      	ldr	r2, [pc, #152]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008680:	f023 0310 	bic.w	r3, r3, #16
 8008684:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008686:	4b24      	ldr	r3, [pc, #144]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800868a:	4b24      	ldr	r3, [pc, #144]	@ (800871c <RCCEx_PLL2_Config+0x160>)
 800868c:	4013      	ands	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	69d2      	ldr	r2, [r2, #28]
 8008692:	00d2      	lsls	r2, r2, #3
 8008694:	4920      	ldr	r1, [pc, #128]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008696:	4313      	orrs	r3, r2
 8008698:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800869a:	4b1f      	ldr	r3, [pc, #124]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800869e:	4a1e      	ldr	r2, [pc, #120]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086a0:	f043 0310 	orr.w	r3, r3, #16
 80086a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80086ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b0:	4a19      	ldr	r2, [pc, #100]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086b8:	e00f      	b.n	80086da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d106      	bne.n	80086ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80086c0:	4b15      	ldr	r3, [pc, #84]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c4:	4a14      	ldr	r2, [pc, #80]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086cc:	e005      	b.n	80086da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086ce:	4b12      	ldr	r3, [pc, #72]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d2:	4a11      	ldr	r2, [pc, #68]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80086d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086da:	4b0f      	ldr	r3, [pc, #60]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a0e      	ldr	r2, [pc, #56]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 80086e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e6:	f7f9 f9e3 	bl	8001ab0 <HAL_GetTick>
 80086ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086ec:	e008      	b.n	8008700 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086ee:	f7f9 f9df 	bl	8001ab0 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e006      	b.n	800870e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008700:	4b05      	ldr	r3, [pc, #20]	@ (8008718 <RCCEx_PLL2_Config+0x15c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0f0      	beq.n	80086ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	58024400 	.word	0x58024400
 800871c:	ffff0007 	.word	0xffff0007

08008720 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800872e:	4b53      	ldr	r3, [pc, #332]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b03      	cmp	r3, #3
 8008738:	d101      	bne.n	800873e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e099      	b.n	8008872 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800873e:	4b4f      	ldr	r3, [pc, #316]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4e      	ldr	r2, [pc, #312]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008744:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874a:	f7f9 f9b1 	bl	8001ab0 <HAL_GetTick>
 800874e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008750:	e008      	b.n	8008764 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008752:	f7f9 f9ad 	bl	8001ab0 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e086      	b.n	8008872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008764:	4b45      	ldr	r3, [pc, #276]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f0      	bne.n	8008752 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008770:	4b42      	ldr	r3, [pc, #264]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008774:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	051b      	lsls	r3, r3, #20
 800877e:	493f      	ldr	r1, [pc, #252]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008780:	4313      	orrs	r3, r2
 8008782:	628b      	str	r3, [r1, #40]	@ 0x28
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	3b01      	subs	r3, #1
 800878a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	3b01      	subs	r3, #1
 8008794:	025b      	lsls	r3, r3, #9
 8008796:	b29b      	uxth	r3, r3
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	3b01      	subs	r3, #1
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	061b      	lsls	r3, r3, #24
 80087b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80087b4:	4931      	ldr	r1, [pc, #196]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80087ba:	4b30      	ldr	r3, [pc, #192]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	492d      	ldr	r1, [pc, #180]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087cc:	4b2b      	ldr	r3, [pc, #172]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	4928      	ldr	r1, [pc, #160]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087de:	4b27      	ldr	r3, [pc, #156]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	4a26      	ldr	r2, [pc, #152]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087ea:	4b24      	ldr	r3, [pc, #144]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ee:	4b24      	ldr	r3, [pc, #144]	@ (8008880 <RCCEx_PLL3_Config+0x160>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	69d2      	ldr	r2, [r2, #28]
 80087f6:	00d2      	lsls	r2, r2, #3
 80087f8:	4920      	ldr	r1, [pc, #128]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087fe:	4b1f      	ldr	r3, [pc, #124]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	4a1e      	ldr	r2, [pc, #120]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d106      	bne.n	800881e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008810:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008814:	4a19      	ldr	r2, [pc, #100]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008816:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800881a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800881c:	e00f      	b.n	800883e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d106      	bne.n	8008832 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008824:	4b15      	ldr	r3, [pc, #84]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008828:	4a14      	ldr	r2, [pc, #80]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 800882a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800882e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008830:	e005      	b.n	800883e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008832:	4b12      	ldr	r3, [pc, #72]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008836:	4a11      	ldr	r2, [pc, #68]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800883c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800883e:	4b0f      	ldr	r3, [pc, #60]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a0e      	ldr	r2, [pc, #56]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884a:	f7f9 f931 	bl	8001ab0 <HAL_GetTick>
 800884e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008850:	e008      	b.n	8008864 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008852:	f7f9 f92d 	bl	8001ab0 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d901      	bls.n	8008864 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e006      	b.n	8008872 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008864:	4b05      	ldr	r3, [pc, #20]	@ (800887c <RCCEx_PLL3_Config+0x15c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0f0      	beq.n	8008852 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	58024400 	.word	0x58024400
 8008880:	ffff0007 	.word	0xffff0007

08008884 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e10f      	b.n	8008ab6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a87      	ldr	r2, [pc, #540]	@ (8008ac0 <HAL_SPI_Init+0x23c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00f      	beq.n	80088c6 <HAL_SPI_Init+0x42>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a86      	ldr	r2, [pc, #536]	@ (8008ac4 <HAL_SPI_Init+0x240>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00a      	beq.n	80088c6 <HAL_SPI_Init+0x42>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a84      	ldr	r2, [pc, #528]	@ (8008ac8 <HAL_SPI_Init+0x244>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d005      	beq.n	80088c6 <HAL_SPI_Init+0x42>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	2b0f      	cmp	r3, #15
 80088c0:	d901      	bls.n	80088c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e0f7      	b.n	8008ab6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fdc6 	bl	8009458 <SPI_GetPacketSize>
 80088cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a7b      	ldr	r2, [pc, #492]	@ (8008ac0 <HAL_SPI_Init+0x23c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00c      	beq.n	80088f2 <HAL_SPI_Init+0x6e>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a79      	ldr	r2, [pc, #484]	@ (8008ac4 <HAL_SPI_Init+0x240>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d007      	beq.n	80088f2 <HAL_SPI_Init+0x6e>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a78      	ldr	r2, [pc, #480]	@ (8008ac8 <HAL_SPI_Init+0x244>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d002      	beq.n	80088f2 <HAL_SPI_Init+0x6e>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d811      	bhi.n	8008916 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80088f6:	4a72      	ldr	r2, [pc, #456]	@ (8008ac0 <HAL_SPI_Init+0x23c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d009      	beq.n	8008910 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a70      	ldr	r2, [pc, #448]	@ (8008ac4 <HAL_SPI_Init+0x240>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <HAL_SPI_Init+0x8c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a6f      	ldr	r2, [pc, #444]	@ (8008ac8 <HAL_SPI_Init+0x244>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d104      	bne.n	800891a <HAL_SPI_Init+0x96>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b10      	cmp	r3, #16
 8008914:	d901      	bls.n	800891a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e0cd      	b.n	8008ab6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7f8 fae6 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0201 	bic.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008956:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008960:	d119      	bne.n	8008996 <HAL_SPI_Init+0x112>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800896a:	d103      	bne.n	8008974 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008970:	2b00      	cmp	r3, #0
 8008972:	d008      	beq.n	8008986 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008978:	2b00      	cmp	r3, #0
 800897a:	d10c      	bne.n	8008996 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008984:	d107      	bne.n	8008996 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008994:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <HAL_SPI_Init+0x13e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b06      	cmp	r3, #6
 80089a8:	d90b      	bls.n	80089c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e007      	b.n	80089d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089da:	431a      	orrs	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	ea42 0103 	orr.w	r1, r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a1b      	ldr	r3, [r3, #32]
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a26:	431a      	orrs	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a32:	ea42 0103 	orr.w	r1, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d113      	bne.n	8008a72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0201 	bic.w	r2, r2, #1
 8008a80:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	40013000 	.word	0x40013000
 8008ac4:	40003800 	.word	0x40003800
 8008ac8:	40003c00 	.word	0x40003c00

08008acc <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d001      	beq.n	8008aea <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e19c      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_SPI_TransmitReceive_DMA+0x30>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_SPI_TransmitReceive_DMA+0x30>
 8008af6:	887b      	ldrh	r3, [r7, #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e191      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d101      	bne.n	8008b0e <HAL_SPI_TransmitReceive_DMA+0x42>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e18a      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2205      	movs	r2, #5
 8008b1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	887a      	ldrh	r2, [r7, #2]
 8008b30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	887a      	ldrh	r2, [r7, #2]
 8008b38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	887a      	ldrh	r2, [r7, #2]
 8008b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	887a      	ldrh	r2, [r7, #2]
 8008b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008b7c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b0f      	cmp	r3, #15
 8008b84:	d90b      	bls.n	8008b9e <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b8a:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b90:	d121      	bne.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b96:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008b98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b9c:	d11b      	bne.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008ba2:	2b07      	cmp	r3, #7
 8008ba4:	d91d      	bls.n	8008be2 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008baa:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bb0:	d005      	beq.n	8008bbe <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bb6:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bbc:	d10b      	bne.n	8008bd6 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc2:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bc8:	d00b      	beq.n	8008be2 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bce:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008bd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bd4:	d005      	beq.n	8008be2 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e120      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	d840      	bhi.n	8008c6c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf4:	d109      	bne.n	8008c0a <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	105b      	asrs	r3, r3, #1
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c14:	d109      	bne.n	8008c2a <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3303      	adds	r3, #3
 8008c20:	109b      	asrs	r3, r3, #2
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c34:	d109      	bne.n	8008c4a <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3301      	adds	r3, #1
 8008c40:	105b      	asrs	r3, r3, #1
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c54:	d12e      	bne.n	8008cb4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3303      	adds	r3, #3
 8008c60:	109b      	asrs	r3, r3, #2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008c6a:	e023      	b.n	8008cb4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	2b0f      	cmp	r3, #15
 8008c72:	d81f      	bhi.n	8008cb4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c7e:	d109      	bne.n	8008c94 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3301      	adds	r3, #1
 8008c8a:	105b      	asrs	r3, r3, #1
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c9e:	d109      	bne.n	8008cb4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3301      	adds	r3, #1
 8008caa:	105b      	asrs	r3, r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cb8:	4a5c      	ldr	r2, [pc, #368]	@ (8008e2c <HAL_SPI_TransmitReceive_DMA+0x360>)
 8008cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cc0:	4a5b      	ldr	r2, [pc, #364]	@ (8008e30 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8008cc2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8008e34 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3330      	adds	r3, #48	@ 0x30
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008cec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008cee:	f7f9 fb87 	bl	8002400 <HAL_DMA_Start_IT>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d011      	beq.n	8008d1c <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cfe:	f043 0210 	orr.w	r2, r3, #16
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e083      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d30:	2200      	movs	r2, #0
 8008d32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d38:	2200      	movs	r2, #0
 8008d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d40:	2200      	movs	r2, #0
 8008d42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d48:	4a3a      	ldr	r2, [pc, #232]	@ (8008e34 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d54:	4619      	mov	r1, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3320      	adds	r3, #32
 8008d5c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008d66:	f7f9 fb4b 	bl	8002400 <HAL_DMA_Start_IT>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d016      	beq.n	8008d9e <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f9 fdad 	bl	80028d4 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d80:	f043 0210 	orr.w	r2, r3, #16
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e042      	b.n	8008e24 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da8:	d108      	bne.n	8008dbc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	6859      	ldr	r1, [r3, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4b20      	ldr	r3, [pc, #128]	@ (8008e38 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008db6:	400b      	ands	r3, r1
 8008db8:	6053      	str	r3, [r2, #4]
 8008dba:	e009      	b.n	8008dd0 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e38 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	8879      	ldrh	r1, [r7, #2]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	6812      	ldr	r2, [r2, #0]
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dde:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8008dee:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0201 	orr.w	r2, r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e08:	d107      	bne.n	8008e1a <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e18:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	08009283 	.word	0x08009283
 8008e30:	0800923d 	.word	0x0800923d
 8008e34:	0800929f 	.word	0x0800929f
 8008e38:	ffff0000 	.word	0xffff0000

08008e3c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	@ 0x28
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008e54:	6a3a      	ldr	r2, [r7, #32]
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008e6e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3330      	adds	r3, #48	@ 0x30
 8008e76:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d010      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x68>
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	f003 0308 	and.w	r3, r3, #8
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e9a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f9c3 	bl	8009228 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008ea2:	e192      	b.n	80091ca <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d113      	bne.n	8008ed6 <HAL_SPI_IRQHandler+0x9a>
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	f003 0320 	and.w	r3, r3, #32
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10e      	bne.n	8008ed6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	4798      	blx	r3
    handled = 1UL;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10f      	bne.n	8008f00 <HAL_SPI_IRQHandler+0xc4>
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d105      	bne.n	8008f00 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
    handled = 1UL;
 8008efc:	2301      	movs	r3, #1
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10f      	bne.n	8008f2a <HAL_SPI_IRQHandler+0xee>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
    handled = 1UL;
 8008f26:	2301      	movs	r3, #1
 8008f28:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8147 	bne.w	80091c0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 808b 	beq.w	8009054 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0208 	orr.w	r2, r2, #8
 8008f4c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699a      	ldr	r2, [r3, #24]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0210 	orr.w	r2, r2, #16
 8008f5c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f6c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	691a      	ldr	r2, [r3, #16]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0208 	bic.w	r2, r2, #8
 8008f7c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d13d      	bne.n	8009008 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008f8c:	e036      	b.n	8008ffc <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d90b      	bls.n	8008fae <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008fa0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	665a      	str	r2, [r3, #100]	@ 0x64
 8008fac:	e01d      	b.n	8008fea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	2b07      	cmp	r3, #7
 8008fb4:	d90b      	bls.n	8008fce <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	8812      	ldrh	r2, [r2, #0]
 8008fbe:	b292      	uxth	r2, r2
 8008fc0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fc6:	1c9a      	adds	r2, r3, #2
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	665a      	str	r2, [r3, #100]	@ 0x64
 8008fcc:	e00d      	b.n	8008fea <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fda:	7812      	ldrb	r2, [r2, #0]
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1c2      	bne.n	8008f8e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f985 	bl	8009318 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f8f7 	bl	8009214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009026:	e0d0      	b.n	80091ca <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009028:	7cfb      	ldrb	r3, [r7, #19]
 800902a:	2b05      	cmp	r3, #5
 800902c:	d103      	bne.n	8009036 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f00b f992 	bl	8014358 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009034:	e0c6      	b.n	80091c4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009036:	7cfb      	ldrb	r3, [r7, #19]
 8009038:	2b04      	cmp	r3, #4
 800903a:	d103      	bne.n	8009044 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f8d5 	bl	80091ec <HAL_SPI_RxCpltCallback>
    return;
 8009042:	e0bf      	b.n	80091c4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009044:	7cfb      	ldrb	r3, [r7, #19]
 8009046:	2b03      	cmp	r3, #3
 8009048:	f040 80bc 	bne.w	80091c4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f8c3 	bl	80091d8 <HAL_SPI_TxCpltCallback>
    return;
 8009052:	e0b7      	b.n	80091c4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80b5 	beq.w	80091ca <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00f      	beq.n	800908a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009070:	f043 0204 	orr.w	r2, r3, #4
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	699a      	ldr	r2, [r3, #24]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009088:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00f      	beq.n	80090b4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909a:	f043 0201 	orr.w	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090b2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00f      	beq.n	80090de <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090c4:	f043 0208 	orr.w	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00f      	beq.n	8009108 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0220 	orr.w	r2, r2, #32
 8009106:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800910e:	2b00      	cmp	r3, #0
 8009110:	d05a      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0201 	bic.w	r2, r2, #1
 8009120:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6919      	ldr	r1, [r3, #16]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <HAL_SPI_IRQHandler+0x394>)
 800912e:	400b      	ands	r3, r1
 8009130:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009138:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800913c:	d138      	bne.n	80091b0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800914c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d013      	beq.n	800917e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800915a:	4a1e      	ldr	r2, [pc, #120]	@ (80091d4 <HAL_SPI_IRQHandler+0x398>)
 800915c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009162:	4618      	mov	r0, r3
 8009164:	f7f9 fed4 	bl	8002f10 <HAL_DMA_Abort_IT>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009174:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009182:	2b00      	cmp	r3, #0
 8009184:	d020      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800918a:	4a12      	ldr	r2, [pc, #72]	@ (80091d4 <HAL_SPI_IRQHandler+0x398>)
 800918c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009192:	4618      	mov	r0, r3
 8009194:	f7f9 febc 	bl	8002f10 <HAL_DMA_Abort_IT>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d014      	beq.n	80091c8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80091ae:	e00b      	b.n	80091c8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f82b 	bl	8009214 <HAL_SPI_ErrorCallback>
    return;
 80091be:	e003      	b.n	80091c8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <HAL_SPI_IRQHandler+0x38e>
    return;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <HAL_SPI_IRQHandler+0x38e>
    return;
 80091c8:	bf00      	nop
  }
}
 80091ca:	3728      	adds	r7, #40	@ 0x28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	fffffc94 	.word	0xfffffc94
 80091d4:	080092e5 	.word	0x080092e5

080091d8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009248:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b07      	cmp	r3, #7
 8009254:	d011      	beq.n	800927a <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009260:	d103      	bne.n	800926a <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f00b f878 	bl	8014358 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009268:	e007      	b.n	800927a <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691a      	ldr	r2, [r3, #16]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0208 	orr.w	r2, r2, #8
 8009278:	611a      	str	r2, [r3, #16]
}
 800927a:	bf00      	nop
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff ffb5 	bl	8009200 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092aa:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7fa ff9f 	bl	80041f0 <HAL_DMA_GetError>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d011      	beq.n	80092dc <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f82d 	bl	8009318 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092c4:	f043 0210 	orr.w	r2, r3, #16
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff ff9c 	bl	8009214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f7ff ff82 	bl	8009214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	699a      	ldr	r2, [r3, #24]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f042 0208 	orr.w	r2, r2, #8
 8009336:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0210 	orr.w	r2, r2, #16
 8009346:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f022 0201 	bic.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6919      	ldr	r1, [r3, #16]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b3c      	ldr	r3, [pc, #240]	@ (8009454 <SPI_CloseTransfer+0x13c>)
 8009364:	400b      	ands	r3, r1
 8009366:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689a      	ldr	r2, [r3, #8]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009376:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b04      	cmp	r3, #4
 8009382:	d014      	beq.n	80093ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00f      	beq.n	80093ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009394:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699a      	ldr	r2, [r3, #24]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f042 0220 	orr.w	r2, r2, #32
 80093ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d014      	beq.n	80093e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00f      	beq.n	80093e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ca:	f043 0204 	orr.w	r2, r3, #4
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00f      	beq.n	800940e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093f4:	f043 0201 	orr.w	r2, r3, #1
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699a      	ldr	r2, [r3, #24]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800940c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00f      	beq.n	8009438 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800941e:	f043 0208 	orr.w	r2, r3, #8
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	699a      	ldr	r2, [r3, #24]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009436:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009448:	bf00      	nop
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	fffffc90 	.word	0xfffffc90

08009458 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	3301      	adds	r3, #1
 8009468:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	3301      	adds	r3, #1
 8009470:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3307      	adds	r3, #7
 8009476:	08db      	lsrs	r3, r3, #3
 8009478:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e042      	b.n	8009526 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f8 f870 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	@ 0x24
 80094bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0201 	bic.w	r2, r2, #1
 80094ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f867 	bl	800a5ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fafc 	bl	8009adc <UART_SetConfig>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e01b      	b.n	8009526 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800950c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0201 	orr.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f8e6 	bl	800a6f0 <UART_CheckIdleState>
 8009524:	4603      	mov	r3, r0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b08a      	sub	sp, #40	@ 0x28
 8009532:	af02      	add	r7, sp, #8
 8009534:	60f8      	str	r0, [r7, #12]
 8009536:	60b9      	str	r1, [r7, #8]
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4613      	mov	r3, r2
 800953c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009544:	2b20      	cmp	r3, #32
 8009546:	f040 80b5 	bne.w	80096b4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <HAL_UART_Receive+0x28>
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e0ad      	b.n	80096b6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2222      	movs	r2, #34	@ 0x22
 8009566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009570:	f7f8 fa9e 	bl	8001ab0 <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	88fa      	ldrh	r2, [r7, #6]
 800957a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	88fa      	ldrh	r2, [r7, #6]
 8009582:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800958e:	d10e      	bne.n	80095ae <HAL_UART_Receive+0x80>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d105      	bne.n	80095a4 <HAL_UART_Receive+0x76>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800959e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095a2:	e02d      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	22ff      	movs	r2, #255	@ 0xff
 80095a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095ac:	e028      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10d      	bne.n	80095d2 <HAL_UART_Receive+0xa4>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d104      	bne.n	80095c8 <HAL_UART_Receive+0x9a>
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	22ff      	movs	r2, #255	@ 0xff
 80095c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095c6:	e01b      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	227f      	movs	r2, #127	@ 0x7f
 80095cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095d0:	e016      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095da:	d10d      	bne.n	80095f8 <HAL_UART_Receive+0xca>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <HAL_UART_Receive+0xc0>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	227f      	movs	r2, #127	@ 0x7f
 80095e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095ec:	e008      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	223f      	movs	r2, #63	@ 0x3f
 80095f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095f6:	e003      	b.n	8009600 <HAL_UART_Receive+0xd2>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009606:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009610:	d108      	bne.n	8009624 <HAL_UART_Receive+0xf6>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d104      	bne.n	8009624 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	e003      	b.n	800962c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009628:	2300      	movs	r3, #0
 800962a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800962c:	e036      	b.n	800969c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2200      	movs	r2, #0
 8009636:	2120      	movs	r1, #32
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f001 f903 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2220      	movs	r2, #32
 8009648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e032      	b.n	80096b6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10c      	bne.n	8009670 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	b29a      	uxth	r2, r3
 800965e:	8a7b      	ldrh	r3, [r7, #18]
 8009660:	4013      	ands	r3, r2
 8009662:	b29a      	uxth	r2, r3
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	3302      	adds	r3, #2
 800966c:	61bb      	str	r3, [r7, #24]
 800966e:	e00c      	b.n	800968a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009676:	b2da      	uxtb	r2, r3
 8009678:	8a7b      	ldrh	r3, [r7, #18]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	4013      	ands	r3, r2
 800967e:	b2da      	uxtb	r2, r3
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	3301      	adds	r3, #1
 8009688:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1c2      	bne.n	800962e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	e000      	b.n	80096b6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80096b4:	2302      	movs	r3, #2
  }
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b08a      	sub	sp, #40	@ 0x28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	d167      	bne.n	80097a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_UART_Transmit_DMA+0x24>
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e060      	b.n	80097aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	88fa      	ldrh	r2, [r7, #6]
 80096f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	88fa      	ldrh	r2, [r7, #6]
 80096fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2221      	movs	r2, #33	@ 0x21
 800970a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d028      	beq.n	8009768 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800971a:	4a26      	ldr	r2, [pc, #152]	@ (80097b4 <HAL_UART_Transmit_DMA+0xf4>)
 800971c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009722:	4a25      	ldr	r2, [pc, #148]	@ (80097b8 <HAL_UART_Transmit_DMA+0xf8>)
 8009724:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800972a:	4a24      	ldr	r2, [pc, #144]	@ (80097bc <HAL_UART_Transmit_DMA+0xfc>)
 800972c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009732:	2200      	movs	r2, #0
 8009734:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800973e:	4619      	mov	r1, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3328      	adds	r3, #40	@ 0x28
 8009746:	461a      	mov	r2, r3
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	f7f8 fe59 	bl	8002400 <HAL_DMA_Start_IT>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d009      	beq.n	8009768 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2210      	movs	r2, #16
 8009758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e020      	b.n	80097aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2240      	movs	r2, #64	@ 0x40
 800976e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	613b      	str	r3, [r7, #16]
   return(result);
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009786:	627b      	str	r3, [r7, #36]	@ 0x24
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009790:	623a      	str	r2, [r7, #32]
 8009792:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	69f9      	ldr	r1, [r7, #28]
 8009796:	6a3a      	ldr	r2, [r7, #32]
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	61bb      	str	r3, [r7, #24]
   return(result);
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	e000      	b.n	80097aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80097a8:	2302      	movs	r3, #2
  }
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3728      	adds	r7, #40	@ 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	0800abbd 	.word	0x0800abbd
 80097b8:	0800ac53 	.word	0x0800ac53
 80097bc:	0800add5 	.word	0x0800add5

080097c0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	@ 0x28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	d137      	bne.n	8009848 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <HAL_UART_Receive_DMA+0x24>
 80097de:	88fb      	ldrh	r3, [r7, #6]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e030      	b.n	800984a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a18      	ldr	r2, [pc, #96]	@ (8009854 <HAL_UART_Receive_DMA+0x94>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d01f      	beq.n	8009838 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d018      	beq.n	8009838 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	613b      	str	r3, [r7, #16]
   return(result);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800981a:	627b      	str	r3, [r7, #36]	@ 0x24
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	623b      	str	r3, [r7, #32]
 8009826:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	69f9      	ldr	r1, [r7, #28]
 800982a:	6a3a      	ldr	r2, [r7, #32]
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	61bb      	str	r3, [r7, #24]
   return(result);
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e6      	bne.n	8009806 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009838:	88fb      	ldrh	r3, [r7, #6]
 800983a:	461a      	mov	r2, r3
 800983c:	68b9      	ldr	r1, [r7, #8]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f001 f86e 	bl	800a920 <UART_Start_Receive_DMA>
 8009844:	4603      	mov	r3, r0
 8009846:	e000      	b.n	800984a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009848:	2302      	movs	r3, #2
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	3728      	adds	r7, #40	@ 0x28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	58000c00 	.word	0x58000c00

08009858 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b0a0      	sub	sp, #128	@ 0x80
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800986e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009870:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8009874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800987e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009880:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009884:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800988c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e6      	bne.n	8009860 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3308      	adds	r3, #8
 8009898:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80098a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a4:	4b72      	ldr	r3, [pc, #456]	@ (8009a70 <HAL_UART_Abort+0x218>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3308      	adds	r3, #8
 80098b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80098b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80098b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80098b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80098c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e5      	bne.n	8009892 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d118      	bne.n	8009900 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d6:	e853 3f00 	ldrex	r3, [r3]
 80098da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098de:	f023 0310 	bic.w	r3, r3, #16
 80098e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	461a      	mov	r2, r3
 80098ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80098ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098f4:	e841 2300 	strex	r3, r2, [r1]
 80098f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e6      	bne.n	80098ce <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990a:	2b80      	cmp	r3, #128	@ 0x80
 800990c:	d137      	bne.n	800997e <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	61fb      	str	r3, [r7, #28]
   return(result);
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009924:	673b      	str	r3, [r7, #112]	@ 0x70
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3308      	adds	r3, #8
 800992c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800992e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009930:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e5      	bne.n	800990e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009946:	2b00      	cmp	r3, #0
 8009948:	d019      	beq.n	800997e <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800994e:	2200      	movs	r2, #0
 8009950:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009956:	4618      	mov	r0, r3
 8009958:	f7f8 ffbc 	bl	80028d4 <HAL_DMA_Abort>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00d      	beq.n	800997e <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009966:	4618      	mov	r0, r3
 8009968:	f7fa fc42 	bl	80041f0 <HAL_DMA_GetError>
 800996c:	4603      	mov	r3, r0
 800996e:	2b20      	cmp	r3, #32
 8009970:	d105      	bne.n	800997e <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2210      	movs	r2, #16
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e073      	b.n	8009a66 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009988:	2b40      	cmp	r3, #64	@ 0x40
 800998a:	d13b      	bne.n	8009a04 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	60bb      	str	r3, [r7, #8]
   return(result);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099ac:	61ba      	str	r2, [r7, #24]
 80099ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b0:	6979      	ldr	r1, [r7, #20]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	e841 2300 	strex	r3, r2, [r1]
 80099b8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e5      	bne.n	800998c <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d01c      	beq.n	8009a04 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d0:	2200      	movs	r2, #0
 80099d2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f8 ff7a 	bl	80028d4 <HAL_DMA_Abort>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00e      	beq.n	8009a04 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fa fbff 	bl	80041f0 <HAL_DMA_GetError>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b20      	cmp	r3, #32
 80099f6:	d105      	bne.n	8009a04 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2210      	movs	r2, #16
 80099fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e030      	b.n	8009a66 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	220f      	movs	r2, #15
 8009a1a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a24:	d107      	bne.n	8009a36 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0210 	orr.w	r2, r2, #16
 8009a34:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699a      	ldr	r2, [r3, #24]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0208 	orr.w	r2, r2, #8
 8009a44:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3780      	adds	r7, #128	@ 0x80
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	ef7ffffe 	.word	0xef7ffffe

08009a74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ae0:	b092      	sub	sp, #72	@ 0x48
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	431a      	orrs	r2, r3
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	431a      	orrs	r2, r3
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4bbe      	ldr	r3, [pc, #760]	@ (8009e04 <UART_SetConfig+0x328>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b14:	430b      	orrs	r3, r1
 8009b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4ab3      	ldr	r2, [pc, #716]	@ (8009e08 <UART_SetConfig+0x32c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d004      	beq.n	8009b48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b44:	4313      	orrs	r3, r2
 8009b46:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	4baf      	ldr	r3, [pc, #700]	@ (8009e0c <UART_SetConfig+0x330>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	f023 010f 	bic.w	r1, r3, #15
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4aa6      	ldr	r2, [pc, #664]	@ (8009e10 <UART_SetConfig+0x334>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d177      	bne.n	8009c6c <UART_SetConfig+0x190>
 8009b7c:	4ba5      	ldr	r3, [pc, #660]	@ (8009e14 <UART_SetConfig+0x338>)
 8009b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b84:	2b28      	cmp	r3, #40	@ 0x28
 8009b86:	d86d      	bhi.n	8009c64 <UART_SetConfig+0x188>
 8009b88:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <UART_SetConfig+0xb4>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009c35 	.word	0x08009c35
 8009b94:	08009c65 	.word	0x08009c65
 8009b98:	08009c65 	.word	0x08009c65
 8009b9c:	08009c65 	.word	0x08009c65
 8009ba0:	08009c65 	.word	0x08009c65
 8009ba4:	08009c65 	.word	0x08009c65
 8009ba8:	08009c65 	.word	0x08009c65
 8009bac:	08009c65 	.word	0x08009c65
 8009bb0:	08009c3d 	.word	0x08009c3d
 8009bb4:	08009c65 	.word	0x08009c65
 8009bb8:	08009c65 	.word	0x08009c65
 8009bbc:	08009c65 	.word	0x08009c65
 8009bc0:	08009c65 	.word	0x08009c65
 8009bc4:	08009c65 	.word	0x08009c65
 8009bc8:	08009c65 	.word	0x08009c65
 8009bcc:	08009c65 	.word	0x08009c65
 8009bd0:	08009c45 	.word	0x08009c45
 8009bd4:	08009c65 	.word	0x08009c65
 8009bd8:	08009c65 	.word	0x08009c65
 8009bdc:	08009c65 	.word	0x08009c65
 8009be0:	08009c65 	.word	0x08009c65
 8009be4:	08009c65 	.word	0x08009c65
 8009be8:	08009c65 	.word	0x08009c65
 8009bec:	08009c65 	.word	0x08009c65
 8009bf0:	08009c4d 	.word	0x08009c4d
 8009bf4:	08009c65 	.word	0x08009c65
 8009bf8:	08009c65 	.word	0x08009c65
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009c65 	.word	0x08009c65
 8009c04:	08009c65 	.word	0x08009c65
 8009c08:	08009c65 	.word	0x08009c65
 8009c0c:	08009c65 	.word	0x08009c65
 8009c10:	08009c55 	.word	0x08009c55
 8009c14:	08009c65 	.word	0x08009c65
 8009c18:	08009c65 	.word	0x08009c65
 8009c1c:	08009c65 	.word	0x08009c65
 8009c20:	08009c65 	.word	0x08009c65
 8009c24:	08009c65 	.word	0x08009c65
 8009c28:	08009c65 	.word	0x08009c65
 8009c2c:	08009c65 	.word	0x08009c65
 8009c30:	08009c5d 	.word	0x08009c5d
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c3a:	e222      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c42:	e21e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c44:	2308      	movs	r3, #8
 8009c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c4a:	e21a      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c4c:	2310      	movs	r3, #16
 8009c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c52:	e216      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c54:	2320      	movs	r3, #32
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c5a:	e212      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c5c:	2340      	movs	r3, #64	@ 0x40
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c62:	e20e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c64:	2380      	movs	r3, #128	@ 0x80
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009c6a:	e20a      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a69      	ldr	r2, [pc, #420]	@ (8009e18 <UART_SetConfig+0x33c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d130      	bne.n	8009cd8 <UART_SetConfig+0x1fc>
 8009c76:	4b67      	ldr	r3, [pc, #412]	@ (8009e14 <UART_SetConfig+0x338>)
 8009c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c7a:	f003 0307 	and.w	r3, r3, #7
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d826      	bhi.n	8009cd0 <UART_SetConfig+0x1f4>
 8009c82:	a201      	add	r2, pc, #4	@ (adr r2, 8009c88 <UART_SetConfig+0x1ac>)
 8009c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c88:	08009ca1 	.word	0x08009ca1
 8009c8c:	08009ca9 	.word	0x08009ca9
 8009c90:	08009cb1 	.word	0x08009cb1
 8009c94:	08009cb9 	.word	0x08009cb9
 8009c98:	08009cc1 	.word	0x08009cc1
 8009c9c:	08009cc9 	.word	0x08009cc9
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ca6:	e1ec      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009ca8:	2304      	movs	r3, #4
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cae:	e1e8      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cb6:	e1e4      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cb8:	2310      	movs	r3, #16
 8009cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cbe:	e1e0      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cc0:	2320      	movs	r3, #32
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cc6:	e1dc      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cc8:	2340      	movs	r3, #64	@ 0x40
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cce:	e1d8      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cd0:	2380      	movs	r3, #128	@ 0x80
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009cd6:	e1d4      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8009e1c <UART_SetConfig+0x340>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d130      	bne.n	8009d44 <UART_SetConfig+0x268>
 8009ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8009e14 <UART_SetConfig+0x338>)
 8009ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d826      	bhi.n	8009d3c <UART_SetConfig+0x260>
 8009cee:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <UART_SetConfig+0x218>)
 8009cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf4:	08009d0d 	.word	0x08009d0d
 8009cf8:	08009d15 	.word	0x08009d15
 8009cfc:	08009d1d 	.word	0x08009d1d
 8009d00:	08009d25 	.word	0x08009d25
 8009d04:	08009d2d 	.word	0x08009d2d
 8009d08:	08009d35 	.word	0x08009d35
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d12:	e1b6      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d14:	2304      	movs	r3, #4
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d1a:	e1b2      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d1c:	2308      	movs	r3, #8
 8009d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d22:	e1ae      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d24:	2310      	movs	r3, #16
 8009d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d2a:	e1aa      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d32:	e1a6      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d34:	2340      	movs	r3, #64	@ 0x40
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d3a:	e1a2      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d3c:	2380      	movs	r3, #128	@ 0x80
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d42:	e19e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a35      	ldr	r2, [pc, #212]	@ (8009e20 <UART_SetConfig+0x344>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d130      	bne.n	8009db0 <UART_SetConfig+0x2d4>
 8009d4e:	4b31      	ldr	r3, [pc, #196]	@ (8009e14 <UART_SetConfig+0x338>)
 8009d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d826      	bhi.n	8009da8 <UART_SetConfig+0x2cc>
 8009d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d60 <UART_SetConfig+0x284>)
 8009d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d60:	08009d79 	.word	0x08009d79
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d89 	.word	0x08009d89
 8009d6c:	08009d91 	.word	0x08009d91
 8009d70:	08009d99 	.word	0x08009d99
 8009d74:	08009da1 	.word	0x08009da1
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d7e:	e180      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d80:	2304      	movs	r3, #4
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d86:	e17c      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d8e:	e178      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d90:	2310      	movs	r3, #16
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d96:	e174      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009d9e:	e170      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009da0:	2340      	movs	r3, #64	@ 0x40
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009da6:	e16c      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009da8:	2380      	movs	r3, #128	@ 0x80
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dae:	e168      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a1b      	ldr	r2, [pc, #108]	@ (8009e24 <UART_SetConfig+0x348>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d142      	bne.n	8009e40 <UART_SetConfig+0x364>
 8009dba:	4b16      	ldr	r3, [pc, #88]	@ (8009e14 <UART_SetConfig+0x338>)
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	2b05      	cmp	r3, #5
 8009dc4:	d838      	bhi.n	8009e38 <UART_SetConfig+0x35c>
 8009dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <UART_SetConfig+0x2f0>)
 8009dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dcc:	08009de5 	.word	0x08009de5
 8009dd0:	08009ded 	.word	0x08009ded
 8009dd4:	08009df5 	.word	0x08009df5
 8009dd8:	08009dfd 	.word	0x08009dfd
 8009ddc:	08009e29 	.word	0x08009e29
 8009de0:	08009e31 	.word	0x08009e31
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dea:	e14a      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009df2:	e146      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009dfa:	e142      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e02:	e13e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009e04:	cfff69f3 	.word	0xcfff69f3
 8009e08:	58000c00 	.word	0x58000c00
 8009e0c:	11fff4ff 	.word	0x11fff4ff
 8009e10:	40011000 	.word	0x40011000
 8009e14:	58024400 	.word	0x58024400
 8009e18:	40004400 	.word	0x40004400
 8009e1c:	40004800 	.word	0x40004800
 8009e20:	40004c00 	.word	0x40004c00
 8009e24:	40005000 	.word	0x40005000
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e2e:	e128      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e36:	e124      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009e38:	2380      	movs	r3, #128	@ 0x80
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009e3e:	e120      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4acb      	ldr	r2, [pc, #812]	@ (800a174 <UART_SetConfig+0x698>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d176      	bne.n	8009f38 <UART_SetConfig+0x45c>
 8009e4a:	4bcb      	ldr	r3, [pc, #812]	@ (800a178 <UART_SetConfig+0x69c>)
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e52:	2b28      	cmp	r3, #40	@ 0x28
 8009e54:	d86c      	bhi.n	8009f30 <UART_SetConfig+0x454>
 8009e56:	a201      	add	r2, pc, #4	@ (adr r2, 8009e5c <UART_SetConfig+0x380>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009f01 	.word	0x08009f01
 8009e60:	08009f31 	.word	0x08009f31
 8009e64:	08009f31 	.word	0x08009f31
 8009e68:	08009f31 	.word	0x08009f31
 8009e6c:	08009f31 	.word	0x08009f31
 8009e70:	08009f31 	.word	0x08009f31
 8009e74:	08009f31 	.word	0x08009f31
 8009e78:	08009f31 	.word	0x08009f31
 8009e7c:	08009f09 	.word	0x08009f09
 8009e80:	08009f31 	.word	0x08009f31
 8009e84:	08009f31 	.word	0x08009f31
 8009e88:	08009f31 	.word	0x08009f31
 8009e8c:	08009f31 	.word	0x08009f31
 8009e90:	08009f31 	.word	0x08009f31
 8009e94:	08009f31 	.word	0x08009f31
 8009e98:	08009f31 	.word	0x08009f31
 8009e9c:	08009f11 	.word	0x08009f11
 8009ea0:	08009f31 	.word	0x08009f31
 8009ea4:	08009f31 	.word	0x08009f31
 8009ea8:	08009f31 	.word	0x08009f31
 8009eac:	08009f31 	.word	0x08009f31
 8009eb0:	08009f31 	.word	0x08009f31
 8009eb4:	08009f31 	.word	0x08009f31
 8009eb8:	08009f31 	.word	0x08009f31
 8009ebc:	08009f19 	.word	0x08009f19
 8009ec0:	08009f31 	.word	0x08009f31
 8009ec4:	08009f31 	.word	0x08009f31
 8009ec8:	08009f31 	.word	0x08009f31
 8009ecc:	08009f31 	.word	0x08009f31
 8009ed0:	08009f31 	.word	0x08009f31
 8009ed4:	08009f31 	.word	0x08009f31
 8009ed8:	08009f31 	.word	0x08009f31
 8009edc:	08009f21 	.word	0x08009f21
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f31 	.word	0x08009f31
 8009eec:	08009f31 	.word	0x08009f31
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f31 	.word	0x08009f31
 8009ef8:	08009f31 	.word	0x08009f31
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	2301      	movs	r3, #1
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f06:	e0bc      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f0e:	e0b8      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f16:	e0b4      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f1e:	e0b0      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f20:	2320      	movs	r3, #32
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f26:	e0ac      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f28:	2340      	movs	r3, #64	@ 0x40
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f2e:	e0a8      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f30:	2380      	movs	r3, #128	@ 0x80
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f36:	e0a4      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a8f      	ldr	r2, [pc, #572]	@ (800a17c <UART_SetConfig+0x6a0>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d130      	bne.n	8009fa4 <UART_SetConfig+0x4c8>
 8009f42:	4b8d      	ldr	r3, [pc, #564]	@ (800a178 <UART_SetConfig+0x69c>)
 8009f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b05      	cmp	r3, #5
 8009f4c:	d826      	bhi.n	8009f9c <UART_SetConfig+0x4c0>
 8009f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f54 <UART_SetConfig+0x478>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f6d 	.word	0x08009f6d
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	08009f7d 	.word	0x08009f7d
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009f8d 	.word	0x08009f8d
 8009f68:	08009f95 	.word	0x08009f95
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f72:	e086      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f74:	2304      	movs	r3, #4
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f7a:	e082      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f82:	e07e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f84:	2310      	movs	r3, #16
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f8a:	e07a      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f8c:	2320      	movs	r3, #32
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f92:	e076      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f94:	2340      	movs	r3, #64	@ 0x40
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009f9a:	e072      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009f9c:	2380      	movs	r3, #128	@ 0x80
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fa2:	e06e      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a75      	ldr	r2, [pc, #468]	@ (800a180 <UART_SetConfig+0x6a4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d130      	bne.n	800a010 <UART_SetConfig+0x534>
 8009fae:	4b72      	ldr	r3, [pc, #456]	@ (800a178 <UART_SetConfig+0x69c>)
 8009fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	2b05      	cmp	r3, #5
 8009fb8:	d826      	bhi.n	800a008 <UART_SetConfig+0x52c>
 8009fba:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc0 <UART_SetConfig+0x4e4>)
 8009fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc0:	08009fd9 	.word	0x08009fd9
 8009fc4:	08009fe1 	.word	0x08009fe1
 8009fc8:	08009fe9 	.word	0x08009fe9
 8009fcc:	08009ff1 	.word	0x08009ff1
 8009fd0:	08009ff9 	.word	0x08009ff9
 8009fd4:	0800a001 	.word	0x0800a001
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fde:	e050      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fe6:	e04c      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fee:	e048      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff6:	e044      	b.n	800a082 <UART_SetConfig+0x5a6>
 8009ff8:	2320      	movs	r3, #32
 8009ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffe:	e040      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a000:	2340      	movs	r3, #64	@ 0x40
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a006:	e03c      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a008:	2380      	movs	r3, #128	@ 0x80
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00e:	e038      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a5b      	ldr	r2, [pc, #364]	@ (800a184 <UART_SetConfig+0x6a8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d130      	bne.n	800a07c <UART_SetConfig+0x5a0>
 800a01a:	4b57      	ldr	r3, [pc, #348]	@ (800a178 <UART_SetConfig+0x69c>)
 800a01c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b05      	cmp	r3, #5
 800a024:	d826      	bhi.n	800a074 <UART_SetConfig+0x598>
 800a026:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <UART_SetConfig+0x550>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a04d 	.word	0x0800a04d
 800a034:	0800a055 	.word	0x0800a055
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a065 	.word	0x0800a065
 800a040:	0800a06d 	.word	0x0800a06d
 800a044:	2302      	movs	r3, #2
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a04a:	e01a      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a04c:	2304      	movs	r3, #4
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a052:	e016      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a054:	2308      	movs	r3, #8
 800a056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05a:	e012      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a062:	e00e      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a064:	2320      	movs	r3, #32
 800a066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06a:	e00a      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a06c:	2340      	movs	r3, #64	@ 0x40
 800a06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a072:	e006      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a074:	2380      	movs	r3, #128	@ 0x80
 800a076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07a:	e002      	b.n	800a082 <UART_SetConfig+0x5a6>
 800a07c:	2380      	movs	r3, #128	@ 0x80
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a3f      	ldr	r2, [pc, #252]	@ (800a184 <UART_SetConfig+0x6a8>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	f040 80f8 	bne.w	800a27e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a08e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a092:	2b20      	cmp	r3, #32
 800a094:	dc46      	bgt.n	800a124 <UART_SetConfig+0x648>
 800a096:	2b02      	cmp	r3, #2
 800a098:	f2c0 8082 	blt.w	800a1a0 <UART_SetConfig+0x6c4>
 800a09c:	3b02      	subs	r3, #2
 800a09e:	2b1e      	cmp	r3, #30
 800a0a0:	d87e      	bhi.n	800a1a0 <UART_SetConfig+0x6c4>
 800a0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <UART_SetConfig+0x5cc>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a12b 	.word	0x0800a12b
 800a0ac:	0800a1a1 	.word	0x0800a1a1
 800a0b0:	0800a133 	.word	0x0800a133
 800a0b4:	0800a1a1 	.word	0x0800a1a1
 800a0b8:	0800a1a1 	.word	0x0800a1a1
 800a0bc:	0800a1a1 	.word	0x0800a1a1
 800a0c0:	0800a143 	.word	0x0800a143
 800a0c4:	0800a1a1 	.word	0x0800a1a1
 800a0c8:	0800a1a1 	.word	0x0800a1a1
 800a0cc:	0800a1a1 	.word	0x0800a1a1
 800a0d0:	0800a1a1 	.word	0x0800a1a1
 800a0d4:	0800a1a1 	.word	0x0800a1a1
 800a0d8:	0800a1a1 	.word	0x0800a1a1
 800a0dc:	0800a1a1 	.word	0x0800a1a1
 800a0e0:	0800a153 	.word	0x0800a153
 800a0e4:	0800a1a1 	.word	0x0800a1a1
 800a0e8:	0800a1a1 	.word	0x0800a1a1
 800a0ec:	0800a1a1 	.word	0x0800a1a1
 800a0f0:	0800a1a1 	.word	0x0800a1a1
 800a0f4:	0800a1a1 	.word	0x0800a1a1
 800a0f8:	0800a1a1 	.word	0x0800a1a1
 800a0fc:	0800a1a1 	.word	0x0800a1a1
 800a100:	0800a1a1 	.word	0x0800a1a1
 800a104:	0800a1a1 	.word	0x0800a1a1
 800a108:	0800a1a1 	.word	0x0800a1a1
 800a10c:	0800a1a1 	.word	0x0800a1a1
 800a110:	0800a1a1 	.word	0x0800a1a1
 800a114:	0800a1a1 	.word	0x0800a1a1
 800a118:	0800a1a1 	.word	0x0800a1a1
 800a11c:	0800a1a1 	.word	0x0800a1a1
 800a120:	0800a193 	.word	0x0800a193
 800a124:	2b40      	cmp	r3, #64	@ 0x40
 800a126:	d037      	beq.n	800a198 <UART_SetConfig+0x6bc>
 800a128:	e03a      	b.n	800a1a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a12a:	f7fd ff89 	bl	8008040 <HAL_RCCEx_GetD3PCLK1Freq>
 800a12e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a130:	e03c      	b.n	800a1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a136:	4618      	mov	r0, r3
 800a138:	f7fd ff98 	bl	800806c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a140:	e034      	b.n	800a1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a142:	f107 0318 	add.w	r3, r7, #24
 800a146:	4618      	mov	r0, r3
 800a148:	f7fe f8e4 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a150:	e02c      	b.n	800a1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a152:	4b09      	ldr	r3, [pc, #36]	@ (800a178 <UART_SetConfig+0x69c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 0320 	and.w	r3, r3, #32
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a15e:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <UART_SetConfig+0x69c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	08db      	lsrs	r3, r3, #3
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	4a07      	ldr	r2, [pc, #28]	@ (800a188 <UART_SetConfig+0x6ac>)
 800a16a:	fa22 f303 	lsr.w	r3, r2, r3
 800a16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a170:	e01c      	b.n	800a1ac <UART_SetConfig+0x6d0>
 800a172:	bf00      	nop
 800a174:	40011400 	.word	0x40011400
 800a178:	58024400 	.word	0x58024400
 800a17c:	40007800 	.word	0x40007800
 800a180:	40007c00 	.word	0x40007c00
 800a184:	58000c00 	.word	0x58000c00
 800a188:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a18c:	4b9d      	ldr	r3, [pc, #628]	@ (800a404 <UART_SetConfig+0x928>)
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e00c      	b.n	800a1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a192:	4b9d      	ldr	r3, [pc, #628]	@ (800a408 <UART_SetConfig+0x92c>)
 800a194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a196:	e009      	b.n	800a1ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a19e:	e005      	b.n	800a1ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a1aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 81de 	beq.w	800a570 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	4a94      	ldr	r2, [pc, #592]	@ (800a40c <UART_SetConfig+0x930>)
 800a1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1c6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	4413      	add	r3, r2
 800a1d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d305      	bcc.n	800a1e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d903      	bls.n	800a1ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a1ea:	e1c1      	b.n	800a570 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	60bb      	str	r3, [r7, #8]
 800a1f2:	60fa      	str	r2, [r7, #12]
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f8:	4a84      	ldr	r2, [pc, #528]	@ (800a40c <UART_SetConfig+0x930>)
 800a1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2200      	movs	r2, #0
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	607a      	str	r2, [r7, #4]
 800a206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a20a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a20e:	f7f6 f8bf 	bl	8000390 <__aeabi_uldivmod>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	f04f 0200 	mov.w	r2, #0
 800a21e:	f04f 0300 	mov.w	r3, #0
 800a222:	020b      	lsls	r3, r1, #8
 800a224:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a228:	0202      	lsls	r2, r0, #8
 800a22a:	6979      	ldr	r1, [r7, #20]
 800a22c:	6849      	ldr	r1, [r1, #4]
 800a22e:	0849      	lsrs	r1, r1, #1
 800a230:	2000      	movs	r0, #0
 800a232:	460c      	mov	r4, r1
 800a234:	4605      	mov	r5, r0
 800a236:	eb12 0804 	adds.w	r8, r2, r4
 800a23a:	eb43 0905 	adc.w	r9, r3, r5
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	469a      	mov	sl, r3
 800a246:	4693      	mov	fp, r2
 800a248:	4652      	mov	r2, sl
 800a24a:	465b      	mov	r3, fp
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 f89e 	bl	8000390 <__aeabi_uldivmod>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4613      	mov	r3, r2
 800a25a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a262:	d308      	bcc.n	800a276 <UART_SetConfig+0x79a>
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a26a:	d204      	bcs.n	800a276 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a272:	60da      	str	r2, [r3, #12]
 800a274:	e17c      	b.n	800a570 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a27c:	e178      	b.n	800a570 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a286:	f040 80c5 	bne.w	800a414 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a28a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a28e:	2b20      	cmp	r3, #32
 800a290:	dc48      	bgt.n	800a324 <UART_SetConfig+0x848>
 800a292:	2b00      	cmp	r3, #0
 800a294:	db7b      	blt.n	800a38e <UART_SetConfig+0x8b2>
 800a296:	2b20      	cmp	r3, #32
 800a298:	d879      	bhi.n	800a38e <UART_SetConfig+0x8b2>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x7c4>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a32b 	.word	0x0800a32b
 800a2a4:	0800a333 	.word	0x0800a333
 800a2a8:	0800a38f 	.word	0x0800a38f
 800a2ac:	0800a38f 	.word	0x0800a38f
 800a2b0:	0800a33b 	.word	0x0800a33b
 800a2b4:	0800a38f 	.word	0x0800a38f
 800a2b8:	0800a38f 	.word	0x0800a38f
 800a2bc:	0800a38f 	.word	0x0800a38f
 800a2c0:	0800a34b 	.word	0x0800a34b
 800a2c4:	0800a38f 	.word	0x0800a38f
 800a2c8:	0800a38f 	.word	0x0800a38f
 800a2cc:	0800a38f 	.word	0x0800a38f
 800a2d0:	0800a38f 	.word	0x0800a38f
 800a2d4:	0800a38f 	.word	0x0800a38f
 800a2d8:	0800a38f 	.word	0x0800a38f
 800a2dc:	0800a38f 	.word	0x0800a38f
 800a2e0:	0800a35b 	.word	0x0800a35b
 800a2e4:	0800a38f 	.word	0x0800a38f
 800a2e8:	0800a38f 	.word	0x0800a38f
 800a2ec:	0800a38f 	.word	0x0800a38f
 800a2f0:	0800a38f 	.word	0x0800a38f
 800a2f4:	0800a38f 	.word	0x0800a38f
 800a2f8:	0800a38f 	.word	0x0800a38f
 800a2fc:	0800a38f 	.word	0x0800a38f
 800a300:	0800a38f 	.word	0x0800a38f
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a38f 	.word	0x0800a38f
 800a30c:	0800a38f 	.word	0x0800a38f
 800a310:	0800a38f 	.word	0x0800a38f
 800a314:	0800a38f 	.word	0x0800a38f
 800a318:	0800a38f 	.word	0x0800a38f
 800a31c:	0800a38f 	.word	0x0800a38f
 800a320:	0800a381 	.word	0x0800a381
 800a324:	2b40      	cmp	r3, #64	@ 0x40
 800a326:	d02e      	beq.n	800a386 <UART_SetConfig+0x8aa>
 800a328:	e031      	b.n	800a38e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a32a:	f7fc fc53 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 800a32e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a330:	e033      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a332:	f7fc fc65 	bl	8006c00 <HAL_RCC_GetPCLK2Freq>
 800a336:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a338:	e02f      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a33a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fd fe94 	bl	800806c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a348:	e027      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34a:	f107 0318 	add.w	r3, r7, #24
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fd ffe0 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a358:	e01f      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a35a:	4b2d      	ldr	r3, [pc, #180]	@ (800a410 <UART_SetConfig+0x934>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 0320 	and.w	r3, r3, #32
 800a362:	2b00      	cmp	r3, #0
 800a364:	d009      	beq.n	800a37a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a366:	4b2a      	ldr	r3, [pc, #168]	@ (800a410 <UART_SetConfig+0x934>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	08db      	lsrs	r3, r3, #3
 800a36c:	f003 0303 	and.w	r3, r3, #3
 800a370:	4a24      	ldr	r2, [pc, #144]	@ (800a404 <UART_SetConfig+0x928>)
 800a372:	fa22 f303 	lsr.w	r3, r2, r3
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a378:	e00f      	b.n	800a39a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a37a:	4b22      	ldr	r3, [pc, #136]	@ (800a404 <UART_SetConfig+0x928>)
 800a37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a37e:	e00c      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a380:	4b21      	ldr	r3, [pc, #132]	@ (800a408 <UART_SetConfig+0x92c>)
 800a382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a384:	e009      	b.n	800a39a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38c:	e005      	b.n	800a39a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f000 80e7 	beq.w	800a570 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3a6:	4a19      	ldr	r2, [pc, #100]	@ (800a40c <UART_SetConfig+0x930>)
 800a3a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b4:	005a      	lsls	r2, r3, #1
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	441a      	add	r2, r3
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	2b0f      	cmp	r3, #15
 800a3cc:	d916      	bls.n	800a3fc <UART_SetConfig+0x920>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3d4:	d212      	bcs.n	800a3fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f023 030f 	bic.w	r3, r3, #15
 800a3de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e2:	085b      	lsrs	r3, r3, #1
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a3f8:	60da      	str	r2, [r3, #12]
 800a3fa:	e0b9      	b.n	800a570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a402:	e0b5      	b.n	800a570 <UART_SetConfig+0xa94>
 800a404:	03d09000 	.word	0x03d09000
 800a408:	003d0900 	.word	0x003d0900
 800a40c:	080177b0 	.word	0x080177b0
 800a410:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a414:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a418:	2b20      	cmp	r3, #32
 800a41a:	dc49      	bgt.n	800a4b0 <UART_SetConfig+0x9d4>
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	db7c      	blt.n	800a51a <UART_SetConfig+0xa3e>
 800a420:	2b20      	cmp	r3, #32
 800a422:	d87a      	bhi.n	800a51a <UART_SetConfig+0xa3e>
 800a424:	a201      	add	r2, pc, #4	@ (adr r2, 800a42c <UART_SetConfig+0x950>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a4b7 	.word	0x0800a4b7
 800a430:	0800a4bf 	.word	0x0800a4bf
 800a434:	0800a51b 	.word	0x0800a51b
 800a438:	0800a51b 	.word	0x0800a51b
 800a43c:	0800a4c7 	.word	0x0800a4c7
 800a440:	0800a51b 	.word	0x0800a51b
 800a444:	0800a51b 	.word	0x0800a51b
 800a448:	0800a51b 	.word	0x0800a51b
 800a44c:	0800a4d7 	.word	0x0800a4d7
 800a450:	0800a51b 	.word	0x0800a51b
 800a454:	0800a51b 	.word	0x0800a51b
 800a458:	0800a51b 	.word	0x0800a51b
 800a45c:	0800a51b 	.word	0x0800a51b
 800a460:	0800a51b 	.word	0x0800a51b
 800a464:	0800a51b 	.word	0x0800a51b
 800a468:	0800a51b 	.word	0x0800a51b
 800a46c:	0800a4e7 	.word	0x0800a4e7
 800a470:	0800a51b 	.word	0x0800a51b
 800a474:	0800a51b 	.word	0x0800a51b
 800a478:	0800a51b 	.word	0x0800a51b
 800a47c:	0800a51b 	.word	0x0800a51b
 800a480:	0800a51b 	.word	0x0800a51b
 800a484:	0800a51b 	.word	0x0800a51b
 800a488:	0800a51b 	.word	0x0800a51b
 800a48c:	0800a51b 	.word	0x0800a51b
 800a490:	0800a51b 	.word	0x0800a51b
 800a494:	0800a51b 	.word	0x0800a51b
 800a498:	0800a51b 	.word	0x0800a51b
 800a49c:	0800a51b 	.word	0x0800a51b
 800a4a0:	0800a51b 	.word	0x0800a51b
 800a4a4:	0800a51b 	.word	0x0800a51b
 800a4a8:	0800a51b 	.word	0x0800a51b
 800a4ac:	0800a50d 	.word	0x0800a50d
 800a4b0:	2b40      	cmp	r3, #64	@ 0x40
 800a4b2:	d02e      	beq.n	800a512 <UART_SetConfig+0xa36>
 800a4b4:	e031      	b.n	800a51a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b6:	f7fc fb8d 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 800a4ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4bc:	e033      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4be:	f7fc fb9f 	bl	8006c00 <HAL_RCC_GetPCLK2Freq>
 800a4c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4c4:	e02f      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fd fdce 	bl	800806c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	e027      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4d6:	f107 0318 	add.w	r3, r7, #24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fd ff1a 	bl	8008314 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e4:	e01f      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4e6:	4b2d      	ldr	r3, [pc, #180]	@ (800a59c <UART_SetConfig+0xac0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d009      	beq.n	800a506 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a59c <UART_SetConfig+0xac0>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	08db      	lsrs	r3, r3, #3
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	4a28      	ldr	r2, [pc, #160]	@ (800a5a0 <UART_SetConfig+0xac4>)
 800a4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a504:	e00f      	b.n	800a526 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a506:	4b26      	ldr	r3, [pc, #152]	@ (800a5a0 <UART_SetConfig+0xac4>)
 800a508:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50a:	e00c      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a50c:	4b25      	ldr	r3, [pc, #148]	@ (800a5a4 <UART_SetConfig+0xac8>)
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a510:	e009      	b.n	800a526 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a518:	e005      	b.n	800a526 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a524:	bf00      	nop
    }

    if (pclk != 0U)
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d021      	beq.n	800a570 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a530:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a8 <UART_SetConfig+0xacc>)
 800a532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a536:	461a      	mov	r2, r3
 800a538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a53a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	441a      	add	r2, r3
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a54e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a552:	2b0f      	cmp	r3, #15
 800a554:	d909      	bls.n	800a56a <UART_SetConfig+0xa8e>
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a55c:	d205      	bcs.n	800a56a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a55e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a560:	b29a      	uxth	r2, r3
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60da      	str	r2, [r3, #12]
 800a568:	e002      	b.n	800a570 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	2201      	movs	r2, #1
 800a574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	2200      	movs	r2, #0
 800a584:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2200      	movs	r2, #0
 800a58a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a58c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a590:	4618      	mov	r0, r3
 800a592:	3748      	adds	r7, #72	@ 0x48
 800a594:	46bd      	mov	sp, r7
 800a596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a59a:	bf00      	nop
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	03d09000 	.word	0x03d09000
 800a5a4:	003d0900 	.word	0x003d0900
 800a5a8:	080177b0 	.word	0x080177b0

0800a5ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b8:	f003 0308 	and.w	r3, r3, #8
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a662:	f003 0320 	and.w	r3, r3, #32
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6aa:	d10a      	bne.n	800a6c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b098      	sub	sp, #96	@ 0x60
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a700:	f7f7 f9d6 	bl	8001ab0 <HAL_GetTick>
 800a704:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b08      	cmp	r3, #8
 800a712:	d12f      	bne.n	800a774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a71c:	2200      	movs	r2, #0
 800a71e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f88e 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d022      	beq.n	800a774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a73e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a742:	653b      	str	r3, [r7, #80]	@ 0x50
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a74c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a74e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a75a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e6      	bne.n	800a72e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	e063      	b.n	800a83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0304 	and.w	r3, r3, #4
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d149      	bne.n	800a816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a782:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a78a:	2200      	movs	r2, #0
 800a78c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f857 	bl	800a844 <UART_WaitOnFlagUntilTimeout>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d03c      	beq.n	800a816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e6      	bne.n	800a79c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f023 0301 	bic.w	r3, r3, #1
 800a7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7ee:	61fa      	str	r2, [r7, #28]
 800a7f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	69b9      	ldr	r1, [r7, #24]
 800a7f4:	69fa      	ldr	r2, [r7, #28]
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	617b      	str	r3, [r7, #20]
   return(result);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e5      	bne.n	800a7ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2220      	movs	r2, #32
 800a806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e012      	b.n	800a83c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2220      	movs	r2, #32
 800a822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3758      	adds	r7, #88	@ 0x58
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	4613      	mov	r3, r2
 800a852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a854:	e04f      	b.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d04b      	beq.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85e:	f7f7 f927 	bl	8001ab0 <HAL_GetTick>
 800a862:	4602      	mov	r2, r0
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d302      	bcc.n	800a874 <UART_WaitOnFlagUntilTimeout+0x30>
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e04e      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d037      	beq.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b80      	cmp	r3, #128	@ 0x80
 800a88a:	d034      	beq.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b40      	cmp	r3, #64	@ 0x40
 800a890:	d031      	beq.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	f003 0308 	and.w	r3, r3, #8
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d110      	bne.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f921 	bl	800aaf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2208      	movs	r2, #8
 800a8b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e029      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8d0:	d111      	bne.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f907 	bl	800aaf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e00f      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	69da      	ldr	r2, [r3, #28]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	4013      	ands	r3, r2
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	bf0c      	ite	eq
 800a906:	2301      	moveq	r3, #1
 800a908:	2300      	movne	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	429a      	cmp	r2, r3
 800a912:	d0a0      	beq.n	800a856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b096      	sub	sp, #88	@ 0x58
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	88fa      	ldrh	r2, [r7, #6]
 800a938:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2222      	movs	r2, #34	@ 0x22
 800a948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a952:	2b00      	cmp	r3, #0
 800a954:	d02d      	beq.n	800a9b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a95c:	4a40      	ldr	r2, [pc, #256]	@ (800aa60 <UART_Start_Receive_DMA+0x140>)
 800a95e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a966:	4a3f      	ldr	r2, [pc, #252]	@ (800aa64 <UART_Start_Receive_DMA+0x144>)
 800a968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a970:	4a3d      	ldr	r2, [pc, #244]	@ (800aa68 <UART_Start_Receive_DMA+0x148>)
 800a972:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a97a:	2200      	movs	r2, #0
 800a97c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3324      	adds	r3, #36	@ 0x24
 800a98a:	4619      	mov	r1, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a990:	461a      	mov	r2, r3
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	f7f7 fd34 	bl	8002400 <HAL_DMA_Start_IT>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d009      	beq.n	800a9b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e051      	b.n	800aa56 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d018      	beq.n	800a9ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c2:	e853 3f00 	ldrex	r3, [r3]
 800a9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a9de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1e6      	bne.n	800a9ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f6:	e853 3f00 	ldrex	r3, [r3]
 800a9fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	f043 0301 	orr.w	r3, r3, #1
 800aa02:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa0c:	637a      	str	r2, [r7, #52]	@ 0x34
 800aa0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa14:	e841 2300 	strex	r3, r2, [r1]
 800aa18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e5      	bne.n	800a9ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3308      	adds	r3, #8
 800aa26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	e853 3f00 	ldrex	r3, [r3]
 800aa2e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa40:	623a      	str	r2, [r7, #32]
 800aa42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa44:	69f9      	ldr	r1, [r7, #28]
 800aa46:	6a3a      	ldr	r2, [r7, #32]
 800aa48:	e841 2300 	strex	r3, r2, [r1]
 800aa4c:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1e5      	bne.n	800aa20 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3758      	adds	r7, #88	@ 0x58
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800ac6f 	.word	0x0800ac6f
 800aa64:	0800ad97 	.word	0x0800ad97
 800aa68:	0800add5 	.word	0x0800add5

0800aa6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b08f      	sub	sp, #60	@ 0x3c
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aa88:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e6      	bne.n	800aa74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3308      	adds	r3, #8
 800aaac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	e853 3f00 	ldrex	r3, [r3]
 800aab4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aabc:	633b      	str	r3, [r7, #48]	@ 0x30
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3308      	adds	r3, #8
 800aac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aac6:	61ba      	str	r2, [r7, #24]
 800aac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaca:	6979      	ldr	r1, [r7, #20]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	e841 2300 	strex	r3, r2, [r1]
 800aad2:	613b      	str	r3, [r7, #16]
   return(result);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1e5      	bne.n	800aaa6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aae2:	bf00      	nop
 800aae4:	373c      	adds	r7, #60	@ 0x3c
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
	...

0800aaf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b095      	sub	sp, #84	@ 0x54
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e6      	bne.n	800aaf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3308      	adds	r3, #8
 800ab30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	e853 3f00 	ldrex	r3, [r3]
 800ab38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	4b1e      	ldr	r3, [pc, #120]	@ (800abb8 <UART_EndRxTransfer+0xc8>)
 800ab3e:	4013      	ands	r3, r2
 800ab40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3308      	adds	r3, #8
 800ab48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e5      	bne.n	800ab2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d118      	bne.n	800ab98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f023 0310 	bic.w	r3, r3, #16
 800ab7a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6979      	ldr	r1, [r7, #20]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	613b      	str	r3, [r7, #16]
   return(result);
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e6      	bne.n	800ab66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800abac:	bf00      	nop
 800abae:	3754      	adds	r7, #84	@ 0x54
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	effffffe 	.word	0xeffffffe

0800abbc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b090      	sub	sp, #64	@ 0x40
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abd2:	d037      	beq.n	800ac44 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800abd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3308      	adds	r3, #8
 800abe2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	623b      	str	r3, [r7, #32]
   return(result);
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800abf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3308      	adds	r3, #8
 800abfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abfc:	633a      	str	r2, [r7, #48]	@ 0x30
 800abfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac04:	e841 2300 	strex	r3, r2, [r1]
 800ac08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e5      	bne.n	800abdc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	e853 3f00 	ldrex	r3, [r3]
 800ac1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac2e:	61fb      	str	r3, [r7, #28]
 800ac30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac32:	69b9      	ldr	r1, [r7, #24]
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	e841 2300 	strex	r3, r2, [r1]
 800ac3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1e6      	bne.n	800ac10 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac42:	e002      	b.n	800ac4a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ac44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ac46:	f7fe ff15 	bl	8009a74 <HAL_UART_TxCpltCallback>
}
 800ac4a:	bf00      	nop
 800ac4c:	3740      	adds	r7, #64	@ 0x40
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7fe ff11 	bl	8009a88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac66:	bf00      	nop
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b09c      	sub	sp, #112	@ 0x70
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	69db      	ldr	r3, [r3, #28]
 800ac80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac84:	d071      	beq.n	800ad6a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ac86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aca2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	461a      	mov	r2, r3
 800acaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800acae:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800acb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e6      	bne.n	800ac8e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acca:	e853 3f00 	ldrex	r3, [r3]
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd2:	f023 0301 	bic.w	r3, r3, #1
 800acd6:	667b      	str	r3, [r7, #100]	@ 0x64
 800acd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ace0:	647a      	str	r2, [r7, #68]	@ 0x44
 800ace2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ace6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ace8:	e841 2300 	strex	r3, r2, [r1]
 800acec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e5      	bne.n	800acc0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	3308      	adds	r3, #8
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfe:	e853 3f00 	ldrex	r3, [r3]
 800ad02:	623b      	str	r3, [r7, #32]
   return(result);
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad0a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3308      	adds	r3, #8
 800ad12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad14:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad1c:	e841 2300 	strex	r3, r2, [r1]
 800ad20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1e5      	bne.n	800acf4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d118      	bne.n	800ad6a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f023 0310 	bic.w	r3, r3, #16
 800ad4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	69b9      	ldr	r1, [r7, #24]
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	617b      	str	r3, [r7, #20]
   return(result);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e6      	bne.n	800ad38 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d107      	bne.n	800ad88 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad82:	f7fe fe9f 	bl	8009ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad86:	e002      	b.n	800ad8e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ad88:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad8a:	f009 fb29 	bl	80143e0 <HAL_UART_RxCpltCallback>
}
 800ad8e:	bf00      	nop
 800ad90:	3770      	adds	r7, #112	@ 0x70
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2201      	movs	r2, #1
 800ada8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d109      	bne.n	800adc6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800adb8:	085b      	lsrs	r3, r3, #1
 800adba:	b29b      	uxth	r3, r3
 800adbc:	4619      	mov	r1, r3
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7fe fe80 	bl	8009ac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adc4:	e002      	b.n	800adcc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7fe fe68 	bl	8009a9c <HAL_UART_RxHalfCpltCallback>
}
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adf0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adfc:	2b80      	cmp	r3, #128	@ 0x80
 800adfe:	d109      	bne.n	800ae14 <UART_DMAError+0x40>
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	2b21      	cmp	r3, #33	@ 0x21
 800ae04:	d106      	bne.n	800ae14 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f7ff fe2c 	bl	800aa6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	d109      	bne.n	800ae36 <UART_DMAError+0x62>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b22      	cmp	r3, #34	@ 0x22
 800ae26:	d106      	bne.n	800ae36 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ae30:	6978      	ldr	r0, [r7, #20]
 800ae32:	f7ff fe5d 	bl	800aaf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae3c:	f043 0210 	orr.w	r2, r3, #16
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae46:	6978      	ldr	r0, [r7, #20]
 800ae48:	f7fe fe32 	bl	8009ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae4c:	bf00      	nop
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d101      	bne.n	800ae6a <HAL_UARTEx_DisableFifoMode+0x16>
 800ae66:	2302      	movs	r3, #2
 800ae68:	e027      	b.n	800aeba <HAL_UARTEx_DisableFifoMode+0x66>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2224      	movs	r2, #36	@ 0x24
 800ae76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f022 0201 	bic.w	r2, r2, #1
 800ae90:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d101      	bne.n	800aede <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeda:	2302      	movs	r3, #2
 800aedc:	e02d      	b.n	800af3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2224      	movs	r2, #36	@ 0x24
 800aeea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f022 0201 	bic.w	r2, r2, #1
 800af04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	430a      	orrs	r2, r1
 800af18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f850 	bl	800afc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800af52:	2b01      	cmp	r3, #1
 800af54:	d101      	bne.n	800af5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af56:	2302      	movs	r3, #2
 800af58:	e02d      	b.n	800afb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2224      	movs	r2, #36	@ 0x24
 800af66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f022 0201 	bic.w	r2, r2, #1
 800af80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	430a      	orrs	r2, r1
 800af94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f812 	bl	800afc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d108      	bne.n	800afe2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afe0:	e031      	b.n	800b046 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afe2:	2310      	movs	r3, #16
 800afe4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afe6:	2310      	movs	r3, #16
 800afe8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	0e5b      	lsrs	r3, r3, #25
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	f003 0307 	and.w	r3, r3, #7
 800aff8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	0f5b      	lsrs	r3, r3, #29
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	7b3a      	ldrb	r2, [r7, #12]
 800b00e:	4911      	ldr	r1, [pc, #68]	@ (800b054 <UARTEx_SetNbDataToProcess+0x94>)
 800b010:	5c8a      	ldrb	r2, [r1, r2]
 800b012:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b016:	7b3a      	ldrb	r2, [r7, #12]
 800b018:	490f      	ldr	r1, [pc, #60]	@ (800b058 <UARTEx_SetNbDataToProcess+0x98>)
 800b01a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b01c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	7b7a      	ldrb	r2, [r7, #13]
 800b02c:	4909      	ldr	r1, [pc, #36]	@ (800b054 <UARTEx_SetNbDataToProcess+0x94>)
 800b02e:	5c8a      	ldrb	r2, [r1, r2]
 800b030:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b034:	7b7a      	ldrb	r2, [r7, #13]
 800b036:	4908      	ldr	r1, [pc, #32]	@ (800b058 <UARTEx_SetNbDataToProcess+0x98>)
 800b038:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b03a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	080177c8 	.word	0x080177c8
 800b058:	080177d0 	.word	0x080177d0

0800b05c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b05c:	b084      	sub	sp, #16
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	f107 001c 	add.w	r0, r7, #28
 800b06a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b06e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b072:	2b01      	cmp	r3, #1
 800b074:	d121      	bne.n	800b0ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68da      	ldr	r2, [r3, #12]
 800b086:	4b2c      	ldr	r3, [pc, #176]	@ (800b138 <USB_CoreInit+0xdc>)
 800b088:	4013      	ands	r3, r2
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b09a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d105      	bne.n	800b0ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 faaa 	bl	800b608 <USB_CoreReset>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]
 800b0b8:	e01b      	b.n	800b0f2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fa9e 	bl	800b608 <USB_CoreReset>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b0d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0e4:	e005      	b.n	800b0f2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b0f2:	7fbb      	ldrb	r3, [r7, #30]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d116      	bne.n	800b126 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b106:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <USB_CoreInit+0xe0>)
 800b108:	4313      	orrs	r3, r2
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f043 0206 	orr.w	r2, r3, #6
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	f043 0220 	orr.w	r2, r3, #32
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b126:	7bfb      	ldrb	r3, [r7, #15]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b132:	b004      	add	sp, #16
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	ffbdffbf 	.word	0xffbdffbf
 800b13c:	03ee0000 	.word	0x03ee0000

0800b140 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f023 0201 	bic.w	r2, r3, #1
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
 800b16a:	460b      	mov	r3, r1
 800b16c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b17e:	78fb      	ldrb	r3, [r7, #3]
 800b180:	2b01      	cmp	r3, #1
 800b182:	d115      	bne.n	800b1b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b190:	200a      	movs	r0, #10
 800b192:	f7f6 fc99 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	330a      	adds	r3, #10
 800b19a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fa25 	bl	800b5ec <USB_GetMode>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d01e      	beq.n	800b1e6 <USB_SetCurrentMode+0x84>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1ac:	d9f0      	bls.n	800b190 <USB_SetCurrentMode+0x2e>
 800b1ae:	e01a      	b.n	800b1e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d115      	bne.n	800b1e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1c2:	200a      	movs	r0, #10
 800b1c4:	f7f6 fc80 	bl	8001ac8 <HAL_Delay>
      ms += 10U;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	330a      	adds	r3, #10
 800b1cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa0c 	bl	800b5ec <USB_GetMode>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d005      	beq.n	800b1e6 <USB_SetCurrentMode+0x84>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1de:	d9f0      	bls.n	800b1c2 <USB_SetCurrentMode+0x60>
 800b1e0:	e001      	b.n	800b1e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e005      	b.n	800b1f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2bc8      	cmp	r3, #200	@ 0xc8
 800b1ea:	d101      	bne.n	800b1f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e000      	b.n	800b1f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1fc:	b084      	sub	sp, #16
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b086      	sub	sp, #24
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b20a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b216:	2300      	movs	r3, #0
 800b218:	613b      	str	r3, [r7, #16]
 800b21a:	e009      	b.n	800b230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	3340      	adds	r3, #64	@ 0x40
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	2200      	movs	r2, #0
 800b228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	3301      	adds	r3, #1
 800b22e:	613b      	str	r3, [r7, #16]
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b0e      	cmp	r3, #14
 800b234:	d9f2      	bls.n	800b21c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d11c      	bne.n	800b278 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b24c:	f043 0302 	orr.w	r3, r3, #2
 800b250:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b256:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	601a      	str	r2, [r3, #0]
 800b276:	e005      	b.n	800b284 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b27c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b28a:	461a      	mov	r2, r3
 800b28c:	2300      	movs	r3, #0
 800b28e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b290:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b294:	2b01      	cmp	r3, #1
 800b296:	d10d      	bne.n	800b2b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d104      	bne.n	800b2aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f968 	bl	800b578 <USB_SetDevSpeed>
 800b2a8:	e008      	b.n	800b2bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f963 	bl	800b578 <USB_SetDevSpeed>
 800b2b2:	e003      	b.n	800b2bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2b4:	2103      	movs	r1, #3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f95e 	bl	800b578 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2bc:	2110      	movs	r1, #16
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 f8fa 	bl	800b4b8 <USB_FlushTxFifo>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f924 	bl	800b51c <USB_FlushRxFifo>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	2300      	movs	r3, #0
 800b300:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b302:	2300      	movs	r3, #0
 800b304:	613b      	str	r3, [r7, #16]
 800b306:	e043      	b.n	800b390 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b31a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b31e:	d118      	bne.n	800b352 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10a      	bne.n	800b33c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b332:	461a      	mov	r2, r3
 800b334:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b338:	6013      	str	r3, [r2, #0]
 800b33a:	e013      	b.n	800b364 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b348:	461a      	mov	r2, r3
 800b34a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	e008      	b.n	800b364 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35e:	461a      	mov	r2, r3
 800b360:	2300      	movs	r3, #0
 800b362:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b370:	461a      	mov	r2, r3
 800b372:	2300      	movs	r3, #0
 800b374:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b382:	461a      	mov	r2, r3
 800b384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3301      	adds	r3, #1
 800b38e:	613b      	str	r3, [r7, #16]
 800b390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b394:	461a      	mov	r2, r3
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	4293      	cmp	r3, r2
 800b39a:	d3b5      	bcc.n	800b308 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	613b      	str	r3, [r7, #16]
 800b3a0:	e043      	b.n	800b42a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3b8:	d118      	bne.n	800b3ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10a      	bne.n	800b3d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b3d2:	6013      	str	r3, [r2, #0]
 800b3d4:	e013      	b.n	800b3fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	015a      	lsls	r2, r3, #5
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	4413      	add	r3, r2
 800b3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b3e8:	6013      	str	r3, [r2, #0]
 800b3ea:	e008      	b.n	800b3fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40a:	461a      	mov	r2, r3
 800b40c:	2300      	movs	r3, #0
 800b40e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b41c:	461a      	mov	r2, r3
 800b41e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	3301      	adds	r3, #1
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b42e:	461a      	mov	r2, r3
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	4293      	cmp	r3, r2
 800b434:	d3b5      	bcc.n	800b3a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b448:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b456:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d105      	bne.n	800b46c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	f043 0210 	orr.w	r2, r3, #16
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b0 <USB_DevInit+0x2b4>)
 800b472:	4313      	orrs	r3, r2
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b478:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	f043 0208 	orr.w	r2, r3, #8
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b48c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b490:	2b01      	cmp	r3, #1
 800b492:	d105      	bne.n	800b4a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	699a      	ldr	r2, [r3, #24]
 800b498:	4b06      	ldr	r3, [pc, #24]	@ (800b4b4 <USB_DevInit+0x2b8>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4ac:	b004      	add	sp, #16
 800b4ae:	4770      	bx	lr
 800b4b0:	803c3800 	.word	0x803c3800
 800b4b4:	40000004 	.word	0x40000004

0800b4b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4d2:	d901      	bls.n	800b4d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e01b      	b.n	800b510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	daf2      	bge.n	800b4c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	019b      	lsls	r3, r3, #6
 800b4e8:	f043 0220 	orr.w	r2, r3, #32
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4fc:	d901      	bls.n	800b502 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e006      	b.n	800b510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b20      	cmp	r3, #32
 800b50c:	d0f0      	beq.n	800b4f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3301      	adds	r3, #1
 800b52c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b534:	d901      	bls.n	800b53a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e018      	b.n	800b56c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	daf2      	bge.n	800b528 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2210      	movs	r2, #16
 800b54a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3301      	adds	r3, #1
 800b550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b558:	d901      	bls.n	800b55e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	e006      	b.n	800b56c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0310 	and.w	r3, r3, #16
 800b566:	2b10      	cmp	r3, #16
 800b568:	d0f0      	beq.n	800b54c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	68f9      	ldr	r1, [r7, #12]
 800b594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b598:	4313      	orrs	r3, r2
 800b59a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5c4:	f023 0303 	bic.w	r3, r3, #3
 800b5c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5d8:	f043 0302 	orr.w	r3, r3, #2
 800b5dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	f003 0301 	and.w	r3, r3, #1
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b620:	d901      	bls.n	800b626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e01b      	b.n	800b65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	daf2      	bge.n	800b614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	691b      	ldr	r3, [r3, #16]
 800b636:	f043 0201 	orr.w	r2, r3, #1
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b64a:	d901      	bls.n	800b650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e006      	b.n	800b65e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d0f0      	beq.n	800b63e <USB_CoreReset+0x36>

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
	...

0800b66c <AllocCmdSeqEntry>:
**    CmdSeqEntryType* - Pointer to allocated handler. NULL if no resource
**                       is allocated.
**------------------------------------------------------------------------------
*/
static CmdSeqEntryType* AllocCmdSeqEntry( const ABCC_CmdSeqType* pasCmdSeq )
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
   UINT8 i;
   CmdSeqEntryType* psEntry;
   ABCC_PORT_UseCritical();

   psEntry = NULL;
 800b674:	2300      	movs	r3, #0
 800b676:	60bb      	str	r3, [r7, #8]

   ABCC_PORT_EnterCritical();

   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
 800b67c:	e018      	b.n	800b6b0 <AllocCmdSeqEntry+0x44>
   {
      if( abcc_asCmdSeq[ i ].pasCmdSeq == NULL )
 800b67e:	7bfa      	ldrb	r2, [r7, #15]
 800b680:	4910      	ldr	r1, [pc, #64]	@ (800b6c4 <AllocCmdSeqEntry+0x58>)
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	440b      	add	r3, r1
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <AllocCmdSeqEntry+0x3e>
      {
         psEntry = &abcc_asCmdSeq[ i ];
 800b692:	7bfa      	ldrb	r2, [r7, #15]
 800b694:	4613      	mov	r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	4413      	add	r3, r2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4a09      	ldr	r2, [pc, #36]	@ (800b6c4 <AllocCmdSeqEntry+0x58>)
 800b69e:	4413      	add	r3, r2
 800b6a0:	60bb      	str	r3, [r7, #8]
         psEntry->pasCmdSeq = pasCmdSeq;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	601a      	str	r2, [r3, #0]
         break;
 800b6a8:	e005      	b.n	800b6b6 <AllocCmdSeqEntry+0x4a>
   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	73fb      	strb	r3, [r7, #15]
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d9e3      	bls.n	800b67e <AllocCmdSeqEntry+0x12>
      }
   }

   ABCC_PORT_ExitCritical();
   return( psEntry );
 800b6b6:	68bb      	ldr	r3, [r7, #8]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr
 800b6c4:	24001440 	.word	0x24001440

0800b6c8 <ResetCmdSeqEntry>:
** Returns:
**    None
**------------------------------------------------------------------------------
*/
static void ResetCmdSeqEntry( CmdSeqEntryType* psEntry, BOOL fInitial )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
   if( psEntry != NULL )
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d02d      	beq.n	800b734 <ResetCmdSeqEntry+0x6c>
   {
      if( fInitial )
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d003      	beq.n	800b6e6 <ResetCmdSeqEntry+0x1e>
      {
         psEntry->eState = CMD_SEQ_STATE_NOT_STARTED;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	721a      	strb	r2, [r3, #8]
 800b6e4:	e011      	b.n	800b70a <ResetCmdSeqEntry+0x42>
      else
      {
         /*
         ** This call may affect file global abcc_iNeedReTriggerCount
         */
         if( !CheckAndSetState( psEntry, CMD_SEQ_STATE_ANY, CMD_SEQ_STATE_NOT_STARTED ) )
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	2104      	movs	r1, #4
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f898 	bl	800b820 <CheckAndSetState>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d109      	bne.n	800b70a <ResetCmdSeqEntry+0x42>
         {
            ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED, 0, "Failed to set command sequence state\n" );
 800b6f6:	4b11      	ldr	r3, [pc, #68]	@ (800b73c <ResetCmdSeqEntry+0x74>)
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	2388      	movs	r3, #136	@ 0x88
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	4b10      	ldr	r3, [pc, #64]	@ (800b740 <ResetCmdSeqEntry+0x78>)
 800b700:	2200      	movs	r2, #0
 800b702:	212b      	movs	r1, #43	@ 0x2b
 800b704:	2000      	movs	r0, #0
 800b706:	f001 ff9f 	bl	800d648 <ABCC_LogHandler>
         }
      }

      psEntry->pasCmdSeq = NULL;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
      psEntry->pnSeqDone = NULL;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	605a      	str	r2, [r3, #4]
      psEntry->bCurrSeqIndex = 0;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	725a      	strb	r2, [r3, #9]
      psEntry->bSourceId = 0;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	729a      	strb	r2, [r3, #10]
      psEntry->bRetryCount = 0;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	72da      	strb	r2, [r3, #11]
      psEntry->pxUserData = NULL;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	60da      	str	r2, [r3, #12]
      psEntry->eSeqResult = ABCC_CMDSEQ_RESULT_COMPLETED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	741a      	strb	r2, [r3, #16]
   }
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	08015ca4 	.word	0x08015ca4
 800b740:	08015c88 	.word	0x08015c88

0800b744 <FindCmdSeqEntryFromSourceId>:
** Returns:
**    CmdSeqEntryType* - Mapped handler. NULL if not found.
**------------------------------------------------------------------------------
*/
static CmdSeqEntryType* FindCmdSeqEntryFromSourceId( UINT8 bSourceId )
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	71fb      	strb	r3, [r7, #7]
   UINT8 i;

   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
 800b752:	e02b      	b.n	800b7ac <FindCmdSeqEntryFromSourceId+0x68>
   {
      if( ( abcc_asCmdSeq[ i ].eState == CMD_SEQ_STATE_WAIT_RESP ) &&
 800b754:	7bfa      	ldrb	r2, [r7, #15]
 800b756:	491a      	ldr	r1, [pc, #104]	@ (800b7c0 <FindCmdSeqEntryFromSourceId+0x7c>)
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	440b      	add	r3, r1
 800b762:	3308      	adds	r3, #8
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d11d      	bne.n	800b7a6 <FindCmdSeqEntryFromSourceId+0x62>
          ( abcc_asCmdSeq[ i ].pasCmdSeq != NULL ) &&
 800b76a:	7bfa      	ldrb	r2, [r7, #15]
 800b76c:	4914      	ldr	r1, [pc, #80]	@ (800b7c0 <FindCmdSeqEntryFromSourceId+0x7c>)
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	440b      	add	r3, r1
 800b778:	681b      	ldr	r3, [r3, #0]
      if( ( abcc_asCmdSeq[ i ].eState == CMD_SEQ_STATE_WAIT_RESP ) &&
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d013      	beq.n	800b7a6 <FindCmdSeqEntryFromSourceId+0x62>
            abcc_asCmdSeq[ i ].bSourceId == bSourceId )
 800b77e:	7bfa      	ldrb	r2, [r7, #15]
 800b780:	490f      	ldr	r1, [pc, #60]	@ (800b7c0 <FindCmdSeqEntryFromSourceId+0x7c>)
 800b782:	4613      	mov	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	4413      	add	r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	440b      	add	r3, r1
 800b78c:	330a      	adds	r3, #10
 800b78e:	781b      	ldrb	r3, [r3, #0]
          ( abcc_asCmdSeq[ i ].pasCmdSeq != NULL ) &&
 800b790:	79fa      	ldrb	r2, [r7, #7]
 800b792:	429a      	cmp	r2, r3
 800b794:	d107      	bne.n	800b7a6 <FindCmdSeqEntryFromSourceId+0x62>
      {
         return( &abcc_asCmdSeq[ i ] );
 800b796:	7bfa      	ldrb	r2, [r7, #15]
 800b798:	4613      	mov	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	4413      	add	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4a07      	ldr	r2, [pc, #28]	@ (800b7c0 <FindCmdSeqEntryFromSourceId+0x7c>)
 800b7a2:	4413      	add	r3, r2
 800b7a4:	e006      	b.n	800b7b4 <FindCmdSeqEntryFromSourceId+0x70>
   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d9d0      	bls.n	800b754 <FindCmdSeqEntryFromSourceId+0x10>
      }
   }

   return( NULL );
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	24001440 	.word	0x24001440

0800b7c4 <ValidateHandle>:
**    TRUE  - Handle was valid
**    FALSE - Handle was invalid
**------------------------------------------------------------------------------
*/
static BOOL ValidateHandle( const ABCC_CmdSeqHandle xHandle )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
   UINT8 i;

   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	e018      	b.n	800b804 <ValidateHandle+0x40>
   {
      if( xHandle == &abcc_asCmdSeq[ i ] )
 800b7d2:	7bfa      	ldrb	r2, [r7, #15]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b81c <ValidateHandle+0x58>)
 800b7de:	4413      	add	r3, r2
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d10b      	bne.n	800b7fe <ValidateHandle+0x3a>
      {
         if( abcc_asCmdSeq[ i ].pasCmdSeq != NULL )
 800b7e6:	7bfa      	ldrb	r2, [r7, #15]
 800b7e8:	490c      	ldr	r1, [pc, #48]	@ (800b81c <ValidateHandle+0x58>)
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	440b      	add	r3, r1
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d008      	beq.n	800b80c <ValidateHandle+0x48>
         {
            return( TRUE );
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e008      	b.n	800b810 <ValidateHandle+0x4c>
   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
 800b800:	3301      	adds	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d9e3      	bls.n	800b7d2 <ValidateHandle+0xe>
 800b80a:	e000      	b.n	800b80e <ValidateHandle+0x4a>
         }
         else
         {
            break;
 800b80c:	bf00      	nop
         }
      }
   }

   return( FALSE );
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	24001440 	.word	0x24001440

0800b820 <CheckAndSetState>:
**------------------------------------------------------------------------------
*/
static BOOL CheckAndSetState( CmdSeqEntryType* psCmdSeqHandler,
                              CmdSeqStateType eCheckState,
                              CmdSeqStateType eNewState )
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	70fb      	strb	r3, [r7, #3]
 800b82c:	4613      	mov	r3, r2
 800b82e:	70bb      	strb	r3, [r7, #2]
   BOOL fRet;
   ABCC_PORT_UseCritical();

   fRet = FALSE;
 800b830:	2300      	movs	r3, #0
 800b832:	60fb      	str	r3, [r7, #12]
   ABCC_PORT_EnterCritical();

   if( ( eCheckState == CMD_SEQ_STATE_ANY ) ||
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	2b04      	cmp	r3, #4
 800b838:	d004      	beq.n	800b844 <CheckAndSetState+0x24>
       ( eCheckState == psCmdSeqHandler->eState ) )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7a1b      	ldrb	r3, [r3, #8]
   if( ( eCheckState == CMD_SEQ_STATE_ANY ) ||
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	429a      	cmp	r2, r3
 800b842:	d11e      	bne.n	800b882 <CheckAndSetState+0x62>
   {
      if( ( psCmdSeqHandler->eState == CMD_SEQ_STATE_RETRIGGER ) &&
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	7a1b      	ldrb	r3, [r3, #8]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d108      	bne.n	800b85e <CheckAndSetState+0x3e>
 800b84c:	78bb      	ldrb	r3, [r7, #2]
 800b84e:	2b03      	cmp	r3, #3
 800b850:	d005      	beq.n	800b85e <CheckAndSetState+0x3e>
            eNewState != CMD_SEQ_STATE_RETRIGGER )
      {
         abcc_iNeedReTriggerCount--;
 800b852:	4b0f      	ldr	r3, [pc, #60]	@ (800b890 <CheckAndSetState+0x70>)
 800b854:	881b      	ldrh	r3, [r3, #0]
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	4b0d      	ldr	r3, [pc, #52]	@ (800b890 <CheckAndSetState+0x70>)
 800b85c:	801a      	strh	r2, [r3, #0]
      }

      if( ( psCmdSeqHandler->eState != CMD_SEQ_STATE_RETRIGGER ) &&
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7a1b      	ldrb	r3, [r3, #8]
 800b862:	2b03      	cmp	r3, #3
 800b864:	d008      	beq.n	800b878 <CheckAndSetState+0x58>
 800b866:	78bb      	ldrb	r3, [r7, #2]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d105      	bne.n	800b878 <CheckAndSetState+0x58>
            eNewState == CMD_SEQ_STATE_RETRIGGER )
      {
         abcc_iNeedReTriggerCount++;
 800b86c:	4b08      	ldr	r3, [pc, #32]	@ (800b890 <CheckAndSetState+0x70>)
 800b86e:	881b      	ldrh	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	b29a      	uxth	r2, r3
 800b874:	4b06      	ldr	r3, [pc, #24]	@ (800b890 <CheckAndSetState+0x70>)
 800b876:	801a      	strh	r2, [r3, #0]
      }

      psCmdSeqHandler->eState = eNewState;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	78ba      	ldrb	r2, [r7, #2]
 800b87c:	721a      	strb	r2, [r3, #8]
      fRet = TRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]
   }

   ABCC_PORT_ExitCritical();

   return( fRet );
 800b882:	68fb      	ldr	r3, [r7, #12]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3714      	adds	r7, #20
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	2400143c 	.word	0x2400143c

0800b894 <DoAbort>:
** Returns:
**    None
**------------------------------------------------------------------------------
*/
static void DoAbort( CmdSeqEntryType* psEntry )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	@ 0x28
 800b898:	af04      	add	r7, sp, #16
 800b89a:	6078      	str	r0, [r7, #4]
   BOOL fFreeSourceId;
   UINT8 bSourceId = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	74fb      	strb	r3, [r7, #19]
   ABCC_CmdSeqDoneHandler pnSeqDone;
   void *pxUserData;
   ABCC_PORT_UseCritical();

   fFreeSourceId = FALSE;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]
   ABCC_PORT_EnterCritical();

   if( psEntry->eState == CMD_SEQ_STATE_BUSY )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7a1b      	ldrb	r3, [r3, #8]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d110      	bne.n	800b8ce <DoAbort+0x3a>
   {
      /*
      ** State not allowed. See header file documentation for
      ** ABCC_CmdSeqAbort()
      */
      ABCC_LOG_FATAL( ABCC_EC_INCORRECT_STATE, psEntry->eState, "Incorrect state (%d)\n", psEntry->eState );
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	7a1b      	ldrb	r3, [r3, #8]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7a1b      	ldrb	r3, [r3, #8]
 800b8b6:	9302      	str	r3, [sp, #8]
 800b8b8:	4b1e      	ldr	r3, [pc, #120]	@ (800b934 <DoAbort+0xa0>)
 800b8ba:	9301      	str	r3, [sp, #4]
 800b8bc:	f240 131f 	movw	r3, #287	@ 0x11f
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b938 <DoAbort+0xa4>)
 800b8c4:	2107      	movs	r1, #7
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f001 febe 	bl	800d648 <ABCC_LogHandler>
 800b8cc:	e027      	b.n	800b91e <DoAbort+0x8a>
   }
   else if( psEntry->eState != CMD_SEQ_STATE_NOT_STARTED )
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	7a1b      	ldrb	r3, [r3, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d023      	beq.n	800b91e <DoAbort+0x8a>
   {
      if( psEntry->eState == CMD_SEQ_STATE_RETRIGGER )
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7a1b      	ldrb	r3, [r3, #8]
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d105      	bne.n	800b8ea <DoAbort+0x56>
      {
         abcc_iNeedReTriggerCount--;
 800b8de:	4b17      	ldr	r3, [pc, #92]	@ (800b93c <DoAbort+0xa8>)
 800b8e0:	881b      	ldrh	r3, [r3, #0]
 800b8e2:	3b01      	subs	r3, #1
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	4b15      	ldr	r3, [pc, #84]	@ (800b93c <DoAbort+0xa8>)
 800b8e8:	801a      	strh	r2, [r3, #0]
      }
      if( psEntry->eState == CMD_SEQ_STATE_WAIT_RESP )
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7a1b      	ldrb	r3, [r3, #8]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d104      	bne.n	800b8fc <DoAbort+0x68>
      {
         bSourceId = psEntry->bSourceId;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	7a9b      	ldrb	r3, [r3, #10]
 800b8f6:	74fb      	strb	r3, [r7, #19]
         fFreeSourceId = TRUE;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
      }

      ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Aborted\n",
         (void*)psEntry->pasCmdSeq);

      pnSeqDone = psEntry->pnSeqDone;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	60fb      	str	r3, [r7, #12]
      pxUserData = psEntry->pxUserData;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	60bb      	str	r3, [r7, #8]

      /*
      ** Do reset of handler.
      */
      ResetCmdSeqEntry( psEntry, TRUE );
 800b908:	2101      	movs	r1, #1
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff fedc 	bl	800b6c8 <ResetCmdSeqEntry>

      if( pnSeqDone != NULL )
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <DoAbort+0x8a>
      {
         pnSeqDone( ABCC_CMDSEQ_RESULT_ABORT_EXT, pxUserData );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	2002      	movs	r0, #2
 800b91c:	4798      	blx	r3

   /*
   ** Free of sourceId is done outside critical section to avoid nested
   ** critical sections. Result can be ignored
   */
   if( fFreeSourceId )
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d003      	beq.n	800b92c <DoAbort+0x98>
   {
      (void)ABCC_LinkGetMsgHandler( bSourceId );
 800b924:	7cfb      	ldrb	r3, [r7, #19]
 800b926:	4618      	mov	r0, r3
 800b928:	f001 fe32 	bl	800d590 <ABCC_LinkGetMsgHandler>
   }
}
 800b92c:	bf00      	nop
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	08015ccc 	.word	0x08015ccc
 800b938:	08015c88 	.word	0x08015c88
 800b93c:	2400143c 	.word	0x2400143c

0800b940 <HandleResponse>:
** Returns:
**    None
**------------------------------------------------------------------------------
*/
static void HandleResponse( ABP_MsgType* psMsg )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b08a      	sub	sp, #40	@ 0x28
 800b944:	af04      	add	r7, sp, #16
 800b946:	6078      	str	r0, [r7, #4]
   UINT8 bSourceId;
   CmdSeqEntryType* psEntry;
   ABCC_CmdSeqRespStatusType eStatus;


   bSourceId = ABCC_GetMsgSourceId( psMsg );
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	791b      	ldrb	r3, [r3, #4]
 800b94c:	75fb      	strb	r3, [r7, #23]
   psEntry = FindCmdSeqEntryFromSourceId( bSourceId );
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	4618      	mov	r0, r3
 800b952:	f7ff fef7 	bl	800b744 <FindCmdSeqEntryFromSourceId>
 800b956:	6138      	str	r0, [r7, #16]

   if( psEntry != NULL )
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d063      	beq.n	800ba26 <HandleResponse+0xe6>
   {
      /*
      ** The corresponding command sequence found
      */
      if( CheckAndSetState( psEntry, CMD_SEQ_STATE_WAIT_RESP, CMD_SEQ_STATE_BUSY ) )
 800b95e:	2201      	movs	r2, #1
 800b960:	2102      	movs	r1, #2
 800b962:	6938      	ldr	r0, [r7, #16]
 800b964:	f7ff ff5c 	bl	800b820 <CheckAndSetState>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d05b      	beq.n	800ba26 <HandleResponse+0xe6>
      {
         if( psEntry->pasCmdSeq[ psEntry->bCurrSeqIndex ].pnRespHandler != NULL )
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	7a5b      	ldrb	r3, [r3, #9]
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	4413      	add	r3, r2
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d03f      	beq.n	800ba00 <HandleResponse+0xc0>
            */
            ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->%s()\n",
               (void*)psEntry->pasCmdSeq,
               psEntry->pasCmdSeq[ psEntry->bCurrSeqIndex ].pcRespName );

            eStatus = psEntry->pasCmdSeq[ psEntry->bCurrSeqIndex ].pnRespHandler( psMsg, psEntry->pxUserData );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	7a5b      	ldrb	r3, [r3, #9]
 800b988:	00db      	lsls	r3, r3, #3
 800b98a:	4413      	add	r3, r2
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	68d2      	ldr	r2, [r2, #12]
 800b992:	4611      	mov	r1, r2
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	4798      	blx	r3
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]

            if( eStatus == ABCC_CMDSEQ_RESP_EXEC_NEXT )
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <HandleResponse+0x70>
            {
               /*
               ** Move to next command in sequence
               */
               psEntry->bCurrSeqIndex++;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	7a5b      	ldrb	r3, [r3, #9]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	b2da      	uxtb	r2, r3
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	725a      	strb	r2, [r3, #9]
 800b9ae:	e02d      	b.n	800ba0c <HandleResponse+0xcc>
            }
            else if( eStatus == ABCC_CMDSEQ_RESP_ABORT )
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d113      	bne.n	800b9de <HandleResponse+0x9e>
               ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Aborted\n",
                     (void*)psEntry->pasCmdSeq );
               /*
               ** Loop until end of sequence.
               */
               while( psEntry->pasCmdSeq[ ++psEntry->bCurrSeqIndex ].pnCmdHandler != NULL );
 800b9b6:	bf00      	nop
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	7a5b      	ldrb	r3, [r3, #9]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	b2d9      	uxtb	r1, r3
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	7259      	strb	r1, [r3, #9]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	7a5b      	ldrb	r3, [r3, #9]
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1f0      	bne.n	800b9b8 <HandleResponse+0x78>

               psEntry->eSeqResult = ABCC_CMDSEQ_RESULT_ABORT_INT;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	741a      	strb	r2, [r3, #16]
 800b9dc:	e016      	b.n	800ba0c <HandleResponse+0xcc>
            }
            else if( eStatus == ABCC_CMDSEQ_RESP_EXEC_CURRENT )
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d013      	beq.n	800ba0c <HandleResponse+0xcc>
               ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Executing same sequence step again\n",
                     (void*)psEntry->pasCmdSeq );
            }
            else
            {
               ABCC_LOG_ERROR( ABCC_EC_PARAMETER_NOT_VALID,
 800b9e4:	7bfa      	ldrb	r2, [r7, #15]
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
 800b9e8:	9302      	str	r3, [sp, #8]
 800b9ea:	4b10      	ldr	r3, [pc, #64]	@ (800ba2c <HandleResponse+0xec>)
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	f240 1389 	movw	r3, #393	@ 0x189
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ba30 <HandleResponse+0xf0>)
 800b9f6:	210e      	movs	r1, #14
 800b9f8:	2001      	movs	r0, #1
 800b9fa:	f001 fe25 	bl	800d648 <ABCC_LogHandler>
                  (UINT32)eStatus,
                  "Bad return parameter from response handler (%d)\n",
                  eStatus );
               return;
 800b9fe:	e012      	b.n	800ba26 <HandleResponse+0xe6>
         else
         {
            ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->No response handler\n",
                  (void*)psEntry->pasCmdSeq );

            psEntry->bCurrSeqIndex++;
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	7a5b      	ldrb	r3, [r3, #9]
 800ba04:	3301      	adds	r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	725a      	strb	r2, [r3, #9]
         }

         if( ABCC_MemGetBufferStatus( psMsg ) != ABCC_MEM_BUFSTAT_IN_APPL_HANDLER )
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f001 ffa5 	bl	800d95c <ABCC_MemGetBufferStatus>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d002      	beq.n	800ba1e <HandleResponse+0xde>
         {
            /*
            ** The application has used the buffer for other things.
            */
            psMsg = ABCC_GetCmdMsgBuffer();
 800ba18:	f000 fe83 	bl	800c722 <ABCC_GetCmdMsgBuffer>
 800ba1c:	6078      	str	r0, [r7, #4]
         /*
         ** Execute next command. The return value is ignored
         ** since the message deallocation will be handled after return of this
         ** function
         */
         (void)ExecCmdSequence( psEntry, psMsg );
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	6938      	ldr	r0, [r7, #16]
 800ba22:	f000 f807 	bl	800ba34 <ExecCmdSequence>
      }
   }
}
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	08015ce4 	.word	0x08015ce4
 800ba30:	08015c88 	.word	0x08015c88

0800ba34 <ExecCmdSequence>:
**    TRUE    - Command buffer sent or freed.
**    FALSE   - Command buffer not sent or freed.
**------------------------------------------------------------------------------
*/
static BOOL ExecCmdSequence( CmdSeqEntryType* psEntry, ABP_MsgType* psMsg )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08c      	sub	sp, #48	@ 0x30
 800ba38:	af04      	add	r7, sp, #16
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
   BOOL fCmdBufferConsumed;
   const ABCC_CmdSeqType* psCmdSeq;
   ABCC_CmdSeqCmdStatusType eStatus;

   fCmdBufferConsumed = FALSE;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61fb      	str	r3, [r7, #28]

   if( psMsg != NULL )
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	f000 8086 	beq.w	800bb56 <ExecCmdSequence+0x122>
   {
      psEntry->bRetryCount = 0;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	72da      	strb	r2, [r3, #11]
      psCmdSeq = &psEntry->pasCmdSeq[ psEntry->bCurrSeqIndex ];
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7a5b      	ldrb	r3, [r3, #9]
 800ba58:	00db      	lsls	r3, r3, #3
 800ba5a:	4413      	add	r3, r2
 800ba5c:	61bb      	str	r3, [r7, #24]

      while( ( psCmdSeq->pnCmdHandler != NULL ) && !fCmdBufferConsumed )
 800ba5e:	e053      	b.n	800bb08 <ExecCmdSequence+0xd4>
      {
         ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->%s()\n",
               (void*)psEntry->pasCmdSeq,
               psEntry->pasCmdSeq[ psEntry->bCurrSeqIndex ].pcCmdName );

         eStatus = psCmdSeq->pnCmdHandler( psMsg, psEntry->pxUserData );
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6838      	ldr	r0, [r7, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	68d2      	ldr	r2, [r2, #12]
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4798      	blx	r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	75fb      	strb	r3, [r7, #23]
         if( eStatus == ABCC_CMDSEQ_CMD_SKIP )
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d109      	bne.n	800ba8c <ExecCmdSequence+0x58>
            ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Command not sent, jump to next sequence step\n",
                  (void*)psEntry->pasCmdSeq );
            /*
            ** User has chosen not to execute this command. Move to next.
            */
            psCmdSeq++;
 800ba78:	69bb      	ldr	r3, [r7, #24]
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	61bb      	str	r3, [r7, #24]
            psEntry->bCurrSeqIndex++;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	7a5b      	ldrb	r3, [r3, #9]
 800ba82:	3301      	adds	r3, #1
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	725a      	strb	r2, [r3, #9]
 800ba8a:	e03d      	b.n	800bb08 <ExecCmdSequence+0xd4>
         }
         else if( eStatus == ABCC_CMDSEQ_CMD_SEND )
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d11e      	bne.n	800bad0 <ExecCmdSequence+0x9c>
         {
            psEntry->bSourceId = ABCC_GetMsgSourceId( psMsg );
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	791a      	ldrb	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	729a      	strb	r2, [r3, #10]
            if( !CheckAndSetState( psEntry, CMD_SEQ_STATE_ANY, CMD_SEQ_STATE_WAIT_RESP ) )
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	2104      	movs	r1, #4
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff febe 	bl	800b820 <CheckAndSetState>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10a      	bne.n	800bac0 <ExecCmdSequence+0x8c>
            {
               ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED,
 800baaa:	4b37      	ldr	r3, [pc, #220]	@ (800bb88 <ExecCmdSequence+0x154>)
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	f240 13d9 	movw	r3, #473	@ 0x1d9
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	4b35      	ldr	r3, [pc, #212]	@ (800bb8c <ExecCmdSequence+0x158>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	212b      	movs	r1, #43	@ 0x2b
 800baba:	2000      	movs	r0, #0
 800babc:	f001 fdc4 	bl	800d648 <ABCC_LogHandler>
                  0,
                  "Failed to set command sequence state\n" );
            }
            (void)ABCC_SendCmdMsg( psMsg, HandleResponse );
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	4933      	ldr	r1, [pc, #204]	@ (800bb90 <ExecCmdSequence+0x15c>)
 800bac4:	4618      	mov	r0, r3
 800bac6:	f000 fddf 	bl	800c688 <ABCC_SendCmdMsg>
            fCmdBufferConsumed = TRUE;
 800baca:	2301      	movs	r3, #1
 800bacc:	61fb      	str	r3, [r7, #28]
 800bace:	e01b      	b.n	800bb08 <ExecCmdSequence+0xd4>
         }
         else if( eStatus == ABCC_CMDSEQ_CMD_ABORT )
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d10b      	bne.n	800baee <ExecCmdSequence+0xba>
            ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Aborted\n",
                  (void*)psEntry->pasCmdSeq );
            /*
            ** Abort move to end of sequence
            */
            while( (++psCmdSeq)->pnCmdHandler != NULL );
 800bad6:	bf00      	nop
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	3308      	adds	r3, #8
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f8      	bne.n	800bad8 <ExecCmdSequence+0xa4>
            psEntry->eSeqResult = ABCC_CMDSEQ_RESULT_ABORT_INT;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	741a      	strb	r2, [r3, #16]
 800baec:	e00c      	b.n	800bb08 <ExecCmdSequence+0xd4>
         }
         else
         {
            ABCC_LOG_ERROR( ABCC_EC_PARAMETER_NOT_VALID,
 800baee:	7dfa      	ldrb	r2, [r7, #23]
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	4b27      	ldr	r3, [pc, #156]	@ (800bb94 <ExecCmdSequence+0x160>)
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	4b23      	ldr	r3, [pc, #140]	@ (800bb8c <ExecCmdSequence+0x158>)
 800bb00:	210e      	movs	r1, #14
 800bb02:	2001      	movs	r0, #1
 800bb04:	f001 fda0 	bl	800d648 <ABCC_LogHandler>
      while( ( psCmdSeq->pnCmdHandler != NULL ) && !fCmdBufferConsumed )
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <ExecCmdSequence+0xe2>
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0a4      	beq.n	800ba60 <ExecCmdSequence+0x2c>
      }

      /*
      ** Check end of sequence
      */
      if( psCmdSeq->pnCmdHandler == NULL )
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d12e      	bne.n	800bb7c <ExecCmdSequence+0x148>
         ABCC_CmdSeqResultType eSeqResult;

         /*
         ** Free resource before calling done callback
         */
         ABCC_ReturnMsgBuffer( &psMsg );
 800bb1e:	463b      	mov	r3, r7
 800bb20:	4618      	mov	r0, r3
 800bb22:	f000 fe0c 	bl	800c73e <ABCC_ReturnMsgBuffer>
         fCmdBufferConsumed = TRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	61fb      	str	r3, [r7, #28]

         ABCC_LOG_DEBUG_CMD_SEQ( "CmdSeq(%p)->Done\n",
               (void*)psEntry->pasCmdSeq );
         pnSeqDone = psEntry->pnSeqDone;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	613b      	str	r3, [r7, #16]
         pxUserData = psEntry->pxUserData;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	60fb      	str	r3, [r7, #12]
         eSeqResult = psEntry->eSeqResult;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	7c1b      	ldrb	r3, [r3, #16]
 800bb3a:	72fb      	strb	r3, [r7, #11]

         ResetCmdSeqEntry( psEntry, FALSE );
 800bb3c:	2100      	movs	r1, #0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff fdc2 	bl	800b6c8 <ResetCmdSeqEntry>

         if( pnSeqDone != NULL )
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d018      	beq.n	800bb7c <ExecCmdSequence+0x148>
         {
            pnSeqDone( eSeqResult, pxUserData );
 800bb4a:	7afa      	ldrb	r2, [r7, #11]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	68f9      	ldr	r1, [r7, #12]
 800bb50:	4610      	mov	r0, r2
 800bb52:	4798      	blx	r3
 800bb54:	e012      	b.n	800bb7c <ExecCmdSequence+0x148>
   {
      /*
      ** Currently out of resource. Try again at next call of
      ** ABCC_CmdSequencerExec().
      */
      if( !CheckAndSetState( psEntry, CMD_SEQ_STATE_ANY, CMD_SEQ_STATE_RETRIGGER ) )
 800bb56:	2203      	movs	r2, #3
 800bb58:	2104      	movs	r1, #4
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fe60 	bl	800b820 <CheckAndSetState>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <ExecCmdSequence+0x148>
      {
         ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED,
 800bb66:	4b08      	ldr	r3, [pc, #32]	@ (800bb88 <ExecCmdSequence+0x154>)
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <ExecCmdSequence+0x158>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	212b      	movs	r1, #43	@ 0x2b
 800bb76:	2000      	movs	r0, #0
 800bb78:	f001 fd66 	bl	800d648 <ABCC_LogHandler>
            0,
            "Failed to set command sequence state\n" );
      }
   }

   return( fCmdBufferConsumed );
 800bb7c:	69fb      	ldr	r3, [r7, #28]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	08015ca4 	.word	0x08015ca4
 800bb8c:	08015c88 	.word	0x08015c88
 800bb90:	0800b941 	.word	0x0800b941
 800bb94:	08015ce4 	.word	0x08015ce4

0800bb98 <ABCC_CmdSeqAdd>:
ABCC_ErrorCodeType ABCC_CmdSeqAdd(
   const ABCC_CmdSeqType* pasCmdSeq,
   const ABCC_CmdSeqDoneHandler pnCmdSeqDone,
   void *pxUserData,
   ABCC_CmdSeqHandle* pxHandle )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
   CmdSeqEntryType* psEntry;
   ABP_MsgType* psMsg;

   if( pasCmdSeq == NULL )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <ABCC_CmdSeqAdd+0x18>
   {
      return( ABCC_EC_PARAMETER_NOT_VALID );
 800bbac:	230e      	movs	r3, #14
 800bbae:	e026      	b.n	800bbfe <ABCC_CmdSeqAdd+0x66>
   }

   /*
   ** Allocate and init handler.
   */
   psEntry = AllocCmdSeqEntry( pasCmdSeq );
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fd5b 	bl	800b66c <AllocCmdSeqEntry>
 800bbb6:	6178      	str	r0, [r7, #20]
   if( psEntry != NULL )
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d013      	beq.n	800bbe6 <ABCC_CmdSeqAdd+0x4e>
   {
      psEntry->pnSeqDone = pnCmdSeqDone;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	605a      	str	r2, [r3, #4]
      psEntry->pxUserData = pxUserData;
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	60da      	str	r2, [r3, #12]
      if( pxHandle != NULL )
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <ABCC_CmdSeqAdd+0x3e>
      {
         *pxHandle = (ABCC_CmdSeqHandle)psEntry;
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	601a      	str	r2, [r3, #0]
      }

      psMsg = ABCC_GetCmdMsgBuffer();
 800bbd6:	f000 fda4 	bl	800c722 <ABCC_GetCmdMsgBuffer>
 800bbda:	6138      	str	r0, [r7, #16]
      (void)ExecCmdSequence( psEntry, psMsg );
 800bbdc:	6939      	ldr	r1, [r7, #16]
 800bbde:	6978      	ldr	r0, [r7, #20]
 800bbe0:	f7ff ff28 	bl	800ba34 <ExecCmdSequence>
 800bbe4:	e00a      	b.n	800bbfc <ABCC_CmdSeqAdd+0x64>
   }
   else
   {
      ABCC_LOG_WARNING( ABCC_EC_OUT_OF_CMD_SEQ_RESOURCES, ABCC_CFG_MAX_NUM_CMD_SEQ, "Out of command sequence resources" );
 800bbe6:	4b08      	ldr	r3, [pc, #32]	@ (800bc08 <ABCC_CmdSeqAdd+0x70>)
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f240 2341 	movw	r3, #577	@ 0x241
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	4b06      	ldr	r3, [pc, #24]	@ (800bc0c <ABCC_CmdSeqAdd+0x74>)
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	211f      	movs	r1, #31
 800bbf6:	2002      	movs	r0, #2
 800bbf8:	f001 fd26 	bl	800d648 <ABCC_LogHandler>
   }

   return( ABCC_EC_NO_ERROR );
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	08015d18 	.word	0x08015d18
 800bc0c:	08015c88 	.word	0x08015c88

0800bc10 <ABCC_CmdSeqAbort>:

ABCC_ErrorCodeType ABCC_CmdSeqAbort( const ABCC_CmdSeqHandle xHandle )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
   UINT8 i;

   if( xHandle == NULL )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d113      	bne.n	800bc46 <ABCC_CmdSeqAbort+0x36>
   {
      for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
 800bc22:	e00c      	b.n	800bc3e <ABCC_CmdSeqAbort+0x2e>
      {
         DoAbort( &abcc_asCmdSeq[ i ] );
 800bc24:	7bfa      	ldrb	r2, [r7, #15]
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4a0e      	ldr	r2, [pc, #56]	@ (800bc68 <ABCC_CmdSeqAbort+0x58>)
 800bc30:	4413      	add	r3, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff fe2e 	bl	800b894 <DoAbort>
      for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	73fb      	strb	r3, [r7, #15]
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d9ef      	bls.n	800bc24 <ABCC_CmdSeqAbort+0x14>
 800bc44:	e00b      	b.n	800bc5e <ABCC_CmdSeqAbort+0x4e>
      }
   }
   else
   {
      if( ValidateHandle( xHandle ) )
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff fdbc 	bl	800b7c4 <ValidateHandle>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <ABCC_CmdSeqAbort+0x4a>
      {
         DoAbort( (CmdSeqEntryType*)xHandle );
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fe1e 	bl	800b894 <DoAbort>
 800bc58:	e001      	b.n	800bc5e <ABCC_CmdSeqAbort+0x4e>
      }
      else
      {
         return( ABCC_EC_PARAMETER_NOT_VALID );
 800bc5a:	230e      	movs	r3, #14
 800bc5c:	e000      	b.n	800bc60 <ABCC_CmdSeqAbort+0x50>
      }
   }

   return( ABCC_EC_NO_ERROR );
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	24001440 	.word	0x24001440

0800bc6c <ABCC_CmdSequencerInit>:

void ABCC_CmdSequencerInit( void )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
   UINT8 i;
   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bc72:	2300      	movs	r3, #0
 800bc74:	71fb      	strb	r3, [r7, #7]
 800bc76:	e00d      	b.n	800bc94 <ABCC_CmdSequencerInit+0x28>
   {
      ResetCmdSeqEntry( &abcc_asCmdSeq[ i ], TRUE );
 800bc78:	79fa      	ldrb	r2, [r7, #7]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4a09      	ldr	r2, [pc, #36]	@ (800bca8 <ABCC_CmdSequencerInit+0x3c>)
 800bc84:	4413      	add	r3, r2
 800bc86:	2101      	movs	r1, #1
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff fd1d 	bl	800b6c8 <ResetCmdSeqEntry>
   for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	3301      	adds	r3, #1
 800bc92:	71fb      	strb	r3, [r7, #7]
 800bc94:	79fb      	ldrb	r3, [r7, #7]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d9ee      	bls.n	800bc78 <ABCC_CmdSequencerInit+0xc>
   }
   abcc_iNeedReTriggerCount = 0;
 800bc9a:	4b04      	ldr	r3, [pc, #16]	@ (800bcac <ABCC_CmdSequencerInit+0x40>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	801a      	strh	r2, [r3, #0]
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	24001440 	.word	0x24001440
 800bcac:	2400143c 	.word	0x2400143c

0800bcb0 <ABCC_CmdSequencerExec>:

void ABCC_CmdSequencerExec( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af02      	add	r7, sp, #8
   ABP_MsgType* psMsg;

   /*
   ** Only execute if any sequence requires re-trigger.
   */
   if( abcc_iNeedReTriggerCount > 0 )
 800bcb6:	4b35      	ldr	r3, [pc, #212]	@ (800bd8c <ABCC_CmdSequencerExec+0xdc>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d062      	beq.n	800bd84 <ABCC_CmdSequencerExec+0xd4>
   {
      psMsg = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	603b      	str	r3, [r7, #0]

      for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	71fb      	strb	r3, [r7, #7]
 800bcc6:	e053      	b.n	800bd70 <ABCC_CmdSequencerExec+0xc0>
      {
         if( CheckAndSetState( &abcc_asCmdSeq[ i ], CMD_SEQ_STATE_RETRIGGER, CMD_SEQ_STATE_BUSY ) )
 800bcc8:	79fa      	ldrb	r2, [r7, #7]
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4a2f      	ldr	r2, [pc, #188]	@ (800bd90 <ABCC_CmdSequencerExec+0xe0>)
 800bcd4:	4413      	add	r3, r2
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	2103      	movs	r1, #3
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7ff fda0 	bl	800b820 <CheckAndSetState>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d041      	beq.n	800bd6a <ABCC_CmdSequencerExec+0xba>
         {
            abcc_asCmdSeq[ i ].bRetryCount++;
 800bce6:	79fa      	ldrb	r2, [r7, #7]
 800bce8:	4929      	ldr	r1, [pc, #164]	@ (800bd90 <ABCC_CmdSequencerExec+0xe0>)
 800bcea:	4613      	mov	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	440b      	add	r3, r1
 800bcf4:	330b      	adds	r3, #11
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	b2d8      	uxtb	r0, r3
 800bcfc:	4924      	ldr	r1, [pc, #144]	@ (800bd90 <ABCC_CmdSequencerExec+0xe0>)
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	330b      	adds	r3, #11
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	701a      	strb	r2, [r3, #0]
            if( abcc_asCmdSeq[ i ].bRetryCount > ABCC_CFG_CMD_SEQ_MAX_NUM_RETRIES )
 800bd0e:	79fa      	ldrb	r2, [r7, #7]
 800bd10:	491f      	ldr	r1, [pc, #124]	@ (800bd90 <ABCC_CmdSequencerExec+0xe0>)
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	440b      	add	r3, r1
 800bd1c:	330b      	adds	r3, #11
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00a      	beq.n	800bd3a <ABCC_CmdSequencerExec+0x8a>
            {
               ABCC_LOG_WARNING( ABCC_EC_CMD_SEQ_RETRY_LIMIT, 0, "Command sequence retry limit reached\n" );
 800bd24:	4b1b      	ldr	r3, [pc, #108]	@ (800bd94 <ABCC_CmdSequencerExec+0xe4>)
 800bd26:	9301      	str	r3, [sp, #4]
 800bd28:	f240 237e 	movw	r3, #638	@ 0x27e
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	4b1a      	ldr	r3, [pc, #104]	@ (800bd98 <ABCC_CmdSequencerExec+0xe8>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	2129      	movs	r1, #41	@ 0x29
 800bd34:	2002      	movs	r0, #2
 800bd36:	f001 fc87 	bl	800d648 <ABCC_LogHandler>
            }

            if( psMsg == NULL )
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d103      	bne.n	800bd48 <ABCC_CmdSequencerExec+0x98>
            {
               psMsg = ABCC_GetCmdMsgBuffer();
 800bd40:	f000 fcef 	bl	800c722 <ABCC_GetCmdMsgBuffer>
 800bd44:	4603      	mov	r3, r0
 800bd46:	603b      	str	r3, [r7, #0]
            }

            if( ExecCmdSequence( &abcc_asCmdSeq[ i ], psMsg ) == TRUE )
 800bd48:	79fa      	ldrb	r2, [r7, #7]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4a0f      	ldr	r2, [pc, #60]	@ (800bd90 <ABCC_CmdSequencerExec+0xe0>)
 800bd54:	4413      	add	r3, r2
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7ff fe6a 	bl	800ba34 <ExecCmdSequence>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d101      	bne.n	800bd6a <ABCC_CmdSequencerExec+0xba>
            {
               /*
               ** Message buffer consumed
               */
               psMsg = NULL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	603b      	str	r3, [r7, #0]
      for( i = 0; i < ABCC_CFG_MAX_NUM_CMD_SEQ; i++ )
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	71fb      	strb	r3, [r7, #7]
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d9a8      	bls.n	800bcc8 <ABCC_CmdSequencerExec+0x18>
            }
         }
      }

      if( psMsg != NULL )
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <ABCC_CmdSequencerExec+0xd4>
      {
         ABCC_ReturnMsgBuffer( &psMsg );
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 fcdd 	bl	800c73e <ABCC_ReturnMsgBuffer>
      }
   }
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	2400143c 	.word	0x2400143c
 800bd90:	24001440 	.word	0x24001440
 800bd94:	08015d3c 	.word	0x08015d3c
 800bd98:	08015c88 	.word	0x08015c88

0800bd9c <TriggerWrPdUpdateNow>:
** Message channel size.
*/
static UINT16 abcc_iMessageChannelSize = 0;

static void TriggerWrPdUpdateNow( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	af00      	add	r7, sp, #0
   if( ABCC_GetMainState() == ABCC_DRV_RUNNING )
 800bda0:	f000 f8c0 	bl	800bf24 <ABCC_GetMainState>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b05      	cmp	r3, #5
 800bda8:	d10d      	bne.n	800bdc6 <TriggerWrPdUpdateNow+0x2a>
      ** Send new "write process data" to the Anybus-CC.
      ** The data format of the process data is network specific.
      ** The application converts the data accordingly.
      */

      if( ABCC_CbfUpdateWriteProcessData( abcc_pbWrPdBuffer ) )
 800bdaa:	4b08      	ldr	r3, [pc, #32]	@ (800bdcc <TriggerWrPdUpdateNow+0x30>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f005 ffd3 	bl	8011d5a <ABCC_CbfUpdateWriteProcessData>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <TriggerWrPdUpdateNow+0x2a>
      {
         pnABCC_DrvWriteProcessData( abcc_pbWrPdBuffer );
 800bdba:	4b05      	ldr	r3, [pc, #20]	@ (800bdd0 <TriggerWrPdUpdateNow+0x34>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a03      	ldr	r2, [pc, #12]	@ (800bdcc <TriggerWrPdUpdateNow+0x30>)
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	4610      	mov	r0, r2
 800bdc4:	4798      	blx	r3
            ABCC_HAL_GpioReset();
         }
#endif
      }
   }
}
 800bdc6:	bf00      	nop
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	240014e0 	.word	0x240014e0
 800bdd0:	24001490 	.word	0x24001490

0800bdd4 <SetMainState>:

static void SetMainState( ABCC_MainStateType eState )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af04      	add	r7, sp, #16
 800bdda:	4603      	mov	r3, r0
 800bddc:	71fb      	strb	r3, [r7, #7]
      "ABCC_DRV_WAIT_COMMUNICATION_RDY",
      "ABCC_DRV_SETUP",
      "ABCC_DRV_RUNNING"
   };
#endif
   ABCC_LOG_INFO( "Driver main state: %s\n", pacMainStateToText[ eState ] );
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	4a0a      	ldr	r2, [pc, #40]	@ (800be0c <SetMainState+0x38>)
 800bde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bde6:	9302      	str	r3, [sp, #8]
 800bde8:	4b09      	ldr	r3, [pc, #36]	@ (800be10 <SetMainState+0x3c>)
 800bdea:	9301      	str	r3, [sp, #4]
 800bdec:	23c6      	movs	r3, #198	@ 0xc6
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	4b08      	ldr	r3, [pc, #32]	@ (800be14 <SetMainState+0x40>)
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	2003      	movs	r0, #3
 800bdf8:	f001 fc26 	bl	800d648 <ABCC_LogHandler>
   abcc_eMainState = eState;
 800bdfc:	4a06      	ldr	r2, [pc, #24]	@ (800be18 <SetMainState+0x44>)
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	7013      	strb	r3, [r2, #0]
}
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	24000010 	.word	0x24000010
 800be10:	08015d74 	.word	0x08015d74
 800be14:	08015d64 	.word	0x08015d64
 800be18:	240014d4 	.word	0x240014d4

0800be1c <TriggerWrPdUpdateLater>:

#if ( ABCC_CFG_DRV_SPI_ENABLED || ABCC_CFG_DRV_SERIAL_ENABLED )
static void TriggerWrPdUpdateLater( void )
{
 800be1c:	b480      	push	{r7}
 800be1e:	af00      	add	r7, sp, #0
   abcc_fDoWrPdUpdate = TRUE;
 800be20:	4b03      	ldr	r3, [pc, #12]	@ (800be30 <TriggerWrPdUpdateLater+0x14>)
 800be22:	2201      	movs	r2, #1
 800be24:	601a      	str	r2, [r3, #0]
}
 800be26:	bf00      	nop
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	240014f4 	.word	0x240014f4

0800be34 <IsInterruptInUse>:
#endif

static BOOL IsInterruptInUse( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
   BOOL fReturn;

   fReturn = FALSE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	607b      	str	r3, [r7, #4]
      break;
   }

   return( fReturn );
#else
   return( fReturn );
 800be3e:	687b      	ldr	r3, [r7, #4]
#endif /* End of #if ABCC_CFG_INT_ENABLED */
}
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <IsPolledInterruptInUse>:

static BOOL IsPolledInterruptInUse( void )
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
   BOOL fReturn;

   fReturn = FALSE;
 800be52:	2300      	movs	r3, #0
 800be54:	607b      	str	r3, [r7, #4]
#if ABCC_CFG_POLL_ABCC_IRQ_PIN_ENABLED
   switch( abcc_bOpmode )
 800be56:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <IsPolledInterruptInUse+0x34>)
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d004      	beq.n	800be68 <IsPolledInterruptInUse+0x1c>
 800be5e:	2b00      	cmp	r3, #0
 800be60:	dd05      	ble.n	800be6e <IsPolledInterruptInUse+0x22>
 800be62:	3b07      	subs	r3, #7
 800be64:	2b01      	cmp	r3, #1
 800be66:	d802      	bhi.n	800be6e <IsPolledInterruptInUse+0x22>
   {
   case ABP_OP_MODE_16_BIT_PARALLEL:
   case ABP_OP_MODE_8_BIT_PARALLEL:
   case ABP_OP_MODE_SPI:
      fReturn = TRUE;
 800be68:	2301      	movs	r3, #1
 800be6a:	607b      	str	r3, [r7, #4]
      break;
 800be6c:	e000      	b.n	800be70 <IsPolledInterruptInUse+0x24>

   default:

      break;
 800be6e:	bf00      	nop
   }

   return( fReturn );
 800be70:	687b      	ldr	r3, [r7, #4]
#else
   return( fReturn );
#endif /* End of #if ABCC_CFG_POLL_ABCC_IRQ_PIN_ENABLED */
}
 800be72:	4618      	mov	r0, r3
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	240014f0 	.word	0x240014f0

0800be84 <SetReadyForCommunicationTmo>:

static void SetReadyForCommunicationTmo( void )
{
 800be84:	b480      	push	{r7}
 800be86:	af00      	add	r7, sp, #0
   abcc_fReadyForCommunicationTmo = TRUE;
 800be88:	4b03      	ldr	r3, [pc, #12]	@ (800be98 <SetReadyForCommunicationTmo+0x14>)
 800be8a:	2201      	movs	r2, #1
 800be8c:	601a      	str	r2, [r3, #0]
}
 800be8e:	bf00      	nop
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	240014e8 	.word	0x240014e8

0800be9c <ABCC_CheckWrPdUpdate>:

#if ( ABCC_CFG_DRV_SPI_ENABLED || ABCC_CFG_DRV_SERIAL_ENABLED )
void ABCC_CheckWrPdUpdate( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
   if( abcc_fDoWrPdUpdate && pnABCC_DrvISReadyForWrPd() )
 800bea0:	4b08      	ldr	r3, [pc, #32]	@ (800bec4 <ABCC_CheckWrPdUpdate+0x28>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <ABCC_CheckWrPdUpdate+0x22>
 800bea8:	4b07      	ldr	r3, [pc, #28]	@ (800bec8 <ABCC_CheckWrPdUpdate+0x2c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4798      	blx	r3
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <ABCC_CheckWrPdUpdate+0x22>
   {
      abcc_fDoWrPdUpdate = FALSE;
 800beb4:	4b03      	ldr	r3, [pc, #12]	@ (800bec4 <ABCC_CheckWrPdUpdate+0x28>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	601a      	str	r2, [r3, #0]
      TriggerWrPdUpdateNow();
 800beba:	f7ff ff6f 	bl	800bd9c <TriggerWrPdUpdateNow>
   }
}
 800bebe:	bf00      	nop
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	240014f4 	.word	0x240014f4
 800bec8:	24001494 	.word	0x24001494

0800becc <ABCC_SetError>:
{
   abcc_fReadyForCommunication = TRUE;
}

void ABCC_SetError( ABCC_LogSeverityType eSeverity, ABCC_ErrorCodeType eErrorCode, UINT32 lAdditionalInfo )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	603a      	str	r2, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
 800bed8:	460b      	mov	r3, r1
 800beda:	80bb      	strh	r3, [r7, #4]
   if( eSeverity == ABCC_LOG_SEVERITY_ERROR )
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d108      	bne.n	800bef4 <ABCC_SetError+0x28>
   {
      abcc_eLastErrorCode = eErrorCode;
 800bee2:	4a0d      	ldr	r2, [pc, #52]	@ (800bf18 <ABCC_SetError+0x4c>)
 800bee4:	88bb      	ldrh	r3, [r7, #4]
 800bee6:	8013      	strh	r3, [r2, #0]
      abcc_lLastAdditionalInfo = lAdditionalInfo;
 800bee8:	4a0c      	ldr	r2, [pc, #48]	@ (800bf1c <ABCC_SetError+0x50>)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	6013      	str	r3, [r2, #0]

      SetMainState( ABCC_DRV_ERROR );
 800beee:	2002      	movs	r0, #2
 800bef0:	f7ff ff70 	bl	800bdd4 <SetMainState>
   }

   ABCC_CbfDriverError( eSeverity, eErrorCode, lAdditionalInfo );
 800bef4:	88b9      	ldrh	r1, [r7, #4]
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	4618      	mov	r0, r3
 800befc:	f005 ff4a 	bl	8011d94 <ABCC_CbfDriverError>

   if( eSeverity == ABCC_LOG_SEVERITY_FATAL )
 800bf00:	79fb      	ldrb	r3, [r7, #7]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d104      	bne.n	800bf10 <ABCC_SetError+0x44>
   {
      ABCC_PORT_printf( "FATAL: Enter endless loop\n" );
 800bf06:	4806      	ldr	r0, [pc, #24]	@ (800bf20 <ABCC_SetError+0x54>)
 800bf08:	f008 ffc6 	bl	8014e98 <puts>
      while( 1 );
 800bf0c:	bf00      	nop
 800bf0e:	e7fd      	b.n	800bf0c <ABCC_SetError+0x40>
   }
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	240014d6 	.word	0x240014d6
 800bf1c:	240014d8 	.word	0x240014d8
 800bf20:	08015d8c 	.word	0x08015d8c

0800bf24 <ABCC_GetMainState>:

ABCC_MainStateType ABCC_GetMainState( void )
{
 800bf24:	b480      	push	{r7}
 800bf26:	af00      	add	r7, sp, #0
   return( abcc_eMainState );
 800bf28:	4b03      	ldr	r3, [pc, #12]	@ (800bf38 <ABCC_GetMainState+0x14>)
 800bf2a:	781b      	ldrb	r3, [r3, #0]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr
 800bf36:	bf00      	nop
 800bf38:	240014d4 	.word	0x240014d4

0800bf3c <ABCC_GetMessageChannelSize>:

UINT16 ABCC_GetMessageChannelSize( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
   return( abcc_iMessageChannelSize );
 800bf40:	4b03      	ldr	r3, [pc, #12]	@ (800bf50 <ABCC_GetMessageChannelSize+0x14>)
 800bf42:	881b      	ldrh	r3, [r3, #0]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	240014f8 	.word	0x240014f8

0800bf54 <ABCC_GetMaxMessageSize>:

UINT16 ABCC_GetMaxMessageSize( void )
{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
   return( abcc_iMessageChannelSize < ABCC_CFG_MAX_MSG_SIZE ?
      abcc_iMessageChannelSize : ABCC_CFG_MAX_MSG_SIZE );
 800bf58:	4b06      	ldr	r3, [pc, #24]	@ (800bf74 <ABCC_GetMaxMessageSize+0x20>)
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bf60:	4293      	cmp	r3, r2
 800bf62:	bf28      	it	cs
 800bf64:	4613      	movcs	r3, r2
 800bf66:	b29b      	uxth	r3, r3
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	240014f8 	.word	0x240014f8

0800bf78 <ABCC_TriggerAnbStatusUpdate>:

void ABCC_TriggerAnbStatusUpdate( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
   UINT8 bAnbState;

   bAnbState = pnABCC_DrvGetAnybusState();
 800bf7e:	4b0b      	ldr	r3, [pc, #44]	@ (800bfac <ABCC_TriggerAnbStatusUpdate+0x34>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4798      	blx	r3
 800bf84:	4603      	mov	r3, r0
 800bf86:	71fb      	strb	r3, [r7, #7]
   if( bAnbState != abcc_bAnbState )
 800bf88:	4b09      	ldr	r3, [pc, #36]	@ (800bfb0 <ABCC_TriggerAnbStatusUpdate+0x38>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	79fa      	ldrb	r2, [r7, #7]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d006      	beq.n	800bfa2 <ABCC_TriggerAnbStatusUpdate+0x2a>
   {
      abcc_bAnbState = bAnbState;
 800bf94:	4a06      	ldr	r2, [pc, #24]	@ (800bfb0 <ABCC_TriggerAnbStatusUpdate+0x38>)
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	7013      	strb	r3, [r2, #0]
      ABCC_LOG_DEBUG_MSG_GENERAL( "HEXDUMP_STATE:%02x\n", abcc_bAnbState );
      ABCC_CbfAnbStateChanged( (ABP_AnbStateType)bAnbState );
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f005 ff53 	bl	8011e48 <ABCC_CbfAnbStateChanged>
   }
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	240014c0 	.word	0x240014c0
 800bfb0:	2400000d 	.word	0x2400000d

0800bfb4 <ABCC_HwInit>:
   ABCC_HAL_GpioSet();
}
#endif

ABCC_ErrorCodeType ABCC_HwInit( void )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	af00      	add	r7, sp, #0
   if( !ABCC_HAL_HwInit() )
 800bfb8:	f008 fa56 	bl	8014468 <ABCC_HAL_HwInit>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <ABCC_HwInit+0x12>
   {
      return( ABCC_EC_HW_INIT_FAILED );
 800bfc2:	231b      	movs	r3, #27
 800bfc4:	e000      	b.n	800bfc8 <ABCC_HwInit+0x14>
   }
   return( ABCC_EC_NO_ERROR );
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <ABCC_StartDriver>:


ABCC_ErrorCodeType ABCC_StartDriver( UINT32 lMaxStartupTimeMs )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b088      	sub	sp, #32
 800bfd0:	af04      	add	r7, sp, #16
 800bfd2:	6078      	str	r0, [r7, #4]
   UINT8 bModuleId;

   if( lMaxStartupTimeMs == 0 )
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d102      	bne.n	800bfe0 <ABCC_StartDriver+0x14>
   {
      lMaxStartupTimeMs = ABCC_CFG_STARTUP_TIME_MS;
 800bfda:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800bfde:	607b      	str	r3, [r7, #4]
   }

   bModuleId = ABCC_ReadModuleId();
 800bfe0:	f000 fc5e 	bl	800c8a0 <ABCC_ReadModuleId>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]

#if ( ABCC_CFG_DRV_SERIAL_ENABLED )
   if( bModuleId != ABP_MODULE_ID_ACTIVE_ABCC40  )
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d00e      	beq.n	800c00c <ABCC_StartDriver+0x40>
#elif( ABCC_CFG_DRV_SPI_ENABLED || ABCC_CFG_DRV_PARALLEL_ENABLED )
   if( bModuleId != ABP_MODULE_ID_ACTIVE_ABCC40 )
#endif
   {
      ABCC_LOG_ERROR( ABCC_EC_MODULE_ID_NOT_SUPPORTED,
 800bfee:	7bfa      	ldrb	r2, [r7, #15]
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	9302      	str	r3, [sp, #8]
 800bff4:	4b7f      	ldr	r3, [pc, #508]	@ (800c1f4 <ABCC_StartDriver+0x228>)
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	f240 1375 	movw	r3, #373	@ 0x175
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	4b7e      	ldr	r3, [pc, #504]	@ (800c1f8 <ABCC_StartDriver+0x22c>)
 800c000:	210f      	movs	r1, #15
 800c002:	2001      	movs	r0, #1
 800c004:	f001 fb20 	bl	800d648 <ABCC_LogHandler>
         bModuleId,
         "Module ID not supported: 0x%" PRIx8 "\n",
         bModuleId );

      return( ABCC_EC_MODULE_ID_NOT_SUPPORTED );
 800c008:	230f      	movs	r3, #15
 800c00a:	e1df      	b.n	800c3cc <ABCC_StartDriver+0x400>
   }

   abcc_bOpmode = ABCC_GetOpmode();
 800c00c:	f000 fc80 	bl	800c910 <ABCC_GetOpmode>
 800c010:	4603      	mov	r3, r0
 800c012:	461a      	mov	r2, r3
 800c014:	4b79      	ldr	r3, [pc, #484]	@ (800c1fc <ABCC_StartDriver+0x230>)
 800c016:	701a      	strb	r2, [r3, #0]

   switch( abcc_bOpmode )
 800c018:	4b78      	ldr	r3, [pc, #480]	@ (800c1fc <ABCC_StartDriver+0x230>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d05b      	beq.n	800c0d8 <ABCC_StartDriver+0x10c>
 800c020:	2b00      	cmp	r3, #0
 800c022:	f340 80af 	ble.w	800c184 <ABCC_StartDriver+0x1b8>
 800c026:	3b09      	subs	r3, #9
 800c028:	2b03      	cmp	r3, #3
 800c02a:	f200 80ab 	bhi.w	800c184 <ABCC_StartDriver+0x1b8>
   case ABP_OP_MODE_SERIAL_19_2:
   case ABP_OP_MODE_SERIAL_57_6:
   case ABP_OP_MODE_SERIAL_115_2:
   case ABP_OP_MODE_SERIAL_625:

      ABCC_ISR                   = NULL;
 800c02e:	4b74      	ldr	r3, [pc, #464]	@ (800c200 <ABCC_StartDriver+0x234>)
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
      ABCC_TriggerWrPdUpdate     = &TriggerWrPdUpdateLater;
 800c034:	4b73      	ldr	r3, [pc, #460]	@ (800c204 <ABCC_StartDriver+0x238>)
 800c036:	4a74      	ldr	r2, [pc, #464]	@ (800c208 <ABCC_StartDriver+0x23c>)
 800c038:	601a      	str	r2, [r3, #0]

      pnABCC_DrvRun              = &ABCC_SerRunDriver;
 800c03a:	4b74      	ldr	r3, [pc, #464]	@ (800c20c <ABCC_StartDriver+0x240>)
 800c03c:	4a74      	ldr	r2, [pc, #464]	@ (800c210 <ABCC_StartDriver+0x244>)
 800c03e:	601a      	str	r2, [r3, #0]
      pnABCC_DrvInit               = &ABCC_DrvSerInit;
 800c040:	4b74      	ldr	r3, [pc, #464]	@ (800c214 <ABCC_StartDriver+0x248>)
 800c042:	4a75      	ldr	r2, [pc, #468]	@ (800c218 <ABCC_StartDriver+0x24c>)
 800c044:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISR                = &ABCC_DrvSerISR;
 800c046:	4b75      	ldr	r3, [pc, #468]	@ (800c21c <ABCC_StartDriver+0x250>)
 800c048:	4a75      	ldr	r2, [pc, #468]	@ (800c220 <ABCC_StartDriver+0x254>)
 800c04a:	601a      	str	r2, [r3, #0]
      pnABCC_DrvRunDriverTx        = &ABCC_DrvSerRunDriverTx;
 800c04c:	4b75      	ldr	r3, [pc, #468]	@ (800c224 <ABCC_StartDriver+0x258>)
 800c04e:	4a76      	ldr	r2, [pc, #472]	@ (800c228 <ABCC_StartDriver+0x25c>)
 800c050:	601a      	str	r2, [r3, #0]
      pnABCC_DrvRunDriverRx        = &ABCC_DrvSerRunDriverRx;
 800c052:	4b76      	ldr	r3, [pc, #472]	@ (800c22c <ABCC_StartDriver+0x260>)
 800c054:	4a76      	ldr	r2, [pc, #472]	@ (800c230 <ABCC_StartDriver+0x264>)
 800c056:	601a      	str	r2, [r3, #0]
      pnABCC_DrvPrepareWriteMessage = NULL;
 800c058:	4b76      	ldr	r3, [pc, #472]	@ (800c234 <ABCC_StartDriver+0x268>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
      pnABCC_DrvWriteMessage       = &ABCC_DrvSerWriteMessage;
 800c05e:	4b76      	ldr	r3, [pc, #472]	@ (800c238 <ABCC_StartDriver+0x26c>)
 800c060:	4a76      	ldr	r2, [pc, #472]	@ (800c23c <ABCC_StartDriver+0x270>)
 800c062:	601a      	str	r2, [r3, #0]
      pnABCC_DrvWriteProcessData   = &ABCC_DrvSerWriteProcessData;
 800c064:	4b76      	ldr	r3, [pc, #472]	@ (800c240 <ABCC_StartDriver+0x274>)
 800c066:	4a77      	ldr	r2, [pc, #476]	@ (800c244 <ABCC_StartDriver+0x278>)
 800c068:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForWrPd     = &ABCC_DrvSerIsReadyForWrPd;
 800c06a:	4b77      	ldr	r3, [pc, #476]	@ (800c248 <ABCC_StartDriver+0x27c>)
 800c06c:	4a77      	ldr	r2, [pc, #476]	@ (800c24c <ABCC_StartDriver+0x280>)
 800c06e:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForWriteMessage = &ABCC_DrvSerIsReadyForWriteMessage;
 800c070:	4b77      	ldr	r3, [pc, #476]	@ (800c250 <ABCC_StartDriver+0x284>)
 800c072:	4a78      	ldr	r2, [pc, #480]	@ (800c254 <ABCC_StartDriver+0x288>)
 800c074:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForCmd      = &ABCC_DrvSerIsReadyForCmd;
 800c076:	4b78      	ldr	r3, [pc, #480]	@ (800c258 <ABCC_StartDriver+0x28c>)
 800c078:	4a78      	ldr	r2, [pc, #480]	@ (800c25c <ABCC_StartDriver+0x290>)
 800c07a:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetNbrOfCmds       = &ABCC_DrvSerSetNbrOfCmds;
 800c07c:	4b78      	ldr	r3, [pc, #480]	@ (800c260 <ABCC_StartDriver+0x294>)
 800c07e:	4a79      	ldr	r2, [pc, #484]	@ (800c264 <ABCC_StartDriver+0x298>)
 800c080:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetAppStatus       = &ABCC_DrvSerSetAppStatus;
 800c082:	4b79      	ldr	r3, [pc, #484]	@ (800c268 <ABCC_StartDriver+0x29c>)
 800c084:	4a79      	ldr	r2, [pc, #484]	@ (800c26c <ABCC_StartDriver+0x2a0>)
 800c086:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetPdSize          = &ABCC_DrvSerSetPdSize;
 800c088:	4b79      	ldr	r3, [pc, #484]	@ (800c270 <ABCC_StartDriver+0x2a4>)
 800c08a:	4a7a      	ldr	r2, [pc, #488]	@ (800c274 <ABCC_StartDriver+0x2a8>)
 800c08c:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetIntMask         = &ABCC_DrvSerSetIntMask;
 800c08e:	4b7a      	ldr	r3, [pc, #488]	@ (800c278 <ABCC_StartDriver+0x2ac>)
 800c090:	4a7a      	ldr	r2, [pc, #488]	@ (800c27c <ABCC_StartDriver+0x2b0>)
 800c092:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetWrPdBuffer      = &ABCC_DrvSerGetWrPdBuffer;
 800c094:	4b7a      	ldr	r3, [pc, #488]	@ (800c280 <ABCC_StartDriver+0x2b4>)
 800c096:	4a7b      	ldr	r2, [pc, #492]	@ (800c284 <ABCC_StartDriver+0x2b8>)
 800c098:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetModCap          = &ABCC_DrvSerGetModCap;
 800c09a:	4b7b      	ldr	r3, [pc, #492]	@ (800c288 <ABCC_StartDriver+0x2bc>)
 800c09c:	4a7b      	ldr	r2, [pc, #492]	@ (800c28c <ABCC_StartDriver+0x2c0>)
 800c09e:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetLedStatus       = &ABCC_DrvSerGetLedStatus;
 800c0a0:	4b7b      	ldr	r3, [pc, #492]	@ (800c290 <ABCC_StartDriver+0x2c4>)
 800c0a2:	4a7c      	ldr	r2, [pc, #496]	@ (800c294 <ABCC_StartDriver+0x2c8>)
 800c0a4:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetIntStatus       = &ABCC_DrvSerGetIntStatus;
 800c0a6:	4b7c      	ldr	r3, [pc, #496]	@ (800c298 <ABCC_StartDriver+0x2cc>)
 800c0a8:	4a7c      	ldr	r2, [pc, #496]	@ (800c29c <ABCC_StartDriver+0x2d0>)
 800c0aa:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetAnybusState     = &ABCC_DrvSerGetAnybusState;
 800c0ac:	4b7c      	ldr	r3, [pc, #496]	@ (800c2a0 <ABCC_StartDriver+0x2d4>)
 800c0ae:	4a7d      	ldr	r2, [pc, #500]	@ (800c2a4 <ABCC_StartDriver+0x2d8>)
 800c0b0:	601a      	str	r2, [r3, #0]
      pnABCC_DrvReadProcessData    = &ABCC_DrvSerReadProcessData;
 800c0b2:	4b7d      	ldr	r3, [pc, #500]	@ (800c2a8 <ABCC_StartDriver+0x2dc>)
 800c0b4:	4a7d      	ldr	r2, [pc, #500]	@ (800c2ac <ABCC_StartDriver+0x2e0>)
 800c0b6:	601a      	str	r2, [r3, #0]
      pnABCC_DrvReadMessage        = &ABCC_DrvSerReadMessage;
 800c0b8:	4b7d      	ldr	r3, [pc, #500]	@ (800c2b0 <ABCC_StartDriver+0x2e4>)
 800c0ba:	4a7e      	ldr	r2, [pc, #504]	@ (800c2b4 <ABCC_StartDriver+0x2e8>)
 800c0bc:	601a      	str	r2, [r3, #0]
      pnABCC_DrvIsSupervised       = &ABCC_DrvSerIsSupervised;
 800c0be:	4b7e      	ldr	r3, [pc, #504]	@ (800c2b8 <ABCC_StartDriver+0x2ec>)
 800c0c0:	4a7e      	ldr	r2, [pc, #504]	@ (800c2bc <ABCC_StartDriver+0x2f0>)
 800c0c2:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetAnbStatus       = &ABCC_DrvSerGetAnbStatus;
 800c0c4:	4b7e      	ldr	r3, [pc, #504]	@ (800c2c0 <ABCC_StartDriver+0x2f4>)
 800c0c6:	4a7f      	ldr	r2, [pc, #508]	@ (800c2c4 <ABCC_StartDriver+0x2f8>)
 800c0c8:	601a      	str	r2, [r3, #0]

      ABCC_iInterruptEnableMask = 0;
 800c0ca:	4b7f      	ldr	r3, [pc, #508]	@ (800c2c8 <ABCC_StartDriver+0x2fc>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	801a      	strh	r2, [r3, #0]
      abcc_iMessageChannelSize = ABP_MAX_MSG_255_DATA_BYTES;
 800c0d0:	4b7e      	ldr	r3, [pc, #504]	@ (800c2cc <ABCC_StartDriver+0x300>)
 800c0d2:	22ff      	movs	r2, #255	@ 0xff
 800c0d4:	801a      	strh	r2, [r3, #0]

      break;
 800c0d6:	e067      	b.n	800c1a8 <ABCC_StartDriver+0x1dc>
#endif /* End of #if ABCC_CFG_DRV_SERIAL_ENABLED */
#if ABCC_CFG_DRV_SPI_ENABLED
   case ABP_OP_MODE_SPI:

      ABCC_ISR                   = &ABCC_SpiISR;
 800c0d8:	4b49      	ldr	r3, [pc, #292]	@ (800c200 <ABCC_StartDriver+0x234>)
 800c0da:	4a7d      	ldr	r2, [pc, #500]	@ (800c2d0 <ABCC_StartDriver+0x304>)
 800c0dc:	601a      	str	r2, [r3, #0]
      ABCC_TriggerWrPdUpdate     = &TriggerWrPdUpdateLater;
 800c0de:	4b49      	ldr	r3, [pc, #292]	@ (800c204 <ABCC_StartDriver+0x238>)
 800c0e0:	4a49      	ldr	r2, [pc, #292]	@ (800c208 <ABCC_StartDriver+0x23c>)
 800c0e2:	601a      	str	r2, [r3, #0]

      pnABCC_DrvRun                = &ABCC_SpiRunDriver;
 800c0e4:	4b49      	ldr	r3, [pc, #292]	@ (800c20c <ABCC_StartDriver+0x240>)
 800c0e6:	4a7b      	ldr	r2, [pc, #492]	@ (800c2d4 <ABCC_StartDriver+0x308>)
 800c0e8:	601a      	str	r2, [r3, #0]
      pnABCC_DrvInit               = &ABCC_DrvSpiInit;
 800c0ea:	4b4a      	ldr	r3, [pc, #296]	@ (800c214 <ABCC_StartDriver+0x248>)
 800c0ec:	4a7a      	ldr	r2, [pc, #488]	@ (800c2d8 <ABCC_StartDriver+0x30c>)
 800c0ee:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISR                = NULL;
 800c0f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c21c <ABCC_StartDriver+0x250>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
      pnABCC_DrvRunDriverTx        = &ABCC_DrvSpiRunDriverTx;
 800c0f6:	4b4b      	ldr	r3, [pc, #300]	@ (800c224 <ABCC_StartDriver+0x258>)
 800c0f8:	4a78      	ldr	r2, [pc, #480]	@ (800c2dc <ABCC_StartDriver+0x310>)
 800c0fa:	601a      	str	r2, [r3, #0]
      pnABCC_DrvRunDriverRx        = &ABCC_DrvSpiRunDriverRx;
 800c0fc:	4b4b      	ldr	r3, [pc, #300]	@ (800c22c <ABCC_StartDriver+0x260>)
 800c0fe:	4a78      	ldr	r2, [pc, #480]	@ (800c2e0 <ABCC_StartDriver+0x314>)
 800c100:	601a      	str	r2, [r3, #0]
      pnABCC_DrvPrepareWriteMessage = NULL;
 800c102:	4b4c      	ldr	r3, [pc, #304]	@ (800c234 <ABCC_StartDriver+0x268>)
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]
      pnABCC_DrvWriteMessage       = &ABCC_DrvSpiWriteMessage;
 800c108:	4b4b      	ldr	r3, [pc, #300]	@ (800c238 <ABCC_StartDriver+0x26c>)
 800c10a:	4a76      	ldr	r2, [pc, #472]	@ (800c2e4 <ABCC_StartDriver+0x318>)
 800c10c:	601a      	str	r2, [r3, #0]
      pnABCC_DrvWriteProcessData   = &ABCC_DrvSpiWriteProcessData;
 800c10e:	4b4c      	ldr	r3, [pc, #304]	@ (800c240 <ABCC_StartDriver+0x274>)
 800c110:	4a75      	ldr	r2, [pc, #468]	@ (800c2e8 <ABCC_StartDriver+0x31c>)
 800c112:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForWrPd     = &ABCC_DrvSpiIsReadyForWrPd;
 800c114:	4b4c      	ldr	r3, [pc, #304]	@ (800c248 <ABCC_StartDriver+0x27c>)
 800c116:	4a75      	ldr	r2, [pc, #468]	@ (800c2ec <ABCC_StartDriver+0x320>)
 800c118:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForWriteMessage = &ABCC_DrvSpiIsReadyForWriteMessage;
 800c11a:	4b4d      	ldr	r3, [pc, #308]	@ (800c250 <ABCC_StartDriver+0x284>)
 800c11c:	4a74      	ldr	r2, [pc, #464]	@ (800c2f0 <ABCC_StartDriver+0x324>)
 800c11e:	601a      	str	r2, [r3, #0]
      pnABCC_DrvISReadyForCmd      = &ABCC_DrvSpiIsReadyForCmd;
 800c120:	4b4d      	ldr	r3, [pc, #308]	@ (800c258 <ABCC_StartDriver+0x28c>)
 800c122:	4a74      	ldr	r2, [pc, #464]	@ (800c2f4 <ABCC_StartDriver+0x328>)
 800c124:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetNbrOfCmds       = &ABCC_DrvSpiSetNbrOfCmds;
 800c126:	4b4e      	ldr	r3, [pc, #312]	@ (800c260 <ABCC_StartDriver+0x294>)
 800c128:	4a73      	ldr	r2, [pc, #460]	@ (800c2f8 <ABCC_StartDriver+0x32c>)
 800c12a:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetAppStatus       = &ABCC_DrvSpiSetAppStatus;
 800c12c:	4b4e      	ldr	r3, [pc, #312]	@ (800c268 <ABCC_StartDriver+0x29c>)
 800c12e:	4a73      	ldr	r2, [pc, #460]	@ (800c2fc <ABCC_StartDriver+0x330>)
 800c130:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetPdSize          = &ABCC_DrvSpiSetPdSize;
 800c132:	4b4f      	ldr	r3, [pc, #316]	@ (800c270 <ABCC_StartDriver+0x2a4>)
 800c134:	4a72      	ldr	r2, [pc, #456]	@ (800c300 <ABCC_StartDriver+0x334>)
 800c136:	601a      	str	r2, [r3, #0]
      pnABCC_DrvSetIntMask         = &ABCC_DrvSpiSetIntMask;
 800c138:	4b4f      	ldr	r3, [pc, #316]	@ (800c278 <ABCC_StartDriver+0x2ac>)
 800c13a:	4a72      	ldr	r2, [pc, #456]	@ (800c304 <ABCC_StartDriver+0x338>)
 800c13c:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetWrPdBuffer      = &ABCC_DrvSpiGetWrPdBuffer;
 800c13e:	4b50      	ldr	r3, [pc, #320]	@ (800c280 <ABCC_StartDriver+0x2b4>)
 800c140:	4a71      	ldr	r2, [pc, #452]	@ (800c308 <ABCC_StartDriver+0x33c>)
 800c142:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetModCap          = &ABCC_DrvSpiGetModCap;
 800c144:	4b50      	ldr	r3, [pc, #320]	@ (800c288 <ABCC_StartDriver+0x2bc>)
 800c146:	4a71      	ldr	r2, [pc, #452]	@ (800c30c <ABCC_StartDriver+0x340>)
 800c148:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetLedStatus       = &ABCC_DrvSpiGetLedStatus;
 800c14a:	4b51      	ldr	r3, [pc, #324]	@ (800c290 <ABCC_StartDriver+0x2c4>)
 800c14c:	4a70      	ldr	r2, [pc, #448]	@ (800c310 <ABCC_StartDriver+0x344>)
 800c14e:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetIntStatus       = &ABCC_DrvSpiGetIntStatus;
 800c150:	4b51      	ldr	r3, [pc, #324]	@ (800c298 <ABCC_StartDriver+0x2cc>)
 800c152:	4a70      	ldr	r2, [pc, #448]	@ (800c314 <ABCC_StartDriver+0x348>)
 800c154:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetAnybusState     = &ABCC_DrvSpiGetAnybusState;
 800c156:	4b52      	ldr	r3, [pc, #328]	@ (800c2a0 <ABCC_StartDriver+0x2d4>)
 800c158:	4a6f      	ldr	r2, [pc, #444]	@ (800c318 <ABCC_StartDriver+0x34c>)
 800c15a:	601a      	str	r2, [r3, #0]
      pnABCC_DrvReadProcessData    = &ABCC_DrvSpiReadProcessData;
 800c15c:	4b52      	ldr	r3, [pc, #328]	@ (800c2a8 <ABCC_StartDriver+0x2dc>)
 800c15e:	4a6f      	ldr	r2, [pc, #444]	@ (800c31c <ABCC_StartDriver+0x350>)
 800c160:	601a      	str	r2, [r3, #0]
      pnABCC_DrvReadMessage        = &ABCC_DrvSpiReadMessage;
 800c162:	4b53      	ldr	r3, [pc, #332]	@ (800c2b0 <ABCC_StartDriver+0x2e4>)
 800c164:	4a6e      	ldr	r2, [pc, #440]	@ (800c320 <ABCC_StartDriver+0x354>)
 800c166:	601a      	str	r2, [r3, #0]
      pnABCC_DrvIsSupervised       = &ABCC_DrvSpiIsSupervised;
 800c168:	4b53      	ldr	r3, [pc, #332]	@ (800c2b8 <ABCC_StartDriver+0x2ec>)
 800c16a:	4a6e      	ldr	r2, [pc, #440]	@ (800c324 <ABCC_StartDriver+0x358>)
 800c16c:	601a      	str	r2, [r3, #0]
      pnABCC_DrvGetAnbStatus       = &ABCC_DrvSpiGetAnbStatus;
 800c16e:	4b54      	ldr	r3, [pc, #336]	@ (800c2c0 <ABCC_StartDriver+0x2f4>)
 800c170:	4a6d      	ldr	r2, [pc, #436]	@ (800c328 <ABCC_StartDriver+0x35c>)
 800c172:	601a      	str	r2, [r3, #0]

      ABCC_iInterruptEnableMask = ABCC_CFG_INT_ENABLE_MASK_SPI;
 800c174:	4b54      	ldr	r3, [pc, #336]	@ (800c2c8 <ABCC_StartDriver+0x2fc>)
 800c176:	2200      	movs	r2, #0
 800c178:	801a      	strh	r2, [r3, #0]
      abcc_iMessageChannelSize = ABP_MAX_MSG_DATA_BYTES;
 800c17a:	4b54      	ldr	r3, [pc, #336]	@ (800c2cc <ABCC_StartDriver+0x300>)
 800c17c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800c180:	801a      	strh	r2, [r3, #0]

      break;
 800c182:	e011      	b.n	800c1a8 <ABCC_StartDriver+0x1dc>
#endif

      break;
#endif /* End of #if ABCC_CFG_DRV_PARALLEL_ENABLED */
   default:
      ABCC_LOG_ERROR( ABCC_EC_INCORRECT_OPERATING_MODE, (UINT32)abcc_bOpmode, "Incorrect operating mode: %" PRIu8 "\n", abcc_bOpmode );
 800c184:	4b1d      	ldr	r3, [pc, #116]	@ (800c1fc <ABCC_StartDriver+0x230>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	461a      	mov	r2, r3
 800c18a:	4b1c      	ldr	r3, [pc, #112]	@ (800c1fc <ABCC_StartDriver+0x230>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	4b66      	ldr	r3, [pc, #408]	@ (800c32c <ABCC_StartDriver+0x360>)
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	f240 13fb 	movw	r3, #507	@ 0x1fb
 800c198:	9300      	str	r3, [sp, #0]
 800c19a:	4b17      	ldr	r3, [pc, #92]	@ (800c1f8 <ABCC_StartDriver+0x22c>)
 800c19c:	2106      	movs	r1, #6
 800c19e:	2001      	movs	r0, #1
 800c1a0:	f001 fa52 	bl	800d648 <ABCC_LogHandler>

      return( ABCC_EC_INCORRECT_OPERATING_MODE );
 800c1a4:	2306      	movs	r3, #6
 800c1a6:	e111      	b.n	800c3cc <ABCC_StartDriver+0x400>
   }

   if( !( ( abcc_eMainState == ABCC_DRV_INIT ) ||
 800c1a8:	4b61      	ldr	r3, [pc, #388]	@ (800c330 <ABCC_StartDriver+0x364>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d018      	beq.n	800c1e2 <ABCC_StartDriver+0x216>
          ( abcc_eMainState == ABCC_DRV_SHUTDOWN ) ) )
 800c1b0:	4b5f      	ldr	r3, [pc, #380]	@ (800c330 <ABCC_StartDriver+0x364>)
 800c1b2:	781b      	ldrb	r3, [r3, #0]
   if( !( ( abcc_eMainState == ABCC_DRV_INIT ) ||
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d014      	beq.n	800c1e2 <ABCC_StartDriver+0x216>
   {
      ABCC_LOG_ERROR( ABCC_EC_INCORRECT_STATE, (UINT32)abcc_eMainState, "Incorrect state: %d\n", abcc_eMainState );
 800c1b8:	4b5d      	ldr	r3, [pc, #372]	@ (800c330 <ABCC_StartDriver+0x364>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4b5c      	ldr	r3, [pc, #368]	@ (800c330 <ABCC_StartDriver+0x364>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	4b5b      	ldr	r3, [pc, #364]	@ (800c334 <ABCC_StartDriver+0x368>)
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	f240 2303 	movw	r3, #515	@ 0x203
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f8 <ABCC_StartDriver+0x22c>)
 800c1d0:	2107      	movs	r1, #7
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f001 fa38 	bl	800d648 <ABCC_LogHandler>
      SetMainState( ABCC_DRV_ERROR );
 800c1d8:	2002      	movs	r0, #2
 800c1da:	f7ff fdfb 	bl	800bdd4 <SetMainState>

      return( ABCC_EC_INCORRECT_STATE );
 800c1de:	2307      	movs	r3, #7
 800c1e0:	e0f4      	b.n	800c3cc <ABCC_StartDriver+0x400>
   }

   if( !ABCC_HAL_Init() )
 800c1e2:	f008 f9b7 	bl	8014554 <ABCC_HAL_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f040 80a5 	bne.w	800c338 <ABCC_StartDriver+0x36c>
   {
      return( ABCC_EC_INTERNAL_ERROR );
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e0ec      	b.n	800c3cc <ABCC_StartDriver+0x400>
 800c1f2:	bf00      	nop
 800c1f4:	08015da8 	.word	0x08015da8
 800c1f8:	08015d64 	.word	0x08015d64
 800c1fc:	240014f0 	.word	0x240014f0
 800c200:	24001468 	.word	0x24001468
 800c204:	2400146c 	.word	0x2400146c
 800c208:	0800be1d 	.word	0x0800be1d
 800c20c:	24001474 	.word	0x24001474
 800c210:	0800f1c1 	.word	0x0800f1c1
 800c214:	24001478 	.word	0x24001478
 800c218:	0800f429 	.word	0x0800f429
 800c21c:	2400147c 	.word	0x2400147c
 800c220:	0800fa29 	.word	0x0800fa29
 800c224:	24001480 	.word	0x24001480
 800c228:	0800f5e1 	.word	0x0800f5e1
 800c22c:	24001484 	.word	0x24001484
 800c230:	0800f791 	.word	0x0800f791
 800c234:	24001488 	.word	0x24001488
 800c238:	2400148c 	.word	0x2400148c
 800c23c:	0800fa39 	.word	0x0800fa39
 800c240:	24001490 	.word	0x24001490
 800c244:	0800faa5 	.word	0x0800faa5
 800c248:	24001494 	.word	0x24001494
 800c24c:	0800fd61 	.word	0x0800fd61
 800c250:	24001498 	.word	0x24001498
 800c254:	0800fae9 	.word	0x0800fae9
 800c258:	2400149c 	.word	0x2400149c
 800c25c:	0800fb11 	.word	0x0800fb11
 800c260:	240014a0 	.word	0x240014a0
 800c264:	0800fb41 	.word	0x0800fb41
 800c268:	240014a4 	.word	0x240014a4
 800c26c:	0800fb61 	.word	0x0800fb61
 800c270:	240014a8 	.word	0x240014a8
 800c274:	0800fb79 	.word	0x0800fb79
 800c278:	240014ac 	.word	0x240014ac
 800c27c:	0800fcdd 	.word	0x0800fcdd
 800c280:	240014b0 	.word	0x240014b0
 800c284:	0800fcf5 	.word	0x0800fcf5
 800c288:	240014b4 	.word	0x240014b4
 800c28c:	0800fd09 	.word	0x0800fd09
 800c290:	240014b8 	.word	0x240014b8
 800c294:	0800fd35 	.word	0x0800fd35
 800c298:	240014bc 	.word	0x240014bc
 800c29c:	0800fc41 	.word	0x0800fc41
 800c2a0:	240014c0 	.word	0x240014c0
 800c2a4:	0800fc6d 	.word	0x0800fc6d
 800c2a8:	240014c4 	.word	0x240014c4
 800c2ac:	0800fc89 	.word	0x0800fc89
 800c2b0:	240014c8 	.word	0x240014c8
 800c2b4:	0800fca1 	.word	0x0800fca1
 800c2b8:	240014cc 	.word	0x240014cc
 800c2bc:	0800fd81 	.word	0x0800fd81
 800c2c0:	240014d0 	.word	0x240014d0
 800c2c4:	0800fda5 	.word	0x0800fda5
 800c2c8:	24001470 	.word	0x24001470
 800c2cc:	240014f8 	.word	0x240014f8
 800c2d0:	0800ff6d 	.word	0x0800ff6d
 800c2d4:	0800ff01 	.word	0x0800ff01
 800c2d8:	080105a1 	.word	0x080105a1
 800c2dc:	0800ff95 	.word	0x0800ff95
 800c2e0:	080101fd 	.word	0x080101fd
 800c2e4:	080106f1 	.word	0x080106f1
 800c2e8:	0801076d 	.word	0x0801076d
 800c2ec:	08010abd 	.word	0x08010abd
 800c2f0:	080107c5 	.word	0x080107c5
 800c2f4:	080107ed 	.word	0x080107ed
 800c2f8:	08010819 	.word	0x08010819
 800c2fc:	08010839 	.word	0x08010839
 800c300:	08010859 	.word	0x08010859
 800c304:	08010a31 	.word	0x08010a31
 800c308:	08010a55 	.word	0x08010a55
 800c30c:	08010a79 	.word	0x08010a79
 800c310:	08010aa5 	.word	0x08010aa5
 800c314:	08010979 	.word	0x08010979
 800c318:	080109a9 	.word	0x080109a9
 800c31c:	080109c5 	.word	0x080109c5
 800c320:	080109f5 	.word	0x080109f5
 800c324:	08010add 	.word	0x08010add
 800c328:	08010afd 	.word	0x08010afd
 800c32c:	08015dcc 	.word	0x08015dcc
 800c330:	240014d4 	.word	0x240014d4
 800c334:	08015dec 	.word	0x08015dec
   }

   ABCC_TimerInit();
 800c338:	f002 fdbe 	bl	800eeb8 <ABCC_TimerInit>
   pnABCC_DrvInit( abcc_bOpmode );
 800c33c:	4b25      	ldr	r3, [pc, #148]	@ (800c3d4 <ABCC_StartDriver+0x408>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a25      	ldr	r2, [pc, #148]	@ (800c3d8 <ABCC_StartDriver+0x40c>)
 800c342:	7812      	ldrb	r2, [r2, #0]
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3

   ABCC_LinkInit();
 800c348:	f000 feb6 	bl	800d0b8 <ABCC_LinkInit>
#if ABCC_CFG_DRV_CMD_SEQ_ENABLED
   ABCC_CmdSequencerInit();
 800c34c:	f7ff fc8e 	bl	800bc6c <ABCC_CmdSequencerInit>
#endif
   ABCC_SetupInit();
 800c350:	f001 fdf0 	bl	800df34 <ABCC_SetupInit>
   ABCC_SegmentationInit();
 800c354:	f001 fcae 	bl	800dcb4 <ABCC_SegmentationInit>

   abcc_bAnbState = 0xff;
 800c358:	4b20      	ldr	r3, [pc, #128]	@ (800c3dc <ABCC_StartDriver+0x410>)
 800c35a:	22ff      	movs	r2, #255	@ 0xff
 800c35c:	701a      	strb	r2, [r3, #0]

   abcc_TmoHandle = ABCC_TimerCreate( SetReadyForCommunicationTmo );
 800c35e:	4820      	ldr	r0, [pc, #128]	@ (800c3e0 <ABCC_StartDriver+0x414>)
 800c360:	f002 fdd4 	bl	800ef0c <ABCC_TimerCreate>
 800c364:	4603      	mov	r3, r0
 800c366:	461a      	mov	r2, r3
 800c368:	4b1e      	ldr	r3, [pc, #120]	@ (800c3e4 <ABCC_StartDriver+0x418>)
 800c36a:	701a      	strb	r2, [r3, #0]

   abcc_pbWrPdBuffer = pnABCC_DrvGetWrPdBuffer();
 800c36c:	4b1e      	ldr	r3, [pc, #120]	@ (800c3e8 <ABCC_StartDriver+0x41c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4798      	blx	r3
 800c372:	4603      	mov	r3, r0
 800c374:	4a1d      	ldr	r2, [pc, #116]	@ (800c3ec <ABCC_StartDriver+0x420>)
 800c376:	6013      	str	r3, [r2, #0]

   if( !ABCC_ModuleDetect() )
 800c378:	f000 fa68 	bl	800c84c <ABCC_ModuleDetect>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10c      	bne.n	800c39c <ABCC_StartDriver+0x3d0>
   {
      ABCC_LOG_ERROR( ABCC_EC_MODULE_NOT_DECTECTED, 0, "Module not detected\n" );
 800c382:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f0 <ABCC_StartDriver+0x424>)
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	4b19      	ldr	r3, [pc, #100]	@ (800c3f4 <ABCC_StartDriver+0x428>)
 800c38e:	2200      	movs	r2, #0
 800c390:	210d      	movs	r1, #13
 800c392:	2001      	movs	r0, #1
 800c394:	f001 f958 	bl	800d648 <ABCC_LogHandler>

      return( ABCC_EC_MODULE_NOT_DECTECTED );
 800c398:	230d      	movs	r3, #13
 800c39a:	e017      	b.n	800c3cc <ABCC_StartDriver+0x400>
   }

#if ABCC_CFG_OP_MODE_SETTABLE
   ABCC_HAL_SetOpmode( abcc_bOpmode );
 800c39c:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d8 <ABCC_StartDriver+0x40c>)
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f008 f8ed 	bl	8014580 <ABCC_HAL_SetOpmode>
#endif

   abcc_fReadyForCommunicationTmo = FALSE;
 800c3a6:	4b14      	ldr	r3, [pc, #80]	@ (800c3f8 <ABCC_StartDriver+0x42c>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
   abcc_fReadyForCommunication = FALSE;
 800c3ac:	4b13      	ldr	r3, [pc, #76]	@ (800c3fc <ABCC_StartDriver+0x430>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
#if ABCC_CFG_DRV_ASSUME_FW_UPDATE_ENABLED
   abcc_fFwUpdateAttempted = FALSE;
 800c3b2:	4b13      	ldr	r3, [pc, #76]	@ (800c400 <ABCC_StartDriver+0x434>)
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	601a      	str	r2, [r3, #0]
   {
         ABCC_HAL_AbccInterruptEnable();
   }
#endif /* End of #if ABCC_CFG_INT_ENABLED */

   SetMainState( ABCC_DRV_WAIT_COMMUNICATION_RDY );
 800c3b8:	2003      	movs	r0, #3
 800c3ba:	f7ff fd0b 	bl	800bdd4 <SetMainState>

   ABCC_TimerStart( abcc_TmoHandle, lMaxStartupTimeMs );
 800c3be:	4b09      	ldr	r3, [pc, #36]	@ (800c3e4 <ABCC_StartDriver+0x418>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	6879      	ldr	r1, [r7, #4]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f002 fddb 	bl	800ef80 <ABCC_TimerStart>

   return( ABCC_EC_NO_ERROR );
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	24001478 	.word	0x24001478
 800c3d8:	240014f0 	.word	0x240014f0
 800c3dc:	2400000d 	.word	0x2400000d
 800c3e0:	0800be85 	.word	0x0800be85
 800c3e4:	240014e4 	.word	0x240014e4
 800c3e8:	240014b0 	.word	0x240014b0
 800c3ec:	240014e0 	.word	0x240014e0
 800c3f0:	08015e04 	.word	0x08015e04
 800c3f4:	08015d64 	.word	0x08015d64
 800c3f8:	240014e8 	.word	0x240014e8
 800c3fc:	240014ec 	.word	0x240014ec
 800c400:	240014dc 	.word	0x240014dc

0800c404 <ABCC_WaitForFwUpdate>:

#if ABCC_CFG_DRV_ASSUME_FW_UPDATE_ENABLED
BOOL ABCC_WaitForFwUpdate( UINT32 lTimeoutMs )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
   if( abcc_fFwUpdateAttempted )
 800c40c:	4b0f      	ldr	r3, [pc, #60]	@ (800c44c <ABCC_WaitForFwUpdate+0x48>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d001      	beq.n	800c418 <ABCC_WaitForFwUpdate+0x14>
   {
      return( FALSE );
 800c414:	2300      	movs	r3, #0
 800c416:	e015      	b.n	800c444 <ABCC_WaitForFwUpdate+0x40>
   }
   abcc_fFwUpdateAttempted = TRUE;
 800c418:	4b0c      	ldr	r3, [pc, #48]	@ (800c44c <ABCC_WaitForFwUpdate+0x48>)
 800c41a:	2201      	movs	r2, #1
 800c41c:	601a      	str	r2, [r3, #0]

   SetMainState( ABCC_DRV_WAIT_COMMUNICATION_RDY );
 800c41e:	2003      	movs	r0, #3
 800c420:	f7ff fcd8 	bl	800bdd4 <SetMainState>
   abcc_fReadyForCommunication = FALSE;
 800c424:	4b0a      	ldr	r3, [pc, #40]	@ (800c450 <ABCC_WaitForFwUpdate+0x4c>)
 800c426:	2200      	movs	r2, #0
 800c428:	601a      	str	r2, [r3, #0]
   abcc_fReadyForCommunicationTmo = FALSE;
 800c42a:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <ABCC_WaitForFwUpdate+0x50>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	601a      	str	r2, [r3, #0]
#if ABCC_CFG_DRV_CMD_SEQ_ENABLED
   ABCC_CmdSeqAbort( NULL );
 800c430:	2000      	movs	r0, #0
 800c432:	f7ff fbed 	bl	800bc10 <ABCC_CmdSeqAbort>
#endif
   ABCC_TimerStart( abcc_TmoHandle, lTimeoutMs );
 800c436:	4b08      	ldr	r3, [pc, #32]	@ (800c458 <ABCC_WaitForFwUpdate+0x54>)
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f002 fd9f 	bl	800ef80 <ABCC_TimerStart>

   return( TRUE );
 800c442:	2301      	movs	r3, #1
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	240014dc 	.word	0x240014dc
 800c450:	240014ec 	.word	0x240014ec
 800c454:	240014e8 	.word	0x240014e8
 800c458:	240014e4 	.word	0x240014e4

0800c45c <ABCC_isReadyForCommunication>:
#endif

ABCC_CommunicationStateType ABCC_isReadyForCommunication( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	af00      	add	r7, sp, #0
   if( abcc_eMainState > ABCC_DRV_WAIT_COMMUNICATION_RDY )
 800c460:	4b23      	ldr	r3, [pc, #140]	@ (800c4f0 <ABCC_isReadyForCommunication+0x94>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d901      	bls.n	800c46c <ABCC_isReadyForCommunication+0x10>
   {
      return( ABCC_READY_FOR_COMMUNICATION );
 800c468:	2301      	movs	r3, #1
 800c46a:	e03e      	b.n	800c4ea <ABCC_isReadyForCommunication+0x8e>
   }

   if( abcc_eMainState < ABCC_DRV_WAIT_COMMUNICATION_RDY )
 800c46c:	4b20      	ldr	r3, [pc, #128]	@ (800c4f0 <ABCC_isReadyForCommunication+0x94>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d801      	bhi.n	800c478 <ABCC_isReadyForCommunication+0x1c>
   {
      return( ABCC_NOT_READY_FOR_COMMUNICATION );
 800c474:	2300      	movs	r3, #0
 800c476:	e038      	b.n	800c4ea <ABCC_isReadyForCommunication+0x8e>
   }

   if( abcc_fReadyForCommunicationTmo == TRUE )
 800c478:	4b1e      	ldr	r3, [pc, #120]	@ (800c4f4 <ABCC_isReadyForCommunication+0x98>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d114      	bne.n	800c4aa <ABCC_isReadyForCommunication+0x4e>
   {
      if( IsInterruptInUse() || IsPolledInterruptInUse() )
 800c480:	f7ff fcd8 	bl	800be34 <IsInterruptInUse>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d104      	bne.n	800c494 <ABCC_isReadyForCommunication+0x38>
 800c48a:	f7ff fcdf 	bl	800be4c <IsPolledInterruptInUse>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d007      	beq.n	800c4a4 <ABCC_isReadyForCommunication+0x48>
      {
#if ABCC_CFG_DRV_ASSUME_FW_UPDATE_ENABLED
         if( abcc_fFwUpdateAttempted )
 800c494:	4b18      	ldr	r3, [pc, #96]	@ (800c4f8 <ABCC_isReadyForCommunication+0x9c>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <ABCC_isReadyForCommunication+0x44>
#endif
         {
            return( ABCC_STARTUP_TIMEOUT );
 800c49c:	2302      	movs	r3, #2
 800c49e:	e024      	b.n	800c4ea <ABCC_isReadyForCommunication+0x8e>
         }
#if ABCC_CFG_DRV_ASSUME_FW_UPDATE_ENABLED
         else
         {
            return( ABCC_ASSUME_FW_UPDATE );
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e022      	b.n	800c4ea <ABCC_isReadyForCommunication+0x8e>
         }
#endif
      }
      else
      {
         abcc_fReadyForCommunication = TRUE;
 800c4a4:	4b15      	ldr	r3, [pc, #84]	@ (800c4fc <ABCC_isReadyForCommunication+0xa0>)
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	601a      	str	r2, [r3, #0]
      }
   }

#if ( ( !ABCC_CFG_INT_ENABLED ) && ( ABCC_CFG_POLL_ABCC_IRQ_PIN_ENABLED ) )
   if( IsPolledInterruptInUse() )
 800c4aa:	f7ff fccf 	bl	800be4c <IsPolledInterruptInUse>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d004      	beq.n	800c4be <ABCC_isReadyForCommunication+0x62>
   {
      abcc_fReadyForCommunication = ABCC_HAL_IsAbccInterruptActive();
 800c4b4:	f008 f9a4 	bl	8014800 <ABCC_HAL_IsAbccInterruptActive>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4a10      	ldr	r2, [pc, #64]	@ (800c4fc <ABCC_isReadyForCommunication+0xa0>)
 800c4bc:	6013      	str	r3, [r2, #0]
   }
#endif

   if( abcc_fReadyForCommunication == TRUE )
 800c4be:	4b0f      	ldr	r3, [pc, #60]	@ (800c4fc <ABCC_isReadyForCommunication+0xa0>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d110      	bne.n	800c4e8 <ABCC_isReadyForCommunication+0x8c>
   {
      pnABCC_DrvSetIntMask( ABCC_iInterruptEnableMask );
 800c4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c500 <ABCC_isReadyForCommunication+0xa4>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a0e      	ldr	r2, [pc, #56]	@ (800c504 <ABCC_isReadyForCommunication+0xa8>)
 800c4cc:	8812      	ldrh	r2, [r2, #0]
 800c4ce:	4610      	mov	r0, r2
 800c4d0:	4798      	blx	r3
      SetMainState( ABCC_DRV_RUNNING );
 800c4d2:	2005      	movs	r0, #5
 800c4d4:	f7ff fc7e 	bl	800bdd4 <SetMainState>
      pnABCC_DrvSetNbrOfCmds( ABCC_CFG_MAX_NUM_APPL_CMDS );
 800c4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800c508 <ABCC_isReadyForCommunication+0xac>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2002      	movs	r0, #2
 800c4de:	4798      	blx	r3

      ABCC_StartSetup();
 800c4e0:	f002 fc92 	bl	800ee08 <ABCC_StartSetup>
      return( ABCC_READY_FOR_COMMUNICATION );
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e000      	b.n	800c4ea <ABCC_isReadyForCommunication+0x8e>
   }

   return( ABCC_NOT_READY_FOR_COMMUNICATION );
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	240014d4 	.word	0x240014d4
 800c4f4:	240014e8 	.word	0x240014e8
 800c4f8:	240014dc 	.word	0x240014dc
 800c4fc:	240014ec 	.word	0x240014ec
 800c500:	240014ac 	.word	0x240014ac
 800c504:	24001470 	.word	0x24001470
 800c508:	240014a0 	.word	0x240014a0

0800c50c <ABCC_TriggerRdPdUpdate>:


void ABCC_TriggerRdPdUpdate( void )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0

#if ABCC_CFG_SYNC_MEASUREMENT_OP_ENABLED
   ABCC_HAL_GpioSet();
#endif

   bpRdPd = pnABCC_DrvReadProcessData();
 800c512:	4b0a      	ldr	r3, [pc, #40]	@ (800c53c <ABCC_TriggerRdPdUpdate+0x30>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4798      	blx	r3
 800c518:	6078      	str	r0, [r7, #4]

   if( bpRdPd )
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d008      	beq.n	800c532 <ABCC_TriggerRdPdUpdate+0x26>
   {
      if( pnABCC_DrvGetAnybusState() == ABP_ANB_STATE_PROCESS_ACTIVE  )
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <ABCC_TriggerRdPdUpdate+0x34>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4798      	blx	r3
 800c526:	4603      	mov	r3, r0
 800c528:	2b04      	cmp	r3, #4
 800c52a:	d102      	bne.n	800c532 <ABCC_TriggerRdPdUpdate+0x26>
         ** The "read process data" is only valid in the PROCESS_ACTIVE state.
         ** Retrieve the new "read process data" from the Anybus-CC.
         ** The data format of the process data is network specific.
         ** Convert it to our native format.
         */
         ABCC_CbfNewReadPd( bpRdPd );
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f005 fc26 	bl	8011d7e <ABCC_CbfNewReadPd>
   ** applications has received data and handled it. Thus we reset the
   ** ABCC_CFG_SYNC_MEASUREMENT_OP_ENABLED measurement.
   */
   ABCC_HAL_GpioReset();
#endif
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	240014c4 	.word	0x240014c4
 800c540:	240014c0 	.word	0x240014c0

0800c544 <ABCC_TriggerReceiveMessage>:

void ABCC_TriggerReceiveMessage ( void )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af04      	add	r7, sp, #16
   ABCC_MsgType sRdMsg;

   sRdMsg.psMsg = ABCC_LinkReadMessage();
 800c54a:	f000 fe17 	bl	800d17c <ABCC_LinkReadMessage>
 800c54e:	4603      	mov	r3, r0
 800c550:	603b      	str	r3, [r7, #0]

   if( sRdMsg.psMsg == NULL )
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 808c 	beq.w	800c672 <ABCC_TriggerReceiveMessage+0x12e>
   ABCC_LOG_DEBUG_MSG_CONTENT( sRdMsg.psMsg, "Msg received\n" );
   /*
   ** Set buffer status to indicate that the buffer is handed over to the
   ** application.
   */
   ABCC_MemSetBufferStatus( sRdMsg.psMsg, ABCC_MEM_BUFSTAT_IN_APPL_HANDLER );
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2102      	movs	r1, #2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fa22 	bl	800d9a8 <ABCC_MemSetBufferStatus>
   /*
   ** A new message is available.
   */
   if( ABCC_GetLowAddrOct( sRdMsg.psMsg16->sHeader.iCmdReserved ) & ABP_MSG_HEADER_C_BIT )
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	891b      	ldrh	r3, [r3, #8]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d041      	beq.n	800c5f6 <ABCC_TriggerReceiveMessage+0xb2>
   {
      /*
      ** Check so that messages exceeding ABCC_CFG_MAX_MSG_SIZE are handled. The
      ** actual buffer protection is done in the operating mode driver.
      */
      if( ABCC_GetMsgDataSize( sRdMsg.psMsg ) > ABCC_CFG_MAX_MSG_SIZE )
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	b29b      	uxth	r3, r3
 800c578:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d92e      	bls.n	800c5de <ABCC_TriggerReceiveMessage+0x9a>
      {
         ABCC_LOG_WARNING( ABCC_EC_RCV_CMD_SIZE_EXCEEDS_BUFFER,
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	b29b      	uxth	r3, r3
 800c586:	461a      	mov	r2, r3
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	9302      	str	r3, [sp, #8]
 800c590:	4b3a      	ldr	r3, [pc, #232]	@ (800c67c <ABCC_TriggerReceiveMessage+0x138>)
 800c592:	9301      	str	r3, [sp, #4]
 800c594:	f240 23cd 	movw	r3, #717	@ 0x2cd
 800c598:	9300      	str	r3, [sp, #0]
 800c59a:	4b39      	ldr	r3, [pc, #228]	@ (800c680 <ABCC_TriggerReceiveMessage+0x13c>)
 800c59c:	211c      	movs	r1, #28
 800c59e:	2002      	movs	r0, #2
 800c5a0:	f001 f852 	bl	800d648 <ABCC_LogHandler>
            (UINT32)ABCC_GetMsgDataSize( sRdMsg.psMsg ),
            "Received command size exceeds buffer size: %" PRIu16 "\n",
            ABCC_GetMsgDataSize( sRdMsg.psMsg ) );
         ABP_SetMsgErrorResponse( sRdMsg.psMsg, 1, ABP_ERR_NO_RESOURCES );
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	7a1a      	ldrb	r2, [r3, #8]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c5ae:	b2d2      	uxtb	r2, r2
 800c5b0:	721a      	strb	r2, [r3, #8]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	7a1a      	ldrb	r2, [r3, #8]
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5bc:	b2d2      	uxtb	r2, r2
 800c5be:	721a      	strb	r2, [r3, #8]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f042 0201 	orr.w	r2, r2, #1
 800c5c8:	701a      	strb	r2, [r3, #0]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	705a      	strb	r2, [r3, #1]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	220e      	movs	r2, #14
 800c5d2:	731a      	strb	r2, [r3, #12]
         ABCC_SendRespMsg( sRdMsg.psMsg );
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f897 	bl	800c70a <ABCC_SendRespMsg>
 800c5dc:	e03d      	b.n	800c65a <ABCC_TriggerReceiveMessage+0x116>
      {

         /*
         ** Check if there is a related active segmentation session.
         */
         if( !ABCC_HandleSegmentAck( sRdMsg.psMsg ) )
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f001 fb8b 	bl	800dcfc <ABCC_HandleSegmentAck>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d136      	bne.n	800c65a <ABCC_TriggerReceiveMessage+0x116>
         {
            /*
            ** The message is a new command, let the application respond.
            */
            ABCC_CbfHandleCommandMessage( sRdMsg.psMsg );
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f004 fa92 	bl	8010b18 <ABCC_CbfHandleCommandMessage>
 800c5f4:	e031      	b.n	800c65a <ABCC_TriggerReceiveMessage+0x116>
   else
   {
      /*
      ** Check so that messages exceeding ABCC_CFG_MAX_MSG_SIZE are handled.
      */
      if( ABCC_GetMsgDataSize( sRdMsg.psMsg ) > ABCC_CFG_MAX_MSG_SIZE )
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800c600:	4293      	cmp	r3, r2
 800c602:	d919      	bls.n	800c638 <ABCC_TriggerReceiveMessage+0xf4>
      {
         (void)ABCC_LinkGetMsgHandler( ABCC_GetLowAddrOct( sRdMsg.psMsg16->sHeader.iSourceIdDestObj ) );
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	889b      	ldrh	r3, [r3, #4]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 ffbf 	bl	800d590 <ABCC_LinkGetMsgHandler>
         ABCC_LOG_WARNING( ABCC_EC_RCV_RESP_SIZE_EXCEEDS_BUFFER,
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	b29b      	uxth	r3, r3
 800c618:	461a      	mov	r2, r3
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	b29b      	uxth	r3, r3
 800c620:	9302      	str	r3, [sp, #8]
 800c622:	4b18      	ldr	r3, [pc, #96]	@ (800c684 <ABCC_TriggerReceiveMessage+0x140>)
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	f240 23eb 	movw	r3, #747	@ 0x2eb
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	4b14      	ldr	r3, [pc, #80]	@ (800c680 <ABCC_TriggerReceiveMessage+0x13c>)
 800c62e:	211d      	movs	r1, #29
 800c630:	2002      	movs	r0, #2
 800c632:	f001 f809 	bl	800d648 <ABCC_LogHandler>
 800c636:	e010      	b.n	800c65a <ABCC_TriggerReceiveMessage+0x116>
            "Received response size exceeds buffer size: %" PRIu16 "\n",
            ABCC_GetMsgDataSize( sRdMsg.psMsg ) );
      }
      else
      {
         ABCC_MsgHandlerFuncType pnMsgHandler = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	607b      	str	r3, [r7, #4]
         pnMsgHandler = ABCC_LinkGetMsgHandler( ABCC_GetLowAddrOct( sRdMsg.psMsg16->sHeader.iSourceIdDestObj ) );
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	889b      	ldrh	r3, [r3, #4]
 800c640:	b29b      	uxth	r3, r3
 800c642:	b2db      	uxtb	r3, r3
 800c644:	4618      	mov	r0, r3
 800c646:	f000 ffa3 	bl	800d590 <ABCC_LinkGetMsgHandler>
 800c64a:	6078      	str	r0, [r7, #4]

         if( pnMsgHandler )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d003      	beq.n	800c65a <ABCC_TriggerReceiveMessage+0x116>
         {
            ABCC_LOG_DEBUG_MSG_EVENT( sRdMsg.psMsg, "Routing response to registered response handler: " );
            pnMsgHandler( sRdMsg.psMsg );
 800c652:	683a      	ldr	r2, [r7, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4610      	mov	r0, r2
 800c658:	4798      	blx	r3
            ABCC_LOG_DEBUG_MSG_EVENT( sRdMsg.psMsg, "No response handler found" );
         }
      }
   }

   if( ABCC_MemGetBufferStatus( sRdMsg.psMsg ) == ABCC_MEM_BUFSTAT_IN_APPL_HANDLER )
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f001 f97d 	bl	800d95c <ABCC_MemGetBufferStatus>
 800c662:	4603      	mov	r3, r0
 800c664:	2b02      	cmp	r3, #2
 800c666:	d105      	bne.n	800c674 <ABCC_TriggerReceiveMessage+0x130>
   {
      /*
      ** The status has not been changed while the user processed the response
      ** message. Then this buffer shall be freed by the driver.
      */
      ABCC_ReturnMsgBuffer( &sRdMsg.psMsg );
 800c668:	463b      	mov	r3, r7
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f867 	bl	800c73e <ABCC_ReturnMsgBuffer>
 800c670:	e000      	b.n	800c674 <ABCC_TriggerReceiveMessage+0x130>
      return;
 800c672:	bf00      	nop
   }
}
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	08015e1c 	.word	0x08015e1c
 800c680:	08015d64 	.word	0x08015d64
 800c684:	08015e4c 	.word	0x08015e4c

0800c688 <ABCC_SendCmdMsg>:

ABCC_ErrorCodeType ABCC_SendCmdMsg( ABP_MsgType*  psCmdMsg, ABCC_MsgHandlerFuncType pnMsgHandler )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
   ABCC_ErrorCodeType eResult;
   ABCC_MsgType sMsg;

   sMsg.psMsg = psCmdMsg;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	60bb      	str	r3, [r7, #8]

   /*
   ** Register function to handle response.
   ** Must be done before sending the message to avoid race condition.
   */
   if( ABCC_LinkMapMsgHandler( ABCC_GetLowAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj ),
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	889b      	ldrh	r3, [r3, #4]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 ff47 	bl	800d534 <ABCC_LinkMapMsgHandler>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d110      	bne.n	800c6ce <ABCC_SendCmdMsg+0x46>
                               pnMsgHandler ) == ABCC_EC_NO_ERROR )
   {
      eResult = ABCC_LinkWriteMessage( sMsg.psMsg );
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fe14 	bl	800d2dc <ABCC_LinkWriteMessage>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	81fb      	strh	r3, [r7, #14]
      if( eResult != ABCC_EC_NO_ERROR )
 800c6b8:	89fb      	ldrh	r3, [r7, #14]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d014      	beq.n	800c6e8 <ABCC_SendCmdMsg+0x60>
      {
         /*
         ** Free message handler resource
         */
         (void)ABCC_LinkGetMsgHandler( ABCC_GetLowAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj ) );
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	889b      	ldrh	r3, [r3, #4]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 ff62 	bl	800d590 <ABCC_LinkGetMsgHandler>
 800c6cc:	e00c      	b.n	800c6e8 <ABCC_SendCmdMsg+0x60>
      }
   }
   else
   {
      eResult = ABCC_EC_NO_RESOURCES;
 800c6ce:	231a      	movs	r3, #26
 800c6d0:	81fb      	strh	r3, [r7, #14]

      /*
      ** Report error
      */
      ABCC_LOG_WARNING( ABCC_EC_NO_RESOURCES, 0, "No resources available to map response handler\n" );
 800c6d2:	4b08      	ldr	r3, [pc, #32]	@ (800c6f4 <ABCC_SendCmdMsg+0x6c>)
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	f240 3329 	movw	r3, #809	@ 0x329
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	4b06      	ldr	r3, [pc, #24]	@ (800c6f8 <ABCC_SendCmdMsg+0x70>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	211a      	movs	r1, #26
 800c6e2:	2002      	movs	r0, #2
 800c6e4:	f000 ffb0 	bl	800d648 <ABCC_LogHandler>
   }

   return( eResult );
 800c6e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	08015e80 	.word	0x08015e80
 800c6f8:	08015d64 	.word	0x08015d64

0800c6fc <ABCC_GetCmdQueueSize>:

UINT16 ABCC_GetCmdQueueSize( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
   return( ABCC_LinkGetNumCmdQueueEntries() );
 800c700:	f000 fdda 	bl	800d2b8 <ABCC_LinkGetNumCmdQueueEntries>
 800c704:	4603      	mov	r3, r0
}
 800c706:	4618      	mov	r0, r3
 800c708:	bd80      	pop	{r7, pc}

0800c70a <ABCC_SendRespMsg>:


ABCC_ErrorCodeType ABCC_SendRespMsg( ABP_MsgType* psMsgResp )
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
   return( ABCC_LinkWriteMessage( psMsgResp ) );
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 fde2 	bl	800d2dc <ABCC_LinkWriteMessage>
 800c718:	4603      	mov	r3, r0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <ABCC_GetCmdMsgBuffer>:

ABP_MsgType* ABCC_GetCmdMsgBuffer( void )
{
 800c722:	b580      	push	{r7, lr}
 800c724:	af00      	add	r7, sp, #0
   if( ABCC_GetCmdQueueSize() == 0 )
 800c726:	f7ff ffe9 	bl	800c6fc <ABCC_GetCmdQueueSize>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <ABCC_GetCmdMsgBuffer+0x12>
   {
      return( NULL );
 800c730:	2300      	movs	r3, #0
 800c732:	e002      	b.n	800c73a <ABCC_GetCmdMsgBuffer+0x18>
   }
   return( ABCC_MemAlloc() );
 800c734:	f001 f896 	bl	800d864 <ABCC_MemAlloc>
 800c738:	4603      	mov	r3, r0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <ABCC_ReturnMsgBuffer>:

ABCC_ErrorCodeType ABCC_ReturnMsgBuffer( ABP_MsgType** ppsBuffer )
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
   ABCC_LinkFree( ppsBuffer );
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fed6 	bl	800d4f8 <ABCC_LinkFree>

   return( ABCC_EC_NO_ERROR );
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <ABCC_SetPdSize>:
{
   ABCC_MemSetBufferStatus( psMsg, ABCC_MEM_BUFSTAT_OWNED );
}

void ABCC_SetPdSize( const UINT16 iReadPdSize, const UINT16 iWritePdSize )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b086      	sub	sp, #24
 800c75c:	af04      	add	r7, sp, #16
 800c75e:	4603      	mov	r3, r0
 800c760:	460a      	mov	r2, r1
 800c762:	80fb      	strh	r3, [r7, #6]
 800c764:	4613      	mov	r3, r2
 800c766:	80bb      	strh	r3, [r7, #4]
   ABCC_LOG_INFO( "New process data sizes RdPd %" PRIu16 " WrPd %" PRIu16 "\n", iReadPdSize, iWritePdSize );
 800c768:	88fb      	ldrh	r3, [r7, #6]
 800c76a:	88ba      	ldrh	r2, [r7, #4]
 800c76c:	9203      	str	r2, [sp, #12]
 800c76e:	9302      	str	r3, [sp, #8]
 800c770:	4b0a      	ldr	r3, [pc, #40]	@ (800c79c <ABCC_SetPdSize+0x44>)
 800c772:	9301      	str	r3, [sp, #4]
 800c774:	f240 3351 	movw	r3, #849	@ 0x351
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4b09      	ldr	r3, [pc, #36]	@ (800c7a0 <ABCC_SetPdSize+0x48>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	2100      	movs	r1, #0
 800c780:	2003      	movs	r0, #3
 800c782:	f000 ff61 	bl	800d648 <ABCC_LogHandler>
   pnABCC_DrvSetPdSize( iReadPdSize, iWritePdSize );
 800c786:	4b07      	ldr	r3, [pc, #28]	@ (800c7a4 <ABCC_SetPdSize+0x4c>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	88b9      	ldrh	r1, [r7, #4]
 800c78c:	88fa      	ldrh	r2, [r7, #6]
 800c78e:	4610      	mov	r0, r2
 800c790:	4798      	blx	r3
}
 800c792:	bf00      	nop
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	08015eb0 	.word	0x08015eb0
 800c7a0:	08015d64 	.word	0x08015d64
 800c7a4:	240014a8 	.word	0x240014a8

0800c7a8 <ABCC_RunDriver>:

ABCC_ErrorCodeType ABCC_RunDriver( void )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
   if( abcc_eMainState == ABCC_DRV_ERROR )
 800c7ac:	4b09      	ldr	r3, [pc, #36]	@ (800c7d4 <ABCC_RunDriver+0x2c>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d102      	bne.n	800c7ba <ABCC_RunDriver+0x12>
   {
      return( abcc_eLastErrorCode );
 800c7b4:	4b08      	ldr	r3, [pc, #32]	@ (800c7d8 <ABCC_RunDriver+0x30>)
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	e00a      	b.n	800c7d0 <ABCC_RunDriver+0x28>
   }

   pnABCC_DrvRun();
 800c7ba:	4b08      	ldr	r3, [pc, #32]	@ (800c7dc <ABCC_RunDriver+0x34>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4798      	blx	r3

   if( abcc_eMainState == ABCC_DRV_ERROR )
 800c7c0:	4b04      	ldr	r3, [pc, #16]	@ (800c7d4 <ABCC_RunDriver+0x2c>)
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d102      	bne.n	800c7ce <ABCC_RunDriver+0x26>
   {
      return( abcc_eLastErrorCode );
 800c7c8:	4b03      	ldr	r3, [pc, #12]	@ (800c7d8 <ABCC_RunDriver+0x30>)
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	e000      	b.n	800c7d0 <ABCC_RunDriver+0x28>
   }

   return( ABCC_EC_NO_ERROR );
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	240014d4 	.word	0x240014d4
 800c7d8:	240014d6 	.word	0x240014d6
 800c7dc:	24001474 	.word	0x24001474

0800c7e0 <ABCC_HWReset>:

void ABCC_HWReset( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af02      	add	r7, sp, #8
   ABCC_LOG_INFO( "HW Reset\n" );
 800c7e6:	4b09      	ldr	r3, [pc, #36]	@ (800c80c <ABCC_HWReset+0x2c>)
 800c7e8:	9301      	str	r3, [sp, #4]
 800c7ea:	f44f 735a 	mov.w	r3, #872	@ 0x368
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	4b07      	ldr	r3, [pc, #28]	@ (800c810 <ABCC_HWReset+0x30>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	2003      	movs	r0, #3
 800c7f8:	f000 ff26 	bl	800d648 <ABCC_LogHandler>
   ABCC_ShutdownDriver();
 800c7fc:	f000 f80a 	bl	800c814 <ABCC_ShutdownDriver>
   ABCC_HAL_HWReset();
 800c800:	f007 ffca 	bl	8014798 <ABCC_HAL_HWReset>
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	08015edc 	.word	0x08015edc
 800c810:	08015d64 	.word	0x08015d64

0800c814 <ABCC_ShutdownDriver>:


void ABCC_ShutdownDriver( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af02      	add	r7, sp, #8
   ABCC_LOG_INFO( "Enter Shutdown state\n" );
 800c81a:	4b0a      	ldr	r3, [pc, #40]	@ (800c844 <ABCC_ShutdownDriver+0x30>)
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4b08      	ldr	r3, [pc, #32]	@ (800c848 <ABCC_ShutdownDriver+0x34>)
 800c826:	2200      	movs	r2, #0
 800c828:	2100      	movs	r1, #0
 800c82a:	2003      	movs	r0, #3
 800c82c:	f000 ff0c 	bl	800d648 <ABCC_LogHandler>
#endif

#if ABCC_CFG_INT_ENABLED
   ABCC_HAL_AbccInterruptDisable();
#endif
   ABCC_HAL_Close();
 800c830:	f007 fe9e 	bl	8014570 <ABCC_HAL_Close>
   ABCC_TimerDisable();
 800c834:	f002 fc6e 	bl	800f114 <ABCC_TimerDisable>
   SetMainState( ABCC_DRV_SHUTDOWN );
 800c838:	2001      	movs	r0, #1
 800c83a:	f7ff facb 	bl	800bdd4 <SetMainState>
}
 800c83e:	bf00      	nop
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	08015ee8 	.word	0x08015ee8
 800c848:	08015d64 	.word	0x08015d64

0800c84c <ABCC_ModuleDetect>:


BOOL ABCC_ModuleDetect( void )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
#if ABCC_CFG_MOD_DETECT_PINS_CONN
   return( ABCC_HAL_ModuleDetect() );
 800c850:	f007 ffc6 	bl	80147e0 <ABCC_HAL_ModuleDetect>
 800c854:	4603      	mov	r3, r0
#else
   return( TRUE );
#endif
}
 800c856:	4618      	mov	r0, r3
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <ABCC_AnbState>:
{
   return( pnABCC_DrvGetLedStatus() );
}

UINT8 ABCC_AnbState( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	af00      	add	r7, sp, #0
   return( pnABCC_DrvGetAnybusState() );
 800c860:	4b02      	ldr	r3, [pc, #8]	@ (800c86c <ABCC_AnbState+0x10>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4798      	blx	r3
 800c866:	4603      	mov	r3, r0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	240014c0 	.word	0x240014c0

0800c870 <ABCC_HWReleaseReset>:
{
   return( pnABCC_DrvIsSupervised() );
}

void ABCC_HWReleaseReset( void )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af02      	add	r7, sp, #8
   ABCC_LOG_INFO( "Release hardware reset\n" );
 800c876:	4b08      	ldr	r3, [pc, #32]	@ (800c898 <ABCC_HWReleaseReset+0x28>)
 800c878:	9301      	str	r3, [sp, #4]
 800c87a:	f240 339e 	movw	r3, #926	@ 0x39e
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	4b06      	ldr	r3, [pc, #24]	@ (800c89c <ABCC_HWReleaseReset+0x2c>)
 800c882:	2200      	movs	r2, #0
 800c884:	2100      	movs	r1, #0
 800c886:	2003      	movs	r0, #3
 800c888:	f000 fede 	bl	800d648 <ABCC_LogHandler>
   ABCC_HAL_HWReleaseReset();
 800c88c:	f007 ff90 	bl	80147b0 <ABCC_HAL_HWReleaseReset>
}
 800c890:	bf00      	nop
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	08015f00 	.word	0x08015f00
 800c89c:	08015d64 	.word	0x08015d64

0800c8a0 <ABCC_ReadModuleId>:
      pnABCC_DrvSetAppStatus( eAppStatus );
   }
}

UINT8 ABCC_ReadModuleId( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
#if ABCC_CFG_MODULE_ID_PINS_CONN
   return( ABCC_HAL_ReadModuleId() );
 800c8a4:	f007 ff90 	bl	80147c8 <ABCC_HAL_ReadModuleId>
 800c8a8:	4603      	mov	r3, r0
#else
   return( ABP_MODULE_ID_ACTIVE_ABCC40 );
#endif
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <ABCC_RunTimerSystem>:

void ABCC_RunTimerSystem( const INT16 iDeltaTimeMs )
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b082      	sub	sp, #8
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	80fb      	strh	r3, [r7, #6]
   ABCC_TimerTick( iDeltaTimeMs );
 800c8b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f002 fbc1 	bl	800f044 <ABCC_TimerTick>
}
 800c8c2:	bf00      	nop
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <ABCC_GetUptimeMs>:

UINT64 ABCC_GetUptimeMs( void )
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	af00      	add	r7, sp, #0
   return( ABCC_TimerGetUptimeMs() );
 800c8ce:	f002 fc2d 	bl	800f12c <ABCC_TimerGetUptimeMs>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
}
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	4619      	mov	r1, r3
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <ABCC_GetNewSourceId>:

UINT8 ABCC_GetNewSourceId( void )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
   ABCC_PORT_UseCritical();

   do
   {
      ABCC_PORT_EnterCritical();
      bTempSrcId = ++bSourceId;
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c90c <ABCC_GetNewSourceId+0x30>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	4b08      	ldr	r3, [pc, #32]	@ (800c90c <ABCC_GetNewSourceId+0x30>)
 800c8ec:	701a      	strb	r2, [r3, #0]
 800c8ee:	4b07      	ldr	r3, [pc, #28]	@ (800c90c <ABCC_GetNewSourceId+0x30>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	71fb      	strb	r3, [r7, #7]
      ABCC_PORT_ExitCritical();
   } while( ABCC_LinkIsSrcIdUsed( bTempSrcId ) );
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fe7c 	bl	800d5f4 <ABCC_LinkIsSrcIdUsed>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d1ef      	bne.n	800c8e2 <ABCC_GetNewSourceId+0x6>

   return( bTempSrcId );
 800c902:	79fb      	ldrb	r3, [r7, #7]
}
 800c904:	4618      	mov	r0, r3
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	240014fa 	.word	0x240014fa

0800c910 <ABCC_GetOpmode>:

UINT8 ABCC_GetOpmode( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
#if ABCC_CFG_OP_MODE_GETTABLE
   return( ABCC_HAL_GetOpmode() );
 800c914:	f007 ff20 	bl	8014758 <ABCC_HAL_GetOpmode>
 800c918:	4603      	mov	r3, r0
   /*
   ** The user has not configured any way to determine the operating mode
   */
   #error "No method to determine the operating mode is available. Either set ABCC_CFG_OP_MODE_GETTABLE to 1 or any of ABCC_CFG_ABCC_OP_MODE_X. See descriptions in abcc_config.h for details."
#endif /* End of #if defined( ABCC_CFG_OP_MODE_HW_CONF ) */
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <ABCC_GetAttribute>:
void ABCC_GetAttribute( ABP_MsgType* psMsg,
                        UINT8 bObject,
                        UINT16 iInstance,
                        UINT8 bAttribute,
                        UINT8 bSourceId )
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	461a      	mov	r2, r3
 800c92c:	4603      	mov	r3, r0
 800c92e:	70fb      	strb	r3, [r7, #3]
 800c930:	460b      	mov	r3, r1
 800c932:	803b      	strh	r3, [r7, #0]
 800c934:	4613      	mov	r3, r2
 800c936:	70bb      	strb	r3, [r7, #2]
   ABCC_MsgType sMsg;
   sMsg.psMsg = psMsg;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	60fb      	str	r3, [r7, #12]

   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bSourceId ); /* SourceId */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	889b      	ldrh	r3, [r3, #4]
 800c940:	b29a      	uxth	r2, r3
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c948:	b292      	uxth	r2, r2
 800c94a:	809a      	strh	r2, [r3, #4]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	889b      	ldrh	r3, [r3, #4]
 800c950:	b299      	uxth	r1, r3
 800c952:	7e3b      	ldrb	r3, [r7, #24]
 800c954:	b29a      	uxth	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	430a      	orrs	r2, r1
 800c95a:	b292      	uxth	r2, r2
 800c95c:	809a      	strh	r2, [r3, #4]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bObject );  /* bObject */
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	889b      	ldrh	r3, [r3, #4]
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	b292      	uxth	r2, r2
 800c96a:	809a      	strh	r2, [r3, #4]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	889b      	ldrh	r3, [r3, #4]
 800c970:	b29b      	uxth	r3, r3
 800c972:	b21a      	sxth	r2, r3
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	b21b      	sxth	r3, r3
 800c978:	021b      	lsls	r3, r3, #8
 800c97a:	b21b      	sxth	r3, r3
 800c97c:	4313      	orrs	r3, r2
 800c97e:	b21a      	sxth	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	b292      	uxth	r2, r2
 800c984:	809a      	strh	r2, [r3, #4]
   psMsg->sHeader.iInstance = iTOiLe( iInstance );                          /* Instance */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	883a      	ldrh	r2, [r7, #0]
 800c98a:	80da      	strh	r2, [r3, #6]
   ABCC_SetLowAddrOct(  sMsg.psMsg16->sHeader.iCmdReserved,
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	891b      	ldrh	r3, [r3, #8]
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c998:	b292      	uxth	r2, r2
 800c99a:	811a      	strh	r2, [r3, #8]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	891b      	ldrh	r3, [r3, #8]
 800c9a0:	b29a      	uxth	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 800c9a8:	b292      	uxth	r2, r2
 800c9aa:	811a      	strh	r2, [r3, #8]
                  ABP_MSG_HEADER_C_BIT | ABP_CMD_GET_ATTR );                /* Command */

   sMsg.psMsg16->sHeader.iDataSize = 0;                                     /* Data size           */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	705a      	strb	r2, [r3, #1]
   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, bAttribute ); /* CmdExt0 (Attribute) */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	895b      	ldrh	r3, [r3, #10]
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c9c2:	b292      	uxth	r2, r2
 800c9c4:	815a      	strh	r2, [r3, #10]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	895b      	ldrh	r3, [r3, #10]
 800c9ca:	b299      	uxth	r1, r3
 800c9cc:	78bb      	ldrb	r3, [r7, #2]
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	430a      	orrs	r2, r1
 800c9d4:	b292      	uxth	r2, r2
 800c9d6:	815a      	strh	r2, [r3, #10]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, 0 );         /* CmdExt1 (reserved)  */
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	895b      	ldrh	r3, [r3, #10]
 800c9dc:	b29a      	uxth	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	b2d2      	uxtb	r2, r2
 800c9e2:	b292      	uxth	r2, r2
 800c9e4:	815a      	strh	r2, [r3, #10]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8952      	ldrh	r2, [r2, #10]
 800c9ec:	b292      	uxth	r2, r2
 800c9ee:	815a      	strh	r2, [r3, #10]
}
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <ABCC_SetByteAttribute>:
                           UINT8 bObject,
                           UINT16 iInstance,
                           UINT8 bAttribute,
                           UINT8 bVal,
                           UINT8 bSourceId )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	4608      	mov	r0, r1
 800ca06:	4611      	mov	r1, r2
 800ca08:	461a      	mov	r2, r3
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	70fb      	strb	r3, [r7, #3]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	803b      	strh	r3, [r7, #0]
 800ca12:	4613      	mov	r3, r2
 800ca14:	70bb      	strb	r3, [r7, #2]
   ABCC_MsgType sMsg;
   sMsg.psMsg = psMsg;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	60fb      	str	r3, [r7, #12]

   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bSourceId );  /* SourceId */
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	889b      	ldrh	r3, [r3, #4]
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ca26:	b292      	uxth	r2, r2
 800ca28:	809a      	strh	r2, [r3, #4]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	889b      	ldrh	r3, [r3, #4]
 800ca2e:	b299      	uxth	r1, r3
 800ca30:	7f3b      	ldrb	r3, [r7, #28]
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	430a      	orrs	r2, r1
 800ca38:	b292      	uxth	r2, r2
 800ca3a:	809a      	strh	r2, [r3, #4]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bObject );   /* bObject */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	889b      	ldrh	r3, [r3, #4]
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	b2d2      	uxtb	r2, r2
 800ca46:	b292      	uxth	r2, r2
 800ca48:	809a      	strh	r2, [r3, #4]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	889b      	ldrh	r3, [r3, #4]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	b21a      	sxth	r2, r3
 800ca52:	78fb      	ldrb	r3, [r7, #3]
 800ca54:	b21b      	sxth	r3, r3
 800ca56:	021b      	lsls	r3, r3, #8
 800ca58:	b21b      	sxth	r3, r3
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	b21a      	sxth	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	b292      	uxth	r2, r2
 800ca62:	809a      	strh	r2, [r3, #4]
   psMsg->sHeader.iInstance = iTOiLe( iInstance );                           /* Instance */
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	883a      	ldrh	r2, [r7, #0]
 800ca68:	80da      	strh	r2, [r3, #6]
   ABCC_SetLowAddrOct(  sMsg.psMsg16->sHeader.iCmdReserved,
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	891b      	ldrh	r3, [r3, #8]
 800ca6e:	b29a      	uxth	r2, r3
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ca76:	b292      	uxth	r2, r2
 800ca78:	811a      	strh	r2, [r3, #8]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	891b      	ldrh	r3, [r3, #8]
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f042 0242 	orr.w	r2, r2, #66	@ 0x42
 800ca86:	b292      	uxth	r2, r2
 800ca88:	811a      	strh	r2, [r3, #8]
                  ABP_MSG_HEADER_C_BIT | ABP_CMD_SET_ATTR );                 /* Command */

   sMsg.psMsg16->sHeader.iDataSize = iTOiLe( 1 );                            /* Data size           */
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f042 0201 	orr.w	r2, r2, #1
 800ca92:	701a      	strb	r2, [r3, #0]
 800ca94:	2200      	movs	r2, #0
 800ca96:	705a      	strb	r2, [r3, #1]
   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, bAttribute );  /* CmdExt0 (Attribute) */
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	895b      	ldrh	r3, [r3, #10]
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800caa4:	b292      	uxth	r2, r2
 800caa6:	815a      	strh	r2, [r3, #10]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	895b      	ldrh	r3, [r3, #10]
 800caac:	b299      	uxth	r1, r3
 800caae:	78bb      	ldrb	r3, [r7, #2]
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	430a      	orrs	r2, r1
 800cab6:	b292      	uxth	r2, r2
 800cab8:	815a      	strh	r2, [r3, #10]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, 0 );          /* CmdExt1 (reserved)  */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	895b      	ldrh	r3, [r3, #10]
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	b292      	uxth	r2, r2
 800cac6:	815a      	strh	r2, [r3, #10]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	8952      	ldrh	r2, [r2, #10]
 800cace:	b292      	uxth	r2, r2
 800cad0:	815a      	strh	r2, [r3, #10]
   ABCC_SetLowAddrOct( sMsg.psMsg16->aiData[ 0 ], bVal );                    /* Data                */
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	899b      	ldrh	r3, [r3, #12]
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cade:	b292      	uxth	r2, r2
 800cae0:	819a      	strh	r2, [r3, #12]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	899b      	ldrh	r3, [r3, #12]
 800cae6:	b299      	uxth	r1, r3
 800cae8:	7e3b      	ldrb	r3, [r7, #24]
 800caea:	b29a      	uxth	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	430a      	orrs	r2, r1
 800caf0:	b292      	uxth	r2, r2
 800caf2:	819a      	strh	r2, [r3, #12]
}
 800caf4:	bf00      	nop
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <ABCC_SetMsgHeader>:
                        UINT16 iInstance,
                        UINT8 bAttribute,
                        ABP_MsgCmdType eService,
                        UINT16 iDataSize,
                        UINT8 bSourceId )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	4608      	mov	r0, r1
 800cb0a:	4611      	mov	r1, r2
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	4603      	mov	r3, r0
 800cb10:	70fb      	strb	r3, [r7, #3]
 800cb12:	460b      	mov	r3, r1
 800cb14:	803b      	strh	r3, [r7, #0]
 800cb16:	4613      	mov	r3, r2
 800cb18:	70bb      	strb	r3, [r7, #2]
   ABCC_MsgType sMsg;
   sMsg.psMsg = psMsg;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60fb      	str	r3, [r7, #12]

   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bSourceId );  /* SourceId */
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	889b      	ldrh	r3, [r3, #4]
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cb2a:	b292      	uxth	r2, r2
 800cb2c:	809a      	strh	r2, [r3, #4]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	889b      	ldrh	r3, [r3, #4]
 800cb32:	b299      	uxth	r1, r3
 800cb34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	430a      	orrs	r2, r1
 800cb3e:	b292      	uxth	r2, r2
 800cb40:	809a      	strh	r2, [r3, #4]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iSourceIdDestObj, bObject );   /* bObject */
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	889b      	ldrh	r3, [r3, #4]
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	b2d2      	uxtb	r2, r2
 800cb4c:	b292      	uxth	r2, r2
 800cb4e:	809a      	strh	r2, [r3, #4]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	889b      	ldrh	r3, [r3, #4]
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	b21a      	sxth	r2, r3
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	b21b      	sxth	r3, r3
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	4313      	orrs	r3, r2
 800cb62:	b21a      	sxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	b292      	uxth	r2, r2
 800cb68:	809a      	strh	r2, [r3, #4]
   psMsg->sHeader.iInstance = iTOiLe( iInstance );                           /* Instance */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	883a      	ldrh	r2, [r7, #0]
 800cb6e:	80da      	strh	r2, [r3, #6]
   ABCC_SetLowAddrOct(  sMsg.psMsg16->sHeader.iCmdReserved,
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	891b      	ldrh	r3, [r3, #8]
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cb7c:	b292      	uxth	r2, r2
 800cb7e:	811a      	strh	r2, [r3, #8]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	891b      	ldrh	r3, [r3, #8]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	7e3b      	ldrb	r3, [r7, #24]
 800cb88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	4619      	mov	r1, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	b292      	uxth	r2, r2
 800cb96:	811a      	strh	r2, [r3, #8]
                        ABP_MSG_HEADER_C_BIT | eService );                   /* Command */

   sMsg.psMsg16->sHeader.iDataSize = iTOiLe( iDataSize );                    /* Data size           */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	8bba      	ldrh	r2, [r7, #28]
 800cb9c:	801a      	strh	r2, [r3, #0]
   ABCC_SetLowAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, bAttribute );  /* CmdExt0 (Attribute) */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	895b      	ldrh	r3, [r3, #10]
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cbaa:	b292      	uxth	r2, r2
 800cbac:	815a      	strh	r2, [r3, #10]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	895b      	ldrh	r3, [r3, #10]
 800cbb2:	b299      	uxth	r1, r3
 800cbb4:	78bb      	ldrb	r3, [r7, #2]
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	b292      	uxth	r2, r2
 800cbbe:	815a      	strh	r2, [r3, #10]
   ABCC_SetHighAddrOct( sMsg.psMsg16->sHeader.iCmdExt0CmdExt1, 0 );          /* CmdExt1 (reserved)  */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	895b      	ldrh	r3, [r3, #10]
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	b2d2      	uxtb	r2, r2
 800cbca:	b292      	uxth	r2, r2
 800cbcc:	815a      	strh	r2, [r3, #10]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8952      	ldrh	r2, [r2, #10]
 800cbd4:	b292      	uxth	r2, r2
 800cbd6:	815a      	strh	r2, [r3, #10]
}
 800cbd8:	bf00      	nop
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <ABCC_VerifyMessage>:

ABCC_ErrorCodeType ABCC_VerifyMessage( const ABP_MsgType* psMsg )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
   const ABP_MsgType16* psMsg16 = (const ABP_MsgType16*)psMsg;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	60fb      	str	r3, [r7, #12]
   if( ABCC_GetLowAddrOct( psMsg16->sHeader.iCmdReserved ) & ABP_MSG_HEADER_E_BIT )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	891b      	ldrh	r3, [r3, #8]
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <ABCC_VerifyMessage+0x1e>
   {
      return( ABCC_EC_RESP_MSG_E_BIT_SET );
 800cbfe:	2308      	movs	r3, #8
 800cc00:	e000      	b.n	800cc04 <ABCC_VerifyMessage+0x20>
   }
   return( ABCC_EC_NO_ERROR );
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <ABCC_GetDataTypeSizeInBits>:
/*------------------------------------------------------------------------------
** ABCC_GetDataTypeSizeInBits()
**------------------------------------------------------------------------------
*/
UINT16 ABCC_GetDataTypeSizeInBits( UINT8 bDataType )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
   UINT16 iSetBitSize;

   if( ABP_Is_PADx( bDataType ) )
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	2b1f      	cmp	r3, #31
 800cc1e:	d907      	bls.n	800cc30 <ABCC_GetDataTypeSizeInBits+0x20>
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	2b30      	cmp	r3, #48	@ 0x30
 800cc24:	d804      	bhi.n	800cc30 <ABCC_GetDataTypeSizeInBits+0x20>
   {
      iSetBitSize = bDataType - ABP_PAD0;
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	3b20      	subs	r3, #32
 800cc2c:	81fb      	strh	r3, [r7, #14]
 800cc2e:	e019      	b.n	800cc64 <ABCC_GetDataTypeSizeInBits+0x54>
   }
   else if( ABP_Is_BITx( bDataType ) )
 800cc30:	79fb      	ldrb	r3, [r7, #7]
 800cc32:	2b40      	cmp	r3, #64	@ 0x40
 800cc34:	d907      	bls.n	800cc46 <ABCC_GetDataTypeSizeInBits+0x36>
 800cc36:	79fb      	ldrb	r3, [r7, #7]
 800cc38:	2b47      	cmp	r3, #71	@ 0x47
 800cc3a:	d804      	bhi.n	800cc46 <ABCC_GetDataTypeSizeInBits+0x36>
   {
      iSetBitSize = ( ( bDataType - ABP_BIT1 ) + 1 );
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	3b40      	subs	r3, #64	@ 0x40
 800cc42:	81fb      	strh	r3, [r7, #14]
 800cc44:	e00e      	b.n	800cc64 <ABCC_GetDataTypeSizeInBits+0x54>
   }
   else if( bDataType == ABP_BOOL1 )
 800cc46:	79fb      	ldrb	r3, [r7, #7]
 800cc48:	2b40      	cmp	r3, #64	@ 0x40
 800cc4a:	d102      	bne.n	800cc52 <ABCC_GetDataTypeSizeInBits+0x42>
   {
      iSetBitSize = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	81fb      	strh	r3, [r7, #14]
 800cc50:	e008      	b.n	800cc64 <ABCC_GetDataTypeSizeInBits+0x54>
   }
   else
   {
      iSetBitSize = (UINT16)ABCC_GetDataTypeSize( bDataType );
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 f80b 	bl	800cc70 <ABCC_GetDataTypeSize>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	81fb      	strh	r3, [r7, #14]
      iSetBitSize *= 8;
 800cc5e:	89fb      	ldrh	r3, [r7, #14]
 800cc60:	00db      	lsls	r3, r3, #3
 800cc62:	81fb      	strh	r3, [r7, #14]
   }

   return( iSetBitSize );
 800cc64:	89fb      	ldrh	r3, [r7, #14]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <ABCC_GetDataTypeSize>:
** ABCC_GetDataTypeSize()
**------------------------------------------------------------------------------
*/

UINT8 ABCC_GetDataTypeSize( UINT8 bDataType )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af04      	add	r7, sp, #16
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]
   UINT8 bSize;
   switch( bDataType )
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	2b0a      	cmp	r3, #10
 800cc7e:	f300 80a6 	bgt.w	800cdce <ABCC_GetDataTypeSize+0x15e>
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f280 8082 	bge.w	800cd8c <ABCC_GetDataTypeSize+0x11c>
 800cc88:	e0c2      	b.n	800ce10 <ABCC_GetDataTypeSize+0x1a0>
 800cc8a:	3b0b      	subs	r3, #11
 800cc8c:	2b3c      	cmp	r3, #60	@ 0x3c
 800cc8e:	f200 80bf 	bhi.w	800ce10 <ABCC_GetDataTypeSize+0x1a0>
 800cc92:	a201      	add	r2, pc, #4	@ (adr r2, 800cc98 <ABCC_GetDataTypeSize+0x28>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800cde7 	.word	0x0800cde7
 800cc9c:	0800cddb 	.word	0x0800cddb
 800cca0:	0800ce11 	.word	0x0800ce11
 800cca4:	0800ce11 	.word	0x0800ce11
 800cca8:	0800ce11 	.word	0x0800ce11
 800ccac:	0800cdf3 	.word	0x0800cdf3
 800ccb0:	0800cdf3 	.word	0x0800cdf3
 800ccb4:	0800cde7 	.word	0x0800cde7
 800ccb8:	0800cded 	.word	0x0800cded
 800ccbc:	0800ce11 	.word	0x0800ce11
 800ccc0:	0800ce11 	.word	0x0800ce11
 800ccc4:	0800ce11 	.word	0x0800ce11
 800ccc8:	0800ce11 	.word	0x0800ce11
 800cccc:	0800ce11 	.word	0x0800ce11
 800ccd0:	0800ce11 	.word	0x0800ce11
 800ccd4:	0800ce11 	.word	0x0800ce11
 800ccd8:	0800ce11 	.word	0x0800ce11
 800ccdc:	0800ce11 	.word	0x0800ce11
 800cce0:	0800ce11 	.word	0x0800ce11
 800cce4:	0800ce11 	.word	0x0800ce11
 800cce8:	0800ce11 	.word	0x0800ce11
 800ccec:	0800cdff 	.word	0x0800cdff
 800ccf0:	0800ce05 	.word	0x0800ce05
 800ccf4:	0800ce05 	.word	0x0800ce05
 800ccf8:	0800ce05 	.word	0x0800ce05
 800ccfc:	0800ce05 	.word	0x0800ce05
 800cd00:	0800ce05 	.word	0x0800ce05
 800cd04:	0800ce05 	.word	0x0800ce05
 800cd08:	0800ce05 	.word	0x0800ce05
 800cd0c:	0800ce05 	.word	0x0800ce05
 800cd10:	0800ce0b 	.word	0x0800ce0b
 800cd14:	0800ce0b 	.word	0x0800ce0b
 800cd18:	0800ce0b 	.word	0x0800ce0b
 800cd1c:	0800ce0b 	.word	0x0800ce0b
 800cd20:	0800ce0b 	.word	0x0800ce0b
 800cd24:	0800ce0b 	.word	0x0800ce0b
 800cd28:	0800ce0b 	.word	0x0800ce0b
 800cd2c:	0800ce0b 	.word	0x0800ce0b
 800cd30:	0800ce11 	.word	0x0800ce11
 800cd34:	0800ce11 	.word	0x0800ce11
 800cd38:	0800ce11 	.word	0x0800ce11
 800cd3c:	0800ce11 	.word	0x0800ce11
 800cd40:	0800ce11 	.word	0x0800ce11
 800cd44:	0800ce11 	.word	0x0800ce11
 800cd48:	0800ce11 	.word	0x0800ce11
 800cd4c:	0800ce11 	.word	0x0800ce11
 800cd50:	0800ce11 	.word	0x0800ce11
 800cd54:	0800ce11 	.word	0x0800ce11
 800cd58:	0800ce11 	.word	0x0800ce11
 800cd5c:	0800ce11 	.word	0x0800ce11
 800cd60:	0800ce11 	.word	0x0800ce11
 800cd64:	0800ce11 	.word	0x0800ce11
 800cd68:	0800ce11 	.word	0x0800ce11
 800cd6c:	0800cdf9 	.word	0x0800cdf9
 800cd70:	0800cdf9 	.word	0x0800cdf9
 800cd74:	0800cdf9 	.word	0x0800cdf9
 800cd78:	0800cdf9 	.word	0x0800cdf9
 800cd7c:	0800cdf9 	.word	0x0800cdf9
 800cd80:	0800cdf9 	.word	0x0800cdf9
 800cd84:	0800cdf9 	.word	0x0800cdf9
 800cd88:	0800cdf9 	.word	0x0800cdf9
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4093      	lsls	r3, r2
 800cd92:	f240 3293 	movw	r2, #915	@ 0x393
 800cd96:	401a      	ands	r2, r3
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	bf14      	ite	ne
 800cd9c:	2201      	movne	r2, #1
 800cd9e:	2200      	moveq	r2, #0
 800cda0:	b2d2      	uxtb	r2, r2
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	d119      	bne.n	800cdda <ABCC_GetDataTypeSize+0x16a>
 800cda6:	f240 4224 	movw	r2, #1060	@ 0x424
 800cdaa:	401a      	ands	r2, r3
 800cdac:	2a00      	cmp	r2, #0
 800cdae:	bf14      	ite	ne
 800cdb0:	2201      	movne	r2, #1
 800cdb2:	2200      	moveq	r2, #0
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	d112      	bne.n	800cde0 <ABCC_GetDataTypeSize+0x170>
 800cdba:	f003 0348 	and.w	r3, r3, #72	@ 0x48
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	bf14      	ite	ne
 800cdc2:	2301      	movne	r3, #1
 800cdc4:	2300      	moveq	r3, #0
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10c      	bne.n	800cde6 <ABCC_GetDataTypeSize+0x176>
 800cdcc:	e020      	b.n	800ce10 <ABCC_GetDataTypeSize+0x1a0>
 800cdce:	2b47      	cmp	r3, #71	@ 0x47
 800cdd0:	dc1e      	bgt.n	800ce10 <ABCC_GetDataTypeSize+0x1a0>
 800cdd2:	2b0b      	cmp	r3, #11
 800cdd4:	f6bf af59 	bge.w	800cc8a <ABCC_GetDataTypeSize+0x1a>
 800cdd8:	e01a      	b.n	800ce10 <ABCC_GetDataTypeSize+0x1a0>
   case ABP_SINT8:
   case ABP_ENUM:
   case ABP_BITS8:
   case ABP_CHAR:
   case ABP_OCTET:
      bSize = ABP_UINT8_SIZEOF;
 800cdda:	2301      	movs	r3, #1
 800cddc:	73fb      	strb	r3, [r7, #15]
      break;
 800cdde:	e027      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

   case ABP_UINT16:
   case ABP_BITS16:
   case ABP_SINT16:
      bSize = ABP_UINT16_SIZEOF;
 800cde0:	2302      	movs	r3, #2
 800cde2:	73fb      	strb	r3, [r7, #15]
      break;
 800cde4:	e024      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

   case ABP_UINT32:
   case ABP_SINT32:
   case ABP_BITS32:
   case ABP_FLOAT:
      bSize = ABP_UINT32_SIZEOF;
 800cde6:	2304      	movs	r3, #4
 800cde8:	73fb      	strb	r3, [r7, #15]
      break;
 800cdea:	e021      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

#if ABCC_CFG_DOUBLE_ADI_SUPPORT_ENABLED
   case ABP_DOUBLE:
      bSize = ABP_DOUBLE_SIZEOF;
 800cdec:	2308      	movs	r3, #8
 800cdee:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf0:	e01e      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

#endif
#if ABCC_CFG_64BIT_ADI_SUPPORT_ENABLED
   case ABP_SINT64:
   case ABP_UINT64:
      bSize = ABP_UINT64_SIZEOF;
 800cdf2:	2308      	movs	r3, #8
 800cdf4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdf6:	e01b      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>
   case ABP_BIT3:
   case ABP_BIT4:
   case ABP_BIT5:
   case ABP_BIT6:
   case ABP_BIT7:
      bSize = ABP_UINT8_SIZEOF;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	73fb      	strb	r3, [r7, #15]
      break;
 800cdfc:	e018      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

   case ABP_PAD0:
      bSize = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73fb      	strb	r3, [r7, #15]
      break;
 800ce02:	e015      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>
   case ABP_PAD4:
   case ABP_PAD5:
   case ABP_PAD6:
   case ABP_PAD7:
   case ABP_PAD8:
      bSize = ABP_UINT8_SIZEOF;
 800ce04:	2301      	movs	r3, #1
 800ce06:	73fb      	strb	r3, [r7, #15]
      break;
 800ce08:	e012      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>
   case ABP_PAD12:
   case ABP_PAD13:
   case ABP_PAD14:
   case ABP_PAD15:
   case ABP_PAD16:
      bSize = ABP_UINT16_SIZEOF;
 800ce0a:	2302      	movs	r3, #2
 800ce0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce0e:	e00f      	b.n	800ce30 <ABCC_GetDataTypeSize+0x1c0>

   default:
      ABCC_LOG_WARNING( ABCC_EC_UNSUPPORTED_DATA_TYPE, (UINT32)bDataType, "Unsupported data type: %" PRIu8 "\n", bDataType );
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	9302      	str	r3, [sp, #8]
 800ce16:	4b09      	ldr	r3, [pc, #36]	@ (800ce3c <ABCC_GetDataTypeSize+0x1cc>)
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	f44f 6394 	mov.w	r3, #1184	@ 0x4a0
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	4b07      	ldr	r3, [pc, #28]	@ (800ce40 <ABCC_GetDataTypeSize+0x1d0>)
 800ce22:	2124      	movs	r1, #36	@ 0x24
 800ce24:	2002      	movs	r0, #2
 800ce26:	f000 fc0f 	bl	800d648 <ABCC_LogHandler>
      bSize = 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce2e:	bf00      	nop
   }

   return( bSize );
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	08015f18 	.word	0x08015f18
 800ce40:	08015d64 	.word	0x08015d64

0800ce44 <ABCC_SetString>:
                             iOctetOffset,
                             iNumChar );
}

void ABCC_SetString( void* pxDst, const char* pcString, UINT16 iNumChar, UINT16 iOctetOffset )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4611      	mov	r1, r2
 800ce50:	461a      	mov	r2, r3
 800ce52:	460b      	mov	r3, r1
 800ce54:	80fb      	strh	r3, [r7, #6]
 800ce56:	4613      	mov	r3, r2
 800ce58:	80bb      	strh	r3, [r7, #4]
   ABCC_PORT_StrCpyToPacked( pxDst,
 800ce5a:	88bb      	ldrh	r3, [r7, #4]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	4413      	add	r3, r2
 800ce60:	88fa      	ldrh	r2, [r7, #6]
 800ce62:	68b9      	ldr	r1, [r7, #8]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f008 f97c 	bl	8015162 <memcpy>
                             iOctetOffset,
                             pcString,
                             iNumChar );
}
 800ce6a:	bf00      	nop
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <ABCC_GetData8>:

void ABCC_GetData8( void* pxSrc, UINT8* pbData, UINT16 iOctetOffset )
{
 800ce72:	b480      	push	{r7}
 800ce74:	b085      	sub	sp, #20
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	60f8      	str	r0, [r7, #12]
 800ce7a:	60b9      	str	r1, [r7, #8]
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	80fb      	strh	r3, [r7, #6]
#ifdef ABCC_SYS_16_BIT_CHAR
   *pbData = 0;
#endif
   ABCC_PORT_Copy8( pbData, 0, pxSrc, iOctetOffset );
 800ce80:	88fb      	ldrh	r3, [r7, #6]
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	4413      	add	r3, r2
 800ce86:	781a      	ldrb	r2, [r3, #0]
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	701a      	strb	r2, [r3, #0]
}
 800ce8c:	bf00      	nop
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <ABCC_SetData8>:

void ABCC_SetData8( void* pxDst, UINT8 bData, UINT16 iOctetOffset )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	460b      	mov	r3, r1
 800cea2:	70fb      	strb	r3, [r7, #3]
 800cea4:	4613      	mov	r3, r2
 800cea6:	803b      	strh	r3, [r7, #0]
   ABCC_PORT_Copy8( pxDst, iOctetOffset, &bData, 0 );
 800cea8:	883b      	ldrh	r3, [r7, #0]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	4413      	add	r3, r2
 800ceae:	78fa      	ldrb	r2, [r7, #3]
 800ceb0:	701a      	strb	r2, [r3, #0]
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <ABCC_GetData16>:

void ABCC_GetData16( void* pxSrc, UINT16* piData, UINT16 iOctetOffset )
{
 800cebe:	b480      	push	{r7}
 800cec0:	b085      	sub	sp, #20
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	4613      	mov	r3, r2
 800ceca:	80fb      	strh	r3, [r7, #6]
   ABCC_PORT_Copy16( piData, 0, pxSrc, iOctetOffset );
 800cecc:	88fb      	ldrh	r3, [r7, #6]
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	b29a      	uxth	r2, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	801a      	strh	r2, [r3, #0]
   *piData = iLeTOi( *piData );
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	881a      	ldrh	r2, [r3, #0]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	801a      	strh	r2, [r3, #0]
}
 800cee2:	bf00      	nop
 800cee4:	3714      	adds	r7, #20
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <ABCC_SetData16>:

void ABCC_SetData16( void* pxDst, UINT16 iData, UINT16 iOctetOffset )
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	807b      	strh	r3, [r7, #2]
 800cefa:	4613      	mov	r3, r2
 800cefc:	803b      	strh	r3, [r7, #0]
   iData = iTOiLe( iData );
 800cefe:	887b      	ldrh	r3, [r7, #2]
 800cf00:	807b      	strh	r3, [r7, #2]
   ABCC_PORT_Copy16( pxDst, iOctetOffset, &iData, 0 );
 800cf02:	883b      	ldrh	r3, [r7, #0]
 800cf04:	687a      	ldr	r2, [r7, #4]
 800cf06:	4413      	add	r3, r2
 800cf08:	887a      	ldrh	r2, [r7, #2]
 800cf0a:	801a      	strh	r2, [r3, #0]
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <ABCC_GetData32>:

void ABCC_GetData32( void* pxSrc, UINT32* plData, UINT16 iOctetOffset )
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	4613      	mov	r3, r2
 800cf24:	80fb      	strh	r3, [r7, #6]
   ABCC_PORT_Copy32( plData, 0, pxSrc, iOctetOffset );
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	601a      	str	r2, [r3, #0]
   *plData = lLeTOl( *plData );
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	601a      	str	r2, [r3, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	3714      	adds	r7, #20
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr

0800cf48 <ABCC_SetData32>:

void ABCC_SetData32( void* pxDst, UINT32 lData, UINT16 iOctetOffset )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b085      	sub	sp, #20
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	80fb      	strh	r3, [r7, #6]
   lData = lTOlLe( lData );
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	60bb      	str	r3, [r7, #8]
   ABCC_PORT_Copy32( pxDst, iOctetOffset, &lData, 0 );
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	601a      	str	r2, [r3, #0]
}
 800cf64:	bf00      	nop
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <link_DeQueue>:
** alternative to a long critical section.
*/
static BOOL link_fDrvWriteMsgLock = FALSE;

static ABP_MsgType* link_DeQueue( MsgQueueType* psMsgQueue )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af04      	add	r7, sp, #16
 800cf76:	6078      	str	r0, [r7, #4]
   ABP_MsgType* psMsg = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60fb      	str	r3, [r7, #12]
   if( psMsgQueue->bNumInQueue != 0 )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d026      	beq.n	800cfd4 <link_DeQueue+0x64>
   {
      psMsg = psMsgQueue->queue[ psMsgQueue->bReadIndex++];
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f993 1004 	ldrsb.w	r1, [r3, #4]
 800cf90:	b2cb      	uxtb	r3, r1
 800cf92:	3301      	adds	r3, #1
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	b258      	sxtb	r0, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7118      	strb	r0, [r3, #4]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60fb      	str	r3, [r7, #12]
      psMsgQueue->bNumInQueue--;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	b25a      	sxtb	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	719a      	strb	r2, [r3, #6]
      psMsgQueue->bReadIndex %= psMsgQueue->bQueueSize;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800cfc4:	fb93 f1f2 	sdiv	r1, r3, r2
 800cfc8:	fb01 f202 	mul.w	r2, r1, r2
 800cfcc:	1a9b      	subs	r3, r3, r2
 800cfce:	b25a      	sxtb	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	711a      	strb	r2, [r3, #4]
   }

   if( psMsgQueue->bNumInQueue < 0 )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da10      	bge.n	800d000 <link_DeQueue+0x90>
   {
      ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED,
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cfec:	9302      	str	r3, [sp, #8]
 800cfee:	4b07      	ldr	r3, [pc, #28]	@ (800d00c <link_DeQueue+0x9c>)
 800cff0:	9301      	str	r3, [sp, #4]
 800cff2:	236c      	movs	r3, #108	@ 0x6c
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	4b06      	ldr	r3, [pc, #24]	@ (800d010 <link_DeQueue+0xa0>)
 800cff8:	212b      	movs	r1, #43	@ 0x2b
 800cffa:	2000      	movs	r0, #0
 800cffc:	f000 fb24 	bl	800d648 <ABCC_LogHandler>
         psMsgQueue->bNumInQueue,
         "Queue underflow (%" PRId8 ")\n",
         psMsgQueue->bNumInQueue );
   }

   return( psMsg );
 800d000:	68fb      	ldr	r3, [r7, #12]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	08015fbc 	.word	0x08015fbc
 800d010:	08015fb0 	.word	0x08015fb0

0800d014 <link_EnQueue>:


static BOOL link_EnQueue( MsgQueueType* psMsgQueue, ABP_MsgType* psMsg )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
   if( psMsgQueue->bNumInQueue <  psMsgQueue->bQueueSize )
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	da20      	bge.n	800d070 <link_EnQueue+0x5c>
   {
      psMsgQueue->queue[  ( psMsgQueue->bNumInQueue + psMsgQueue->bReadIndex ) %  psMsgQueue->bQueueSize ] = psMsg;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6819      	ldr	r1, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d038:	461a      	mov	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d040:	4413      	add	r3, r2
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800d048:	fb93 f0f2 	sdiv	r0, r3, r2
 800d04c:	fb00 f202 	mul.w	r2, r0, r2
 800d050:	1a9b      	subs	r3, r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	440b      	add	r3, r1
 800d056:	683a      	ldr	r2, [r7, #0]
 800d058:	601a      	str	r2, [r3, #0]
      psMsgQueue->bNumInQueue++;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d060:	b2db      	uxtb	r3, r3
 800d062:	3301      	adds	r3, #1
 800d064:	b2db      	uxtb	r3, r3
 800d066:	b25a      	sxtb	r2, r3
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	719a      	strb	r2, [r3, #6]
      return( TRUE );
 800d06c:	2301      	movs	r3, #1
 800d06e:	e000      	b.n	800d072 <link_EnQueue+0x5e>
   }
   return( FALSE );
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	370c      	adds	r7, #12
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
	...

0800d080 <link_CheckNotification>:

static void link_CheckNotification( const ABP_MsgType* const psMsg )
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
   if( ( pnMsgSentHandler != NULL ) && ( psMsg == link_psNotifyMsg ) )
 800d088:	4b09      	ldr	r3, [pc, #36]	@ (800d0b0 <link_CheckNotification+0x30>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00a      	beq.n	800d0a6 <link_CheckNotification+0x26>
 800d090:	4b08      	ldr	r3, [pc, #32]	@ (800d0b4 <link_CheckNotification+0x34>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	429a      	cmp	r2, r3
 800d098:	d105      	bne.n	800d0a6 <link_CheckNotification+0x26>
   {
      pnMsgSentHandler();
 800d09a:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <link_CheckNotification+0x30>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	4798      	blx	r3
      pnMsgSentHandler = NULL;
 800d0a0:	4b03      	ldr	r3, [pc, #12]	@ (800d0b0 <link_CheckNotification+0x30>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
   }
}
 800d0a6:	bf00      	nop
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	24001534 	.word	0x24001534
 800d0b4:	24001538 	.word	0x24001538

0800d0b8 <ABCC_LinkInit>:

void ABCC_LinkInit( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
   UINT16 iCount;

   link_fDrvWriteMsgLock = FALSE;
 800d0be:	4b22      	ldr	r3, [pc, #136]	@ (800d148 <ABCC_LinkInit+0x90>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	601a      	str	r2, [r3, #0]
   /*
   ** Init Queue structures.
   */
   link_sCmdQueue.bNumInQueue = 0;
 800d0c4:	4b21      	ldr	r3, [pc, #132]	@ (800d14c <ABCC_LinkInit+0x94>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	719a      	strb	r2, [r3, #6]
   link_sCmdQueue.bQueueSize = LINK_MAX_NUM_CMDS_IN_Q;
 800d0ca:	4b20      	ldr	r3, [pc, #128]	@ (800d14c <ABCC_LinkInit+0x94>)
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	715a      	strb	r2, [r3, #5]
   link_sCmdQueue.bReadIndex = 0;
 800d0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800d14c <ABCC_LinkInit+0x94>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	711a      	strb	r2, [r3, #4]
   link_sCmdQueue.queue = link_psCmds;
 800d0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800d14c <ABCC_LinkInit+0x94>)
 800d0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d150 <ABCC_LinkInit+0x98>)
 800d0da:	601a      	str	r2, [r3, #0]

   link_sRespQueue.bNumInQueue = 0;
 800d0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800d154 <ABCC_LinkInit+0x9c>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	719a      	strb	r2, [r3, #6]
   link_sRespQueue.bQueueSize = LINK_MAX_NUM_RESP_IN_Q;
 800d0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800d154 <ABCC_LinkInit+0x9c>)
 800d0e4:	2202      	movs	r2, #2
 800d0e6:	715a      	strb	r2, [r3, #5]
   link_sRespQueue.bReadIndex = 0;
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d154 <ABCC_LinkInit+0x9c>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	711a      	strb	r2, [r3, #4]
   link_sRespQueue.queue = link_psResponses;
 800d0ee:	4b19      	ldr	r3, [pc, #100]	@ (800d154 <ABCC_LinkInit+0x9c>)
 800d0f0:	4a19      	ldr	r2, [pc, #100]	@ (800d158 <ABCC_LinkInit+0xa0>)
 800d0f2:	601a      	str	r2, [r3, #0]

   ABCC_MemCreatePool();
 800d0f4:	f000 fb78 	bl	800d7e8 <ABCC_MemCreatePool>

   for( iCount = 0; iCount < LINK_MAX_NUM_CMDS_IN_Q; iCount++  )
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	80fb      	strh	r3, [r7, #6]
 800d0fc:	e00b      	b.n	800d116 <ABCC_LinkInit+0x5e>
   {
      link_pnMsgHandler[ iCount ] = 0;
 800d0fe:	88fb      	ldrh	r3, [r7, #6]
 800d100:	4a16      	ldr	r2, [pc, #88]	@ (800d15c <ABCC_LinkInit+0xa4>)
 800d102:	2100      	movs	r1, #0
 800d104:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      link_bMsgSrcId[iCount ] = 0;
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	4a15      	ldr	r2, [pc, #84]	@ (800d160 <ABCC_LinkInit+0xa8>)
 800d10c:	2100      	movs	r1, #0
 800d10e:	54d1      	strb	r1, [r2, r3]
   for( iCount = 0; iCount < LINK_MAX_NUM_CMDS_IN_Q; iCount++  )
 800d110:	88fb      	ldrh	r3, [r7, #6]
 800d112:	3301      	adds	r3, #1
 800d114:	80fb      	strh	r3, [r7, #6]
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d9f0      	bls.n	800d0fe <ABCC_LinkInit+0x46>
   }

   /*
   ** Initialize driver privates and states to default values.
   */
   link_bNumberOfOutstandingCommands = 0;
 800d11c:	4b11      	ldr	r3, [pc, #68]	@ (800d164 <ABCC_LinkInit+0xac>)
 800d11e:	2200      	movs	r2, #0
 800d120:	701a      	strb	r2, [r3, #0]

   pnMsgSentHandler = NULL;
 800d122:	4b11      	ldr	r3, [pc, #68]	@ (800d168 <ABCC_LinkInit+0xb0>)
 800d124:	2200      	movs	r2, #0
 800d126:	601a      	str	r2, [r3, #0]
   link_psNotifyMsg = NULL;
 800d128:	4b10      	ldr	r3, [pc, #64]	@ (800d16c <ABCC_LinkInit+0xb4>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]

   link_iMaxMsgSize = ABCC_GetMessageChannelSize();
 800d12e:	f7fe ff05 	bl	800bf3c <ABCC_GetMessageChannelSize>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	4b0e      	ldr	r3, [pc, #56]	@ (800d170 <ABCC_LinkInit+0xb8>)
 800d138:	801a      	strh	r2, [r3, #0]
   /*
   ** link_CheckNotification will be called by serial driver when a read remap
   ** sequence is ready for a RdPd size update.
   */
#if ABCC_CFG_DRV_SERIAL_ENABLED
   pnABCC_DrvCbfReadRemapDone = &link_CheckNotification;
 800d13a:	4b0e      	ldr	r3, [pc, #56]	@ (800d174 <ABCC_LinkInit+0xbc>)
 800d13c:	4a0e      	ldr	r2, [pc, #56]	@ (800d178 <ABCC_LinkInit+0xc0>)
 800d13e:	601a      	str	r2, [r3, #0]
#endif

}
 800d140:	bf00      	nop
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	24001540 	.word	0x24001540
 800d14c:	24001514 	.word	0x24001514
 800d150:	24001504 	.word	0x24001504
 800d154:	2400151c 	.word	0x2400151c
 800d158:	2400150c 	.word	0x2400150c
 800d15c:	24001524 	.word	0x24001524
 800d160:	24001530 	.word	0x24001530
 800d164:	2400153c 	.word	0x2400153c
 800d168:	24001534 	.word	0x24001534
 800d16c:	24001538 	.word	0x24001538
 800d170:	24001500 	.word	0x24001500
 800d174:	240014fc 	.word	0x240014fc
 800d178:	0800d081 	.word	0x0800d081

0800d17c <ABCC_LinkReadMessage>:


ABP_MsgType* ABCC_LinkReadMessage( void )
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
   ABCC_MsgType psReadMessage;
   ABCC_PORT_UseCritical();

   psReadMessage.psMsg = pnABCC_DrvReadMessage();
 800d182:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <ABCC_LinkReadMessage+0x3c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4798      	blx	r3
 800d188:	4603      	mov	r3, r0
 800d18a:	607b      	str	r3, [r7, #4]

   if( psReadMessage.psMsg != NULL )
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00c      	beq.n	800d1ac <ABCC_LinkReadMessage+0x30>
   {
      if( ( ABCC_GetLowAddrOct( psReadMessage.psMsg16->sHeader.iCmdReserved ) & ABP_MSG_HEADER_C_BIT ) == 0 )
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	891b      	ldrh	r3, [r3, #8]
 800d196:	b29b      	uxth	r3, r3
 800d198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d105      	bne.n	800d1ac <ABCC_LinkReadMessage+0x30>
      {
         /*
         ** Decrement number of outstanding commands if a response is received
         */
         ABCC_PORT_EnterCritical();
         link_bNumberOfOutstandingCommands--;
 800d1a0:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <ABCC_LinkReadMessage+0x40>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	b2da      	uxtb	r2, r3
 800d1a8:	4b04      	ldr	r3, [pc, #16]	@ (800d1bc <ABCC_LinkReadMessage+0x40>)
 800d1aa:	701a      	strb	r2, [r3, #0]
         ABCC_PORT_ExitCritical();
         ABCC_LOG_DEBUG_MSG_GENERAL( "Outstanding commands: %" PRIu8 "\n",
                                     link_bNumberOfOutstandingCommands );
      }
   }
   return( psReadMessage.psMsg );
 800d1ac:	687b      	ldr	r3, [r7, #4]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3708      	adds	r7, #8
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	240014c8 	.word	0x240014c8
 800d1bc:	2400153c 	.word	0x2400153c

0800d1c0 <ABCC_LinkCheckSendMessage>:


void ABCC_LinkCheckSendMessage( void )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
   BOOL fMsgWritten;
   ABP_MsgType* psWriteMessage;
   ABCC_PORT_UseCritical();

   psWriteMessage = NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	603b      	str	r3, [r7, #0]
   ABCC_PORT_EnterCritical();

   /*
   ** Check that no other context are in progress with sending a message.
   */
   if( !link_fDrvWriteMsgLock )
 800d1ca:	4b27      	ldr	r3, [pc, #156]	@ (800d268 <ABCC_LinkCheckSendMessage+0xa8>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d126      	bne.n	800d220 <ABCC_LinkCheckSendMessage+0x60>
      ** Check if any messages are queued and the driver is ready to send
      ** the message.
      ** If the queue index > 0 then there are messages in the queue.
      ** Response messages are prioritized over command messages.
      */
      if( ( link_sRespQueue.bNumInQueue > 0 ) && pnABCC_DrvISReadyForWriteMessage() )
 800d1d2:	4b26      	ldr	r3, [pc, #152]	@ (800d26c <ABCC_LinkCheckSendMessage+0xac>)
 800d1d4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	dd0e      	ble.n	800d1fa <ABCC_LinkCheckSendMessage+0x3a>
 800d1dc:	4b24      	ldr	r3, [pc, #144]	@ (800d270 <ABCC_LinkCheckSendMessage+0xb0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4798      	blx	r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d008      	beq.n	800d1fa <ABCC_LinkCheckSendMessage+0x3a>
         /*
         ** At this point it is sure that we will send a message. Lock the
         ** driver to ensure exclusive access after leaving this critical
         ** section.
         */
         link_fDrvWriteMsgLock = TRUE;
 800d1e8:	4b1f      	ldr	r3, [pc, #124]	@ (800d268 <ABCC_LinkCheckSendMessage+0xa8>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	601a      	str	r2, [r3, #0]
         psWriteMessage = link_DeQueue( &link_sRespQueue );
 800d1ee:	481f      	ldr	r0, [pc, #124]	@ (800d26c <ABCC_LinkCheckSendMessage+0xac>)
 800d1f0:	f7ff febe 	bl	800cf70 <link_DeQueue>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	e012      	b.n	800d220 <ABCC_LinkCheckSendMessage+0x60>
         ABCC_LOG_DEBUG_MSG_EVENT( psWriteMessage, "Response dequeued: " );
         ABCC_LOG_DEBUG_MSG_GENERAL( "RespQ status: %" PRIu8 "(%" PRIu8 ")\n",
               link_sRespQueue.bNumInQueue,
               link_sRespQueue.bQueueSize );
      }
      else if( ( link_sCmdQueue.bNumInQueue > 0 ) && pnABCC_DrvISReadyForCmd() )
 800d1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d274 <ABCC_LinkCheckSendMessage+0xb4>)
 800d1fc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d200:	2b00      	cmp	r3, #0
 800d202:	dd0d      	ble.n	800d220 <ABCC_LinkCheckSendMessage+0x60>
 800d204:	4b1c      	ldr	r3, [pc, #112]	@ (800d278 <ABCC_LinkCheckSendMessage+0xb8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4798      	blx	r3
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <ABCC_LinkCheckSendMessage+0x60>
         /*
         ** At this point it is sure that we will send a message. Lock the
         ** driver to ensure exclusive access after leaving this critical
         ** section.
         */
         link_fDrvWriteMsgLock = TRUE;
 800d210:	4b15      	ldr	r3, [pc, #84]	@ (800d268 <ABCC_LinkCheckSendMessage+0xa8>)
 800d212:	2201      	movs	r2, #1
 800d214:	601a      	str	r2, [r3, #0]
         psWriteMessage = link_DeQueue( &link_sCmdQueue );
 800d216:	4817      	ldr	r0, [pc, #92]	@ (800d274 <ABCC_LinkCheckSendMessage+0xb4>)
 800d218:	f7ff feaa 	bl	800cf70 <link_DeQueue>
 800d21c:	4603      	mov	r3, r0
 800d21e:	603b      	str	r3, [r7, #0]
               link_sCmdQueue.bQueueSize );
      }
   }
   ABCC_PORT_ExitCritical();

   if( psWriteMessage != NULL )
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d01c      	beq.n	800d260 <ABCC_LinkCheckSendMessage+0xa0>
      /*
      ** Only call ABCC_DrvPrepareWriteMessage if it's implemented by the
      ** driver. Note that this function will not deliver the message to the
      ** ABCC just copy the message data to the memory.
      */
      if( pnABCC_DrvPrepareWriteMessage != NULL )
 800d226:	4b15      	ldr	r3, [pc, #84]	@ (800d27c <ABCC_LinkCheckSendMessage+0xbc>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <ABCC_LinkCheckSendMessage+0x78>
      {
         pnABCC_DrvPrepareWriteMessage( psWriteMessage );
 800d22e:	4b13      	ldr	r3, [pc, #76]	@ (800d27c <ABCC_LinkCheckSendMessage+0xbc>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4610      	mov	r0, r2
 800d236:	4798      	blx	r3
      /*
      ** Do the actual write of the message and unlock the driver to enable
      ** use from other contexts. Both these actions need to be done within the
      ** same critical section.
      */
      fMsgWritten = pnABCC_DrvWriteMessage( psWriteMessage );
 800d238:	4b11      	ldr	r3, [pc, #68]	@ (800d280 <ABCC_LinkCheckSendMessage+0xc0>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	4610      	mov	r0, r2
 800d240:	4798      	blx	r3
 800d242:	6078      	str	r0, [r7, #4]
      link_fDrvWriteMsgLock = FALSE;
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <ABCC_LinkCheckSendMessage+0xa8>)
 800d246:	2200      	movs	r2, #0
 800d248:	601a      	str	r2, [r3, #0]
      ABCC_PORT_ExitCritical();

      if( fMsgWritten )
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <ABCC_LinkCheckSendMessage+0xa0>
         /*
         ** The message was successfully written and can be deallocated now.
         */
         ABCC_LOG_DEBUG_HEXDUMP_MSG_TX( psWriteMessage );
         ABCC_LOG_DEBUG_MSG_CONTENT( psWriteMessage, "Msg sent\n" );
         link_CheckNotification( psWriteMessage );
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff ff14 	bl	800d080 <link_CheckNotification>
         ABCC_LinkFree( &psWriteMessage );
 800d258:	463b      	mov	r3, r7
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f94c 	bl	800d4f8 <ABCC_LinkFree>
      }
   }
}
 800d260:	bf00      	nop
 800d262:	3708      	adds	r7, #8
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	24001540 	.word	0x24001540
 800d26c:	2400151c 	.word	0x2400151c
 800d270:	24001498 	.word	0x24001498
 800d274:	24001514 	.word	0x24001514
 800d278:	2400149c 	.word	0x2400149c
 800d27c:	24001488 	.word	0x24001488
 800d280:	2400148c 	.word	0x2400148c

0800d284 <ABCC_LinkRunDriverRx>:


void ABCC_LinkRunDriverRx( void )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b082      	sub	sp, #8
 800d288:	af00      	add	r7, sp, #0
   ABP_MsgType* psSentMsg;

   psSentMsg = pnABCC_DrvRunDriverRx();
 800d28a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2b4 <ABCC_LinkRunDriverRx+0x30>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4798      	blx	r3
 800d290:	4603      	mov	r3, r0
 800d292:	607b      	str	r3, [r7, #4]
   /*
   ** If a write message was sent, free the buffer.
   */
   if( psSentMsg )
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d007      	beq.n	800d2aa <ABCC_LinkRunDriverRx+0x26>
   {
      ABCC_LOG_DEBUG_HEXDUMP_MSG_TX( psSentMsg );
      ABCC_LOG_DEBUG_MSG_CONTENT( psSentMsg, "Msg sent\n" );
      link_CheckNotification( psSentMsg );
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7ff feef 	bl	800d080 <link_CheckNotification>
      ABCC_LinkFree( &psSentMsg );
 800d2a2:	1d3b      	adds	r3, r7, #4
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 f927 	bl	800d4f8 <ABCC_LinkFree>
   }
}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	24001484 	.word	0x24001484

0800d2b8 <ABCC_LinkGetNumCmdQueueEntries>:


UINT16 ABCC_LinkGetNumCmdQueueEntries( void )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
   UINT16 iQEntries;
   iQEntries =  LINK_MAX_NUM_CMDS_IN_Q - link_bNumberOfOutstandingCommands;
 800d2be:	4b06      	ldr	r3, [pc, #24]	@ (800d2d8 <ABCC_LinkGetNumCmdQueueEntries+0x20>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	f1c3 0302 	rsb	r3, r3, #2
 800d2c6:	80fb      	strh	r3, [r7, #6]
   return( iQEntries );
 800d2c8:	88fb      	ldrh	r3, [r7, #6]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	2400153c 	.word	0x2400153c

0800d2dc <ABCC_LinkWriteMessage>:


ABCC_ErrorCodeType ABCC_LinkWriteMessage( ABP_MsgType* psWriteMsg )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08a      	sub	sp, #40	@ 0x28
 800d2e0:	af04      	add	r7, sp, #16
 800d2e2:	6078      	str	r0, [r7, #4]
   UINT32 lAddErrorInfo;
#endif

   ABCC_PORT_UseCritical();

   eErrorCode = ABCC_EC_NO_ERROR;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	827b      	strh	r3, [r7, #18]
#if ABCC_CFG_LOG_SEVERITY >= ABCC_LOG_SEVERITY_WARNING_ENABLED
   lAddErrorInfo = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	60fb      	str	r3, [r7, #12]
#endif
   fSendMsg = FALSE;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	617b      	str	r3, [r7, #20]

   if( ABCC_GetMsgDataSize( psWriteMsg ) > link_iMaxMsgSize )
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	4b5b      	ldr	r3, [pc, #364]	@ (800d464 <ABCC_LinkWriteMessage+0x188>)
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d915      	bls.n	800d32a <ABCC_LinkWriteMessage+0x4e>
   {
      eErrorCode = ABCC_EC_WRMSG_SIZE_ERR;
 800d2fe:	2317      	movs	r3, #23
 800d300:	827b      	strh	r3, [r7, #18]
      ABCC_LOG_WARNING( eErrorCode, iLeTOi( psWriteMsg->sHeader.iDataSize ),
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	881b      	ldrh	r3, [r3, #0]
 800d306:	b29b      	uxth	r3, r3
 800d308:	461a      	mov	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	8a79      	ldrh	r1, [r7, #18]
 800d312:	9302      	str	r3, [sp, #8]
 800d314:	4b54      	ldr	r3, [pc, #336]	@ (800d468 <ABCC_LinkWriteMessage+0x18c>)
 800d316:	9301      	str	r3, [sp, #4]
 800d318:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4b53      	ldr	r3, [pc, #332]	@ (800d46c <ABCC_LinkWriteMessage+0x190>)
 800d320:	2002      	movs	r0, #2
 800d322:	f000 f991 	bl	800d648 <ABCC_LogHandler>
                        "Message size exceeds max size: %" PRIu16 "\n",
                        iLeTOi( psWriteMsg->sHeader.iDataSize ) );
      return( eErrorCode );
 800d326:	8a7b      	ldrh	r3, [r7, #18]
 800d328:	e098      	b.n	800d45c <ABCC_LinkWriteMessage+0x180>
   ABCC_PORT_EnterCritical();

   /*
   ** Check if it is possible to message immediately or if it has to be queued.
   */
   if( !ABCC_IsCmdMsg( psWriteMsg ) )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7a1b      	ldrb	r3, [r3, #8]
 800d32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d332:	2b00      	cmp	r3, #0
 800d334:	d121      	bne.n	800d37a <ABCC_LinkWriteMessage+0x9e>
   {
      if( !link_fDrvWriteMsgLock && ( link_sRespQueue.bNumInQueue == 0 ) && pnABCC_DrvISReadyForWriteMessage() )
 800d336:	4b4e      	ldr	r3, [pc, #312]	@ (800d470 <ABCC_LinkWriteMessage+0x194>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d110      	bne.n	800d360 <ABCC_LinkWriteMessage+0x84>
 800d33e:	4b4d      	ldr	r3, [pc, #308]	@ (800d474 <ABCC_LinkWriteMessage+0x198>)
 800d340:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10b      	bne.n	800d360 <ABCC_LinkWriteMessage+0x84>
 800d348:	4b4b      	ldr	r3, [pc, #300]	@ (800d478 <ABCC_LinkWriteMessage+0x19c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4798      	blx	r3
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <ABCC_LinkWriteMessage+0x84>
         /*
         ** At this point it is sure that we will send a message. Lock the
         ** driver to ensure exclusive access after leaving this critical
         ** section.
         */
         fSendMsg = TRUE;
 800d354:	2301      	movs	r3, #1
 800d356:	617b      	str	r3, [r7, #20]
         link_fDrvWriteMsgLock = TRUE;
 800d358:	4b45      	ldr	r3, [pc, #276]	@ (800d470 <ABCC_LinkWriteMessage+0x194>)
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
 800d35e:	e03d      	b.n	800d3dc <ABCC_LinkWriteMessage+0x100>
      }
      else if( link_EnQueue( &link_sRespQueue, psWriteMsg ) )
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4619      	mov	r1, r3
 800d364:	4843      	ldr	r0, [pc, #268]	@ (800d474 <ABCC_LinkWriteMessage+0x198>)
 800d366:	f7ff fe55 	bl	800d014 <link_EnQueue>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d135      	bne.n	800d3dc <ABCC_LinkWriteMessage+0x100>
      {
         ABCC_LOG_DEBUG_MSG_EVENT( psWriteMsg, "Response queue full: " );
         ABCC_LOG_DEBUG_MSG_GENERAL( "RespQ status: %" PRIu8 "(%" PRIu8 ")\n",
               link_sRespQueue.bNumInQueue,
               link_sRespQueue.bQueueSize );
         eErrorCode = ABCC_EC_LINK_RESP_QUEUE_FULL;
 800d370:	2303      	movs	r3, #3
 800d372:	827b      	strh	r3, [r7, #18]
#if ABCC_CFG_LOG_SEVERITY >= ABCC_LOG_SEVERITY_WARNING_ENABLED
         lAddErrorInfo = (UINT32)psWriteMsg;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	60fb      	str	r3, [r7, #12]
 800d378:	e030      	b.n	800d3dc <ABCC_LinkWriteMessage+0x100>
#endif
      }
   }
   else
   {
      if( !link_fDrvWriteMsgLock &&
 800d37a:	4b3d      	ldr	r3, [pc, #244]	@ (800d470 <ABCC_LinkWriteMessage+0x194>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d11b      	bne.n	800d3ba <ABCC_LinkWriteMessage+0xde>
          ( ( link_sCmdQueue.bNumInQueue + link_sRespQueue.bNumInQueue ) == 0 ) &&
 800d382:	4b3e      	ldr	r3, [pc, #248]	@ (800d47c <ABCC_LinkWriteMessage+0x1a0>)
 800d384:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d388:	461a      	mov	r2, r3
 800d38a:	4b3a      	ldr	r3, [pc, #232]	@ (800d474 <ABCC_LinkWriteMessage+0x198>)
 800d38c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d390:	4413      	add	r3, r2
      if( !link_fDrvWriteMsgLock &&
 800d392:	2b00      	cmp	r3, #0
 800d394:	d111      	bne.n	800d3ba <ABCC_LinkWriteMessage+0xde>
          pnABCC_DrvISReadyForCmd() )
 800d396:	4b3a      	ldr	r3, [pc, #232]	@ (800d480 <ABCC_LinkWriteMessage+0x1a4>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4798      	blx	r3
 800d39c:	4603      	mov	r3, r0
          ( ( link_sCmdQueue.bNumInQueue + link_sRespQueue.bNumInQueue ) == 0 ) &&
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00b      	beq.n	800d3ba <ABCC_LinkWriteMessage+0xde>
         /*
         ** At this point it is sure that we will send a message. Lock the
         ** driver to ensure exclusive access after leaving this critical
         ** section.
         */
         fSendMsg = TRUE;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	617b      	str	r3, [r7, #20]
         link_fDrvWriteMsgLock = TRUE;
 800d3a6:	4b32      	ldr	r3, [pc, #200]	@ (800d470 <ABCC_LinkWriteMessage+0x194>)
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	601a      	str	r2, [r3, #0]
         link_bNumberOfOutstandingCommands++;
 800d3ac:	4b35      	ldr	r3, [pc, #212]	@ (800d484 <ABCC_LinkWriteMessage+0x1a8>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	4b33      	ldr	r3, [pc, #204]	@ (800d484 <ABCC_LinkWriteMessage+0x1a8>)
 800d3b6:	701a      	strb	r2, [r3, #0]
 800d3b8:	e010      	b.n	800d3dc <ABCC_LinkWriteMessage+0x100>
      }
      else if( link_EnQueue( &link_sCmdQueue, psWriteMsg ) )
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	482f      	ldr	r0, [pc, #188]	@ (800d47c <ABCC_LinkWriteMessage+0x1a0>)
 800d3c0:	f7ff fe28 	bl	800d014 <link_EnQueue>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d006      	beq.n	800d3d8 <ABCC_LinkWriteMessage+0xfc>
         ABCC_LOG_DEBUG_MSG_EVENT( psWriteMsg, "Command queued: " );
         ABCC_LOG_DEBUG_MSG_GENERAL( "CmdQ status: %" PRIu8 "(%" PRIu8 ")\n",
            link_sCmdQueue.bNumInQueue,
            link_sCmdQueue.bQueueSize );

         link_bNumberOfOutstandingCommands++;
 800d3ca:	4b2e      	ldr	r3, [pc, #184]	@ (800d484 <ABCC_LinkWriteMessage+0x1a8>)
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	4b2c      	ldr	r3, [pc, #176]	@ (800d484 <ABCC_LinkWriteMessage+0x1a8>)
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	e001      	b.n	800d3dc <ABCC_LinkWriteMessage+0x100>
      {
         ABCC_LOG_DEBUG_MSG_EVENT( psWriteMsg, "Command queue full: " );
         ABCC_LOG_DEBUG_MSG_GENERAL( "CmdQ status: %" PRIu8 "(%" PRIu8 ")\n",
            link_sCmdQueue.bNumInQueue,
            link_sCmdQueue.bQueueSize );
         eErrorCode = ABCC_EC_LINK_CMD_QUEUE_FULL;
 800d3d8:	2302      	movs	r3, #2
 800d3da:	827b      	strh	r3, [r7, #18]
      }
   }
   ABCC_PORT_ExitCritical();

   if( eErrorCode == ABCC_EC_NO_ERROR )
 800d3dc:	8a7b      	ldrh	r3, [r7, #18]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d105      	bne.n	800d3ee <ABCC_LinkWriteMessage+0x112>
   {
      ABCC_MemSetBufferStatus( psWriteMsg, ABCC_MEM_BUFSTAT_SENT );
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2103      	movs	r1, #3
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fade 	bl	800d9a8 <ABCC_MemSetBufferStatus>
 800d3ec:	e003      	b.n	800d3f6 <ABCC_LinkWriteMessage+0x11a>
   }
   else
   {
      ABCC_LinkFree( &psWriteMsg );
 800d3ee:	1d3b      	adds	r3, r7, #4
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f881 	bl	800d4f8 <ABCC_LinkFree>

   /*
   ** Continue the transmission of the message if both queues were empty.
   ** Else the message will be transmitted at the next ABCC write message event.
   */
   if( fSendMsg )
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d01c      	beq.n	800d436 <ABCC_LinkWriteMessage+0x15a>
      /*
      ** Only call ABCC_DrvPrepareWriteMessage if it's implemented by the
      ** driver. Note that this function will not deliver the message to the
      ** ABCC just copy the message data to the memory.
      */
      if( pnABCC_DrvPrepareWriteMessage != NULL )
 800d3fc:	4b22      	ldr	r3, [pc, #136]	@ (800d488 <ABCC_LinkWriteMessage+0x1ac>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d004      	beq.n	800d40e <ABCC_LinkWriteMessage+0x132>
      {
         pnABCC_DrvPrepareWriteMessage( psWriteMsg );
 800d404:	4b20      	ldr	r3, [pc, #128]	@ (800d488 <ABCC_LinkWriteMessage+0x1ac>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4610      	mov	r0, r2
 800d40c:	4798      	blx	r3
      /*
      ** Do the actual write of the message and unlock the driver to enable
      ** use from other contexts. Both these actions need to be done within the
      ** same critical section.
      */
      fMsgWritten = pnABCC_DrvWriteMessage( psWriteMsg );
 800d40e:	4b1f      	ldr	r3, [pc, #124]	@ (800d48c <ABCC_LinkWriteMessage+0x1b0>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4610      	mov	r0, r2
 800d416:	4798      	blx	r3
 800d418:	60b8      	str	r0, [r7, #8]
      link_fDrvWriteMsgLock = FALSE;
 800d41a:	4b15      	ldr	r3, [pc, #84]	@ (800d470 <ABCC_LinkWriteMessage+0x194>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]
      ABCC_PORT_ExitCritical();

      if( fMsgWritten )
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <ABCC_LinkWriteMessage+0x15a>
         /*
         ** The message was successfully written and can be deallocated now.
         */
         ABCC_LOG_DEBUG_HEXDUMP_MSG_TX( psWriteMsg );
         ABCC_LOG_DEBUG_MSG_CONTENT( psWriteMsg, "Msg sent\n" );
         link_CheckNotification( psWriteMsg );
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7ff fe29 	bl	800d080 <link_CheckNotification>
         ABCC_LinkFree( &psWriteMsg );
 800d42e:	1d3b      	adds	r3, r7, #4
 800d430:	4618      	mov	r0, r3
 800d432:	f000 f861 	bl	800d4f8 <ABCC_LinkFree>
      }
   }

   if( eErrorCode != ABCC_EC_NO_ERROR )
 800d436:	8a7b      	ldrh	r3, [r7, #18]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00e      	beq.n	800d45a <ABCC_LinkWriteMessage+0x17e>
   {
      ABCC_LOG_WARNING( eErrorCode,
 800d43c:	8a7b      	ldrh	r3, [r7, #18]
 800d43e:	8a79      	ldrh	r1, [r7, #18]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	9203      	str	r2, [sp, #12]
 800d444:	9302      	str	r3, [sp, #8]
 800d446:	4b12      	ldr	r3, [pc, #72]	@ (800d490 <ABCC_LinkWriteMessage+0x1b4>)
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	f44f 73ec 	mov.w	r3, #472	@ 0x1d8
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	4b06      	ldr	r3, [pc, #24]	@ (800d46c <ABCC_LinkWriteMessage+0x190>)
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	2002      	movs	r0, #2
 800d456:	f000 f8f7 	bl	800d648 <ABCC_LogHandler>
         "Failed to send message (Error code: %d, additional info: %" PRIu32 ")\n",
         eErrorCode,
         lAddErrorInfo );
   }

   return( eErrorCode );
 800d45a:	8a7b      	ldrh	r3, [r7, #18]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	24001500 	.word	0x24001500
 800d468:	08015fd4 	.word	0x08015fd4
 800d46c:	08015fb0 	.word	0x08015fb0
 800d470:	24001540 	.word	0x24001540
 800d474:	2400151c 	.word	0x2400151c
 800d478:	24001498 	.word	0x24001498
 800d47c:	24001514 	.word	0x24001514
 800d480:	2400149c 	.word	0x2400149c
 800d484:	2400153c 	.word	0x2400153c
 800d488:	24001488 	.word	0x24001488
 800d48c:	2400148c 	.word	0x2400148c
 800d490:	08015ff8 	.word	0x08015ff8

0800d494 <ABCC_LinkWrMsgWithNotification>:

ABCC_ErrorCodeType ABCC_LinkWrMsgWithNotification( ABP_MsgType* psWriteMsg,
                                                   ABCC_LinkNotifyIndType pnHandler )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af04      	add	r7, sp, #16
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
   ABCC_ErrorCodeType eResult;

   /*
   ** Save callback function to call when message is successfully sent.
   */
   if( pnMsgSentHandler != NULL )
 800d49e:	4b12      	ldr	r3, [pc, #72]	@ (800d4e8 <ABCC_LinkWrMsgWithNotification+0x54>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00f      	beq.n	800d4c6 <ABCC_LinkWrMsgWithNotification+0x32>
   {
      ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED,
 800d4a6:	4b10      	ldr	r3, [pc, #64]	@ (800d4e8 <ABCC_LinkWrMsgWithNotification+0x54>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e8 <ABCC_LinkWrMsgWithNotification+0x54>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	9302      	str	r3, [sp, #8]
 800d4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ec <ABCC_LinkWrMsgWithNotification+0x58>)
 800d4b4:	9301      	str	r3, [sp, #4]
 800d4b6:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f0 <ABCC_LinkWrMsgWithNotification+0x5c>)
 800d4be:	212b      	movs	r1, #43	@ 0x2b
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	f000 f8c1 	bl	800d648 <ABCC_LogHandler>
         (UINT32)pnMsgSentHandler,
         "Message sent handler not NULL (%" PRIx32 ")\n",
         (UINT32)pnMsgSentHandler );
   }

   pnMsgSentHandler = pnHandler;
 800d4c6:	4a08      	ldr	r2, [pc, #32]	@ (800d4e8 <ABCC_LinkWrMsgWithNotification+0x54>)
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	6013      	str	r3, [r2, #0]
   link_psNotifyMsg = psWriteMsg;
 800d4cc:	4a09      	ldr	r2, [pc, #36]	@ (800d4f4 <ABCC_LinkWrMsgWithNotification+0x60>)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6013      	str	r3, [r2, #0]

   eResult = ABCC_LinkWriteMessage( psWriteMsg );
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff ff02 	bl	800d2dc <ABCC_LinkWriteMessage>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	81fb      	strh	r3, [r7, #14]

   return( eResult );
 800d4dc:	89fb      	ldrh	r3, [r7, #14]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	24001534 	.word	0x24001534
 800d4ec:	08016038 	.word	0x08016038
 800d4f0:	08015fb0 	.word	0x08015fb0
 800d4f4:	24001538 	.word	0x24001538

0800d4f8 <ABCC_LinkFree>:

void ABCC_LinkFree( ABP_MsgType** ppsBuffer )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	6078      	str	r0, [r7, #4]
   if( !*ppsBuffer )
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <ABCC_LinkFree+0x26>
   {
      ABCC_LOG_WARNING( ABCC_EC_TRYING_TO_FREE_NULL_POINTER,
 800d508:	4b08      	ldr	r3, [pc, #32]	@ (800d52c <ABCC_LinkFree+0x34>)
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4b07      	ldr	r3, [pc, #28]	@ (800d530 <ABCC_LinkFree+0x38>)
 800d514:	2200      	movs	r2, #0
 800d516:	2105      	movs	r1, #5
 800d518:	2002      	movs	r0, #2
 800d51a:	f000 f895 	bl	800d648 <ABCC_LogHandler>
         0,
         "ABCC_LinkFree called with NULL pointer\n" );
   }

   ABCC_MemFree( ppsBuffer );
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f9ca 	bl	800d8b8 <ABCC_MemFree>
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	08016060 	.word	0x08016060
 800d530:	08015fb0 	.word	0x08015fb0

0800d534 <ABCC_LinkMapMsgHandler>:

ABCC_ErrorCodeType ABCC_LinkMapMsgHandler( UINT8 bSrcId, ABCC_MsgHandlerFuncType  pnMSgHandler )
{
 800d534:	b480      	push	{r7}
 800d536:	b085      	sub	sp, #20
 800d538:	af00      	add	r7, sp, #0
 800d53a:	4603      	mov	r3, r0
 800d53c:	6039      	str	r1, [r7, #0]
 800d53e:	71fb      	strb	r3, [r7, #7]
   UINT16 iIndex;
   ABCC_ErrorCodeType eResult = ABCC_EC_NO_RESOURCES;
 800d540:	231a      	movs	r3, #26
 800d542:	81bb      	strh	r3, [r7, #12]

   /*
   ** Find free spot.
   */
   ABCC_PORT_EnterCritical();
   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d544:	2300      	movs	r3, #0
 800d546:	81fb      	strh	r3, [r7, #14]
 800d548:	e014      	b.n	800d574 <ABCC_LinkMapMsgHandler+0x40>
   {
      if( link_pnMsgHandler[ iIndex ] == 0 )
 800d54a:	89fb      	ldrh	r3, [r7, #14]
 800d54c:	4a0e      	ldr	r2, [pc, #56]	@ (800d588 <ABCC_LinkMapMsgHandler+0x54>)
 800d54e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10b      	bne.n	800d56e <ABCC_LinkMapMsgHandler+0x3a>
      {
         link_pnMsgHandler[ iIndex ] = pnMSgHandler;
 800d556:	89fb      	ldrh	r3, [r7, #14]
 800d558:	490b      	ldr	r1, [pc, #44]	@ (800d588 <ABCC_LinkMapMsgHandler+0x54>)
 800d55a:	683a      	ldr	r2, [r7, #0]
 800d55c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         link_bMsgSrcId[ iIndex ] = bSrcId;
 800d560:	89fb      	ldrh	r3, [r7, #14]
 800d562:	490a      	ldr	r1, [pc, #40]	@ (800d58c <ABCC_LinkMapMsgHandler+0x58>)
 800d564:	79fa      	ldrb	r2, [r7, #7]
 800d566:	54ca      	strb	r2, [r1, r3]
         eResult = ABCC_EC_NO_ERROR;
 800d568:	2300      	movs	r3, #0
 800d56a:	81bb      	strh	r3, [r7, #12]
         break;
 800d56c:	e005      	b.n	800d57a <ABCC_LinkMapMsgHandler+0x46>
   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d56e:	89fb      	ldrh	r3, [r7, #14]
 800d570:	3301      	adds	r3, #1
 800d572:	81fb      	strh	r3, [r7, #14]
 800d574:	89fb      	ldrh	r3, [r7, #14]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d9e7      	bls.n	800d54a <ABCC_LinkMapMsgHandler+0x16>
      }
   }
   ABCC_PORT_ExitCritical();
   return( eResult );
 800d57a:	89bb      	ldrh	r3, [r7, #12]
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr
 800d588:	24001524 	.word	0x24001524
 800d58c:	24001530 	.word	0x24001530

0800d590 <ABCC_LinkGetMsgHandler>:

ABCC_MsgHandlerFuncType ABCC_LinkGetMsgHandler( UINT8 bSrcId )
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	4603      	mov	r3, r0
 800d598:	71fb      	strb	r3, [r7, #7]
   UINT16 iIndex;
   ABCC_MsgHandlerFuncType pnHandler = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60bb      	str	r3, [r7, #8]

   /*
   ** Find message handler. If not found return NULL.
   */
   ABCC_PORT_EnterCritical();
   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d59e:	2300      	movs	r3, #0
 800d5a0:	81fb      	strh	r3, [r7, #14]
 800d5a2:	e019      	b.n	800d5d8 <ABCC_LinkGetMsgHandler+0x48>
   {
      if( ( link_pnMsgHandler[ iIndex ] != NULL ) && ( link_bMsgSrcId[ iIndex ] == bSrcId ) )
 800d5a4:	89fb      	ldrh	r3, [r7, #14]
 800d5a6:	4a11      	ldr	r2, [pc, #68]	@ (800d5ec <ABCC_LinkGetMsgHandler+0x5c>)
 800d5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d010      	beq.n	800d5d2 <ABCC_LinkGetMsgHandler+0x42>
 800d5b0:	89fb      	ldrh	r3, [r7, #14]
 800d5b2:	4a0f      	ldr	r2, [pc, #60]	@ (800d5f0 <ABCC_LinkGetMsgHandler+0x60>)
 800d5b4:	5cd3      	ldrb	r3, [r2, r3]
 800d5b6:	79fa      	ldrb	r2, [r7, #7]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d10a      	bne.n	800d5d2 <ABCC_LinkGetMsgHandler+0x42>
      {
         pnHandler = link_pnMsgHandler[ iIndex ];
 800d5bc:	89fb      	ldrh	r3, [r7, #14]
 800d5be:	4a0b      	ldr	r2, [pc, #44]	@ (800d5ec <ABCC_LinkGetMsgHandler+0x5c>)
 800d5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c4:	60bb      	str	r3, [r7, #8]
         link_pnMsgHandler[ iIndex ] = NULL;
 800d5c6:	89fb      	ldrh	r3, [r7, #14]
 800d5c8:	4a08      	ldr	r2, [pc, #32]	@ (800d5ec <ABCC_LinkGetMsgHandler+0x5c>)
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
         break;
 800d5d0:	e005      	b.n	800d5de <ABCC_LinkGetMsgHandler+0x4e>
   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d5d2:	89fb      	ldrh	r3, [r7, #14]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	81fb      	strh	r3, [r7, #14]
 800d5d8:	89fb      	ldrh	r3, [r7, #14]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	d9e2      	bls.n	800d5a4 <ABCC_LinkGetMsgHandler+0x14>
      }
   }
   ABCC_PORT_ExitCritical();
   return( pnHandler );
 800d5de:	68bb      	ldr	r3, [r7, #8]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3714      	adds	r7, #20
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr
 800d5ec:	24001524 	.word	0x24001524
 800d5f0:	24001530 	.word	0x24001530

0800d5f4 <ABCC_LinkIsSrcIdUsed>:

BOOL ABCC_LinkIsSrcIdUsed( UINT8 bSrcId )
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	71fb      	strb	r3, [r7, #7]
   BOOL fFound = FALSE;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
   UINT16 iIndex;

   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d602:	2300      	movs	r3, #0
 800d604:	817b      	strh	r3, [r7, #10]
 800d606:	e011      	b.n	800d62c <ABCC_LinkIsSrcIdUsed+0x38>
   {
      if( ( link_pnMsgHandler[ iIndex ] != NULL ) && ( link_bMsgSrcId[ iIndex ] == bSrcId ) )
 800d608:	897b      	ldrh	r3, [r7, #10]
 800d60a:	4a0d      	ldr	r2, [pc, #52]	@ (800d640 <ABCC_LinkIsSrcIdUsed+0x4c>)
 800d60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d008      	beq.n	800d626 <ABCC_LinkIsSrcIdUsed+0x32>
 800d614:	897b      	ldrh	r3, [r7, #10]
 800d616:	4a0b      	ldr	r2, [pc, #44]	@ (800d644 <ABCC_LinkIsSrcIdUsed+0x50>)
 800d618:	5cd3      	ldrb	r3, [r2, r3]
 800d61a:	79fa      	ldrb	r2, [r7, #7]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d102      	bne.n	800d626 <ABCC_LinkIsSrcIdUsed+0x32>
      {
         fFound = TRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	60fb      	str	r3, [r7, #12]
         break;
 800d624:	e005      	b.n	800d632 <ABCC_LinkIsSrcIdUsed+0x3e>
   for( iIndex = 0; iIndex < LINK_MAX_NUM_MSG_HDL; iIndex++ )
 800d626:	897b      	ldrh	r3, [r7, #10]
 800d628:	3301      	adds	r3, #1
 800d62a:	817b      	strh	r3, [r7, #10]
 800d62c:	897b      	ldrh	r3, [r7, #10]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d9ea      	bls.n	800d608 <ABCC_LinkIsSrcIdUsed+0x14>
      }
   }
   return( fFound );
 800d632:	68fb      	ldr	r3, [r7, #12]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3714      	adds	r7, #20
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	24001524 	.word	0x24001524
 800d644:	24001530 	.word	0x24001530

0800d648 <ABCC_LogHandler>:
#if ABCC_CFG_LOG_STRINGS_ENABLED
   , const char* pcFormat,
   ...
#endif
)
{
 800d648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d64a:	b095      	sub	sp, #84	@ 0x54
 800d64c:	af02      	add	r7, sp, #8
 800d64e:	60ba      	str	r2, [r7, #8]
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
 800d656:	460b      	mov	r3, r1
 800d658:	81bb      	strh	r3, [r7, #12]
   const char* apcSeverityToString[] =
 800d65a:	4b55      	ldr	r3, [pc, #340]	@ (800d7b0 <ABCC_LogHandler+0x168>)
 800d65c:	f107 0414 	add.w	r4, r7, #20
 800d660:	461d      	mov	r5, r3
 800d662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d666:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d66a:	e884 0003 	stmia.w	r4, {r0, r1}
      "..."ABCC_LOG_ANSI_COLOR_CYAN   "|INFO| "ABCC_LOG_ANSI_COLOR_RESET,
      ".."ABCC_LOG_ANSI_COLOR_MAGENTA"|DEBUG| "ABCC_LOG_ANSI_COLOR_RESET,
      ""ABCC_LOG_ANSI_COLOR_RED    "|UNKNOWN| "ABCC_LOG_ANSI_COLOR_RESET
   };

   if( ( eSeverity < 0 ) || ( eSeverity >= ABCC_LOG_SEVERITY_UNKNOWN ) )
 800d66e:	7bfb      	ldrb	r3, [r7, #15]
 800d670:	2b04      	cmp	r3, #4
 800d672:	d901      	bls.n	800d678 <ABCC_LogHandler+0x30>
   {
      eSeverity = ABCC_LOG_SEVERITY_UNKNOWN;
 800d674:	2305      	movs	r3, #5
 800d676:	73fb      	strb	r3, [r7, #15]
   }

#if ABCC_CFG_LOG_TIMESTAMPS_ENABLED
   UINT64 llUptime = ABCC_GetUptimeMs();
 800d678:	f7ff f927 	bl	800c8ca <ABCC_GetUptimeMs>
 800d67c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
   ABCC_PORT_printf( ABCC_LOG_ANSI_COLOR_GREEN"%02u:%02u:%02u.%03u - "ABCC_LOG_ANSI_COLOR_RESET,
 800d680:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d684:	4a4b      	ldr	r2, [pc, #300]	@ (800d7b4 <ABCC_LogHandler+0x16c>)
 800d686:	f04f 0300 	mov.w	r3, #0
 800d68a:	f7f2 fe81 	bl	8000390 <__aeabi_uldivmod>
 800d68e:	4602      	mov	r2, r0
 800d690:	460b      	mov	r3, r1
 800d692:	4610      	mov	r0, r2
 800d694:	4619      	mov	r1, r3
 800d696:	f04f 0218 	mov.w	r2, #24
 800d69a:	f04f 0300 	mov.w	r3, #0
 800d69e:	f7f2 fe77 	bl	8000390 <__aeabi_uldivmod>
 800d6a2:	b293      	uxth	r3, r2
 800d6a4:	461c      	mov	r4, r3
 800d6a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d6aa:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800d6ae:	f04f 0300 	mov.w	r3, #0
 800d6b2:	f7f2 fe6d 	bl	8000390 <__aeabi_uldivmod>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	4619      	mov	r1, r3
 800d6be:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800d6c2:	f04f 0300 	mov.w	r3, #0
 800d6c6:	f7f2 fe63 	bl	8000390 <__aeabi_uldivmod>
 800d6ca:	b2d3      	uxtb	r3, r2
 800d6cc:	461d      	mov	r5, r3
 800d6ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d6d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6d6:	f04f 0300 	mov.w	r3, #0
 800d6da:	f7f2 fe59 	bl	8000390 <__aeabi_uldivmod>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	4610      	mov	r0, r2
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800d6ea:	f04f 0300 	mov.w	r3, #0
 800d6ee:	f7f2 fe4f 	bl	8000390 <__aeabi_uldivmod>
 800d6f2:	b2d3      	uxtb	r3, r2
 800d6f4:	461e      	mov	r6, r3
 800d6f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d6fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6fe:	f04f 0300 	mov.w	r3, #0
 800d702:	f7f2 fe45 	bl	8000390 <__aeabi_uldivmod>
 800d706:	b293      	uxth	r3, r2
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4633      	mov	r3, r6
 800d70c:	462a      	mov	r2, r5
 800d70e:	4621      	mov	r1, r4
 800d710:	4829      	ldr	r0, [pc, #164]	@ (800d7b8 <ABCC_LogHandler+0x170>)
 800d712:	f007 fb51 	bl	8014db8 <iprintf>
   int xPad;

   /*
   ** Extract base name from file
   */
   for( pcPos = pcBasename = pcFilename; *pcPos != '\0'; pcPos++ )
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	643b      	str	r3, [r7, #64]	@ 0x40
 800d71a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d71c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d71e:	e00d      	b.n	800d73c <ABCC_LogHandler+0xf4>
   {
      if( *pcPos == '/' || *pcPos == '\\' )
 800d720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b2f      	cmp	r3, #47	@ 0x2f
 800d726:	d003      	beq.n	800d730 <ABCC_LogHandler+0xe8>
 800d728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d72e:	d102      	bne.n	800d736 <ABCC_LogHandler+0xee>
      {
         pcBasename = pcPos + 1;
 800d730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d732:	3301      	adds	r3, #1
 800d734:	643b      	str	r3, [r7, #64]	@ 0x40
   for( pcPos = pcBasename = pcFilename; *pcPos != '\0'; pcPos++ )
 800d736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d738:	3301      	adds	r3, #1
 800d73a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d1ed      	bne.n	800d720 <ABCC_LogHandler+0xd8>
      }
   }

   xLen = ABCC_PORT_printf( "%s:%d", pcBasename, xLine );
 800d744:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d748:	481c      	ldr	r0, [pc, #112]	@ (800d7bc <ABCC_LogHandler+0x174>)
 800d74a:	f007 fb35 	bl	8014db8 <iprintf>
 800d74e:	62f8      	str	r0, [r7, #44]	@ 0x2c
   xPad = ABCC_LOG_MAX_FILE_LINE_LENGTH - xLen;
 800d750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d752:	f1c3 0325 	rsb	r3, r3, #37	@ 0x25
 800d756:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xPad = xPad < 0 ? 0 : xPad;
 800d758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d75e:	63fb      	str	r3, [r7, #60]	@ 0x3c

   while( xPad-- )
 800d760:	e002      	b.n	800d768 <ABCC_LogHandler+0x120>
   {
      ABCC_PORT_printf( "." );
 800d762:	202e      	movs	r0, #46	@ 0x2e
 800d764:	f007 fb3a 	bl	8014ddc <putchar>
   while( xPad-- )
 800d768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d76a:	1e5a      	subs	r2, r3, #1
 800d76c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1f7      	bne.n	800d762 <ABCC_LogHandler+0x11a>
   }
#endif

   ABCC_PORT_printf( "%s", apcSeverityToString[ eSeverity ] );
 800d772:	7bfb      	ldrb	r3, [r7, #15]
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	3348      	adds	r3, #72	@ 0x48
 800d778:	443b      	add	r3, r7
 800d77a:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800d77e:	4619      	mov	r1, r3
 800d780:	480f      	ldr	r0, [pc, #60]	@ (800d7c0 <ABCC_LogHandler+0x178>)
 800d782:	f007 fb19 	bl	8014db8 <iprintf>

#if ABCC_CFG_LOG_STRINGS_ENABLED
   va_list argp;
   va_start( argp, pcFormat );
 800d786:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d78a:	613b      	str	r3, [r7, #16]
   ABCC_PORT_vprintf( pcFormat, argp );
 800d78c:	6939      	ldr	r1, [r7, #16]
 800d78e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800d790:	f007 fbce 	bl	8014f30 <viprintf>
   {
      ABCC_PORT_printf( "\n" );
   }
#endif

   if( eSeverity <= ABCC_LOG_SEVERITY_ERROR )
 800d794:	7bfb      	ldrb	r3, [r7, #15]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d805      	bhi.n	800d7a6 <ABCC_LogHandler+0x15e>
   {
      ABCC_LogError( eSeverity, eErrorCode, lAdditionalInfo );
 800d79a:	89b9      	ldrh	r1, [r7, #12]
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f80f 	bl	800d7c4 <ABCC_LogError>
   }
}
 800d7a6:	bf00      	nop
 800d7a8:	374c      	adds	r7, #76	@ 0x4c
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0801612c 	.word	0x0801612c
 800d7b4:	0036ee80 	.word	0x0036ee80
 800d7b8:	08016088 	.word	0x08016088
 800d7bc:	080160a8 	.word	0x080160a8
 800d7c0:	080160b0 	.word	0x080160b0

0800d7c4 <ABCC_LogError>:

void ABCC_LogError( ABCC_LogSeverityType eSeverity, ABCC_ErrorCodeType eErrorCode, UINT32 lAdditionalInfo )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	603a      	str	r2, [r7, #0]
 800d7ce:	71fb      	strb	r3, [r7, #7]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	80bb      	strh	r3, [r7, #4]
   ABCC_SetError( eSeverity, eErrorCode, lAdditionalInfo );
 800d7d4:	88b9      	ldrh	r1, [r7, #4]
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fb76 	bl	800becc <ABCC_SetError>
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <ABCC_MemCreatePool>:
static UINT16 abcc_iNumFreeMsg;
static ABCC_MemAllocUnion abcc_uFreeMsgStack[ ABCC_CFG_MAX_NUM_MSG_RESOURCES ];
static ABCC_MemAllocType  abcc_asMsgPool[ ABCC_CFG_MAX_NUM_MSG_RESOURCES ];

void ABCC_MemCreatePool( void )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
   UINT16 i;

   abcc_iNumFreeMsg = ABCC_CFG_MAX_NUM_MSG_RESOURCES;
 800d7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800d858 <ABCC_MemCreatePool+0x70>)
 800d7f0:	2204      	movs	r2, #4
 800d7f2:	801a      	strh	r2, [r3, #0]

   for( i = 0; i < ABCC_CFG_MAX_NUM_MSG_RESOURCES; i++ )
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	80fb      	strh	r3, [r7, #6]
 800d7f8:	e024      	b.n	800d844 <ABCC_MemCreatePool+0x5c>
   {
      abcc_uFreeMsgStack[ i ].psAllocMsg = &abcc_asMsgPool[ i ];
 800d7fa:	88fa      	ldrh	r2, [r7, #6]
 800d7fc:	88fb      	ldrh	r3, [r7, #6]
 800d7fe:	f240 6104 	movw	r1, #1540	@ 0x604
 800d802:	fb01 f202 	mul.w	r2, r1, r2
 800d806:	4915      	ldr	r1, [pc, #84]	@ (800d85c <ABCC_MemCreatePool+0x74>)
 800d808:	440a      	add	r2, r1
 800d80a:	4915      	ldr	r1, [pc, #84]	@ (800d860 <ABCC_MemCreatePool+0x78>)
 800d80c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      abcc_asMsgPool[ i ].iMagicCookie = ABCC_MEM_MAGIC_COOKIE;
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	4a12      	ldr	r2, [pc, #72]	@ (800d85c <ABCC_MemCreatePool+0x74>)
 800d814:	f240 6104 	movw	r1, #1540	@ 0x604
 800d818:	fb01 f303 	mul.w	r3, r1, r3
 800d81c:	4413      	add	r3, r2
 800d81e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800d822:	f645 42c5 	movw	r2, #23749	@ 0x5cc5
 800d826:	801a      	strh	r2, [r3, #0]
      abcc_asMsgPool[ i ].iBufferStatus = ABCC_MEM_BUFSTAT_FREE;
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	4a0c      	ldr	r2, [pc, #48]	@ (800d85c <ABCC_MemCreatePool+0x74>)
 800d82c:	f240 6104 	movw	r1, #1540	@ 0x604
 800d830:	fb01 f303 	mul.w	r3, r1, r3
 800d834:	4413      	add	r3, r2
 800d836:	f203 6302 	addw	r3, r3, #1538	@ 0x602
 800d83a:	2200      	movs	r2, #0
 800d83c:	801a      	strh	r2, [r3, #0]
   for( i = 0; i < ABCC_CFG_MAX_NUM_MSG_RESOURCES; i++ )
 800d83e:	88fb      	ldrh	r3, [r7, #6]
 800d840:	3301      	adds	r3, #1
 800d842:	80fb      	strh	r3, [r7, #6]
 800d844:	88fb      	ldrh	r3, [r7, #6]
 800d846:	2b03      	cmp	r3, #3
 800d848:	d9d7      	bls.n	800d7fa <ABCC_MemCreatePool+0x12>
   }
}
 800d84a:	bf00      	nop
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr
 800d858:	24001544 	.word	0x24001544
 800d85c:	24001558 	.word	0x24001558
 800d860:	24001548 	.word	0x24001548

0800d864 <ABCC_MemAlloc>:

ABP_MsgType* ABCC_MemAlloc( void )
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
   ABP_MsgType* pxItem = NULL;
 800d86a:	2300      	movs	r3, #0
 800d86c:	607b      	str	r3, [r7, #4]
   ABCC_PORT_UseCritical();
   ABCC_PORT_EnterCritical();
   if( abcc_iNumFreeMsg > 0 )
 800d86e:	4b10      	ldr	r3, [pc, #64]	@ (800d8b0 <ABCC_MemAlloc+0x4c>)
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d015      	beq.n	800d8a2 <ABCC_MemAlloc+0x3e>
   {
      abcc_iNumFreeMsg--;
 800d876:	4b0e      	ldr	r3, [pc, #56]	@ (800d8b0 <ABCC_MemAlloc+0x4c>)
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	3b01      	subs	r3, #1
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b0 <ABCC_MemAlloc+0x4c>)
 800d880:	801a      	strh	r2, [r3, #0]
      pxItem = abcc_uFreeMsgStack[ abcc_iNumFreeMsg ].psMsg;
 800d882:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b0 <ABCC_MemAlloc+0x4c>)
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	461a      	mov	r2, r3
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <ABCC_MemAlloc+0x50>)
 800d88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88e:	607b      	str	r3, [r7, #4]
      ( (ABCC_MemAllocType*)pxItem )->iBufferStatus = ABCC_MEM_BUFSTAT_ALLOCATED;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f042 0201 	orr.w	r2, r2, #1
 800d898:	f883 2602 	strb.w	r2, [r3, #1538]	@ 0x602
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2603 	strb.w	r2, [r3, #1539]	@ 0x603

   ABCC_PORT_ExitCritical();

   ABCC_LOG_DEBUG_MEM( "Mem: Buffer allocated: 0x%p\n", (void*)pxItem );

   return( pxItem );
 800d8a2:	687b      	ldr	r3, [r7, #4]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	24001544 	.word	0x24001544
 800d8b4:	24001548 	.word	0x24001548

0800d8b8 <ABCC_MemFree>:

void ABCC_MemFree( ABP_MsgType** pxItem )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af04      	add	r7, sp, #16
 800d8be:	6078      	str	r0, [r7, #4]
   ABCC_MemAllocType* const psBuf = (ABCC_MemAllocType*)(*pxItem);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60fb      	str	r3, [r7, #12]
   ABCC_PORT_UseCritical();

   ABCC_LOG_DEBUG_MEM( "Mem: Buffer returned:  0x%p\n", (void*)*pxItem );

   if( psBuf->iMagicCookie != ABCC_MEM_MAGIC_COOKIE )
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	@ 0x600
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	f645 42c5 	movw	r2, #23749	@ 0x5cc5
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d00b      	beq.n	800d8ee <ABCC_MemFree+0x36>
   {
      ABCC_LOG_FATAL( ABCC_EC_MSG_BUFFER_CORRUPTED,
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	9302      	str	r3, [sp, #8]
 800d8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800d948 <ABCC_MemFree+0x90>)
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	237c      	movs	r3, #124	@ 0x7c
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	4b19      	ldr	r3, [pc, #100]	@ (800d94c <ABCC_MemFree+0x94>)
 800d8e6:	2118      	movs	r1, #24
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f7ff fead 	bl	800d648 <ABCC_LogHandler>
         (UINT32)psBuf,
         "Message buffer corrupted: 0x%p\n",
         (void*)psBuf );
   }

   if( psBuf->iBufferStatus == ABCC_MEM_BUFSTAT_FREE )
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	@ 0x602
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d10b      	bne.n	800d912 <ABCC_MemFree+0x5a>
   {
      ABCC_LOG_FATAL( ABCC_EC_MSG_BUFFER_ALREADY_FREED,
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	9302      	str	r3, [sp, #8]
 800d900:	4b13      	ldr	r3, [pc, #76]	@ (800d950 <ABCC_MemFree+0x98>)
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	2384      	movs	r3, #132	@ 0x84
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	4b10      	ldr	r3, [pc, #64]	@ (800d94c <ABCC_MemFree+0x94>)
 800d90a:	2119      	movs	r1, #25
 800d90c:	2000      	movs	r0, #0
 800d90e:	f7ff fe9b 	bl	800d648 <ABCC_LogHandler>
         (void*)psBuf );
   }

   ABCC_PORT_EnterCritical();

   abcc_uFreeMsgStack[ abcc_iNumFreeMsg ].psAllocMsg = psBuf;
 800d912:	4b10      	ldr	r3, [pc, #64]	@ (800d954 <ABCC_MemFree+0x9c>)
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	4619      	mov	r1, r3
 800d918:	4a0f      	ldr	r2, [pc, #60]	@ (800d958 <ABCC_MemFree+0xa0>)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   abcc_iNumFreeMsg++;
 800d920:	4b0c      	ldr	r3, [pc, #48]	@ (800d954 <ABCC_MemFree+0x9c>)
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	3301      	adds	r3, #1
 800d926:	b29a      	uxth	r2, r3
 800d928:	4b0a      	ldr	r3, [pc, #40]	@ (800d954 <ABCC_MemFree+0x9c>)
 800d92a:	801a      	strh	r2, [r3, #0]
   psBuf->iBufferStatus = ABCC_MEM_BUFSTAT_FREE;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2602 	strb.w	r2, [r3, #1538]	@ 0x602
 800d934:	2200      	movs	r2, #0
 800d936:	f883 2603 	strb.w	r2, [r3, #1539]	@ 0x603
   *pxItem = NULL;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	601a      	str	r2, [r3, #0]

   ABCC_PORT_ExitCritical();
}
 800d940:	bf00      	nop
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	08016154 	.word	0x08016154
 800d94c:	08016144 	.word	0x08016144
 800d950:	08016174 	.word	0x08016174
 800d954:	24001544 	.word	0x24001544
 800d958:	24001548 	.word	0x24001548

0800d95c <ABCC_MemGetBufferStatus>:

ABCC_MemBufferStatusType ABCC_MemGetBufferStatus( ABP_MsgType* psMsg )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af04      	add	r7, sp, #16
 800d962:	6078      	str	r0, [r7, #4]
   const ABCC_MemAllocType* const psBuf = (ABCC_MemAllocType*)psMsg;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	60fb      	str	r3, [r7, #12]

   if( psBuf->iMagicCookie != ABCC_MEM_MAGIC_COOKIE )
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	@ 0x600
 800d96e:	b29b      	uxth	r3, r3
 800d970:	f645 42c5 	movw	r2, #23749	@ 0x5cc5
 800d974:	4293      	cmp	r3, r2
 800d976:	d00b      	beq.n	800d990 <ABCC_MemGetBufferStatus+0x34>
   {
      ABCC_LOG_FATAL( ABCC_EC_MSG_BUFFER_CORRUPTED,
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	9302      	str	r3, [sp, #8]
 800d97e:	4b08      	ldr	r3, [pc, #32]	@ (800d9a0 <ABCC_MemGetBufferStatus+0x44>)
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	239a      	movs	r3, #154	@ 0x9a
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	4b07      	ldr	r3, [pc, #28]	@ (800d9a4 <ABCC_MemGetBufferStatus+0x48>)
 800d988:	2118      	movs	r1, #24
 800d98a:	2000      	movs	r0, #0
 800d98c:	f7ff fe5c 	bl	800d648 <ABCC_LogHandler>
         (UINT32)psBuf,
         "Message buffer corrupted: 0x%p\n",
         (void*)psBuf );
   }

   return( (ABCC_MemBufferStatusType)psBuf->iBufferStatus );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	@ 0x602
 800d996:	b29b      	uxth	r3, r3
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	08016154 	.word	0x08016154
 800d9a4:	08016144 	.word	0x08016144

0800d9a8 <ABCC_MemSetBufferStatus>:

void ABCC_MemSetBufferStatus( ABP_MsgType* psMsg,
                              ABCC_MemBufferStatusType eStatus )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b088      	sub	sp, #32
 800d9ac:	af04      	add	r7, sp, #16
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	807b      	strh	r3, [r7, #2]
   ABCC_MemAllocType* const psBuf = (ABCC_MemAllocType*)psMsg;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	60fb      	str	r3, [r7, #12]

   if( psBuf->iMagicCookie != ABCC_MEM_MAGIC_COOKIE )
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	@ 0x600
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	f645 42c5 	movw	r2, #23749	@ 0x5cc5
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d00b      	beq.n	800d9e0 <ABCC_MemSetBufferStatus+0x38>
   {
      ABCC_LOG_FATAL( ABCC_EC_MSG_BUFFER_CORRUPTED,
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	4b08      	ldr	r3, [pc, #32]	@ (800d9f0 <ABCC_MemSetBufferStatus+0x48>)
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	23aa      	movs	r3, #170	@ 0xaa
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	4b07      	ldr	r3, [pc, #28]	@ (800d9f4 <ABCC_MemSetBufferStatus+0x4c>)
 800d9d8:	2118      	movs	r1, #24
 800d9da:	2000      	movs	r0, #0
 800d9dc:	f7ff fe34 	bl	800d648 <ABCC_LogHandler>
         (UINT32)psBuf,
         "Message buffer corrupted: 0x%p\n",
         (void*)psBuf );
   }

   psBuf->iBufferStatus = eStatus;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	887a      	ldrh	r2, [r7, #2]
 800d9e4:	f8a3 2602 	strh.w	r2, [r3, #1538]	@ 0x602
}
 800d9e8:	bf00      	nop
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	08016154 	.word	0x08016154
 800d9f4:	08016144 	.word	0x08016144

0800d9f8 <abcc_RemapRespMsgSent>:

static UINT16   abcc_iNewPdReadSize    = 0;
static UINT16   abcc_iNewPdWriteSize   = 0;

static void abcc_RemapRespMsgSent( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
   ABCC_SetPdSize( abcc_iNewPdReadSize, abcc_iNewPdWriteSize );
 800d9fc:	4b05      	ldr	r3, [pc, #20]	@ (800da14 <abcc_RemapRespMsgSent+0x1c>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	4a05      	ldr	r2, [pc, #20]	@ (800da18 <abcc_RemapRespMsgSent+0x20>)
 800da02:	8812      	ldrh	r2, [r2, #0]
 800da04:	4611      	mov	r1, r2
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe fea6 	bl	800c758 <ABCC_SetPdSize>
   ABCC_CbfRemapDone();
 800da0c:	f004 f9b1 	bl	8011d72 <ABCC_CbfRemapDone>
}
 800da10:	bf00      	nop
 800da12:	bd80      	pop	{r7, pc}
 800da14:	24002d68 	.word	0x24002d68
 800da18:	24002d6a 	.word	0x24002d6a

0800da1c <ABCC_SendRemapRespMsg>:

ABCC_ErrorCodeType ABCC_SendRemapRespMsg( ABP_MsgType* psMsgResp, UINT16 iNewReadPdSize, const UINT16 iNewWritePdSize )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	807b      	strh	r3, [r7, #2]
 800da28:	4613      	mov	r3, r2
 800da2a:	803b      	strh	r3, [r7, #0]
   ABCC_ErrorCodeType eResult;
   abcc_iNewPdReadSize = iNewReadPdSize;
 800da2c:	4a08      	ldr	r2, [pc, #32]	@ (800da50 <ABCC_SendRemapRespMsg+0x34>)
 800da2e:	887b      	ldrh	r3, [r7, #2]
 800da30:	8013      	strh	r3, [r2, #0]
   abcc_iNewPdWriteSize = iNewWritePdSize;
 800da32:	4a08      	ldr	r2, [pc, #32]	@ (800da54 <ABCC_SendRemapRespMsg+0x38>)
 800da34:	883b      	ldrh	r3, [r7, #0]
 800da36:	8013      	strh	r3, [r2, #0]

   /*
   ** When ack is sent abcc_RemapRespMsgSent will be called.
   */
   eResult = ABCC_LinkWrMsgWithNotification( psMsgResp, abcc_RemapRespMsgSent );
 800da38:	4907      	ldr	r1, [pc, #28]	@ (800da58 <ABCC_SendRemapRespMsg+0x3c>)
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f7ff fd2a 	bl	800d494 <ABCC_LinkWrMsgWithNotification>
 800da40:	4603      	mov	r3, r0
 800da42:	81fb      	strh	r3, [r7, #14]

   return( eResult );
 800da44:	89fb      	ldrh	r3, [r7, #14]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	24002d68 	.word	0x24002d68
 800da54:	24002d6a 	.word	0x24002d6a
 800da58:	0800d9f9 	.word	0x0800d9f9

0800da5c <FindSegmentationSession>:
** Returns:
**    Pointer to abcc_SegInstanceType. NULL if no match is found.
**------------------------------------------------------------------------------
*/
static abcc_SegSessionType* FindSegmentationSession( const ABP_MsgType* psMsg )
{
 800da5c:	b480      	push	{r7}
 800da5e:	b085      	sub	sp, #20
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
   UINT8 bSession;
   abcc_SegSessionType* psSegSession = NULL;
 800da64:	2300      	movs	r3, #0
 800da66:	60bb      	str	r3, [r7, #8]
   ABCC_PORT_UseCritical();

   ABCC_PORT_EnterCritical();

   for( bSession = 0; bSession < ABCC_NUM_SEGMENTATION_SESSIONS; bSession++ )
 800da68:	2300      	movs	r3, #0
 800da6a:	73fb      	strb	r3, [r7, #15]
 800da6c:	e04e      	b.n	800db0c <FindSegmentationSession+0xb0>
   {
      if( abcc_sSegSession[ bSession ].fInUse &&
 800da6e:	7bfa      	ldrb	r2, [r7, #15]
 800da70:	492b      	ldr	r1, [pc, #172]	@ (800db20 <FindSegmentationSession+0xc4>)
 800da72:	4613      	mov	r3, r2
 800da74:	00db      	lsls	r3, r3, #3
 800da76:	4413      	add	r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	440b      	add	r3, r1
 800da7c:	3320      	adds	r3, #32
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d040      	beq.n	800db06 <FindSegmentationSession+0xaa>
         ( abcc_sSegSession[ bSession ].sIdentifiers.bDestObj == ABCC_GetMsgDestObj( psMsg ) ) &&
 800da84:	7bfa      	ldrb	r2, [r7, #15]
 800da86:	4926      	ldr	r1, [pc, #152]	@ (800db20 <FindSegmentationSession+0xc4>)
 800da88:	4613      	mov	r3, r2
 800da8a:	00db      	lsls	r3, r3, #3
 800da8c:	4413      	add	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	440b      	add	r3, r1
 800da92:	331a      	adds	r3, #26
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	795b      	ldrb	r3, [r3, #5]
      if( abcc_sSegSession[ bSession ].fInUse &&
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d133      	bne.n	800db06 <FindSegmentationSession+0xaa>
         ( abcc_sSegSession[ bSession ].sIdentifiers.iInstance == ABCC_GetMsgInstance( psMsg ) ) &&
 800da9e:	7bfa      	ldrb	r2, [r7, #15]
 800daa0:	491f      	ldr	r1, [pc, #124]	@ (800db20 <FindSegmentationSession+0xc4>)
 800daa2:	4613      	mov	r3, r2
 800daa4:	00db      	lsls	r3, r3, #3
 800daa6:	4413      	add	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	440b      	add	r3, r1
 800daac:	331c      	adds	r3, #28
 800daae:	881a      	ldrh	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	88db      	ldrh	r3, [r3, #6]
 800dab4:	b29b      	uxth	r3, r3
         ( abcc_sSegSession[ bSession ].sIdentifiers.bDestObj == ABCC_GetMsgDestObj( psMsg ) ) &&
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d125      	bne.n	800db06 <FindSegmentationSession+0xaa>
         ( abcc_sSegSession[ bSession ].sIdentifiers.bCmd == ABCC_GetMsgCmdBits( psMsg ) ) &&
 800daba:	7bfa      	ldrb	r2, [r7, #15]
 800dabc:	4918      	ldr	r1, [pc, #96]	@ (800db20 <FindSegmentationSession+0xc4>)
 800dabe:	4613      	mov	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	4413      	add	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	440b      	add	r3, r1
 800dac8:	331e      	adds	r3, #30
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	461a      	mov	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7a1b      	ldrb	r3, [r3, #8]
 800dad2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
         ( abcc_sSegSession[ bSession ].sIdentifiers.iInstance == ABCC_GetMsgInstance( psMsg ) ) &&
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d115      	bne.n	800db06 <FindSegmentationSession+0xaa>
         ( abcc_sSegSession[ bSession ].sIdentifiers.bCmdExt0 == ABCC_GetMsgCmdExt0( psMsg ) ) )
 800dada:	7bfa      	ldrb	r2, [r7, #15]
 800dadc:	4910      	ldr	r1, [pc, #64]	@ (800db20 <FindSegmentationSession+0xc4>)
 800dade:	4613      	mov	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	440b      	add	r3, r1
 800dae8:	331f      	adds	r3, #31
 800daea:	781a      	ldrb	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	7a9b      	ldrb	r3, [r3, #10]
         ( abcc_sSegSession[ bSession ].sIdentifiers.bCmd == ABCC_GetMsgCmdBits( psMsg ) ) &&
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d108      	bne.n	800db06 <FindSegmentationSession+0xaa>
      {
         psSegSession = &abcc_sSegSession[ bSession ];
 800daf4:	7bfa      	ldrb	r2, [r7, #15]
 800daf6:	4613      	mov	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4a08      	ldr	r2, [pc, #32]	@ (800db20 <FindSegmentationSession+0xc4>)
 800db00:	4413      	add	r3, r2
 800db02:	60bb      	str	r3, [r7, #8]
         break;
 800db04:	e005      	b.n	800db12 <FindSegmentationSession+0xb6>
   for( bSession = 0; bSession < ABCC_NUM_SEGMENTATION_SESSIONS; bSession++ )
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	3301      	adds	r3, #1
 800db0a:	73fb      	strb	r3, [r7, #15]
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d0ad      	beq.n	800da6e <FindSegmentationSession+0x12>
      }
   }
   ABCC_PORT_ExitCritical();

   return( psSegSession );
 800db12:	68bb      	ldr	r3, [r7, #8]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	24002d70 	.word	0x24002d70

0800db24 <FreeSegmentationSession>:
** Returns:
**    None.
**------------------------------------------------------------------------------
*/
static void FreeSegmentationSession( abcc_SegSessionType* psSegSession )
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
   ABCC_PORT_UseCritical();

   ABCC_PORT_EnterCritical();

   psSegSession->fInUse = FALSE;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	621a      	str	r2, [r3, #32]
   abcc_bSegNumUsedInst--;
 800db32:	4b06      	ldr	r3, [pc, #24]	@ (800db4c <FreeSegmentationSession+0x28>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	3b01      	subs	r3, #1
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	4b04      	ldr	r3, [pc, #16]	@ (800db4c <FreeSegmentationSession+0x28>)
 800db3c:	701a      	strb	r2, [r3, #0]

   ABCC_PORT_ExitCritical();
}
 800db3e:	bf00      	nop
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	24002d6c 	.word	0x24002d6c

0800db50 <GetNextDataBlock>:
** Returns:
**    None.
**------------------------------------------------------------------------------
*/
static void GetNextDataBlock( abcc_SegSessionType* psSegSession )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
   if( psSegSession->pnNext != NULL )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d015      	beq.n	800db8c <GetNextDataBlock+0x3c>
   {
      psSegSession->pxData = psSegSession->pnNext( (void*)psSegSession->pxObject,
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	6850      	ldr	r0, [r2, #4]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	3214      	adds	r2, #20
 800db6c:	4611      	mov	r1, r2
 800db6e:	4798      	blx	r3
 800db70:	4602      	mov	r2, r0
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	601a      	str	r2, [r3, #0]
                                                   &psSegSession->lDataBlockSize );

      if( psSegSession->pxData == NULL )
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d102      	bne.n	800db84 <GetNextDataBlock+0x34>
      {
         psSegSession->lDataBlockSize = 0;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	615a      	str	r2, [r3, #20]
      }

      psSegSession->lBytesLeft = psSegSession->lDataBlockSize;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	695a      	ldr	r2, [r3, #20]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	611a      	str	r2, [r3, #16]
   }
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <PrepareAndSendSegmentationRespMsg>:
** Returns:
**    None.
**------------------------------------------------------------------------------
*/
static void PrepareAndSendSegmentationRespMsg( abcc_SegSessionType* psSegSession, ABP_MsgType* psMsg, BOOL fFirstSeg )
{
 800db94:	b590      	push	{r4, r7, lr}
 800db96:	b087      	sub	sp, #28
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
   UINT8  bCmdExt1 = 0;
 800dba0:	2300      	movs	r3, #0
 800dba2:	75fb      	strb	r3, [r7, #23]
   UINT16 iDataSize = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	82bb      	strh	r3, [r7, #20]
   UINT16 iPayloadOffset;
   UINT16 iNumOctetsToCopy;

   if( fFirstSeg )
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d041      	beq.n	800dc32 <PrepareAndSendSegmentationRespMsg+0x9e>
   {
      bCmdExt1 = ABP_MSG_CMDEXT1_SEG_FIRST;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	75fb      	strb	r3, [r7, #23]

      /*
      ** If no payload pointer is provided, check if the user has implemented the callback
      */
      if( psSegSession->pxData == NULL )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d13b      	bne.n	800dc32 <PrepareAndSendSegmentationRespMsg+0x9e>
      {
         GetNextDataBlock( psSegSession );
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f7ff ffc8 	bl	800db50 <GetNextDataBlock>

   /*
   ** Fill the payload until the segment is full or until no more data is
   ** provided by the user.
   */
   while( ( iDataSize != ABCC_GetMaxMessageSize() ) && ( psSegSession->pxData ) &&
 800dbc0:	e037      	b.n	800dc32 <PrepareAndSendSegmentationRespMsg+0x9e>
      ( psSegSession->lBytesLeft != 0 ) )
   {
      /*
      ** Store current payload offset
      */
      iPayloadOffset = iDataSize;
 800dbc2:	8abb      	ldrh	r3, [r7, #20]
 800dbc4:	827b      	strh	r3, [r7, #18]

      if( ( iDataSize + psSegSession->lBytesLeft ) > ABCC_GetMaxMessageSize() )
 800dbc6:	8aba      	ldrh	r2, [r7, #20]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	18d4      	adds	r4, r2, r3
 800dbce:	f7fe f9c1 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	d904      	bls.n	800dbe2 <PrepareAndSendSegmentationRespMsg+0x4e>
      {
         iDataSize = ABCC_GetMaxMessageSize();
 800dbd8:	f7fe f9bc 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	82bb      	strh	r3, [r7, #20]
 800dbe0:	e005      	b.n	800dbee <PrepareAndSendSegmentationRespMsg+0x5a>
      }
      else
      {
         iDataSize += (UINT16)psSegSession->lBytesLeft;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	8abb      	ldrh	r3, [r7, #20]
 800dbea:	4413      	add	r3, r2
 800dbec:	82bb      	strh	r3, [r7, #20]
      }

      iNumOctetsToCopy = iDataSize - iPayloadOffset;
 800dbee:	8aba      	ldrh	r2, [r7, #20]
 800dbf0:	8a7b      	ldrh	r3, [r7, #18]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	823b      	strh	r3, [r7, #16]

      /*
      ** Copy payload from user buffer to response message buffer
      */
      ABCC_PORT_CopyOctets( ABCC_GetMsgDataPtr( psMsg ),
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	f103 020c 	add.w	r2, r3, #12
 800dbfc:	8a7b      	ldrh	r3, [r7, #18]
 800dbfe:	18d0      	adds	r0, r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6959      	ldr	r1, [r3, #20]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	691b      	ldr	r3, [r3, #16]
 800dc0c:	1acb      	subs	r3, r1, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	8a3a      	ldrh	r2, [r7, #16]
 800dc12:	4619      	mov	r1, r3
 800dc14:	f007 faa5 	bl	8015162 <memcpy>
                            iPayloadOffset,
                            psSegSession->pxData,
                            psSegSession->lDataBlockSize - psSegSession->lBytesLeft,
                            iNumOctetsToCopy );

      psSegSession->lBytesLeft -= iNumOctetsToCopy;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	691a      	ldr	r2, [r3, #16]
 800dc1c:	8a3b      	ldrh	r3, [r7, #16]
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	611a      	str	r2, [r3, #16]

      /*
      ** If the whole block is copied, check if the user has more data to send.
      */
      if( psSegSession->lBytesLeft == 0 )
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d102      	bne.n	800dc32 <PrepareAndSendSegmentationRespMsg+0x9e>
      {
         GetNextDataBlock( psSegSession );
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7ff ff8f 	bl	800db50 <GetNextDataBlock>
   while( ( iDataSize != ABCC_GetMaxMessageSize() ) && ( psSegSession->pxData ) &&
 800dc32:	f7fe f98f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800dc36:	4603      	mov	r3, r0
 800dc38:	461a      	mov	r2, r3
 800dc3a:	8abb      	ldrh	r3, [r7, #20]
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d007      	beq.n	800dc50 <PrepareAndSendSegmentationRespMsg+0xbc>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d003      	beq.n	800dc50 <PrepareAndSendSegmentationRespMsg+0xbc>
      ( psSegSession->lBytesLeft != 0 ) )
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	691b      	ldr	r3, [r3, #16]
   while( ( iDataSize != ABCC_GetMaxMessageSize() ) && ( psSegSession->pxData ) &&
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1b8      	bne.n	800dbc2 <PrepareAndSendSegmentationRespMsg+0x2e>
      }
   }

   if( psSegSession->lBytesLeft == 0 )
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	691b      	ldr	r3, [r3, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d103      	bne.n	800dc60 <PrepareAndSendSegmentationRespMsg+0xcc>
   {
      bCmdExt1 |= ABP_MSG_CMDEXT1_SEG_LAST;
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
 800dc5a:	f043 0302 	orr.w	r3, r3, #2
 800dc5e:	75fb      	strb	r3, [r7, #23]
   }

   /*
   ** Set segmentation bits
   */
   ABCC_SetMsgCmdExt1( psMsg, bCmdExt1 );
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	7dfa      	ldrb	r2, [r7, #23]
 800dc64:	72da      	strb	r2, [r3, #11]
   ABP_SetMsgResponse( psMsg, iDataSize );
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	7a1b      	ldrb	r3, [r3, #8]
 800dc6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	721a      	strb	r2, [r3, #8]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	8aba      	ldrh	r2, [r7, #20]
 800dc78:	801a      	strh	r2, [r3, #0]

   /*
   ** Set command extension 0 for every segment.
   */
   ABCC_SetMsgCmdExt0( psMsg, psSegSession->bRspCmdExt0 );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	7e1a      	ldrb	r2, [r3, #24]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	729a      	strb	r2, [r3, #10]

   ABCC_SendRespMsg( psMsg );
 800dc82:	68b8      	ldr	r0, [r7, #8]
 800dc84:	f7fe fd41 	bl	800c70a <ABCC_SendRespMsg>

   /*
   ** Check if last segment has been sent
   */
   if( psSegSession->lBytesLeft == 0 )
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	691b      	ldr	r3, [r3, #16]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10c      	bne.n	800dcaa <PrepareAndSendSegmentationRespMsg+0x116>
   {
      if( psSegSession->pnDone )
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <PrepareAndSendSegmentationRespMsg+0x110>
      {
         psSegSession->pnDone( (void*)psSegSession->pxObject );
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	6852      	ldr	r2, [r2, #4]
 800dca0:	4610      	mov	r0, r2
 800dca2:	4798      	blx	r3
      }
      FreeSegmentationSession( psSegSession );
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f7ff ff3d 	bl	800db24 <FreeSegmentationSession>
   }
}
 800dcaa:	bf00      	nop
 800dcac:	371c      	adds	r7, #28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd90      	pop	{r4, r7, pc}
	...

0800dcb4 <ABCC_SegmentationInit>:

void ABCC_SegmentationInit( void )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
   UINT8 bSession;

   abcc_bSegNumUsedInst = 0;
 800dcba:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf4 <ABCC_SegmentationInit+0x40>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	701a      	strb	r2, [r3, #0]
   for( bSession = 0; bSession < ABCC_NUM_SEGMENTATION_SESSIONS; bSession++ )
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	71fb      	strb	r3, [r7, #7]
 800dcc4:	e00c      	b.n	800dce0 <ABCC_SegmentationInit+0x2c>
   {
      abcc_sSegSession[ bSession ].fInUse = FALSE;
 800dcc6:	79fa      	ldrb	r2, [r7, #7]
 800dcc8:	490b      	ldr	r1, [pc, #44]	@ (800dcf8 <ABCC_SegmentationInit+0x44>)
 800dcca:	4613      	mov	r3, r2
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	440b      	add	r3, r1
 800dcd4:	3320      	adds	r3, #32
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
   for( bSession = 0; bSession < ABCC_NUM_SEGMENTATION_SESSIONS; bSession++ )
 800dcda:	79fb      	ldrb	r3, [r7, #7]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	71fb      	strb	r3, [r7, #7]
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d0ef      	beq.n	800dcc6 <ABCC_SegmentationInit+0x12>
   }
}
 800dce6:	bf00      	nop
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	24002d6c 	.word	0x24002d6c
 800dcf8:	24002d70 	.word	0x24002d70

0800dcfc <ABCC_HandleSegmentAck>:

   return( ABCC_EC_NO_ERROR );
}

BOOL ABCC_HandleSegmentAck( ABP_MsgType* psMsg )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b088      	sub	sp, #32
 800dd00:	af04      	add	r7, sp, #16
 800dd02:	6078      	str	r0, [r7, #4]
   abcc_SegSessionType* psSegSession;

   if( abcc_bSegNumUsedInst == 0 )
 800dd04:	4b1a      	ldr	r3, [pc, #104]	@ (800dd70 <ABCC_HandleSegmentAck+0x74>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <ABCC_HandleSegmentAck+0x14>
   {
      return( FALSE );
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	e02a      	b.n	800dd66 <ABCC_HandleSegmentAck+0x6a>
   }

   psSegSession = FindSegmentationSession( psMsg );
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff fea3 	bl	800da5c <FindSegmentationSession>
 800dd16:	60f8      	str	r0, [r7, #12]
   if( psSegSession == NULL )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d101      	bne.n	800dd22 <ABCC_HandleSegmentAck+0x26>
   {
      return( FALSE );
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e021      	b.n	800dd66 <ABCC_HandleSegmentAck+0x6a>
   }

   if( ABCC_GetMsgCmdExt1( psMsg ) & ABP_MSG_CMDEXT1_SEG_ABORT )
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	7adb      	ldrb	r3, [r3, #11]
 800dd26:	f003 0304 	and.w	r3, r3, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d015      	beq.n	800dd5a <ABCC_HandleSegmentAck+0x5e>
   {
      ABCC_LOG_WARNING( ABCC_EC_ERROR_RESP_SEGMENTATION,
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	791b      	ldrb	r3, [r3, #4]
 800dd32:	461a      	mov	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	791b      	ldrb	r3, [r3, #4]
 800dd38:	9302      	str	r3, [sp, #8]
 800dd3a:	4b0e      	ldr	r3, [pc, #56]	@ (800dd74 <ABCC_HandleSegmentAck+0x78>)
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	f240 138b 	movw	r3, #395	@ 0x18b
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	4b0c      	ldr	r3, [pc, #48]	@ (800dd78 <ABCC_HandleSegmentAck+0x7c>)
 800dd46:	2122      	movs	r1, #34	@ 0x22
 800dd48:	2002      	movs	r0, #2
 800dd4a:	f7ff fc7d 	bl	800d648 <ABCC_LogHandler>
            ABCC_GetMsgSourceId( psMsg ) );

      /*
      ** Abort segmentation by clearing number of bytes left and clear callback pointer
      */
      psSegSession->lBytesLeft = 0;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	611a      	str	r2, [r3, #16]
      psSegSession->pnNext = NULL;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	60da      	str	r2, [r3, #12]
   }

   PrepareAndSendSegmentationRespMsg( psSegSession, psMsg, FALSE );
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7ff ff18 	bl	800db94 <PrepareAndSendSegmentationRespMsg>

   return( TRUE );
 800dd64:	2301      	movs	r3, #1
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	24002d6c 	.word	0x24002d6c
 800dd74:	08016214 	.word	0x08016214
 800dd78:	08016198 	.word	0x08016198

0800dd7c <GetAdiIndex>:
** Returns:
**    AD_INVALID_ADI_INDEX      - Instance was not found.
**------------------------------------------------------------------------------
*/
static UINT16 GetAdiIndex( UINT16 iInstance )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	80fb      	strh	r3, [r7, #6]
   UINT16   iLow;
   UINT16   iMid;
   UINT16   iHigh;

   if( abcc_iNumAdi == 0 )
 800dd86:	4b23      	ldr	r3, [pc, #140]	@ (800de14 <GetAdiIndex+0x98>)
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d102      	bne.n	800dd94 <GetAdiIndex+0x18>
   {
      return( AD_INVALID_ADI_INDEX );
 800dd8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd92:	e038      	b.n	800de06 <GetAdiIndex+0x8a>
   }

   iLow = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	81fb      	strh	r3, [r7, #14]
   iHigh = abcc_iNumAdi - 1;
 800dd98:	4b1e      	ldr	r3, [pc, #120]	@ (800de14 <GetAdiIndex+0x98>)
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	81bb      	strh	r3, [r7, #12]

   while( iLow != iHigh )
 800dda0:	e01d      	b.n	800ddde <GetAdiIndex+0x62>
   {
      iMid = iLow + ( ( iHigh - iLow + 1 ) / 2 );
 800dda2:	89ba      	ldrh	r2, [r7, #12]
 800dda4:	89fb      	ldrh	r3, [r7, #14]
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	3301      	adds	r3, #1
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	da00      	bge.n	800ddb0 <GetAdiIndex+0x34>
 800ddae:	3301      	adds	r3, #1
 800ddb0:	105b      	asrs	r3, r3, #1
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	817b      	strh	r3, [r7, #10]
      if( abcc_psAdiEntry[ iMid ].iInstance > iInstance )
 800ddba:	4b17      	ldr	r3, [pc, #92]	@ (800de18 <GetAdiIndex+0x9c>)
 800ddbc:	6819      	ldr	r1, [r3, #0]
 800ddbe:	897a      	ldrh	r2, [r7, #10]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	009b      	lsls	r3, r3, #2
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	440b      	add	r3, r1
 800ddca:	881b      	ldrh	r3, [r3, #0]
 800ddcc:	88fa      	ldrh	r2, [r7, #6]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d203      	bcs.n	800ddda <GetAdiIndex+0x5e>
      {
         iHigh = iMid - 1;
 800ddd2:	897b      	ldrh	r3, [r7, #10]
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	81bb      	strh	r3, [r7, #12]
 800ddd8:	e001      	b.n	800ddde <GetAdiIndex+0x62>
      }
      else
      {
         iLow = iMid;
 800ddda:	897b      	ldrh	r3, [r7, #10]
 800dddc:	81fb      	strh	r3, [r7, #14]
   while( iLow != iHigh )
 800ddde:	89fa      	ldrh	r2, [r7, #14]
 800dde0:	89bb      	ldrh	r3, [r7, #12]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d1dd      	bne.n	800dda2 <GetAdiIndex+0x26>
      }
   }

   if( abcc_psAdiEntry[ iLow ].iInstance != iInstance )
 800dde6:	4b0c      	ldr	r3, [pc, #48]	@ (800de18 <GetAdiIndex+0x9c>)
 800dde8:	6819      	ldr	r1, [r3, #0]
 800ddea:	89fa      	ldrh	r2, [r7, #14]
 800ddec:	4613      	mov	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	440b      	add	r3, r1
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	88fa      	ldrh	r2, [r7, #6]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d002      	beq.n	800de04 <GetAdiIndex+0x88>
   {
      iLow = AD_INVALID_ADI_INDEX;
 800ddfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de02:	81fb      	strh	r3, [r7, #14]
   }

   return( iLow );
 800de04:	89fb      	ldrh	r3, [r7, #14]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	24002dac 	.word	0x24002dac
 800de18:	24002da4 	.word	0x24002da4

0800de1c <abcc_GetAdiMapSizeInBits>:

static UINT16 abcc_GetAdiMapSizeInBits( const AD_AdiEntryType* psAdiEntry, UINT8 bNumElem, UINT8 bElemStartIndex )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
 800de28:	4613      	mov	r3, r2
 800de2a:	70bb      	strb	r3, [r7, #2]
         iSize += ABCC_GetDataTypeSizeInBits( psAdiEntry->psStruct[ i ].bDataType );
      }
   }
#else
      (void)bElemStartIndex;
      iSize = ABCC_GetDataTypeSizeInBits( psAdiEntry->bDataType ) * bNumElem;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7a1b      	ldrb	r3, [r3, #8]
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe feed 	bl	800cc10 <ABCC_GetDataTypeSizeInBits>
 800de36:	4603      	mov	r3, r0
 800de38:	461a      	mov	r2, r3
 800de3a:	78fb      	ldrb	r3, [r7, #3]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	fb12 f303 	smulbb	r3, r2, r3
 800de42:	81fb      	strh	r3, [r7, #14]
#endif

   return( iSize );
 800de44:	89fb      	ldrh	r3, [r7, #14]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <abcc_FillMapExtCommand>:

static void abcc_FillMapExtCommand( ABP_MsgType16* psMsg16, UINT16 iAdi, UINT8 bAdiTotNumElem, UINT8 bElemStartIndex, UINT8 bNumElem, UINT8 bDataType )
{
 800de4e:	b480      	push	{r7}
 800de50:	b083      	sub	sp, #12
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	4608      	mov	r0, r1
 800de58:	4611      	mov	r1, r2
 800de5a:	461a      	mov	r2, r3
 800de5c:	4603      	mov	r3, r0
 800de5e:	807b      	strh	r3, [r7, #2]
 800de60:	460b      	mov	r3, r1
 800de62:	707b      	strb	r3, [r7, #1]
 800de64:	4613      	mov	r3, r2
 800de66:	703b      	strb	r3, [r7, #0]
   psMsg16->aiData[ 0 ] = iTOiLe( iAdi );                               /* ADI Instance number. */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	887a      	ldrh	r2, [r7, #2]
 800de6c:	819a      	strh	r2, [r3, #12]
   ABCC_SetLowAddrOct( psMsg16->aiData[ 1 ], bAdiTotNumElem );          /* Total number of elements in ADI. */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	89db      	ldrh	r3, [r3, #14]
 800de72:	b29b      	uxth	r3, r3
 800de74:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800de78:	b29a      	uxth	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	81da      	strh	r2, [r3, #14]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	89db      	ldrh	r3, [r3, #14]
 800de82:	b29a      	uxth	r2, r3
 800de84:	787b      	ldrb	r3, [r7, #1]
 800de86:	b29b      	uxth	r3, r3
 800de88:	4313      	orrs	r3, r2
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	81da      	strh	r2, [r3, #14]
   ABCC_SetHighAddrOct( psMsg16->aiData[ 1 ], bElemStartIndex );
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	89db      	ldrh	r3, [r3, #14]
 800de94:	b29b      	uxth	r3, r3
 800de96:	b2db      	uxtb	r3, r3
 800de98:	b29a      	uxth	r2, r3
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	81da      	strh	r2, [r3, #14]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	89db      	ldrh	r3, [r3, #14]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	b21a      	sxth	r2, r3
 800dea6:	783b      	ldrb	r3, [r7, #0]
 800dea8:	b21b      	sxth	r3, r3
 800deaa:	021b      	lsls	r3, r3, #8
 800deac:	b21b      	sxth	r3, r3
 800deae:	4313      	orrs	r3, r2
 800deb0:	b21b      	sxth	r3, r3
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	81da      	strh	r2, [r3, #14]
   ABCC_SetLowAddrOct( psMsg16->aiData[ 2 ], bNumElem );
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	8a1b      	ldrh	r3, [r3, #16]
 800debc:	b29b      	uxth	r3, r3
 800debe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	821a      	strh	r2, [r3, #16]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	8a1b      	ldrh	r3, [r3, #16]
 800decc:	b29a      	uxth	r2, r3
 800dece:	7c3b      	ldrb	r3, [r7, #16]
 800ded0:	b29b      	uxth	r3, r3
 800ded2:	4313      	orrs	r3, r2
 800ded4:	b29a      	uxth	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	821a      	strh	r2, [r3, #16]
   ABCC_SetHighAddrOct( psMsg16->aiData[ 2 ], 1 );                      /* Number of type descriptors. */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	8a1b      	ldrh	r3, [r3, #16]
 800dede:	b29b      	uxth	r3, r3
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	b29a      	uxth	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	821a      	strh	r2, [r3, #16]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	8a1b      	ldrh	r3, [r3, #16]
 800deec:	b29b      	uxth	r3, r3
 800deee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	821a      	strh	r2, [r3, #16]
   ABCC_SetLowAddrOct( psMsg16->aiData[ 3 ], bDataType );               /* ADI element data type. */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	8a5b      	ldrh	r3, [r3, #18]
 800defc:	b29b      	uxth	r3, r3
 800defe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800df02:	b29a      	uxth	r2, r3
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	825a      	strh	r2, [r3, #18]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	8a5b      	ldrh	r3, [r3, #18]
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	7d3b      	ldrb	r3, [r7, #20]
 800df10:	b29b      	uxth	r3, r3
 800df12:	4313      	orrs	r3, r2
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	825a      	strh	r2, [r3, #18]
   psMsg16->sHeader.iDataSize = iTOiLe( 7 );                            /* The number of used octets in aiData. (The bytes written below). */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f042 0207 	orr.w	r2, r2, #7
 800df22:	701a      	strb	r2, [r3, #0]
 800df24:	2200      	movs	r2, #0
 800df26:	705a      	strb	r2, [r3, #1]
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <ABCC_SetupInit>:

void ABCC_SetupInit( void )
{
 800df34:	b480      	push	{r7}
 800df36:	af00      	add	r7, sp, #0
   abcc_sFwVersion.bMajor = 0xFF;
 800df38:	4b19      	ldr	r3, [pc, #100]	@ (800dfa0 <ABCC_SetupInit+0x6c>)
 800df3a:	22ff      	movs	r2, #255	@ 0xff
 800df3c:	701a      	strb	r2, [r3, #0]
   abcc_sFwVersion.bMinor = 0xFF;
 800df3e:	4b18      	ldr	r3, [pc, #96]	@ (800dfa0 <ABCC_SetupInit+0x6c>)
 800df40:	22ff      	movs	r2, #255	@ 0xff
 800df42:	705a      	strb	r2, [r3, #1]
   abcc_sFwVersion.bBuild = 0xFF;
 800df44:	4b16      	ldr	r3, [pc, #88]	@ (800dfa0 <ABCC_SetupInit+0x6c>)
 800df46:	22ff      	movs	r2, #255	@ 0xff
 800df48:	709a      	strb	r2, [r3, #2]
   abcc_iModuleType = 0xFFFF;
 800df4a:	4b16      	ldr	r3, [pc, #88]	@ (800dfa4 <ABCC_SetupInit+0x70>)
 800df4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df50:	801a      	strh	r2, [r3, #0]
   abcc_iNetworkType = 0xFFFF;
 800df52:	4b15      	ldr	r3, [pc, #84]	@ (800dfa8 <ABCC_SetupInit+0x74>)
 800df54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df58:	801a      	strh	r2, [r3, #0]
   abcc_eNetFormat = NET_UNKNOWN;
 800df5a:	4b14      	ldr	r3, [pc, #80]	@ (800dfac <ABCC_SetupInit+0x78>)
 800df5c:	2202      	movs	r2, #2
 800df5e:	701a      	strb	r2, [r3, #0]
   abcc_eParameterSupport = PARAMETER_UNKNOWN;
 800df60:	4b13      	ldr	r3, [pc, #76]	@ (800dfb0 <ABCC_SetupInit+0x7c>)
 800df62:	2202      	movs	r2, #2
 800df64:	701a      	strb	r2, [r3, #0]

   abcc_psAdiEntry     = NULL;
 800df66:	4b13      	ldr	r3, [pc, #76]	@ (800dfb4 <ABCC_SetupInit+0x80>)
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
   abcc_psDefaultMap   = NULL;
 800df6c:	4b12      	ldr	r3, [pc, #72]	@ (800dfb8 <ABCC_SetupInit+0x84>)
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
   abcc_iNumAdi = 0;
 800df72:	4b12      	ldr	r3, [pc, #72]	@ (800dfbc <ABCC_SetupInit+0x88>)
 800df74:	2200      	movs	r2, #0
 800df76:	801a      	strh	r2, [r3, #0]
   abcc_iMappingIndex  = 0;
 800df78:	4b11      	ldr	r3, [pc, #68]	@ (800dfc0 <ABCC_SetupInit+0x8c>)
 800df7a:	2200      	movs	r2, #0
 800df7c:	801a      	strh	r2, [r3, #0]
   abcc_iPdReadSize    = 0;
 800df7e:	4b11      	ldr	r3, [pc, #68]	@ (800dfc4 <ABCC_SetupInit+0x90>)
 800df80:	2200      	movs	r2, #0
 800df82:	801a      	strh	r2, [r3, #0]
   abcc_iPdWriteSize   = 0;
 800df84:	4b10      	ldr	r3, [pc, #64]	@ (800dfc8 <ABCC_SetupInit+0x94>)
 800df86:	2200      	movs	r2, #0
 800df88:	801a      	strh	r2, [r3, #0]
   abcc_iPdWriteBitSize  = 0;
 800df8a:	4b10      	ldr	r3, [pc, #64]	@ (800dfcc <ABCC_SetupInit+0x98>)
 800df8c:	2200      	movs	r2, #0
 800df8e:	801a      	strh	r2, [r3, #0]
   abcc_iPdReadBitSize   = 0;
 800df90:	4b0f      	ldr	r3, [pc, #60]	@ (800dfd0 <ABCC_SetupInit+0x9c>)
 800df92:	2200      	movs	r2, #0
 800df94:	801a      	strh	r2, [r3, #0]
}
 800df96:	bf00      	nop
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr
 800dfa0:	24002d98 	.word	0x24002d98
 800dfa4:	24002d94 	.word	0x24002d94
 800dfa8:	24002d96 	.word	0x24002d96
 800dfac:	24002d9b 	.word	0x24002d9b
 800dfb0:	24002d9c 	.word	0x24002d9c
 800dfb4:	24002da4 	.word	0x24002da4
 800dfb8:	24002da8 	.word	0x24002da8
 800dfbc:	24002dac 	.word	0x24002dac
 800dfc0:	24002dae 	.word	0x24002dae
 800dfc4:	24002db0 	.word	0x24002db0
 800dfc8:	24002db2 	.word	0x24002db2
 800dfcc:	24002db4 	.word	0x24002db4
 800dfd0:	24002db6 	.word	0x24002db6

0800dfd4 <DataFormatCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType DataFormatCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af02      	add	r7, sp, #8
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1,
 800dfde:	f7fe fc7d 	bl	800c8dc <ABCC_GetNewSourceId>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	2303      	movs	r3, #3
 800dfe8:	2201      	movs	r2, #1
 800dfea:	2103      	movs	r1, #3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7fe fc96 	bl	800c91e <ABCC_GetAttribute>
                      ABP_NW_IA_DATA_FORMAT, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <ABCC_IsFirstCommandPending>:

BOOL ABCC_IsFirstCommandPending( void )
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
   return( abcc_fFirstCommandPending );
 800e000:	4b03      	ldr	r3, [pc, #12]	@ (800e010 <ABCC_IsFirstCommandPending+0x14>)
 800e002:	681b      	ldr	r3, [r3, #0]
}
 800e004:	4618      	mov	r0, r3
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	24002da0 	.word	0x24002da0

0800e014 <DataFormatResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType DataFormatResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b088      	sub	sp, #32
 800e018:	af04      	add	r7, sp, #16
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
   UINT8 bFormat;

   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7fe fde0 	bl	800cbe4 <ABCC_VerifyMessage>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d011      	beq.n	800e04e <DataFormatResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	7b1b      	ldrb	r3, [r3, #12]
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	7b1b      	ldrb	r3, [r3, #12]
 800e034:	9302      	str	r3, [sp, #8]
 800e036:	4b2f      	ldr	r3, [pc, #188]	@ (800e0f4 <DataFormatResp+0xe0>)
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	f44f 73a3 	mov.w	r3, #326	@ 0x146
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	4b2d      	ldr	r3, [pc, #180]	@ (800e0f8 <DataFormatResp+0xe4>)
 800e042:	2108      	movs	r1, #8
 800e044:	2002      	movs	r0, #2
 800e046:	f7ff faff 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e04a:	2302      	movs	r3, #2
 800e04c:	e04e      	b.n	800e0ec <DataFormatResp+0xd8>
   }

   abcc_fFirstCommandPending = FALSE;
 800e04e:	4b2b      	ldr	r3, [pc, #172]	@ (800e0fc <DataFormatResp+0xe8>)
 800e050:	2200      	movs	r2, #0
 800e052:	601a      	str	r2, [r3, #0]

   ABCC_GetMsgData8( psMsg, &bFormat, 0 );
 800e054:	f7fd ff7e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d111      	bne.n	800e082 <DataFormatResp+0x6e>
 800e05e:	f7fd ff79 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e062:	4603      	mov	r3, r0
 800e064:	9303      	str	r3, [sp, #12]
 800e066:	2301      	movs	r3, #1
 800e068:	9302      	str	r3, [sp, #8]
 800e06a:	4b25      	ldr	r3, [pc, #148]	@ (800e100 <DataFormatResp+0xec>)
 800e06c:	9301      	str	r3, [sp, #4]
 800e06e:	f240 134f 	movw	r3, #335	@ 0x14f
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	4b20      	ldr	r3, [pc, #128]	@ (800e0f8 <DataFormatResp+0xe4>)
 800e076:	2201      	movs	r2, #1
 800e078:	2127      	movs	r1, #39	@ 0x27
 800e07a:	2001      	movs	r0, #1
 800e07c:	f7ff fae4 	bl	800d648 <ABCC_LogHandler>
 800e080:	e007      	b.n	800e092 <DataFormatResp+0x7e>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	330c      	adds	r3, #12
 800e086:	f107 010f 	add.w	r1, r7, #15
 800e08a:	2200      	movs	r2, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fe fef0 	bl	800ce72 <ABCC_GetData8>
   switch( bFormat )
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d002      	beq.n	800e09e <DataFormatResp+0x8a>
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d004      	beq.n	800e0a6 <DataFormatResp+0x92>
 800e09c:	e007      	b.n	800e0ae <DataFormatResp+0x9a>
   {
   case ABP_NW_DATA_FORMAT_LSB_FIRST:
      abcc_eNetFormat = NET_LITTLEENDIAN;
 800e09e:	4b19      	ldr	r3, [pc, #100]	@ (800e104 <DataFormatResp+0xf0>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	701a      	strb	r2, [r3, #0]
      break;
 800e0a4:	e013      	b.n	800e0ce <DataFormatResp+0xba>
   case ABP_NW_DATA_FORMAT_MSB_FIRST:
      abcc_eNetFormat = NET_BIGENDIAN;
 800e0a6:	4b17      	ldr	r3, [pc, #92]	@ (800e104 <DataFormatResp+0xf0>)
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	701a      	strb	r2, [r3, #0]
      break;
 800e0ac:	e00f      	b.n	800e0ce <DataFormatResp+0xba>
   default:
      ABCC_LOG_ERROR( ABCC_EC_UNKNOWN_ENDIAN,
 800e0ae:	4b15      	ldr	r3, [pc, #84]	@ (800e104 <DataFormatResp+0xf0>)
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	9302      	str	r3, [sp, #8]
 800e0b8:	4b13      	ldr	r3, [pc, #76]	@ (800e108 <DataFormatResp+0xf4>)
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f240 1359 	movw	r3, #345	@ 0x159
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <DataFormatResp+0xe4>)
 800e0c4:	212a      	movs	r1, #42	@ 0x2a
 800e0c6:	2001      	movs	r0, #1
 800e0c8:	f7ff fabe 	bl	800d648 <ABCC_LogHandler>
         (UINT32)abcc_eNetFormat,
         "Unknown endian %" PRIu8 "\n",
         bFormat );
      break;
 800e0cc:	bf00      	nop
   }
   ABCC_LOG_INFO( "RSP MSG_DATA_FORMAT: %d\n", abcc_eNetFormat );
 800e0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e104 <DataFormatResp+0xf0>)
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	9302      	str	r3, [sp, #8]
 800e0d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e10c <DataFormatResp+0xf8>)
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	f240 135f 	movw	r3, #351	@ 0x15f
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	4b06      	ldr	r3, [pc, #24]	@ (800e0f8 <DataFormatResp+0xe4>)
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	2003      	movs	r0, #3
 800e0e6:	f7ff faaf 	bl	800d648 <ABCC_LogHandler>
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	0801625c 	.word	0x0801625c
 800e0f8:	0801624c 	.word	0x0801624c
 800e0fc:	24002da0 	.word	0x24002da0
 800e100:	0801627c 	.word	0x0801627c
 800e104:	24002d9b 	.word	0x24002d9b
 800e108:	080162a8 	.word	0x080162a8
 800e10c:	080162c0 	.word	0x080162c0

0800e110 <ParamSupportCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType ParamSupportCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af02      	add	r7, sp, #8
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1,
 800e11a:	f7fe fbdf 	bl	800c8dc <ABCC_GetNewSourceId>
 800e11e:	4603      	mov	r3, r0
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	2304      	movs	r3, #4
 800e124:	2201      	movs	r2, #1
 800e126:	2103      	movs	r1, #3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7fe fbf8 	bl	800c91e <ABCC_GetAttribute>
                      ABP_NW_IA_PARAM_SUPPORT, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800e12e:	2300      	movs	r3, #0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <ParamSupportResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType ParamSupportResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af04      	add	r7, sp, #16
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
   UINT8 bParamSupport;
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f7fe fd4e 	bl	800cbe4 <ABCC_VerifyMessage>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d011      	beq.n	800e172 <ParamSupportResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	7b1b      	ldrb	r3, [r3, #12]
 800e152:	461a      	mov	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7b1b      	ldrb	r3, [r3, #12]
 800e158:	9302      	str	r3, [sp, #8]
 800e15a:	4b24      	ldr	r3, [pc, #144]	@ (800e1ec <ParamSupportResp+0xb4>)
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	f240 1381 	movw	r3, #385	@ 0x181
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4b22      	ldr	r3, [pc, #136]	@ (800e1f0 <ParamSupportResp+0xb8>)
 800e166:	2108      	movs	r1, #8
 800e168:	2002      	movs	r0, #2
 800e16a:	f7ff fa6d 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e16e:	2302      	movs	r3, #2
 800e170:	e037      	b.n	800e1e2 <ParamSupportResp+0xaa>
   }

   ABCC_GetMsgData8( psMsg, &bParamSupport, 0 );
 800e172:	f7fd feef 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d111      	bne.n	800e1a0 <ParamSupportResp+0x68>
 800e17c:	f7fd feea 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e180:	4603      	mov	r3, r0
 800e182:	9303      	str	r3, [sp, #12]
 800e184:	2301      	movs	r3, #1
 800e186:	9302      	str	r3, [sp, #8]
 800e188:	4b1a      	ldr	r3, [pc, #104]	@ (800e1f4 <ParamSupportResp+0xbc>)
 800e18a:	9301      	str	r3, [sp, #4]
 800e18c:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	4b17      	ldr	r3, [pc, #92]	@ (800e1f0 <ParamSupportResp+0xb8>)
 800e194:	2201      	movs	r2, #1
 800e196:	2127      	movs	r1, #39	@ 0x27
 800e198:	2001      	movs	r0, #1
 800e19a:	f7ff fa55 	bl	800d648 <ABCC_LogHandler>
 800e19e:	e007      	b.n	800e1b0 <ParamSupportResp+0x78>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	330c      	adds	r3, #12
 800e1a4:	f107 010f 	add.w	r1, r7, #15
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fe fe61 	bl	800ce72 <ABCC_GetData8>
   if( bParamSupport == FALSE )
 800e1b0:	7bfb      	ldrb	r3, [r7, #15]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d103      	bne.n	800e1be <ParamSupportResp+0x86>
   {
      abcc_eParameterSupport = NOT_PARAMETER_SUPPORT;
 800e1b6:	4b10      	ldr	r3, [pc, #64]	@ (800e1f8 <ParamSupportResp+0xc0>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	701a      	strb	r2, [r3, #0]
 800e1bc:	e002      	b.n	800e1c4 <ParamSupportResp+0x8c>
   }
   else
   {
      abcc_eParameterSupport = PARAMETER_SUPPORT;
 800e1be:	4b0e      	ldr	r3, [pc, #56]	@ (800e1f8 <ParamSupportResp+0xc0>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]
   }
   ABCC_LOG_INFO( "RSP MSG_GET_PARAM_SUPPORT: %d\n", abcc_eParameterSupport );
 800e1c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e1f8 <ParamSupportResp+0xc0>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e1fc <ParamSupportResp+0xc4>)
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	f240 1391 	movw	r3, #401	@ 0x191
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	4b06      	ldr	r3, [pc, #24]	@ (800e1f0 <ParamSupportResp+0xb8>)
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	2100      	movs	r1, #0
 800e1da:	2003      	movs	r0, #3
 800e1dc:	f7ff fa34 	bl	800d648 <ABCC_LogHandler>
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	0801625c 	.word	0x0801625c
 800e1f0:	0801624c 	.word	0x0801624c
 800e1f4:	0801627c 	.word	0x0801627c
 800e1f8:	24002d9c 	.word	0x24002d9c
 800e1fc:	080162dc 	.word	0x080162dc

0800e200 <ModuleTypeCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType ModuleTypeCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af02      	add	r7, sp, #8
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_ANB, 1,
 800e20a:	f7fe fb67 	bl	800c8dc <ABCC_GetNewSourceId>
 800e20e:	4603      	mov	r3, r0
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	2301      	movs	r3, #1
 800e214:	2201      	movs	r2, #1
 800e216:	2101      	movs	r1, #1
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f7fe fb80 	bl	800c91e <ABCC_GetAttribute>
                      ABP_ANB_IA_MODULE_TYPE, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <ModuleTypeResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType ModuleTypeResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7fe fcd6 	bl	800cbe4 <ABCC_VerifyMessage>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d011      	beq.n	800e262 <ModuleTypeResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7b1b      	ldrb	r3, [r3, #12]
 800e242:	461a      	mov	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	7b1b      	ldrb	r3, [r3, #12]
 800e248:	9302      	str	r3, [sp, #8]
 800e24a:	4b1e      	ldr	r3, [pc, #120]	@ (800e2c4 <ModuleTypeResp+0x9c>)
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c8 <ModuleTypeResp+0xa0>)
 800e256:	2108      	movs	r1, #8
 800e258:	2002      	movs	r0, #2
 800e25a:	f7ff f9f5 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e25e:	2302      	movs	r3, #2
 800e260:	e02c      	b.n	800e2bc <ModuleTypeResp+0x94>
   }

   ABCC_GetMsgData16( psMsg, &abcc_iModuleType, 0 );
 800e262:	f7fd fe77 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e266:	4603      	mov	r3, r0
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d811      	bhi.n	800e290 <ModuleTypeResp+0x68>
 800e26c:	f7fd fe72 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e270:	4603      	mov	r3, r0
 800e272:	9303      	str	r3, [sp, #12]
 800e274:	2302      	movs	r3, #2
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	4b14      	ldr	r3, [pc, #80]	@ (800e2cc <ModuleTypeResp+0xa4>)
 800e27a:	9301      	str	r3, [sp, #4]
 800e27c:	f240 13b9 	movw	r3, #441	@ 0x1b9
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	4b11      	ldr	r3, [pc, #68]	@ (800e2c8 <ModuleTypeResp+0xa0>)
 800e284:	2202      	movs	r2, #2
 800e286:	2127      	movs	r1, #39	@ 0x27
 800e288:	2001      	movs	r0, #1
 800e28a:	f7ff f9dd 	bl	800d648 <ABCC_LogHandler>
 800e28e:	e006      	b.n	800e29e <ModuleTypeResp+0x76>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	330c      	adds	r3, #12
 800e294:	2200      	movs	r2, #0
 800e296:	490e      	ldr	r1, [pc, #56]	@ (800e2d0 <ModuleTypeResp+0xa8>)
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fe fe10 	bl	800cebe <ABCC_GetData16>
   ABCC_LOG_INFO( "RSP MSG_GET_MODULE_ID: 0x%x\n", abcc_iModuleType );
 800e29e:	4b0c      	ldr	r3, [pc, #48]	@ (800e2d0 <ModuleTypeResp+0xa8>)
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	9302      	str	r3, [sp, #8]
 800e2a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e2d4 <ModuleTypeResp+0xac>)
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	4b06      	ldr	r3, [pc, #24]	@ (800e2c8 <ModuleTypeResp+0xa0>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	2003      	movs	r0, #3
 800e2b6:	f7ff f9c7 	bl	800d648 <ABCC_LogHandler>
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3708      	adds	r7, #8
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	0801625c 	.word	0x0801625c
 800e2c8:	0801624c 	.word	0x0801624c
 800e2cc:	0801627c 	.word	0x0801627c
 800e2d0:	24002d94 	.word	0x24002d94
 800e2d4:	080162fc 	.word	0x080162fc

0800e2d8 <NetworkTypeCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType NetworkTypeCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af02      	add	r7, sp, #8
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1,
 800e2e2:	f7fe fafb 	bl	800c8dc <ABCC_GetNewSourceId>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	2103      	movs	r1, #3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f7fe fb14 	bl	800c91e <ABCC_GetAttribute>
                      ABP_NW_IA_NW_TYPE, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3708      	adds	r7, #8
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <NetworkTypeResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType NetworkTypeResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af04      	add	r7, sp, #16
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7fe fc6a 	bl	800cbe4 <ABCC_VerifyMessage>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d011      	beq.n	800e33a <NetworkTypeResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	7b1b      	ldrb	r3, [r3, #12]
 800e31a:	461a      	mov	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7b1b      	ldrb	r3, [r3, #12]
 800e320:	9302      	str	r3, [sp, #8]
 800e322:	4b1e      	ldr	r3, [pc, #120]	@ (800e39c <NetworkTypeResp+0x9c>)
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	f240 13db 	movw	r3, #475	@ 0x1db
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3a0 <NetworkTypeResp+0xa0>)
 800e32e:	2108      	movs	r1, #8
 800e330:	2002      	movs	r0, #2
 800e332:	f7ff f989 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e336:	2302      	movs	r3, #2
 800e338:	e02c      	b.n	800e394 <NetworkTypeResp+0x94>
   }

   ABCC_GetMsgData16( psMsg, &abcc_iNetworkType, 0 );
 800e33a:	f7fd fe0b 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b01      	cmp	r3, #1
 800e342:	d811      	bhi.n	800e368 <NetworkTypeResp+0x68>
 800e344:	f7fd fe06 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e348:	4603      	mov	r3, r0
 800e34a:	9303      	str	r3, [sp, #12]
 800e34c:	2302      	movs	r3, #2
 800e34e:	9302      	str	r3, [sp, #8]
 800e350:	4b14      	ldr	r3, [pc, #80]	@ (800e3a4 <NetworkTypeResp+0xa4>)
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800e358:	9300      	str	r3, [sp, #0]
 800e35a:	4b11      	ldr	r3, [pc, #68]	@ (800e3a0 <NetworkTypeResp+0xa0>)
 800e35c:	2202      	movs	r2, #2
 800e35e:	2127      	movs	r1, #39	@ 0x27
 800e360:	2001      	movs	r0, #1
 800e362:	f7ff f971 	bl	800d648 <ABCC_LogHandler>
 800e366:	e006      	b.n	800e376 <NetworkTypeResp+0x76>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	330c      	adds	r3, #12
 800e36c:	2200      	movs	r2, #0
 800e36e:	490e      	ldr	r1, [pc, #56]	@ (800e3a8 <NetworkTypeResp+0xa8>)
 800e370:	4618      	mov	r0, r3
 800e372:	f7fe fda4 	bl	800cebe <ABCC_GetData16>
   ABCC_LOG_INFO( "RSP MSG_GET_NETWORK_ID: 0x%x\n", abcc_iNetworkType );
 800e376:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a8 <NetworkTypeResp+0xa8>)
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	9302      	str	r3, [sp, #8]
 800e37c:	4b0b      	ldr	r3, [pc, #44]	@ (800e3ac <NetworkTypeResp+0xac>)
 800e37e:	9301      	str	r3, [sp, #4]
 800e380:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	4b06      	ldr	r3, [pc, #24]	@ (800e3a0 <NetworkTypeResp+0xa0>)
 800e388:	2200      	movs	r2, #0
 800e38a:	2100      	movs	r1, #0
 800e38c:	2003      	movs	r0, #3
 800e38e:	f7ff f95b 	bl	800d648 <ABCC_LogHandler>
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	0801625c 	.word	0x0801625c
 800e3a0:	0801624c 	.word	0x0801624c
 800e3a4:	0801627c 	.word	0x0801627c
 800e3a8:	24002d96 	.word	0x24002d96
 800e3ac:	0801631c 	.word	0x0801631c

0800e3b0 <FirmwareVersionCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType FirmwareVersionCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af02      	add	r7, sp, #8
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_ANB, 1,
 800e3ba:	f7fe fa8f 	bl	800c8dc <ABCC_GetNewSourceId>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7fe faa8 	bl	800c91e <ABCC_GetAttribute>
                      ABP_ANB_IA_FW_VERSION, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3708      	adds	r7, #8
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <FirmwareVersionResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType FirmwareVersionResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af06      	add	r7, sp, #24
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7fe fbfe 	bl	800cbe4 <ABCC_VerifyMessage>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d011      	beq.n	800e412 <FirmwareVersionResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	7b1b      	ldrb	r3, [r3, #12]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	7b1b      	ldrb	r3, [r3, #12]
 800e3f8:	9302      	str	r3, [sp, #8]
 800e3fa:	4b40      	ldr	r3, [pc, #256]	@ (800e4fc <FirmwareVersionResp+0x124>)
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	4b3e      	ldr	r3, [pc, #248]	@ (800e500 <FirmwareVersionResp+0x128>)
 800e406:	2108      	movs	r1, #8
 800e408:	2002      	movs	r0, #2
 800e40a:	f7ff f91d 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e40e:	2302      	movs	r3, #2
 800e410:	e070      	b.n	800e4f4 <FirmwareVersionResp+0x11c>
   }

   ABCC_GetMsgData8( psMsg, &abcc_sFwVersion.bMajor, 0 );
 800e412:	f7fd fd9f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d111      	bne.n	800e440 <FirmwareVersionResp+0x68>
 800e41c:	f7fd fd9a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e420:	4603      	mov	r3, r0
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	2301      	movs	r3, #1
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	4b36      	ldr	r3, [pc, #216]	@ (800e504 <FirmwareVersionResp+0x12c>)
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	f240 230b 	movw	r3, #523	@ 0x20b
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	4b33      	ldr	r3, [pc, #204]	@ (800e500 <FirmwareVersionResp+0x128>)
 800e434:	2201      	movs	r2, #1
 800e436:	2127      	movs	r1, #39	@ 0x27
 800e438:	2001      	movs	r0, #1
 800e43a:	f7ff f905 	bl	800d648 <ABCC_LogHandler>
 800e43e:	e006      	b.n	800e44e <FirmwareVersionResp+0x76>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	330c      	adds	r3, #12
 800e444:	2200      	movs	r2, #0
 800e446:	4930      	ldr	r1, [pc, #192]	@ (800e508 <FirmwareVersionResp+0x130>)
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe fd12 	bl	800ce72 <ABCC_GetData8>
   ABCC_GetMsgData8( psMsg, &abcc_sFwVersion.bMinor, 1 );
 800e44e:	f7fd fd81 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e452:	4603      	mov	r3, r0
 800e454:	2b01      	cmp	r3, #1
 800e456:	d811      	bhi.n	800e47c <FirmwareVersionResp+0xa4>
 800e458:	f7fd fd7c 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e45c:	4603      	mov	r3, r0
 800e45e:	9303      	str	r3, [sp, #12]
 800e460:	2302      	movs	r3, #2
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	4b27      	ldr	r3, [pc, #156]	@ (800e504 <FirmwareVersionResp+0x12c>)
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	4b24      	ldr	r3, [pc, #144]	@ (800e500 <FirmwareVersionResp+0x128>)
 800e470:	2202      	movs	r2, #2
 800e472:	2127      	movs	r1, #39	@ 0x27
 800e474:	2001      	movs	r0, #1
 800e476:	f7ff f8e7 	bl	800d648 <ABCC_LogHandler>
 800e47a:	e006      	b.n	800e48a <FirmwareVersionResp+0xb2>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	330c      	adds	r3, #12
 800e480:	2201      	movs	r2, #1
 800e482:	4922      	ldr	r1, [pc, #136]	@ (800e50c <FirmwareVersionResp+0x134>)
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fcf4 	bl	800ce72 <ABCC_GetData8>
   ABCC_GetMsgData8( psMsg, &abcc_sFwVersion.bBuild, 2 );
 800e48a:	f7fd fd63 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b02      	cmp	r3, #2
 800e492:	d811      	bhi.n	800e4b8 <FirmwareVersionResp+0xe0>
 800e494:	f7fd fd5e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800e498:	4603      	mov	r3, r0
 800e49a:	9303      	str	r3, [sp, #12]
 800e49c:	2303      	movs	r3, #3
 800e49e:	9302      	str	r3, [sp, #8]
 800e4a0:	4b18      	ldr	r3, [pc, #96]	@ (800e504 <FirmwareVersionResp+0x12c>)
 800e4a2:	9301      	str	r3, [sp, #4]
 800e4a4:	f240 230d 	movw	r3, #525	@ 0x20d
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	4b15      	ldr	r3, [pc, #84]	@ (800e500 <FirmwareVersionResp+0x128>)
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	2127      	movs	r1, #39	@ 0x27
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f7ff f8c9 	bl	800d648 <ABCC_LogHandler>
 800e4b6:	e006      	b.n	800e4c6 <FirmwareVersionResp+0xee>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	330c      	adds	r3, #12
 800e4bc:	2202      	movs	r2, #2
 800e4be:	4914      	ldr	r1, [pc, #80]	@ (800e510 <FirmwareVersionResp+0x138>)
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fcd6 	bl	800ce72 <ABCC_GetData8>
   ABCC_LOG_INFO( "RSP MSG_GET_FW_VERSION: %" PRIu8 ".%" PRIu8 ".%" PRIu8 "\n",
 800e4c6:	4b10      	ldr	r3, [pc, #64]	@ (800e508 <FirmwareVersionResp+0x130>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e508 <FirmwareVersionResp+0x130>)
 800e4ce:	785b      	ldrb	r3, [r3, #1]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e508 <FirmwareVersionResp+0x130>)
 800e4d4:	789b      	ldrb	r3, [r3, #2]
 800e4d6:	9304      	str	r3, [sp, #16]
 800e4d8:	9103      	str	r1, [sp, #12]
 800e4da:	9202      	str	r2, [sp, #8]
 800e4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e514 <FirmwareVersionResp+0x13c>)
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	f240 230e 	movw	r3, #526	@ 0x20e
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	4b06      	ldr	r3, [pc, #24]	@ (800e500 <FirmwareVersionResp+0x128>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	2003      	movs	r0, #3
 800e4ee:	f7ff f8ab 	bl	800d648 <ABCC_LogHandler>
         abcc_sFwVersion.bMajor,
         abcc_sFwVersion.bMinor,
         abcc_sFwVersion.bBuild );
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3708      	adds	r7, #8
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	0801625c 	.word	0x0801625c
 800e500:	0801624c 	.word	0x0801624c
 800e504:	0801627c 	.word	0x0801627c
 800e508:	24002d98 	.word	0x24002d98
 800e50c:	24002d99 	.word	0x24002d99
 800e510:	24002d9a 	.word	0x24002d9a
 800e514:	0801633c 	.word	0x0801633c

0800e518 <PreparePdMapping>:
** Part of a command sequence and implements function callback.
** ABCC_CmdRespCmdHandler (abcc.h)
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType PreparePdMapping( ABP_MsgType* psMsg, void* pxUserData )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
   (void)pxUserData;
   (void)psMsg;
   abcc_iNumAdi = ABCC_CbfAdiMappingReq( (const AD_AdiEntryType**)&abcc_psAdiEntry,
 800e522:	4906      	ldr	r1, [pc, #24]	@ (800e53c <PreparePdMapping+0x24>)
 800e524:	4806      	ldr	r0, [pc, #24]	@ (800e540 <PreparePdMapping+0x28>)
 800e526:	f003 fc0a 	bl	8011d3e <ABCC_CbfAdiMappingReq>
 800e52a:	4603      	mov	r3, r0
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b05      	ldr	r3, [pc, #20]	@ (800e544 <PreparePdMapping+0x2c>)
 800e530:	801a      	strh	r2, [r3, #0]
                                         (const AD_MapType**)&abcc_psDefaultMap );
   /*
   ** No command shall be sent.
   */
   return( ABCC_CMDSEQ_CMD_SKIP );
 800e532:	2301      	movs	r3, #1
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	24002da8 	.word	0x24002da8
 800e540:	24002da4 	.word	0x24002da4
 800e544:	24002dac 	.word	0x24002dac

0800e548 <ReadWriteMapCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType ReadWriteMapCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800e548:	b5b0      	push	{r4, r5, r7, lr}
 800e54a:	b08a      	sub	sp, #40	@ 0x28
 800e54c:	af04      	add	r7, sp, #16
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
   UINT16 iLocalSize;
   ABCC_MsgType pMsgSendBuffer;

   (void)pxUserData;

   pMsgSendBuffer.psMsg = psMsg;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	60fb      	str	r3, [r7, #12]
   iLocalMapIndex = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	82fb      	strh	r3, [r7, #22]

   /*
   ** Unique source id for each mapping command
   */
   ABCC_SetLowAddrOct( pMsgSendBuffer.psMsg16->sHeader.iSourceIdDestObj, ABCC_GetNewSourceId() );
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	889b      	ldrh	r3, [r3, #4]
 800e55e:	b29a      	uxth	r2, r3
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e566:	b292      	uxth	r2, r2
 800e568:	809a      	strh	r2, [r3, #4]
 800e56a:	f7fe f9b7 	bl	800c8dc <ABCC_GetNewSourceId>
 800e56e:	4603      	mov	r3, r0
 800e570:	4619      	mov	r1, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	889b      	ldrh	r3, [r3, #4]
 800e576:	b29b      	uxth	r3, r3
 800e578:	b21a      	sxth	r2, r3
 800e57a:	b20b      	sxth	r3, r1
 800e57c:	4313      	orrs	r3, r2
 800e57e:	b21a      	sxth	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	b292      	uxth	r2, r2
 800e584:	809a      	strh	r2, [r3, #4]


   if( abcc_psAdiEntry && abcc_psDefaultMap && ( abcc_psDefaultMap[ abcc_iMappingIndex ].eDir != PD_END_MAP ) )
 800e586:	4b85      	ldr	r3, [pc, #532]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d057      	beq.n	800e63e <ReadWriteMapCmd+0xf6>
 800e58e:	4b84      	ldr	r3, [pc, #528]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d053      	beq.n	800e63e <ReadWriteMapCmd+0xf6>
 800e596:	4b82      	ldr	r3, [pc, #520]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	4b82      	ldr	r3, [pc, #520]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e59c:	881b      	ldrh	r3, [r3, #0]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	005b      	lsls	r3, r3, #1
 800e5a4:	440b      	add	r3, r1
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	4413      	add	r3, r2
 800e5aa:	789b      	ldrb	r3, [r3, #2]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d046      	beq.n	800e63e <ReadWriteMapCmd+0xf6>
   {
      if( abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance != AD_MAP_PAD_ADI )
 800e5b0:	4b7b      	ldr	r3, [pc, #492]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4b7b      	ldr	r3, [pc, #492]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e5b6:	881b      	ldrh	r3, [r3, #0]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	440b      	add	r3, r1
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	4413      	add	r3, r2
 800e5c4:	881b      	ldrh	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d03b      	beq.n	800e642 <ReadWriteMapCmd+0xfa>
      {
         iLocalMapIndex = GetAdiIndex( abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance );
 800e5ca:	4b75      	ldr	r3, [pc, #468]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	4b75      	ldr	r3, [pc, #468]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	440b      	add	r3, r1
 800e5da:	005b      	lsls	r3, r3, #1
 800e5dc:	4413      	add	r3, r2
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f7ff fbcb 	bl	800dd7c <GetAdiIndex>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	82fb      	strh	r3, [r7, #22]

         if( iLocalMapIndex == AD_INVALID_ADI_INDEX )
 800e5ea:	8afb      	ldrh	r3, [r7, #22]
 800e5ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d126      	bne.n	800e642 <ReadWriteMapCmd+0xfa>
         {
            ABCC_LOG_ERROR( ABCC_EC_DEFAULT_MAP_ERR,
 800e5f4:	4b6a      	ldr	r3, [pc, #424]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	4b6a      	ldr	r3, [pc, #424]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	460b      	mov	r3, r1
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	440b      	add	r3, r1
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	4413      	add	r3, r2
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	4618      	mov	r0, r3
 800e60c:	4b64      	ldr	r3, [pc, #400]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	4b64      	ldr	r3, [pc, #400]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	4619      	mov	r1, r3
 800e616:	460b      	mov	r3, r1
 800e618:	005b      	lsls	r3, r3, #1
 800e61a:	440b      	add	r3, r1
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4413      	add	r3, r2
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	9302      	str	r3, [sp, #8]
 800e624:	4b60      	ldr	r3, [pc, #384]	@ (800e7a8 <ReadWriteMapCmd+0x260>)
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	f240 2347 	movw	r3, #583	@ 0x247
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	4b5f      	ldr	r3, [pc, #380]	@ (800e7ac <ReadWriteMapCmd+0x264>)
 800e630:	4602      	mov	r2, r0
 800e632:	2110      	movs	r1, #16
 800e634:	2001      	movs	r0, #1
 800e636:	f7ff f807 	bl	800d648 <ABCC_LogHandler>
               (UINT32)abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance,
               "Error in default map, instance %" PRIu16 " doesn't exist\n",
               abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance );
            return( ABCC_CMDSEQ_CMD_ABORT );
 800e63a:	2302      	movs	r3, #2
 800e63c:	e13a      	b.n	800e8b4 <ReadWriteMapCmd+0x36c>
         }
      }
   }
   else
   {
      return( ABCC_CMDSEQ_CMD_SKIP );
 800e63e:	2301      	movs	r3, #1
 800e640:	e138      	b.n	800e8b4 <ReadWriteMapCmd+0x36c>
      if( abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance != AD_MAP_PAD_ADI )
 800e642:	bf00      	nop
   }

   if( ABCC_ReadModuleId() == ABP_MODULE_ID_ACTIVE_ABCC40 )
 800e644:	f7fe f92c 	bl	800c8a0 <ABCC_ReadModuleId>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	f040 8131 	bne.w	800e8b2 <ReadWriteMapCmd+0x36a>
      UINT8 bElemMapStartIndex;

      /*
      ** Implement mapping according to the extended command for ABCC.
      */
      ABCC_SetHighAddrOct( pMsgSendBuffer.psMsg16->sHeader.iSourceIdDestObj, ABP_OBJ_NUM_NW );
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	889b      	ldrh	r3, [r3, #4]
 800e654:	b29a      	uxth	r2, r3
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	b2d2      	uxtb	r2, r2
 800e65a:	b292      	uxth	r2, r2
 800e65c:	809a      	strh	r2, [r3, #4]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	889b      	ldrh	r3, [r3, #4]
 800e662:	b29a      	uxth	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800e66a:	b292      	uxth	r2, r2
 800e66c:	809a      	strh	r2, [r3, #4]
      pMsgSendBuffer.psMsg16->sHeader.iInstance            = iTOiLe( 1 );
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2200      	movs	r2, #0
 800e672:	f042 0201 	orr.w	r2, r2, #1
 800e676:	719a      	strb	r2, [r3, #6]
 800e678:	2200      	movs	r2, #0
 800e67a:	71da      	strb	r2, [r3, #7]

      /*
      ** Number of mapping items to add.
      */
      ABCC_SetLowAddrOct( pMsgSendBuffer.psMsg16->sHeader.iCmdExt0CmdExt1, 1 );
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	895b      	ldrh	r3, [r3, #10]
 800e680:	b29a      	uxth	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e688:	b292      	uxth	r2, r2
 800e68a:	815a      	strh	r2, [r3, #10]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	895b      	ldrh	r3, [r3, #10]
 800e690:	b29a      	uxth	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f042 0201 	orr.w	r2, r2, #1
 800e698:	b292      	uxth	r2, r2
 800e69a:	815a      	strh	r2, [r3, #10]

      /*
      ** Reserved
      */
      ABCC_SetHighAddrOct( pMsgSendBuffer.psMsg16->sHeader.iCmdExt0CmdExt1, 0 );
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	895b      	ldrh	r3, [r3, #10]
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	b2d2      	uxtb	r2, r2
 800e6a6:	b292      	uxth	r2, r2
 800e6a8:	815a      	strh	r2, [r3, #10]
 800e6aa:	68fa      	ldr	r2, [r7, #12]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	8952      	ldrh	r2, [r2, #10]
 800e6b0:	b292      	uxth	r2, r2
 800e6b2:	815a      	strh	r2, [r3, #10]

      if( abcc_psDefaultMap[ abcc_iMappingIndex ].iInstance != AD_MAP_PAD_ADI )
 800e6b4:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	460b      	mov	r3, r1
 800e6c0:	005b      	lsls	r3, r3, #1
 800e6c2:	440b      	add	r3, r1
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	4413      	add	r3, r2
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d070      	beq.n	800e7b0 <ReadWriteMapCmd+0x268>
      {
         if( abcc_psDefaultMap[ abcc_iMappingIndex ].bNumElem == AD_MAP_ALL_ELEM )
 800e6ce:	4b34      	ldr	r3, [pc, #208]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	4b34      	ldr	r3, [pc, #208]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	460b      	mov	r3, r1
 800e6da:	005b      	lsls	r3, r3, #1
 800e6dc:	440b      	add	r3, r1
 800e6de:	005b      	lsls	r3, r3, #1
 800e6e0:	4413      	add	r3, r2
 800e6e2:	78db      	ldrb	r3, [r3, #3]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10c      	bne.n	800e702 <ReadWriteMapCmd+0x1ba>
         {
            bNumElemToMap = abcc_psAdiEntry[ iLocalMapIndex ].bNumOfElements;
 800e6e8:	4b2c      	ldr	r3, [pc, #176]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e6ea:	6819      	ldr	r1, [r3, #0]
 800e6ec:	8afa      	ldrh	r2, [r7, #22]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	440b      	add	r3, r1
 800e6f8:	7a5b      	ldrb	r3, [r3, #9]
 800e6fa:	74fb      	strb	r3, [r7, #19]
            bElemMapStartIndex = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	74bb      	strb	r3, [r7, #18]
 800e700:	e017      	b.n	800e732 <ReadWriteMapCmd+0x1ea>
         }
         else
         {
            bNumElemToMap = abcc_psDefaultMap[ abcc_iMappingIndex ].bNumElem;
 800e702:	4b27      	ldr	r3, [pc, #156]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	4b27      	ldr	r3, [pc, #156]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	4619      	mov	r1, r3
 800e70c:	460b      	mov	r3, r1
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	440b      	add	r3, r1
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	4413      	add	r3, r2
 800e716:	78db      	ldrb	r3, [r3, #3]
 800e718:	74fb      	strb	r3, [r7, #19]
            bElemMapStartIndex = abcc_psDefaultMap[ abcc_iMappingIndex ].bElemStartIndex;
 800e71a:	4b21      	ldr	r3, [pc, #132]	@ (800e7a0 <ReadWriteMapCmd+0x258>)
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	4b21      	ldr	r3, [pc, #132]	@ (800e7a4 <ReadWriteMapCmd+0x25c>)
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	4619      	mov	r1, r3
 800e724:	460b      	mov	r3, r1
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	440b      	add	r3, r1
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	4413      	add	r3, r2
 800e72e:	791b      	ldrb	r3, [r3, #4]
 800e730:	74bb      	strb	r3, [r7, #18]
         }

         abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e732:	68f8      	ldr	r0, [r7, #12]
                                 abcc_psAdiEntry[ iLocalMapIndex ].iInstance,      /* Adi */
 800e734:	4b19      	ldr	r3, [pc, #100]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e736:	6819      	ldr	r1, [r3, #0]
 800e738:	8afa      	ldrh	r2, [r7, #22]
 800e73a:	4613      	mov	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	4413      	add	r3, r2
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	440b      	add	r3, r1
         abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e744:	881c      	ldrh	r4, [r3, #0]
                                 abcc_psAdiEntry[ iLocalMapIndex ].bNumOfElements, /* Adi total num elements */
 800e746:	4b15      	ldr	r3, [pc, #84]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e748:	6819      	ldr	r1, [r3, #0]
 800e74a:	8afa      	ldrh	r2, [r7, #22]
 800e74c:	4613      	mov	r3, r2
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	440b      	add	r3, r1
         abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e756:	7a5d      	ldrb	r5, [r3, #9]
                                 bElemMapStartIndex,                               /* Mapping  start index */
                                 bNumElemToMap,                                    /* Num elements to map */
                                 abcc_psAdiEntry[ iLocalMapIndex ].bDataType );    /* Data type */
 800e758:	4b10      	ldr	r3, [pc, #64]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e75a:	6819      	ldr	r1, [r3, #0]
 800e75c:	8afa      	ldrh	r2, [r7, #22]
 800e75e:	4613      	mov	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	4413      	add	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	440b      	add	r3, r1
         abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e768:	7a1b      	ldrb	r3, [r3, #8]
 800e76a:	7cba      	ldrb	r2, [r7, #18]
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	7cfb      	ldrb	r3, [r7, #19]
 800e770:	9300      	str	r3, [sp, #0]
 800e772:	4613      	mov	r3, r2
 800e774:	462a      	mov	r2, r5
 800e776:	4621      	mov	r1, r4
 800e778:	f7ff fb69 	bl	800de4e <abcc_FillMapExtCommand>
         iLocalSize = abcc_GetAdiMapSizeInBits( &abcc_psAdiEntry[ iLocalMapIndex ],
 800e77c:	4b07      	ldr	r3, [pc, #28]	@ (800e79c <ReadWriteMapCmd+0x254>)
 800e77e:	6819      	ldr	r1, [r3, #0]
 800e780:	8afa      	ldrh	r2, [r7, #22]
 800e782:	4613      	mov	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	4413      	add	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	440b      	add	r3, r1
 800e78c:	7cba      	ldrb	r2, [r7, #18]
 800e78e:	7cf9      	ldrb	r1, [r7, #19]
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fb43 	bl	800de1c <abcc_GetAdiMapSizeInBits>
 800e796:	4603      	mov	r3, r0
 800e798:	82bb      	strh	r3, [r7, #20]
 800e79a:	e034      	b.n	800e806 <ReadWriteMapCmd+0x2be>
 800e79c:	24002da4 	.word	0x24002da4
 800e7a0:	24002da8 	.word	0x24002da8
 800e7a4:	24002dae 	.word	0x24002dae
 800e7a8:	08016364 	.word	0x08016364
 800e7ac:	0801624c 	.word	0x0801624c
         }
#endif
      }
      else
      {
          abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e7b0:	68f8      	ldr	r0, [r7, #12]
                                  0,                                                /* Adi */
                                  abcc_psDefaultMap[ abcc_iMappingIndex ].bNumElem, /* Adi total num elements */
 800e7b2:	4b42      	ldr	r3, [pc, #264]	@ (800e8bc <ReadWriteMapCmd+0x374>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	4b42      	ldr	r3, [pc, #264]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	460b      	mov	r3, r1
 800e7be:	005b      	lsls	r3, r3, #1
 800e7c0:	440b      	add	r3, r1
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	4413      	add	r3, r2
          abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e7c6:	78d9      	ldrb	r1, [r3, #3]
                                  0,                                                /* Mapping  start index */
                                  abcc_psDefaultMap[ abcc_iMappingIndex ].bNumElem, /* Num elements to map */
 800e7c8:	4b3c      	ldr	r3, [pc, #240]	@ (800e8bc <ReadWriteMapCmd+0x374>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	4b3c      	ldr	r3, [pc, #240]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e7ce:	881b      	ldrh	r3, [r3, #0]
 800e7d0:	461c      	mov	r4, r3
 800e7d2:	4623      	mov	r3, r4
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	4423      	add	r3, r4
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	4413      	add	r3, r2
          abcc_FillMapExtCommand( pMsgSendBuffer.psMsg16,
 800e7dc:	78db      	ldrb	r3, [r3, #3]
 800e7de:	2221      	movs	r2, #33	@ 0x21
 800e7e0:	9201      	str	r2, [sp, #4]
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	460a      	mov	r2, r1
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	f7ff fb30 	bl	800de4e <abcc_FillMapExtCommand>
                                  ABP_PAD1 );                                       /* Data type */
         iLocalSize = abcc_psDefaultMap[ abcc_iMappingIndex ].bNumElem;
 800e7ee:	4b33      	ldr	r3, [pc, #204]	@ (800e8bc <ReadWriteMapCmd+0x374>)
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	4b33      	ldr	r3, [pc, #204]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	005b      	lsls	r3, r3, #1
 800e7fc:	440b      	add	r3, r1
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	4413      	add	r3, r2
 800e802:	78db      	ldrb	r3, [r3, #3]
 800e804:	82bb      	strh	r3, [r7, #20]

      }

      if( abcc_psDefaultMap[ abcc_iMappingIndex ].eDir == PD_READ )
 800e806:	4b2d      	ldr	r3, [pc, #180]	@ (800e8bc <ReadWriteMapCmd+0x374>)
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	4b2d      	ldr	r3, [pc, #180]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e80c:	881b      	ldrh	r3, [r3, #0]
 800e80e:	4619      	mov	r1, r3
 800e810:	460b      	mov	r3, r1
 800e812:	005b      	lsls	r3, r3, #1
 800e814:	440b      	add	r3, r1
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	4413      	add	r3, r2
 800e81a:	789b      	ldrb	r3, [r3, #2]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d121      	bne.n	800e864 <ReadWriteMapCmd+0x31c>
      {
         ABCC_SetLowAddrOct( pMsgSendBuffer.psMsg16->sHeader.iCmdReserved, ABP_MSG_HEADER_C_BIT | ABP_NW_CMD_MAP_ADI_READ_EXT_AREA );
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	891b      	ldrh	r3, [r3, #8]
 800e824:	b29a      	uxth	r2, r3
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e82c:	b292      	uxth	r2, r2
 800e82e:	811a      	strh	r2, [r3, #8]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	891b      	ldrh	r3, [r3, #8]
 800e834:	b29a      	uxth	r2, r3
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800e83c:	b292      	uxth	r2, r2
 800e83e:	811a      	strh	r2, [r3, #8]
         abcc_iPdReadBitSize += iLocalSize;
 800e840:	4b20      	ldr	r3, [pc, #128]	@ (800e8c4 <ReadWriteMapCmd+0x37c>)
 800e842:	881a      	ldrh	r2, [r3, #0]
 800e844:	8abb      	ldrh	r3, [r7, #20]
 800e846:	4413      	add	r3, r2
 800e848:	b29a      	uxth	r2, r3
 800e84a:	4b1e      	ldr	r3, [pc, #120]	@ (800e8c4 <ReadWriteMapCmd+0x37c>)
 800e84c:	801a      	strh	r2, [r3, #0]
         abcc_iPdReadSize = ( abcc_iPdReadBitSize + 7 ) / 8;
 800e84e:	4b1d      	ldr	r3, [pc, #116]	@ (800e8c4 <ReadWriteMapCmd+0x37c>)
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	3307      	adds	r3, #7
 800e854:	2b00      	cmp	r3, #0
 800e856:	da00      	bge.n	800e85a <ReadWriteMapCmd+0x312>
 800e858:	3307      	adds	r3, #7
 800e85a:	10db      	asrs	r3, r3, #3
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c8 <ReadWriteMapCmd+0x380>)
 800e860:	801a      	strh	r2, [r3, #0]
 800e862:	e020      	b.n	800e8a6 <ReadWriteMapCmd+0x35e>
      }
      else
      {
         ABCC_SetLowAddrOct( pMsgSendBuffer.psMsg16->sHeader.iCmdReserved, ABP_MSG_HEADER_C_BIT | ABP_NW_CMD_MAP_ADI_WRITE_EXT_AREA );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	891b      	ldrh	r3, [r3, #8]
 800e868:	b29a      	uxth	r2, r3
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800e870:	b292      	uxth	r2, r2
 800e872:	811a      	strh	r2, [r3, #8]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	891b      	ldrh	r3, [r3, #8]
 800e878:	b29a      	uxth	r2, r3
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f042 0252 	orr.w	r2, r2, #82	@ 0x52
 800e880:	b292      	uxth	r2, r2
 800e882:	811a      	strh	r2, [r3, #8]
         abcc_iPdWriteBitSize += iLocalSize;
 800e884:	4b11      	ldr	r3, [pc, #68]	@ (800e8cc <ReadWriteMapCmd+0x384>)
 800e886:	881a      	ldrh	r2, [r3, #0]
 800e888:	8abb      	ldrh	r3, [r7, #20]
 800e88a:	4413      	add	r3, r2
 800e88c:	b29a      	uxth	r2, r3
 800e88e:	4b0f      	ldr	r3, [pc, #60]	@ (800e8cc <ReadWriteMapCmd+0x384>)
 800e890:	801a      	strh	r2, [r3, #0]
         abcc_iPdWriteSize = ( abcc_iPdWriteBitSize + 7 ) / 8;
 800e892:	4b0e      	ldr	r3, [pc, #56]	@ (800e8cc <ReadWriteMapCmd+0x384>)
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	3307      	adds	r3, #7
 800e898:	2b00      	cmp	r3, #0
 800e89a:	da00      	bge.n	800e89e <ReadWriteMapCmd+0x356>
 800e89c:	3307      	adds	r3, #7
 800e89e:	10db      	asrs	r3, r3, #3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d0 <ReadWriteMapCmd+0x388>)
 800e8a4:	801a      	strh	r2, [r3, #0]
      }
      abcc_iMappingIndex++;
 800e8a6:	4b06      	ldr	r3, [pc, #24]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	4b04      	ldr	r3, [pc, #16]	@ (800e8c0 <ReadWriteMapCmd+0x378>)
 800e8b0:	801a      	strh	r2, [r3, #0]
   }

   return( ABCC_CMDSEQ_CMD_SEND );
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e8bc:	24002da8 	.word	0x24002da8
 800e8c0:	24002dae 	.word	0x24002dae
 800e8c4:	24002db6 	.word	0x24002db6
 800e8c8:	24002db0 	.word	0x24002db0
 800e8cc:	24002db4 	.word	0x24002db4
 800e8d0:	24002db2 	.word	0x24002db2

0800e8d4 <ReadWriteMapResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType ReadWriteMapResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af04      	add	r7, sp, #16
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_LOG_INFO( "RSP MSG_MAP_IO_****\n" );
 800e8de:	4b1f      	ldr	r3, [pc, #124]	@ (800e95c <ReadWriteMapResp+0x88>)
 800e8e0:	9301      	str	r3, [sp, #4]
 800e8e2:	f240 23bd 	movw	r3, #701	@ 0x2bd
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	4b1d      	ldr	r3, [pc, #116]	@ (800e960 <ReadWriteMapResp+0x8c>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	2003      	movs	r0, #3
 800e8f0:	f7fe feaa 	bl	800d648 <ABCC_LogHandler>

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7fe f975 	bl	800cbe4 <ABCC_VerifyMessage>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d011      	beq.n	800e924 <ReadWriteMapResp+0x50>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	7b1b      	ldrb	r3, [r3, #12]
 800e904:	461a      	mov	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7b1b      	ldrb	r3, [r3, #12]
 800e90a:	9302      	str	r3, [sp, #8]
 800e90c:	4b15      	ldr	r3, [pc, #84]	@ (800e964 <ReadWriteMapResp+0x90>)
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	f240 23c1 	movw	r3, #705	@ 0x2c1
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	4b12      	ldr	r3, [pc, #72]	@ (800e960 <ReadWriteMapResp+0x8c>)
 800e918:	2108      	movs	r1, #8
 800e91a:	2002      	movs	r0, #2
 800e91c:	f7fe fe94 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800e920:	2302      	movs	r3, #2
 800e922:	e017      	b.n	800e954 <ReadWriteMapResp+0x80>
   }

   if( abcc_psAdiEntry && abcc_psDefaultMap && ( abcc_psDefaultMap[ abcc_iMappingIndex ].eDir == PD_END_MAP ) )
 800e924:	4b10      	ldr	r3, [pc, #64]	@ (800e968 <ReadWriteMapResp+0x94>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d012      	beq.n	800e952 <ReadWriteMapResp+0x7e>
 800e92c:	4b0f      	ldr	r3, [pc, #60]	@ (800e96c <ReadWriteMapResp+0x98>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00e      	beq.n	800e952 <ReadWriteMapResp+0x7e>
 800e934:	4b0d      	ldr	r3, [pc, #52]	@ (800e96c <ReadWriteMapResp+0x98>)
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	4b0d      	ldr	r3, [pc, #52]	@ (800e970 <ReadWriteMapResp+0x9c>)
 800e93a:	881b      	ldrh	r3, [r3, #0]
 800e93c:	4619      	mov	r1, r3
 800e93e:	460b      	mov	r3, r1
 800e940:	005b      	lsls	r3, r3, #1
 800e942:	440b      	add	r3, r1
 800e944:	005b      	lsls	r3, r3, #1
 800e946:	4413      	add	r3, r2
 800e948:	789b      	ldrb	r3, [r3, #2]
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d101      	bne.n	800e952 <ReadWriteMapResp+0x7e>
   {
      /*
      ** This was the last mapping command. Proceed with next command.
      */
      return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800e94e:	2300      	movs	r3, #0
 800e950:	e000      	b.n	800e954 <ReadWriteMapResp+0x80>
   }

   /*
   ** Next mapping
   */
   return( ABCC_CMDSEQ_RESP_EXEC_CURRENT );
 800e952:	2301      	movs	r3, #1
}
 800e954:	4618      	mov	r0, r3
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	08016398 	.word	0x08016398
 800e960:	0801624c 	.word	0x0801624c
 800e964:	0801625c 	.word	0x0801625c
 800e968:	24002da4 	.word	0x24002da4
 800e96c:	24002da8 	.word	0x24002da8
 800e970:	24002dae 	.word	0x24002dae

0800e974 <TriggerUserInit>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqDoneHandler (abcc.h)
**------------------------------------------------------------------------------
*/
static void TriggerUserInit( const ABCC_CmdSeqResultType eSeqResult, void* pxUserData )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af04      	add	r7, sp, #16
 800e97a:	4603      	mov	r3, r0
 800e97c:	6039      	str	r1, [r7, #0]
 800e97e:	71fb      	strb	r3, [r7, #7]
   (void)pxUserData;

   switch( eSeqResult )
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	2b02      	cmp	r3, #2
 800e984:	d027      	beq.n	800e9d6 <TriggerUserInit+0x62>
 800e986:	2b02      	cmp	r3, #2
 800e988:	dc31      	bgt.n	800e9ee <TriggerUserInit+0x7a>
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d002      	beq.n	800e994 <TriggerUserInit+0x20>
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d015      	beq.n	800e9be <TriggerUserInit+0x4a>
 800e992:	e02c      	b.n	800e9ee <TriggerUserInit+0x7a>
   {
   case ABCC_CMDSEQ_RESULT_COMPLETED:
      ABCC_LOG_INFO( "Mapped PD size, RdPd %d WrPd: %d\n", abcc_iPdReadSize, abcc_iPdWriteSize );
 800e994:	4b1e      	ldr	r3, [pc, #120]	@ (800ea10 <TriggerUserInit+0x9c>)
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	461a      	mov	r2, r3
 800e99a:	4b1e      	ldr	r3, [pc, #120]	@ (800ea14 <TriggerUserInit+0xa0>)
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	9303      	str	r3, [sp, #12]
 800e9a0:	9202      	str	r2, [sp, #8]
 800e9a2:	4b1d      	ldr	r3, [pc, #116]	@ (800ea18 <TriggerUserInit+0xa4>)
 800e9a4:	9301      	str	r3, [sp, #4]
 800e9a6:	f240 23e3 	movw	r3, #739	@ 0x2e3
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	4b1b      	ldr	r3, [pc, #108]	@ (800ea1c <TriggerUserInit+0xa8>)
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2100      	movs	r1, #0
 800e9b2:	2003      	movs	r0, #3
 800e9b4:	f7fe fe48 	bl	800d648 <ABCC_LogHandler>
      ABCC_CbfUserInitReq();
 800e9b8:	f003 fa7a 	bl	8011eb0 <ABCC_CbfUserInitReq>
      break;
 800e9bc:	e023      	b.n	800ea06 <TriggerUserInit+0x92>

   case ABCC_CMDSEQ_RESULT_ABORT_INT:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800e9be:	79fa      	ldrb	r2, [r7, #7]
 800e9c0:	4b17      	ldr	r3, [pc, #92]	@ (800ea20 <TriggerUserInit+0xac>)
 800e9c2:	9301      	str	r3, [sp, #4]
 800e9c4:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	4b14      	ldr	r3, [pc, #80]	@ (800ea1c <TriggerUserInit+0xa8>)
 800e9cc:	2126      	movs	r1, #38	@ 0x26
 800e9ce:	2002      	movs	r0, #2
 800e9d0:	f7fe fe3a 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "TriggerUserInit reported internally aborted command sequence.\n" );
      break;
 800e9d4:	e017      	b.n	800ea06 <TriggerUserInit+0x92>

   case ABCC_CMDSEQ_RESULT_ABORT_EXT:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800e9d6:	79fa      	ldrb	r2, [r7, #7]
 800e9d8:	4b12      	ldr	r3, [pc, #72]	@ (800ea24 <TriggerUserInit+0xb0>)
 800e9da:	9301      	str	r3, [sp, #4]
 800e9dc:	f240 23ee 	movw	r3, #750	@ 0x2ee
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	4b0e      	ldr	r3, [pc, #56]	@ (800ea1c <TriggerUserInit+0xa8>)
 800e9e4:	2126      	movs	r1, #38	@ 0x26
 800e9e6:	2002      	movs	r0, #2
 800e9e8:	f7fe fe2e 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "TriggerUserInit reported externally aborted command sequence.\n" );
      break;
 800e9ec:	e00b      	b.n	800ea06 <TriggerUserInit+0x92>

   default:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800e9ee:	79fa      	ldrb	r2, [r7, #7]
 800e9f0:	4b0d      	ldr	r3, [pc, #52]	@ (800ea28 <TriggerUserInit+0xb4>)
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4b08      	ldr	r3, [pc, #32]	@ (800ea1c <TriggerUserInit+0xa8>)
 800e9fc:	2126      	movs	r1, #38	@ 0x26
 800e9fe:	2002      	movs	r0, #2
 800ea00:	f7fe fe22 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "TriggerUserInit reported aborted command sequence.\n" );
      break;
 800ea04:	bf00      	nop
   }
}
 800ea06:	bf00      	nop
 800ea08:	3708      	adds	r7, #8
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	24002db0 	.word	0x24002db0
 800ea14:	24002db2 	.word	0x24002db2
 800ea18:	080163b0 	.word	0x080163b0
 800ea1c:	0801624c 	.word	0x0801624c
 800ea20:	080163d4 	.word	0x080163d4
 800ea24:	08016414 	.word	0x08016414
 800ea28:	08016454 	.word	0x08016454

0800ea2c <RdPdSizeCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType RdPdSizeCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af02      	add	r7, sp, #8
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1,
 800ea36:	f7fd ff51 	bl	800c8dc <ABCC_GetNewSourceId>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	9300      	str	r3, [sp, #0]
 800ea3e:	2306      	movs	r3, #6
 800ea40:	2201      	movs	r2, #1
 800ea42:	2103      	movs	r1, #3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7fd ff6a 	bl	800c91e <ABCC_GetAttribute>
                      ABP_NW_IA_READ_PD_SIZE, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <RdPdSizeResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType RdPdSizeResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b088      	sub	sp, #32
 800ea58:	af04      	add	r7, sp, #16
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7fe f8c0 	bl	800cbe4 <ABCC_VerifyMessage>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d011      	beq.n	800ea8e <RdPdSizeResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7b1b      	ldrb	r3, [r3, #12]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7b1b      	ldrb	r3, [r3, #12]
 800ea74:	9302      	str	r3, [sp, #8]
 800ea76:	4b36      	ldr	r3, [pc, #216]	@ (800eb50 <RdPdSizeResp+0xfc>)
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	f44f 7346 	mov.w	r3, #792	@ 0x318
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	4b34      	ldr	r3, [pc, #208]	@ (800eb54 <RdPdSizeResp+0x100>)
 800ea82:	2108      	movs	r1, #8
 800ea84:	2002      	movs	r0, #2
 800ea86:	f7fe fddf 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	e05b      	b.n	800eb46 <RdPdSizeResp+0xf2>
   }

   if( abcc_psDefaultMap == NULL )
 800ea8e:	4b32      	ldr	r3, [pc, #200]	@ (800eb58 <RdPdSizeResp+0x104>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d11e      	bne.n	800ead4 <RdPdSizeResp+0x80>
   {
      /*
      ** Use received read size
      */
      ABCC_GetMsgData16( psMsg, &abcc_iPdReadSize, 0 );
 800ea96:	f7fd fa5d 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d811      	bhi.n	800eac4 <RdPdSizeResp+0x70>
 800eaa0:	f7fd fa58 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	9303      	str	r3, [sp, #12]
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	9302      	str	r3, [sp, #8]
 800eaac:	4b2b      	ldr	r3, [pc, #172]	@ (800eb5c <RdPdSizeResp+0x108>)
 800eaae:	9301      	str	r3, [sp, #4]
 800eab0:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	4b27      	ldr	r3, [pc, #156]	@ (800eb54 <RdPdSizeResp+0x100>)
 800eab8:	2202      	movs	r2, #2
 800eaba:	2127      	movs	r1, #39	@ 0x27
 800eabc:	2001      	movs	r0, #1
 800eabe:	f7fe fdc3 	bl	800d648 <ABCC_LogHandler>
 800eac2:	e03f      	b.n	800eb44 <RdPdSizeResp+0xf0>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	330c      	adds	r3, #12
 800eac8:	2200      	movs	r2, #0
 800eaca:	4925      	ldr	r1, [pc, #148]	@ (800eb60 <RdPdSizeResp+0x10c>)
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fe f9f6 	bl	800cebe <ABCC_GetData16>
 800ead2:	e037      	b.n	800eb44 <RdPdSizeResp+0xf0>
      UINT16 iSize;

      /*
      ** Verify that ABCC and driver has the same view
      */
      ABCC_GetMsgData16( psMsg, &iSize, 0 );
 800ead4:	f7fd fa3e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d811      	bhi.n	800eb02 <RdPdSizeResp+0xae>
 800eade:	f7fd fa39 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800eae2:	4603      	mov	r3, r0
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	2302      	movs	r3, #2
 800eae8:	9302      	str	r3, [sp, #8]
 800eaea:	4b1c      	ldr	r3, [pc, #112]	@ (800eb5c <RdPdSizeResp+0x108>)
 800eaec:	9301      	str	r3, [sp, #4]
 800eaee:	f240 332d 	movw	r3, #813	@ 0x32d
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	4b17      	ldr	r3, [pc, #92]	@ (800eb54 <RdPdSizeResp+0x100>)
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	2127      	movs	r1, #39	@ 0x27
 800eafa:	2001      	movs	r0, #1
 800eafc:	f7fe fda4 	bl	800d648 <ABCC_LogHandler>
 800eb00:	e007      	b.n	800eb12 <RdPdSizeResp+0xbe>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	330c      	adds	r3, #12
 800eb06:	f107 010e 	add.w	r1, r7, #14
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fe f9d6 	bl	800cebe <ABCC_GetData16>

      if( abcc_iPdReadSize != iSize )
 800eb12:	4b13      	ldr	r3, [pc, #76]	@ (800eb60 <RdPdSizeResp+0x10c>)
 800eb14:	881a      	ldrh	r2, [r3, #0]
 800eb16:	89fb      	ldrh	r3, [r7, #14]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d013      	beq.n	800eb44 <RdPdSizeResp+0xf0>
      {
         ABCC_LOG_ERROR( ABCC_EC_PD_SIZE_MISMATCH,
 800eb1c:	89fb      	ldrh	r3, [r7, #14]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	4b0f      	ldr	r3, [pc, #60]	@ (800eb60 <RdPdSizeResp+0x10c>)
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	89fa      	ldrh	r2, [r7, #14]
 800eb26:	9203      	str	r2, [sp, #12]
 800eb28:	9302      	str	r3, [sp, #8]
 800eb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb64 <RdPdSizeResp+0x110>)
 800eb2c:	9301      	str	r3, [sp, #4]
 800eb2e:	f240 3331 	movw	r3, #817	@ 0x331
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	4b07      	ldr	r3, [pc, #28]	@ (800eb54 <RdPdSizeResp+0x100>)
 800eb36:	460a      	mov	r2, r1
 800eb38:	212c      	movs	r1, #44	@ 0x2c
 800eb3a:	2001      	movs	r0, #1
 800eb3c:	f7fe fd84 	bl	800d648 <ABCC_LogHandler>
            iSize,
            "Read PD size mismatch, ABCC: %d Driver: %d\n",
            abcc_iPdReadSize,
            iSize );

         return( ABCC_CMDSEQ_RESP_ABORT );
 800eb40:	2302      	movs	r3, #2
 800eb42:	e000      	b.n	800eb46 <RdPdSizeResp+0xf2>
      }
   }

   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	0801625c 	.word	0x0801625c
 800eb54:	0801624c 	.word	0x0801624c
 800eb58:	24002da8 	.word	0x24002da8
 800eb5c:	0801627c 	.word	0x0801627c
 800eb60:	24002db0 	.word	0x24002db0
 800eb64:	08016488 	.word	0x08016488

0800eb68 <WrPdSizeCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType WrPdSizeCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af02      	add	r7, sp, #8
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1,
 800eb72:	f7fd feb3 	bl	800c8dc <ABCC_GetNewSourceId>
 800eb76:	4603      	mov	r3, r0
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	2305      	movs	r3, #5
 800eb7c:	2201      	movs	r2, #1
 800eb7e:	2103      	movs	r1, #3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7fd fecc 	bl	800c91e <ABCC_GetAttribute>
                      ABP_NW_IA_WRITE_PD_SIZE, ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <WrPdSizeResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType WrPdSizeResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b088      	sub	sp, #32
 800eb94:	af04      	add	r7, sp, #16
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
   (void)pxUserData;
   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7fe f822 	bl	800cbe4 <ABCC_VerifyMessage>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d011      	beq.n	800ebca <WrPdSizeResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7b1b      	ldrb	r3, [r3, #12]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7b1b      	ldrb	r3, [r3, #12]
 800ebb0:	9302      	str	r3, [sp, #8]
 800ebb2:	4b36      	ldr	r3, [pc, #216]	@ (800ec8c <WrPdSizeResp+0xfc>)
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	f240 335a 	movw	r3, #858	@ 0x35a
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	4b34      	ldr	r3, [pc, #208]	@ (800ec90 <WrPdSizeResp+0x100>)
 800ebbe:	2108      	movs	r1, #8
 800ebc0:	2002      	movs	r0, #2
 800ebc2:	f7fe fd41 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	e05b      	b.n	800ec82 <WrPdSizeResp+0xf2>
   }

   if( abcc_psDefaultMap == NULL )
 800ebca:	4b32      	ldr	r3, [pc, #200]	@ (800ec94 <WrPdSizeResp+0x104>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d11e      	bne.n	800ec10 <WrPdSizeResp+0x80>
   {
      /*
      ** Use received write size
      */
      ABCC_GetMsgData16( psMsg, &abcc_iPdWriteSize, 0 );
 800ebd2:	f7fd f9bf 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d811      	bhi.n	800ec00 <WrPdSizeResp+0x70>
 800ebdc:	f7fd f9ba 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	9303      	str	r3, [sp, #12]
 800ebe4:	2302      	movs	r3, #2
 800ebe6:	9302      	str	r3, [sp, #8]
 800ebe8:	4b2b      	ldr	r3, [pc, #172]	@ (800ec98 <WrPdSizeResp+0x108>)
 800ebea:	9301      	str	r3, [sp, #4]
 800ebec:	f240 3366 	movw	r3, #870	@ 0x366
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	4b27      	ldr	r3, [pc, #156]	@ (800ec90 <WrPdSizeResp+0x100>)
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	2127      	movs	r1, #39	@ 0x27
 800ebf8:	2001      	movs	r0, #1
 800ebfa:	f7fe fd25 	bl	800d648 <ABCC_LogHandler>
 800ebfe:	e03f      	b.n	800ec80 <WrPdSizeResp+0xf0>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	330c      	adds	r3, #12
 800ec04:	2200      	movs	r2, #0
 800ec06:	4925      	ldr	r1, [pc, #148]	@ (800ec9c <WrPdSizeResp+0x10c>)
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fe f958 	bl	800cebe <ABCC_GetData16>
 800ec0e:	e037      	b.n	800ec80 <WrPdSizeResp+0xf0>
      UINT16 iSize;

      /*
      ** Verify that ABCC and driver has the same view
      */
      ABCC_GetMsgData16( psMsg, &iSize, 0 );
 800ec10:	f7fd f9a0 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d811      	bhi.n	800ec3e <WrPdSizeResp+0xae>
 800ec1a:	f7fd f99b 	bl	800bf54 <ABCC_GetMaxMessageSize>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	9303      	str	r3, [sp, #12]
 800ec22:	2302      	movs	r3, #2
 800ec24:	9302      	str	r3, [sp, #8]
 800ec26:	4b1c      	ldr	r3, [pc, #112]	@ (800ec98 <WrPdSizeResp+0x108>)
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	f240 336f 	movw	r3, #879	@ 0x36f
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	4b17      	ldr	r3, [pc, #92]	@ (800ec90 <WrPdSizeResp+0x100>)
 800ec32:	2202      	movs	r2, #2
 800ec34:	2127      	movs	r1, #39	@ 0x27
 800ec36:	2001      	movs	r0, #1
 800ec38:	f7fe fd06 	bl	800d648 <ABCC_LogHandler>
 800ec3c:	e007      	b.n	800ec4e <WrPdSizeResp+0xbe>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	330c      	adds	r3, #12
 800ec42:	f107 010e 	add.w	r1, r7, #14
 800ec46:	2200      	movs	r2, #0
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fe f938 	bl	800cebe <ABCC_GetData16>
      if( abcc_iPdWriteSize != iSize )
 800ec4e:	4b13      	ldr	r3, [pc, #76]	@ (800ec9c <WrPdSizeResp+0x10c>)
 800ec50:	881a      	ldrh	r2, [r3, #0]
 800ec52:	89fb      	ldrh	r3, [r7, #14]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d013      	beq.n	800ec80 <WrPdSizeResp+0xf0>
      {
         ABCC_LOG_ERROR( ABCC_EC_PD_SIZE_MISMATCH,
 800ec58:	89fb      	ldrh	r3, [r7, #14]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec9c <WrPdSizeResp+0x10c>)
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	89fa      	ldrh	r2, [r7, #14]
 800ec62:	9203      	str	r2, [sp, #12]
 800ec64:	9302      	str	r3, [sp, #8]
 800ec66:	4b0e      	ldr	r3, [pc, #56]	@ (800eca0 <WrPdSizeResp+0x110>)
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f240 3372 	movw	r3, #882	@ 0x372
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	4b07      	ldr	r3, [pc, #28]	@ (800ec90 <WrPdSizeResp+0x100>)
 800ec72:	460a      	mov	r2, r1
 800ec74:	212c      	movs	r1, #44	@ 0x2c
 800ec76:	2001      	movs	r0, #1
 800ec78:	f7fe fce6 	bl	800d648 <ABCC_LogHandler>
            iSize,
            "Write PD size mismatch, ABCC: %d Driver: %d\n",
            abcc_iPdWriteSize,
            iSize );

         return( ABCC_CMDSEQ_RESP_ABORT );
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e000      	b.n	800ec82 <WrPdSizeResp+0xf2>
      }
   }

   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	0801625c 	.word	0x0801625c
 800ec90:	0801624c 	.word	0x0801624c
 800ec94:	24002da8 	.word	0x24002da8
 800ec98:	0801627c 	.word	0x0801627c
 800ec9c:	24002db2 	.word	0x24002db2
 800eca0:	080164b4 	.word	0x080164b4

0800eca4 <SetupCompleteCmd>:
** This function is a part of a command sequence. See description of
** ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType SetupCompleteCmd( ABP_MsgType* psMsg, void* pxUserData )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af02      	add	r7, sp, #8
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_SetByteAttribute(  psMsg, ABP_OBJ_NUM_ANB, 1,
 800ecae:	f7fd fe15 	bl	800c8dc <ABCC_GetNewSourceId>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	2305      	movs	r3, #5
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	2101      	movs	r1, #1
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7fd fe9b 	bl	800c9fc <ABCC_SetByteAttribute>
                           ABP_ANB_IA_SETUP_COMPLETE, TRUE,
                           ABCC_GetNewSourceId() );
   return( ABCC_CMDSEQ_CMD_SEND );
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <SetupCompleteResp>:
** Part of a command sequence and implements function callback
** ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType SetupCompleteResp( ABP_MsgType* psMsg, void* pxUserData )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af04      	add	r7, sp, #16
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7fd ff82 	bl	800cbe4 <ABCC_VerifyMessage>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d011      	beq.n	800ed0a <SetupCompleteResp+0x3a>
   {
      ABCC_LOG_WARNING( ABCC_EC_RESP_MSG_E_BIT_SET,
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	7b1b      	ldrb	r3, [r3, #12]
 800ecea:	461a      	mov	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	7b1b      	ldrb	r3, [r3, #12]
 800ecf0:	9302      	str	r3, [sp, #8]
 800ecf2:	4b12      	ldr	r3, [pc, #72]	@ (800ed3c <SetupCompleteResp+0x6c>)
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	f240 339d 	movw	r3, #925	@ 0x39d
 800ecfa:	9300      	str	r3, [sp, #0]
 800ecfc:	4b10      	ldr	r3, [pc, #64]	@ (800ed40 <SetupCompleteResp+0x70>)
 800ecfe:	2108      	movs	r1, #8
 800ed00:	2002      	movs	r0, #2
 800ed02:	f7fe fca1 	bl	800d648 <ABCC_LogHandler>
         (UINT32)ABCC_GetErrorCode( psMsg ),
         "Unexpected error response %" PRIu8 "\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_ABORT );
 800ed06:	2302      	movs	r3, #2
 800ed08:	e013      	b.n	800ed32 <SetupCompleteResp+0x62>
   }

   pnABCC_DrvSetPdSize( abcc_iPdReadSize, abcc_iPdWriteSize );
 800ed0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ed44 <SetupCompleteResp+0x74>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a0e      	ldr	r2, [pc, #56]	@ (800ed48 <SetupCompleteResp+0x78>)
 800ed10:	8812      	ldrh	r2, [r2, #0]
 800ed12:	490e      	ldr	r1, [pc, #56]	@ (800ed4c <SetupCompleteResp+0x7c>)
 800ed14:	8809      	ldrh	r1, [r1, #0]
 800ed16:	4610      	mov	r0, r2
 800ed18:	4798      	blx	r3
   ABCC_LOG_INFO( "RSP MSG_SETUP_COMPLETE\n" );
 800ed1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed50 <SetupCompleteResp+0x80>)
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	f240 33a5 	movw	r3, #933	@ 0x3a5
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <SetupCompleteResp+0x70>)
 800ed26:	2200      	movs	r2, #0
 800ed28:	2100      	movs	r1, #0
 800ed2a:	2003      	movs	r0, #3
 800ed2c:	f7fe fc8c 	bl	800d648 <ABCC_LogHandler>
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0801625c 	.word	0x0801625c
 800ed40:	0801624c 	.word	0x0801624c
 800ed44:	240014a8 	.word	0x240014a8
 800ed48:	24002db0 	.word	0x24002db0
 800ed4c:	24002db2 	.word	0x24002db2
 800ed50:	080164e4 	.word	0x080164e4

0800ed54 <SetupDone>:

static void SetupDone( const ABCC_CmdSeqResultType eSeqResult, void* pxUserData )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af04      	add	r7, sp, #16
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	6039      	str	r1, [r7, #0]
 800ed5e:	71fb      	strb	r3, [r7, #7]
   (void)pxUserData;

   switch( eSeqResult )
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d025      	beq.n	800edb2 <SetupDone+0x5e>
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	dc2f      	bgt.n	800edca <SetupDone+0x76>
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d002      	beq.n	800ed74 <SetupDone+0x20>
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d013      	beq.n	800ed9a <SetupDone+0x46>
 800ed72:	e02a      	b.n	800edca <SetupDone+0x76>
   {
   case ABCC_CMDSEQ_RESULT_COMPLETED:
      ABCC_LOG_INFO( "Mapped PD size, RdPd %" PRIu16 " WrPd: %" PRIu16 "\n", abcc_iPdReadSize, abcc_iPdWriteSize );
 800ed74:	4b1d      	ldr	r3, [pc, #116]	@ (800edec <SetupDone+0x98>)
 800ed76:	881b      	ldrh	r3, [r3, #0]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	4b1d      	ldr	r3, [pc, #116]	@ (800edf0 <SetupDone+0x9c>)
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	9303      	str	r3, [sp, #12]
 800ed80:	9202      	str	r2, [sp, #8]
 800ed82:	4b1c      	ldr	r3, [pc, #112]	@ (800edf4 <SetupDone+0xa0>)
 800ed84:	9301      	str	r3, [sp, #4]
 800ed86:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	4b1a      	ldr	r3, [pc, #104]	@ (800edf8 <SetupDone+0xa4>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	2100      	movs	r1, #0
 800ed92:	2003      	movs	r0, #3
 800ed94:	f7fe fc58 	bl	800d648 <ABCC_LogHandler>
      break;
 800ed98:	e023      	b.n	800ede2 <SetupDone+0x8e>

   case ABCC_CMDSEQ_RESULT_ABORT_INT:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800ed9a:	79fa      	ldrb	r2, [r7, #7]
 800ed9c:	4b17      	ldr	r3, [pc, #92]	@ (800edfc <SetupDone+0xa8>)
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	f44f 736d 	mov.w	r3, #948	@ 0x3b4
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	4b14      	ldr	r3, [pc, #80]	@ (800edf8 <SetupDone+0xa4>)
 800eda8:	2126      	movs	r1, #38	@ 0x26
 800edaa:	2002      	movs	r0, #2
 800edac:	f7fe fc4c 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "SetupDone reported internally aborted command sequence. PD mapping can be incomplete.\n" );
      break;
 800edb0:	e017      	b.n	800ede2 <SetupDone+0x8e>

   case ABCC_CMDSEQ_RESULT_ABORT_EXT:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800edb2:	79fa      	ldrb	r2, [r7, #7]
 800edb4:	4b12      	ldr	r3, [pc, #72]	@ (800ee00 <SetupDone+0xac>)
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	f240 33ba 	movw	r3, #954	@ 0x3ba
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4b0e      	ldr	r3, [pc, #56]	@ (800edf8 <SetupDone+0xa4>)
 800edc0:	2126      	movs	r1, #38	@ 0x26
 800edc2:	2002      	movs	r0, #2
 800edc4:	f7fe fc40 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "SetupDone reported externally aborted command sequence. PD mapping can be incomplete.\n" );
      break;
 800edc8:	e00b      	b.n	800ede2 <SetupDone+0x8e>

   default:
      ABCC_LOG_WARNING( ABCC_EC_SETUP_FAILED,
 800edca:	79fa      	ldrb	r2, [r7, #7]
 800edcc:	4b0d      	ldr	r3, [pc, #52]	@ (800ee04 <SetupDone+0xb0>)
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	4b08      	ldr	r3, [pc, #32]	@ (800edf8 <SetupDone+0xa4>)
 800edd8:	2126      	movs	r1, #38	@ 0x26
 800edda:	2002      	movs	r0, #2
 800eddc:	f7fe fc34 	bl	800d648 <ABCC_LogHandler>
         (UINT32)eSeqResult,
         "SetupDone reported aborted command sequence. PD mapping can be incomplete.\n" );
      break;
 800ede0:	bf00      	nop
   }
}
 800ede2:	bf00      	nop
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	24002db0 	.word	0x24002db0
 800edf0:	24002db2 	.word	0x24002db2
 800edf4:	080164fc 	.word	0x080164fc
 800edf8:	0801624c 	.word	0x0801624c
 800edfc:	08016520 	.word	0x08016520
 800ee00:	08016578 	.word	0x08016578
 800ee04:	080165d0 	.word	0x080165d0

0800ee08 <ABCC_StartSetup>:
}
#endif

#if ABCC_CFG_DRV_CMD_SEQ_ENABLED
void ABCC_StartSetup( void )
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	af00      	add	r7, sp, #0
   abcc_fFirstCommandPending = TRUE;
 800ee0c:	4b05      	ldr	r3, [pc, #20]	@ (800ee24 <ABCC_StartSetup+0x1c>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	601a      	str	r2, [r3, #0]
   ABCC_CmdSeqAdd( SetupSeqBeforeUserInit, TriggerUserInit, NULL, NULL );
 800ee12:	2300      	movs	r3, #0
 800ee14:	2200      	movs	r2, #0
 800ee16:	4904      	ldr	r1, [pc, #16]	@ (800ee28 <ABCC_StartSetup+0x20>)
 800ee18:	4804      	ldr	r0, [pc, #16]	@ (800ee2c <ABCC_StartSetup+0x24>)
 800ee1a:	f7fc febd 	bl	800bb98 <ABCC_CmdSeqAdd>
}
 800ee1e:	bf00      	nop
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	24002da0 	.word	0x24002da0
 800ee28:	0800e975 	.word	0x0800e975
 800ee2c:	080177d8 	.word	0x080177d8

0800ee30 <ABCC_UserInitComplete>:

void ABCC_UserInitComplete( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	af00      	add	r7, sp, #0
   ABCC_CmdSeqAdd( SetupSeqAfterUserInit, SetupDone, NULL, NULL );
 800ee34:	2300      	movs	r3, #0
 800ee36:	2200      	movs	r2, #0
 800ee38:	4902      	ldr	r1, [pc, #8]	@ (800ee44 <ABCC_UserInitComplete+0x14>)
 800ee3a:	4803      	ldr	r0, [pc, #12]	@ (800ee48 <ABCC_UserInitComplete+0x18>)
 800ee3c:	f7fc feac 	bl	800bb98 <ABCC_CmdSeqAdd>
}
 800ee40:	bf00      	nop
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	0800ed55 	.word	0x0800ed55
 800ee48:	08017818 	.word	0x08017818

0800ee4c <ABCC_FirmwareVersion>:
   SendSetupCommand( psMsg );
}
#endif

ABCC_FwVersionType ABCC_FirmwareVersion( void )
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b083      	sub	sp, #12
 800ee50:	af00      	add	r7, sp, #0
   return( abcc_sFwVersion );
 800ee52:	4a0c      	ldr	r2, [pc, #48]	@ (800ee84 <ABCC_FirmwareVersion+0x38>)
 800ee54:	1d3b      	adds	r3, r7, #4
 800ee56:	6812      	ldr	r2, [r2, #0]
 800ee58:	4611      	mov	r1, r2
 800ee5a:	8019      	strh	r1, [r3, #0]
 800ee5c:	3302      	adds	r3, #2
 800ee5e:	0c12      	lsrs	r2, r2, #16
 800ee60:	701a      	strb	r2, [r3, #0]
 800ee62:	2300      	movs	r3, #0
 800ee64:	793a      	ldrb	r2, [r7, #4]
 800ee66:	f362 0307 	bfi	r3, r2, #0, #8
 800ee6a:	797a      	ldrb	r2, [r7, #5]
 800ee6c:	f362 230f 	bfi	r3, r2, #8, #8
 800ee70:	79ba      	ldrb	r2, [r7, #6]
 800ee72:	f362 4317 	bfi	r3, r2, #16, #8
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	24002d98 	.word	0x24002d98

0800ee88 <ABCC_NetworkType>:

UINT16 ABCC_NetworkType( void )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	af00      	add	r7, sp, #0
   return( abcc_iNetworkType );
 800ee8c:	4b03      	ldr	r3, [pc, #12]	@ (800ee9c <ABCC_NetworkType+0x14>)
 800ee8e:	881b      	ldrh	r3, [r3, #0]
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	24002d96 	.word	0x24002d96

0800eea0 <ABCC_NetFormat>:
{
   return( abcc_iModuleType );
}

ABCC_NetFormatType ABCC_NetFormat( void )
{
 800eea0:	b480      	push	{r7}
 800eea2:	af00      	add	r7, sp, #0
   return( abcc_eNetFormat );
 800eea4:	4b03      	ldr	r3, [pc, #12]	@ (800eeb4 <ABCC_NetFormat+0x14>)
 800eea6:	781b      	ldrb	r3, [r3, #0]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	24002d9b 	.word	0x24002d9b

0800eeb8 <ABCC_TimerInit>:
static ABCC_TimerTimeoutType sTimer[ MAX_NUM_TIMERS ];
static BOOL fTimerEnabled = FALSE;
static UINT64 llTotalTicks = 0;

void ABCC_TimerInit( void )
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
   ABCC_TimerHandle xHandle;

   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800eebe:	2300      	movs	r3, #0
 800eec0:	71fb      	strb	r3, [r7, #7]
 800eec2:	e009      	b.n	800eed8 <ABCC_TimerInit+0x20>
   {
      sTimer[ xHandle ].pnHandleTimeout = NULL;
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	4a0e      	ldr	r2, [pc, #56]	@ (800ef00 <ABCC_TimerInit+0x48>)
 800eec8:	011b      	lsls	r3, r3, #4
 800eeca:	4413      	add	r3, r2
 800eecc:	330c      	adds	r3, #12
 800eece:	2200      	movs	r2, #0
 800eed0:	601a      	str	r2, [r3, #0]
   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800eed2:	79fb      	ldrb	r3, [r7, #7]
 800eed4:	3301      	adds	r3, #1
 800eed6:	71fb      	strb	r3, [r7, #7]
 800eed8:	79fb      	ldrb	r3, [r7, #7]
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d9f2      	bls.n	800eec4 <ABCC_TimerInit+0xc>
   }
   fTimerEnabled = TRUE;
 800eede:	4b09      	ldr	r3, [pc, #36]	@ (800ef04 <ABCC_TimerInit+0x4c>)
 800eee0:	2201      	movs	r2, #1
 800eee2:	601a      	str	r2, [r3, #0]

   llTotalTicks = 0;
 800eee4:	4908      	ldr	r1, [pc, #32]	@ (800ef08 <ABCC_TimerInit+0x50>)
 800eee6:	f04f 0200 	mov.w	r2, #0
 800eeea:	f04f 0300 	mov.w	r3, #0
 800eeee:	e9c1 2300 	strd	r2, r3, [r1]
}
 800eef2:	bf00      	nop
 800eef4:	370c      	adds	r7, #12
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	24002db8 	.word	0x24002db8
 800ef04:	24002de8 	.word	0x24002de8
 800ef08:	24002df0 	.word	0x24002df0

0800ef0c <ABCC_TimerCreate>:

ABCC_TimerHandle ABCC_TimerCreate( ABCC_TimerTimeoutCallbackType pnHandleTimeout )
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
   ABCC_TimerHandle xHandle = ABCC_TIMER_NO_HANDLE;
 800ef14:	23ff      	movs	r3, #255	@ 0xff
 800ef16:	73fb      	strb	r3, [r7, #15]
   ABCC_PORT_TIMER_UseCritical();

   ABCC_PORT_TIMER_EnterCritical();

   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800ef18:	2300      	movs	r3, #0
 800ef1a:	73fb      	strb	r3, [r7, #15]
 800ef1c:	e01f      	b.n	800ef5e <ABCC_TimerCreate+0x52>
   {
      if( sTimer[ xHandle ].pnHandleTimeout == NULL )
 800ef1e:	7bfb      	ldrb	r3, [r7, #15]
 800ef20:	4a16      	ldr	r2, [pc, #88]	@ (800ef7c <ABCC_TimerCreate+0x70>)
 800ef22:	011b      	lsls	r3, r3, #4
 800ef24:	4413      	add	r3, r2
 800ef26:	330c      	adds	r3, #12
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d114      	bne.n	800ef58 <ABCC_TimerCreate+0x4c>
      {
         sTimer[ xHandle ].fActive = FALSE;
 800ef2e:	7bfb      	ldrb	r3, [r7, #15]
 800ef30:	4a12      	ldr	r2, [pc, #72]	@ (800ef7c <ABCC_TimerCreate+0x70>)
 800ef32:	011b      	lsls	r3, r3, #4
 800ef34:	4413      	add	r3, r2
 800ef36:	2200      	movs	r2, #0
 800ef38:	601a      	str	r2, [r3, #0]
         sTimer[ xHandle ].fTmoOccured = FALSE;
 800ef3a:	7bfb      	ldrb	r3, [r7, #15]
 800ef3c:	4a0f      	ldr	r2, [pc, #60]	@ (800ef7c <ABCC_TimerCreate+0x70>)
 800ef3e:	011b      	lsls	r3, r3, #4
 800ef40:	4413      	add	r3, r2
 800ef42:	3304      	adds	r3, #4
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]
         sTimer[ xHandle ].pnHandleTimeout = pnHandleTimeout;
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ef7c <ABCC_TimerCreate+0x70>)
 800ef4c:	011b      	lsls	r3, r3, #4
 800ef4e:	4413      	add	r3, r2
 800ef50:	330c      	adds	r3, #12
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	601a      	str	r2, [r3, #0]
         break;
 800ef56:	e005      	b.n	800ef64 <ABCC_TimerCreate+0x58>
   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800ef58:	7bfb      	ldrb	r3, [r7, #15]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	73fb      	strb	r3, [r7, #15]
 800ef5e:	7bfb      	ldrb	r3, [r7, #15]
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d9dc      	bls.n	800ef1e <ABCC_TimerCreate+0x12>
      }
   }
   ABCC_PORT_TIMER_ExitCritical();

   if( xHandle >=  MAX_NUM_TIMERS )
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d901      	bls.n	800ef6e <ABCC_TimerCreate+0x62>
   {
      xHandle = ABCC_TIMER_NO_HANDLE;
 800ef6a:	23ff      	movs	r3, #255	@ 0xff
 800ef6c:	73fb      	strb	r3, [r7, #15]
   }
   return( xHandle );
 800ef6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7a:	4770      	bx	lr
 800ef7c:	24002db8 	.word	0x24002db8

0800ef80 <ABCC_TimerStart>:

BOOL ABCC_TimerStart( ABCC_TimerHandle xHandle,
                      UINT32 lTimeoutMs )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	4603      	mov	r3, r0
 800ef88:	6039      	str	r1, [r7, #0]
 800ef8a:	71fb      	strb	r3, [r7, #7]
   BOOL fTmo;
   ABCC_PORT_TIMER_UseCritical();

   if( !sTimer[ xHandle ].pnHandleTimeout )
 800ef8c:	79fb      	ldrb	r3, [r7, #7]
 800ef8e:	4a19      	ldr	r2, [pc, #100]	@ (800eff4 <ABCC_TimerStart+0x74>)
 800ef90:	011b      	lsls	r3, r3, #4
 800ef92:	4413      	add	r3, r2
 800ef94:	330c      	adds	r3, #12
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10b      	bne.n	800efb4 <ABCC_TimerStart+0x34>
   {
      ABCC_LOG_ERROR( ABCC_EC_UNEXPECTED_NULL_PTR,
 800ef9c:	4b16      	ldr	r3, [pc, #88]	@ (800eff8 <ABCC_TimerStart+0x78>)
 800ef9e:	9301      	str	r3, [sp, #4]
 800efa0:	234e      	movs	r3, #78	@ 0x4e
 800efa2:	9300      	str	r3, [sp, #0]
 800efa4:	4b15      	ldr	r3, [pc, #84]	@ (800effc <ABCC_TimerStart+0x7c>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	211e      	movs	r1, #30
 800efaa:	2001      	movs	r0, #1
 800efac:	f7fe fb4c 	bl	800d648 <ABCC_LogHandler>
         0,
         "Timer timeout handle not registered\n" );
      return( FALSE );
 800efb0:	2300      	movs	r3, #0
 800efb2:	e01b      	b.n	800efec <ABCC_TimerStart+0x6c>
   }

   ABCC_PORT_TIMER_EnterCritical();
   fTmo = sTimer[ xHandle ].fTmoOccured;
 800efb4:	79fb      	ldrb	r3, [r7, #7]
 800efb6:	4a0f      	ldr	r2, [pc, #60]	@ (800eff4 <ABCC_TimerStart+0x74>)
 800efb8:	011b      	lsls	r3, r3, #4
 800efba:	4413      	add	r3, r2
 800efbc:	3304      	adds	r3, #4
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	60fb      	str	r3, [r7, #12]
   sTimer[ xHandle ].lTimeLeft = (INT32)lTimeoutMs;
 800efc2:	79fb      	ldrb	r3, [r7, #7]
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	490b      	ldr	r1, [pc, #44]	@ (800eff4 <ABCC_TimerStart+0x74>)
 800efc8:	011b      	lsls	r3, r3, #4
 800efca:	440b      	add	r3, r1
 800efcc:	3308      	adds	r3, #8
 800efce:	601a      	str	r2, [r3, #0]
   sTimer[ xHandle ].fTmoOccured = FALSE;
 800efd0:	79fb      	ldrb	r3, [r7, #7]
 800efd2:	4a08      	ldr	r2, [pc, #32]	@ (800eff4 <ABCC_TimerStart+0x74>)
 800efd4:	011b      	lsls	r3, r3, #4
 800efd6:	4413      	add	r3, r2
 800efd8:	3304      	adds	r3, #4
 800efda:	2200      	movs	r2, #0
 800efdc:	601a      	str	r2, [r3, #0]
   sTimer[ xHandle ].fActive = TRUE;
 800efde:	79fb      	ldrb	r3, [r7, #7]
 800efe0:	4a04      	ldr	r2, [pc, #16]	@ (800eff4 <ABCC_TimerStart+0x74>)
 800efe2:	011b      	lsls	r3, r3, #4
 800efe4:	4413      	add	r3, r2
 800efe6:	2201      	movs	r2, #1
 800efe8:	601a      	str	r2, [r3, #0]

   ABCC_PORT_TIMER_ExitCritical();
   return( fTmo );
 800efea:	68fb      	ldr	r3, [r7, #12]
}
 800efec:	4618      	mov	r0, r3
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}
 800eff4:	24002db8 	.word	0x24002db8
 800eff8:	0801662c 	.word	0x0801662c
 800effc:	0801661c 	.word	0x0801661c

0800f000 <ABCC_TimerStop>:

BOOL ABCC_TimerStop( ABCC_TimerHandle xHandle )
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	71fb      	strb	r3, [r7, #7]
   BOOL fTmo;
   ABCC_PORT_TIMER_UseCritical();

   ABCC_PORT_TIMER_EnterCritical();
   fTmo = sTimer[ xHandle ].fTmoOccured;
 800f00a:	79fb      	ldrb	r3, [r7, #7]
 800f00c:	4a0c      	ldr	r2, [pc, #48]	@ (800f040 <ABCC_TimerStop+0x40>)
 800f00e:	011b      	lsls	r3, r3, #4
 800f010:	4413      	add	r3, r2
 800f012:	3304      	adds	r3, #4
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	60fb      	str	r3, [r7, #12]

   sTimer[ xHandle ].fActive = FALSE;
 800f018:	79fb      	ldrb	r3, [r7, #7]
 800f01a:	4a09      	ldr	r2, [pc, #36]	@ (800f040 <ABCC_TimerStop+0x40>)
 800f01c:	011b      	lsls	r3, r3, #4
 800f01e:	4413      	add	r3, r2
 800f020:	2200      	movs	r2, #0
 800f022:	601a      	str	r2, [r3, #0]
   sTimer[ xHandle ].fTmoOccured = FALSE;
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	4a06      	ldr	r2, [pc, #24]	@ (800f040 <ABCC_TimerStop+0x40>)
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	4413      	add	r3, r2
 800f02c:	3304      	adds	r3, #4
 800f02e:	2200      	movs	r2, #0
 800f030:	601a      	str	r2, [r3, #0]

   ABCC_PORT_TIMER_ExitCritical();
   return( fTmo );
 800f032:	68fb      	ldr	r3, [r7, #12]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3714      	adds	r7, #20
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	24002db8 	.word	0x24002db8

0800f044 <ABCC_TimerTick>:

void ABCC_TimerTick(const INT16 iDeltaTimeMs)
{
 800f044:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f048:	b084      	sub	sp, #16
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	4603      	mov	r3, r0
 800f04e:	80fb      	strh	r3, [r7, #6]
   ABCC_TimerHandle xHandle;
   ABCC_PORT_TIMER_UseCritical();

   if( !fTimerEnabled )
 800f050:	4b2d      	ldr	r3, [pc, #180]	@ (800f108 <ABCC_TimerTick+0xc4>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d052      	beq.n	800f0fe <ABCC_TimerTick+0xba>
      return;
   }

   ABCC_PORT_TIMER_EnterCritical();

   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800f058:	2300      	movs	r3, #0
 800f05a:	73fb      	strb	r3, [r7, #15]
 800f05c:	e03c      	b.n	800f0d8 <ABCC_TimerTick+0x94>
   {
       if( ( sTimer[ xHandle ].pnHandleTimeout != NULL ) &&
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
 800f060:	4a2a      	ldr	r2, [pc, #168]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f062:	011b      	lsls	r3, r3, #4
 800f064:	4413      	add	r3, r2
 800f066:	330c      	adds	r3, #12
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d031      	beq.n	800f0d2 <ABCC_TimerTick+0x8e>
             ( sTimer[ xHandle ].fActive == TRUE ) )
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	4a26      	ldr	r2, [pc, #152]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f072:	011b      	lsls	r3, r3, #4
 800f074:	4413      	add	r3, r2
 800f076:	681b      	ldr	r3, [r3, #0]
       if( ( sTimer[ xHandle ].pnHandleTimeout != NULL ) &&
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d12a      	bne.n	800f0d2 <ABCC_TimerTick+0x8e>
       {
          sTimer[ xHandle ].lTimeLeft -= (INT32)iDeltaTimeMs;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
 800f07e:	4a23      	ldr	r2, [pc, #140]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f080:	011b      	lsls	r3, r3, #4
 800f082:	4413      	add	r3, r2
 800f084:	3308      	adds	r3, #8
 800f086:	6819      	ldr	r1, [r3, #0]
 800f088:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f08c:	7bfb      	ldrb	r3, [r7, #15]
 800f08e:	1a8a      	subs	r2, r1, r2
 800f090:	491e      	ldr	r1, [pc, #120]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f092:	011b      	lsls	r3, r3, #4
 800f094:	440b      	add	r3, r1
 800f096:	3308      	adds	r3, #8
 800f098:	601a      	str	r2, [r3, #0]
          if( sTimer[ xHandle ].lTimeLeft <= 0 )
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	4a1b      	ldr	r2, [pc, #108]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f09e:	011b      	lsls	r3, r3, #4
 800f0a0:	4413      	add	r3, r2
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	dc13      	bgt.n	800f0d2 <ABCC_TimerTick+0x8e>
          {
             sTimer[ xHandle ].fTmoOccured = TRUE;
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	4a17      	ldr	r2, [pc, #92]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f0ae:	011b      	lsls	r3, r3, #4
 800f0b0:	4413      	add	r3, r2
 800f0b2:	3304      	adds	r3, #4
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]
             sTimer[ xHandle ].fActive = FALSE;
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	4a14      	ldr	r2, [pc, #80]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	4413      	add	r3, r2
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	601a      	str	r2, [r3, #0]
             sTimer[ xHandle ].pnHandleTimeout();
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	4a11      	ldr	r2, [pc, #68]	@ (800f10c <ABCC_TimerTick+0xc8>)
 800f0c8:	011b      	lsls	r3, r3, #4
 800f0ca:	4413      	add	r3, r2
 800f0cc:	330c      	adds	r3, #12
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	4798      	blx	r3
   for( xHandle = 0; xHandle < MAX_NUM_TIMERS; xHandle++ )
 800f0d2:	7bfb      	ldrb	r3, [r7, #15]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	73fb      	strb	r3, [r7, #15]
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	d9bf      	bls.n	800f05e <ABCC_TimerTick+0x1a>
          }
       }
   }

   llTotalTicks += iDeltaTimeMs;
 800f0de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0e2:	17da      	asrs	r2, r3, #31
 800f0e4:	461c      	mov	r4, r3
 800f0e6:	4615      	mov	r5, r2
 800f0e8:	4b09      	ldr	r3, [pc, #36]	@ (800f110 <ABCC_TimerTick+0xcc>)
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	eb14 0802 	adds.w	r8, r4, r2
 800f0f2:	eb45 0903 	adc.w	r9, r5, r3
 800f0f6:	4b06      	ldr	r3, [pc, #24]	@ (800f110 <ABCC_TimerTick+0xcc>)
 800f0f8:	e9c3 8900 	strd	r8, r9, [r3]
 800f0fc:	e000      	b.n	800f100 <ABCC_TimerTick+0xbc>
      return;
 800f0fe:	bf00      	nop

   ABCC_PORT_TIMER_ExitCritical();
}
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f108:	24002de8 	.word	0x24002de8
 800f10c:	24002db8 	.word	0x24002db8
 800f110:	24002df0 	.word	0x24002df0

0800f114 <ABCC_TimerDisable>:

void ABCC_TimerDisable( void )
{
 800f114:	b480      	push	{r7}
 800f116:	af00      	add	r7, sp, #0
   fTimerEnabled = FALSE;
 800f118:	4b03      	ldr	r3, [pc, #12]	@ (800f128 <ABCC_TimerDisable+0x14>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	601a      	str	r2, [r3, #0]
}
 800f11e:	bf00      	nop
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr
 800f128:	24002de8 	.word	0x24002de8

0800f12c <ABCC_TimerGetUptimeMs>:

UINT64 ABCC_TimerGetUptimeMs( void )
{
 800f12c:	b480      	push	{r7}
 800f12e:	b083      	sub	sp, #12
 800f130:	af00      	add	r7, sp, #0

   UINT64 llUptime;

   ABCC_PORT_TIMER_EnterCritical();

   llUptime = llTotalTicks;
 800f132:	4b07      	ldr	r3, [pc, #28]	@ (800f150 <ABCC_TimerGetUptimeMs+0x24>)
 800f134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f138:	e9c7 2300 	strd	r2, r3, [r7]

   ABCC_PORT_TIMER_ExitCritical();

   return( llUptime );
 800f13c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800f140:	4610      	mov	r0, r2
 800f142:	4619      	mov	r1, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	24002df0 	.word	0x24002df0

0800f154 <CRC_Crc16>:
** CRC_Crc16()
**------------------------------------------------------------------------------
*/

UINT16 CRC_Crc16( UINT8* pbBufferStart, UINT16 iLength )
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	807b      	strh	r3, [r7, #2]

   /*
   ** Init crc to 0xFFFF
   */

   bCrcLo = 0xFF;
 800f160:	23ff      	movs	r3, #255	@ 0xff
 800f162:	73fb      	strb	r3, [r7, #15]
   bCrcHi = 0xFF;
 800f164:	23ff      	movs	r3, #255	@ 0xff
 800f166:	73bb      	strb	r3, [r7, #14]

   /*
   ** Do the crc calculation
   */

   while( iLength > 0 )
 800f168:	e013      	b.n	800f192 <CRC_Crc16+0x3e>
   {
      bIndex = bCrcLo ^ *pbBufferStart++;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	1c5a      	adds	r2, r3, #1
 800f16e:	607a      	str	r2, [r7, #4]
 800f170:	781a      	ldrb	r2, [r3, #0]
 800f172:	7bfb      	ldrb	r3, [r7, #15]
 800f174:	4053      	eors	r3, r2
 800f176:	737b      	strb	r3, [r7, #13]
      bCrcLo = bCrcHi ^ abCrc16Hi[ bIndex ];
 800f178:	7b7b      	ldrb	r3, [r7, #13]
 800f17a:	4a0f      	ldr	r2, [pc, #60]	@ (800f1b8 <CRC_Crc16+0x64>)
 800f17c:	5cd2      	ldrb	r2, [r2, r3]
 800f17e:	7bbb      	ldrb	r3, [r7, #14]
 800f180:	4053      	eors	r3, r2
 800f182:	73fb      	strb	r3, [r7, #15]
      bCrcHi = abCrc16Lo[ bIndex ];
 800f184:	7b7b      	ldrb	r3, [r7, #13]
 800f186:	4a0d      	ldr	r2, [pc, #52]	@ (800f1bc <CRC_Crc16+0x68>)
 800f188:	5cd3      	ldrb	r3, [r2, r3]
 800f18a:	73bb      	strb	r3, [r7, #14]
      iLength--;
 800f18c:	887b      	ldrh	r3, [r7, #2]
 800f18e:	3b01      	subs	r3, #1
 800f190:	807b      	strh	r3, [r7, #2]
   while( iLength > 0 )
 800f192:	887b      	ldrh	r3, [r7, #2]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1e8      	bne.n	800f16a <CRC_Crc16+0x16>
   }

   return( bCrcHi << 8 | bCrcLo );
 800f198:	7bbb      	ldrb	r3, [r7, #14]
 800f19a:	b21b      	sxth	r3, r3
 800f19c:	021b      	lsls	r3, r3, #8
 800f19e:	b21a      	sxth	r2, r3
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	b21b      	sxth	r3, r3
 800f1a8:	b29b      	uxth	r3, r3

} /* End of CRC_Crc16() */
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3714      	adds	r7, #20
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	08017838 	.word	0x08017838
 800f1bc:	08017938 	.word	0x08017938

0800f1c0 <ABCC_SerRunDriver>:
/*------------------------------------------------------------------------------
** pnABCC_DrvRun()
**------------------------------------------------------------------------------
*/
void ABCC_SerRunDriver( void )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b086      	sub	sp, #24
 800f1c4:	af04      	add	r7, sp, #16
   ABCC_MainStateType eMainState;

   eMainState = ABCC_GetMainState();
 800f1c6:	f7fc fead 	bl	800bf24 <ABCC_GetMainState>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	71fb      	strb	r3, [r7, #7]

   if( eMainState < ABCC_DRV_SETUP )
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	d80f      	bhi.n	800f1f4 <ABCC_SerRunDriver+0x34>
   {
      if( eMainState != ABCC_DRV_ERROR )
 800f1d4:	79fb      	ldrb	r3, [r7, #7]
 800f1d6:	2b02      	cmp	r3, #2
 800f1d8:	d01e      	beq.n	800f218 <ABCC_SerRunDriver+0x58>
      {
         ABCC_LOG_ERROR( ABCC_EC_INCORRECT_STATE,
 800f1da:	79fa      	ldrb	r2, [r7, #7]
 800f1dc:	79fb      	ldrb	r3, [r7, #7]
 800f1de:	9302      	str	r3, [sp, #8]
 800f1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f220 <ABCC_SerRunDriver+0x60>)
 800f1e2:	9301      	str	r3, [sp, #4]
 800f1e4:	2324      	movs	r3, #36	@ 0x24
 800f1e6:	9300      	str	r3, [sp, #0]
 800f1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800f224 <ABCC_SerRunDriver+0x64>)
 800f1ea:	2107      	movs	r1, #7
 800f1ec:	2001      	movs	r0, #1
 800f1ee:	f7fe fa2b 	bl	800d648 <ABCC_LogHandler>
            (UINT32)eMainState,
            "ABCC_RunDriver() called in incorrect state (%d)\n",
            eMainState );
      }
      return;
 800f1f2:	e011      	b.n	800f218 <ABCC_SerRunDriver+0x58>
   }

   ABCC_LinkRunDriverRx();
 800f1f4:	f7fe f846 	bl	800d284 <ABCC_LinkRunDriverRx>
   ABCC_TriggerRdPdUpdate();
 800f1f8:	f7fd f988 	bl	800c50c <ABCC_TriggerRdPdUpdate>
   ABCC_TriggerAnbStatusUpdate();
 800f1fc:	f7fc febc 	bl	800bf78 <ABCC_TriggerAnbStatusUpdate>
   ABCC_TriggerReceiveMessage();
 800f200:	f7fd f9a0 	bl	800c544 <ABCC_TriggerReceiveMessage>
#if ABCC_CFG_DRV_CMD_SEQ_ENABLED
   ABCC_CmdSequencerExec();
 800f204:	f7fc fd54 	bl	800bcb0 <ABCC_CmdSequencerExec>
#endif
   ABCC_CheckWrPdUpdate();
 800f208:	f7fc fe48 	bl	800be9c <ABCC_CheckWrPdUpdate>
   ABCC_LinkCheckSendMessage();
 800f20c:	f7fd ffd8 	bl	800d1c0 <ABCC_LinkCheckSendMessage>
   pnABCC_DrvRunDriverTx();
 800f210:	4b05      	ldr	r3, [pc, #20]	@ (800f228 <ABCC_SerRunDriver+0x68>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4798      	blx	r3
 800f216:	e000      	b.n	800f21a <ABCC_SerRunDriver+0x5a>
      return;
 800f218:	bf00      	nop
}
 800f21a:	3708      	adds	r7, #8
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	0801666c 	.word	0x0801666c
 800f224:	08016654 	.word	0x08016654
 800f228:	24001480 	.word	0x24001480

0800f22c <drv_RxTelegramReceived>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_RxTelegramReceived( void )
{
 800f22c:	b480      	push	{r7}
 800f22e:	af00      	add	r7, sp, #0
   drv_fNewRxTelegramReceived = TRUE;
 800f230:	4b03      	ldr	r3, [pc, #12]	@ (800f240 <drv_RxTelegramReceived+0x14>)
 800f232:	2201      	movs	r2, #1
 800f234:	601a      	str	r2, [r3, #0]
}
 800f236:	bf00      	nop
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	24003654 	.word	0x24003654

0800f244 <drv_WriteFragInit>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_WriteFragInit( WrMsgFragType* psFragHandle, UINT8* psMsg, UINT16 iMsgSize, UINT16 iFragLength )
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	60b9      	str	r1, [r7, #8]
 800f24e:	4611      	mov	r1, r2
 800f250:	461a      	mov	r2, r3
 800f252:	460b      	mov	r3, r1
 800f254:	80fb      	strh	r3, [r7, #6]
 800f256:	4613      	mov	r3, r2
 800f258:	80bb      	strh	r3, [r7, #4]
    psFragHandle->iNumBytesLeft = iMsgSize;
 800f25a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	809a      	strh	r2, [r3, #4]
    psFragHandle->iFragLength = iFragLength;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	88ba      	ldrh	r2, [r7, #4]
 800f266:	80da      	strh	r2, [r3, #6]
    psFragHandle->pbCurrPtr = psMsg;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	601a      	str	r2, [r3, #0]
}
 800f26e:	bf00      	nop
 800f270:	3714      	adds	r7, #20
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr
	...

0800f27c <drv_GetWriteFrag>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_GetWriteFrag( WrMsgFragType* const psFragHandle, UINT8* const pbBuffer )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b086      	sub	sp, #24
 800f280:	af04      	add	r7, sp, #16
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
   /*
   ** Copy the message into the MOSI frame buffer.
   */
   if( psFragHandle->iNumBytesLeft <= 0 )
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dc0e      	bgt.n	800f2ae <drv_GetWriteFrag+0x32>
   {
      ABCC_LOG_FATAL( ABCC_EC_ASSERT_FAILED,
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	4b0a      	ldr	r3, [pc, #40]	@ (800f2c4 <drv_GetWriteFrag+0x48>)
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	23b8      	movs	r3, #184	@ 0xb8
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	4b09      	ldr	r3, [pc, #36]	@ (800f2c8 <drv_GetWriteFrag+0x4c>)
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	212b      	movs	r1, #43	@ 0x2b
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f7fe f9ce 	bl	800d648 <ABCC_LogHandler>
         0,
         "No data to copy (%" PRId16 ")\n",
         psFragHandle->iNumBytesLeft );
      return;
 800f2ac:	e007      	b.n	800f2be <drv_GetWriteFrag+0x42>
   }

   ABCC_PORT_MemCpy( pbBuffer,
                     psFragHandle->pbCurrPtr,
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6819      	ldr	r1, [r3, #0]
                     psFragHandle->iFragLength );
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	88db      	ldrh	r3, [r3, #6]
   ABCC_PORT_MemCpy( pbBuffer,
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	6838      	ldr	r0, [r7, #0]
 800f2ba:	f005 ff52 	bl	8015162 <memcpy>
}
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	080166b8 	.word	0x080166b8
 800f2c8:	080166a0 	.word	0x080166a0

0800f2cc <drv_PrepareNextWriteFrag>:
** Returns:
**       TRUE if the whole message is sent .
**------------------------------------------------------------------------------
*/
static BOOL drv_PrepareNextWriteFrag( WrMsgFragType* const psFragHandle )
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
   BOOL fFragDone = FALSE;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]

   if( psFragHandle->iNumBytesLeft > 0 )
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd11      	ble.n	800f306 <drv_PrepareNextWriteFrag+0x3a>
   {
      psFragHandle->pbCurrPtr         += psFragHandle->iFragLength;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	687a      	ldr	r2, [r7, #4]
 800f2e8:	88d2      	ldrh	r2, [r2, #6]
 800f2ea:	441a      	add	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	601a      	str	r2, [r3, #0]
      psFragHandle->iNumBytesLeft     -= psFragHandle->iFragLength;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	88db      	ldrh	r3, [r3, #6]
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	b21a      	sxth	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	809a      	strh	r2, [r3, #4]
   }

   if( psFragHandle->iNumBytesLeft <= 0 )
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	dc01      	bgt.n	800f314 <drv_PrepareNextWriteFrag+0x48>
   {
      fFragDone = TRUE;
 800f310:	2301      	movs	r3, #1
 800f312:	60fb      	str	r3, [r7, #12]
   }

   return( fFragDone );
 800f314:	68fb      	ldr	r3, [r7, #12]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <drv_isWrMsgSendingInprogress>:
** Returns:
**       TRUE if sending is ongoing.
**------------------------------------------------------------------------------
*/
static BOOL drv_isWrMsgSendingInprogress( WrMsgFragType* const psFragHandle )
{
 800f322:	b480      	push	{r7}
 800f324:	b083      	sub	sp, #12
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
   return( psFragHandle->pbCurrPtr != 0 );
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bf14      	ite	ne
 800f332:	2301      	movne	r3, #1
 800f334:	2300      	moveq	r3, #0
 800f336:	b2db      	uxtb	r3, r3
}
 800f338:	4618      	mov	r0, r3
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <drv_InitReadFrag>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_InitReadFrag( RdMsgFragType* psFragHandle, UINT8* psMsg, UINT16 iFragLength, UINT16 iMaxMsgLength )
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	4611      	mov	r1, r2
 800f350:	461a      	mov	r2, r3
 800f352:	460b      	mov	r3, r1
 800f354:	80fb      	strh	r3, [r7, #6]
 800f356:	4613      	mov	r3, r2
 800f358:	80bb      	strh	r3, [r7, #4]
    psFragHandle->iNumBytesReceived = 0;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2200      	movs	r2, #0
 800f35e:	809a      	strh	r2, [r3, #4]
    psFragHandle->iFragLength = iFragLength;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	88fa      	ldrh	r2, [r7, #6]
 800f364:	80da      	strh	r2, [r3, #6]
    psFragHandle->pbCurrPtr = psMsg;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	68ba      	ldr	r2, [r7, #8]
 800f36a:	601a      	str	r2, [r3, #0]
    psFragHandle->iMaxLength = iMaxMsgLength;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	88ba      	ldrh	r2, [r7, #4]
 800f370:	811a      	strh	r2, [r3, #8]
}
 800f372:	bf00      	nop
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <drv_AddReadFrag>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_AddReadFrag( RdMsgFragType* const psFragHandle, UINT8* const pbBuffer )
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b082      	sub	sp, #8
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	6039      	str	r1, [r7, #0]
   if( ( psFragHandle->iNumBytesReceived + psFragHandle->iFragLength ) > psFragHandle->iMaxLength )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	889b      	ldrh	r3, [r3, #4]
 800f38c:	461a      	mov	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	88db      	ldrh	r3, [r3, #6]
 800f392:	4413      	add	r3, r2
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	8912      	ldrh	r2, [r2, #8]
 800f398:	4293      	cmp	r3, r2
 800f39a:	dc17      	bgt.n	800f3cc <drv_AddReadFrag+0x4e>
   }

   /*
   ** Copy the message into buffer.
   */
   psFragHandle->iNumBytesReceived += psFragHandle->iFragLength;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	889a      	ldrh	r2, [r3, #4]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	88db      	ldrh	r3, [r3, #6]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	809a      	strh	r2, [r3, #4]

   ABCC_PORT_MemCpy( psFragHandle->pbCurrPtr,
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6818      	ldr	r0, [r3, #0]
                     pbBuffer,
                     psFragHandle->iFragLength );
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	88db      	ldrh	r3, [r3, #6]
   ABCC_PORT_MemCpy( psFragHandle->pbCurrPtr,
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	6839      	ldr	r1, [r7, #0]
 800f3b8:	f005 fed3 	bl	8015162 <memcpy>

   psFragHandle->pbCurrPtr += psFragHandle->iFragLength;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	88d2      	ldrh	r2, [r2, #6]
 800f3c4:	441a      	add	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e000      	b.n	800f3ce <drv_AddReadFrag+0x50>
      return;
 800f3cc:	bf00      	nop
}
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <drv_isRdMsgReceiveInprogress>:
** Returns:
**       TRUE if the.
**------------------------------------------------------------------------------
*/
static BOOL drv_isRdMsgReceiveInprogress( RdMsgFragType* const psFragHandle )
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
   return( psFragHandle->pbCurrPtr != 0 );
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	bf14      	ite	ne
 800f3e4:	2301      	movne	r3, #1
 800f3e6:	2300      	moveq	r3, #0
 800f3e8:	b2db      	uxtb	r3, r3
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	370c      	adds	r7, #12
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
	...

0800f3f8 <drv_WdTimeoutHandler>:

static void drv_WdTimeoutHandler( void )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
   fWdTmo = TRUE;
 800f3fc:	4b03      	ldr	r3, [pc, #12]	@ (800f40c <drv_WdTimeoutHandler+0x14>)
 800f3fe:	2201      	movs	r2, #1
 800f400:	601a      	str	r2, [r3, #0]
   ABCC_CbfWdTimeout();
 800f402:	f002 fcd5 	bl	8011db0 <ABCC_CbfWdTimeout>
}
 800f406:	bf00      	nop
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	24003660 	.word	0x24003660

0800f410 <drv_TelegramTimeoutHandler>:

static void drv_TelegramTimeoutHandler( void )
{
 800f410:	b480      	push	{r7}
 800f412:	af00      	add	r7, sp, #0
   fTelegramTmo = TRUE;
 800f414:	4b03      	ldr	r3, [pc, #12]	@ (800f424 <drv_TelegramTimeoutHandler+0x14>)
 800f416:	2201      	movs	r2, #1
 800f418:	601a      	str	r2, [r3, #0]
}
 800f41a:	bf00      	nop
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr
 800f424:	24003668 	.word	0x24003668

0800f428 <ABCC_DrvSerInit>:

void ABCC_DrvSerInit( UINT8 bOpmode )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	4603      	mov	r3, r0
 800f430:	71fb      	strb	r3, [r7, #7]
   if( ( bOpmode != ABP_OP_MODE_SERIAL_19_2 ) &&
 800f432:	79fb      	ldrb	r3, [r7, #7]
 800f434:	2b09      	cmp	r3, #9
 800f436:	d015      	beq.n	800f464 <ABCC_DrvSerInit+0x3c>
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	2b0a      	cmp	r3, #10
 800f43c:	d012      	beq.n	800f464 <ABCC_DrvSerInit+0x3c>
       ( bOpmode != ABP_OP_MODE_SERIAL_57_6 ) &&
 800f43e:	79fb      	ldrb	r3, [r7, #7]
 800f440:	2b0b      	cmp	r3, #11
 800f442:	d00f      	beq.n	800f464 <ABCC_DrvSerInit+0x3c>
       ( bOpmode != ABP_OP_MODE_SERIAL_115_2 ) &&
 800f444:	79fb      	ldrb	r3, [r7, #7]
 800f446:	2b0c      	cmp	r3, #12
 800f448:	d00c      	beq.n	800f464 <ABCC_DrvSerInit+0x3c>
       ( bOpmode != ABP_OP_MODE_SERIAL_625 ) )
   {
      ABCC_LOG_FATAL( ABCC_EC_INCORRECT_OPERATING_MODE,
 800f44a:	79fa      	ldrb	r2, [r7, #7]
 800f44c:	79fb      	ldrb	r3, [r7, #7]
 800f44e:	9302      	str	r3, [sp, #8]
 800f450:	4b48      	ldr	r3, [pc, #288]	@ (800f574 <ABCC_DrvSerInit+0x14c>)
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	4b47      	ldr	r3, [pc, #284]	@ (800f578 <ABCC_DrvSerInit+0x150>)
 800f45c:	2106      	movs	r1, #6
 800f45e:	2000      	movs	r0, #0
 800f460:	f7fe f8f2 	bl	800d648 <ABCC_LogHandler>
   }

   /*
   ** Initialize privates and states.
   */
   fSendWriteMessageEndMark = FALSE;
 800f464:	4b45      	ldr	r3, [pc, #276]	@ (800f57c <ABCC_DrvSerInit+0x154>)
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]

   drv_psReadMessage = 0;
 800f46a:	4b45      	ldr	r3, [pc, #276]	@ (800f580 <ABCC_DrvSerInit+0x158>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	601a      	str	r2, [r3, #0]
   drv_psWriteMessage = 0;
 800f470:	4b44      	ldr	r3, [pc, #272]	@ (800f584 <ABCC_DrvSerInit+0x15c>)
 800f472:	2200      	movs	r2, #0
 800f474:	601a      	str	r2, [r3, #0]

   drv_bNbrOfCmds = 0;
 800f476:	4b44      	ldr	r3, [pc, #272]	@ (800f588 <ABCC_DrvSerInit+0x160>)
 800f478:	2200      	movs	r2, #0
 800f47a:	701a      	strb	r2, [r3, #0]
   drv_eState = SM_SER_INIT;
 800f47c:	4b43      	ldr	r3, [pc, #268]	@ (800f58c <ABCC_DrvSerInit+0x164>)
 800f47e:	2200      	movs	r2, #0
 800f480:	701a      	strb	r2, [r3, #0]

   drv_iWritePdSize = 0;
 800f482:	4b43      	ldr	r3, [pc, #268]	@ (800f590 <ABCC_DrvSerInit+0x168>)
 800f484:	2200      	movs	r2, #0
 800f486:	801a      	strh	r2, [r3, #0]
   drv_iReadPdSize = 0;
 800f488:	4b42      	ldr	r3, [pc, #264]	@ (800f594 <ABCC_DrvSerInit+0x16c>)
 800f48a:	2200      	movs	r2, #0
 800f48c:	801a      	strh	r2, [r3, #0]

   drv_iTxFrameSize = SER_CMD_STAT_REG_LEN + SER_MSG_FRAG_LEN + drv_iWritePdSize;
 800f48e:	4b40      	ldr	r3, [pc, #256]	@ (800f590 <ABCC_DrvSerInit+0x168>)
 800f490:	881b      	ldrh	r3, [r3, #0]
 800f492:	3311      	adds	r3, #17
 800f494:	b29a      	uxth	r2, r3
 800f496:	4b40      	ldr	r3, [pc, #256]	@ (800f598 <ABCC_DrvSerInit+0x170>)
 800f498:	801a      	strh	r2, [r3, #0]
   drv_iRxFrameSize = SER_CMD_STAT_REG_LEN + SER_MSG_FRAG_LEN + drv_iReadPdSize;
 800f49a:	4b3e      	ldr	r3, [pc, #248]	@ (800f594 <ABCC_DrvSerInit+0x16c>)
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	3311      	adds	r3, #17
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	4b3e      	ldr	r3, [pc, #248]	@ (800f59c <ABCC_DrvSerInit+0x174>)
 800f4a4:	801a      	strh	r2, [r3, #0]

   drv_bpRdPd = NULL;
 800f4a6:	4b3e      	ldr	r3, [pc, #248]	@ (800f5a0 <ABCC_DrvSerInit+0x178>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]

   drv_sTxTelegram.bControl = 0;
 800f4ac:	4b3d      	ldr	r3, [pc, #244]	@ (800f5a4 <ABCC_DrvSerInit+0x17c>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	701a      	strb	r2, [r3, #0]
   drv_sRxTelegram.bStatus = 0;
 800f4b2:	4b3d      	ldr	r3, [pc, #244]	@ (800f5a8 <ABCC_DrvSerInit+0x180>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	701a      	strb	r2, [r3, #0]
   drv_bStatus = 0;
 800f4b8:	4b3c      	ldr	r3, [pc, #240]	@ (800f5ac <ABCC_DrvSerInit+0x184>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	701a      	strb	r2, [r3, #0]

   drv_InitReadFrag( &sRxFragHandle, 0, 0, 0 );
 800f4be:	2300      	movs	r3, #0
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	483a      	ldr	r0, [pc, #232]	@ (800f5b0 <ABCC_DrvSerInit+0x188>)
 800f4c6:	f7ff ff3d 	bl	800f344 <drv_InitReadFrag>
   drv_WriteFragInit( &sTxFragHandle, 0, 0, 0 );
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	4838      	ldr	r0, [pc, #224]	@ (800f5b4 <ABCC_DrvSerInit+0x18c>)
 800f4d2:	f7ff feb7 	bl	800f244 <drv_WriteFragInit>

   drv_fNewRxTelegramReceived = FALSE;
 800f4d6:	4b38      	ldr	r3, [pc, #224]	@ (800f5b8 <ABCC_DrvSerInit+0x190>)
 800f4d8:	2200      	movs	r2, #0
 800f4da:	601a      	str	r2, [r3, #0]
   drv_fNewReadMessage = FALSE;
 800f4dc:	4b37      	ldr	r3, [pc, #220]	@ (800f5bc <ABCC_DrvSerInit+0x194>)
 800f4de:	2200      	movs	r2, #0
 800f4e0:	601a      	str	r2, [r3, #0]

   xTelegramTmoHandle = ABCC_TimerCreate( drv_TelegramTimeoutHandler );
 800f4e2:	4837      	ldr	r0, [pc, #220]	@ (800f5c0 <ABCC_DrvSerInit+0x198>)
 800f4e4:	f7ff fd12 	bl	800ef0c <ABCC_TimerCreate>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	4b35      	ldr	r3, [pc, #212]	@ (800f5c4 <ABCC_DrvSerInit+0x19c>)
 800f4ee:	701a      	strb	r2, [r3, #0]
   fTelegramTmo = FALSE;
 800f4f0:	4b35      	ldr	r3, [pc, #212]	@ (800f5c8 <ABCC_DrvSerInit+0x1a0>)
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	601a      	str	r2, [r3, #0]

   switch( bOpmode )
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	3b09      	subs	r3, #9
 800f4fa:	2b03      	cmp	r3, #3
 800f4fc:	d81b      	bhi.n	800f536 <ABCC_DrvSerInit+0x10e>
 800f4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f504 <ABCC_DrvSerInit+0xdc>)
 800f500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f504:	0800f515 	.word	0x0800f515
 800f508:	0800f51f 	.word	0x0800f51f
 800f50c:	0800f527 	.word	0x0800f527
 800f510:	0800f52f 	.word	0x0800f52f
   {
   case ABP_OP_MODE_SERIAL_19_2:
      iTelegramTmoMs = ABCC_CFG_SERIAL_TMO_19_2;
 800f514:	4b2d      	ldr	r3, [pc, #180]	@ (800f5cc <ABCC_DrvSerInit+0x1a4>)
 800f516:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800f51a:	801a      	strh	r2, [r3, #0]
      break;
 800f51c:	e019      	b.n	800f552 <ABCC_DrvSerInit+0x12a>
   case ABP_OP_MODE_SERIAL_57_6:
      iTelegramTmoMs = ABCC_CFG_SERIAL_TMO_57_6;
 800f51e:	4b2b      	ldr	r3, [pc, #172]	@ (800f5cc <ABCC_DrvSerInit+0x1a4>)
 800f520:	2278      	movs	r2, #120	@ 0x78
 800f522:	801a      	strh	r2, [r3, #0]
      break;
 800f524:	e015      	b.n	800f552 <ABCC_DrvSerInit+0x12a>
   case ABP_OP_MODE_SERIAL_115_2:
      iTelegramTmoMs = ABCC_CFG_SERIAL_TMO_115_2;
 800f526:	4b29      	ldr	r3, [pc, #164]	@ (800f5cc <ABCC_DrvSerInit+0x1a4>)
 800f528:	223c      	movs	r2, #60	@ 0x3c
 800f52a:	801a      	strh	r2, [r3, #0]
      break;
 800f52c:	e011      	b.n	800f552 <ABCC_DrvSerInit+0x12a>
   case ABP_OP_MODE_SERIAL_625:
      iTelegramTmoMs = ABCC_CFG_SERIAL_TMO_625;
 800f52e:	4b27      	ldr	r3, [pc, #156]	@ (800f5cc <ABCC_DrvSerInit+0x1a4>)
 800f530:	2214      	movs	r2, #20
 800f532:	801a      	strh	r2, [r3, #0]
      break;
 800f534:	e00d      	b.n	800f552 <ABCC_DrvSerInit+0x12a>
   default:
      ABCC_LOG_FATAL( ABCC_EC_INCORRECT_OPERATING_MODE,
 800f536:	79fa      	ldrb	r2, [r7, #7]
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	9302      	str	r3, [sp, #8]
 800f53c:	4b0d      	ldr	r3, [pc, #52]	@ (800f574 <ABCC_DrvSerInit+0x14c>)
 800f53e:	9301      	str	r3, [sp, #4]
 800f540:	f240 1379 	movw	r3, #377	@ 0x179
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	4b0c      	ldr	r3, [pc, #48]	@ (800f578 <ABCC_DrvSerInit+0x150>)
 800f548:	2106      	movs	r1, #6
 800f54a:	2000      	movs	r0, #0
 800f54c:	f7fe f87c 	bl	800d648 <ABCC_LogHandler>
         (UINT32)bOpmode,
         "Incorrect operating mode %" PRIu8 "\n",
         bOpmode );
      break;
 800f550:	bf00      	nop
   }

   xWdTmoHandle = ABCC_TimerCreate( drv_WdTimeoutHandler );
 800f552:	481f      	ldr	r0, [pc, #124]	@ (800f5d0 <ABCC_DrvSerInit+0x1a8>)
 800f554:	f7ff fcda 	bl	800ef0c <ABCC_TimerCreate>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	4b1d      	ldr	r3, [pc, #116]	@ (800f5d4 <ABCC_DrvSerInit+0x1ac>)
 800f55e:	701a      	strb	r2, [r3, #0]
   fWdTmo = FALSE;
 800f560:	4b1d      	ldr	r3, [pc, #116]	@ (800f5d8 <ABCC_DrvSerInit+0x1b0>)
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]

   /*
   ** Register the PONG indicator for the physical serial driver.
   */
   ABCC_HAL_SerRegDataReceived( drv_RxTelegramReceived );
 800f566:	481d      	ldr	r0, [pc, #116]	@ (800f5dc <ABCC_DrvSerInit+0x1b4>)
 800f568:	f005 f9dc 	bl	8014924 <ABCC_HAL_SerRegDataReceived>
}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	080166d0 	.word	0x080166d0
 800f578:	080166a0 	.word	0x080166a0
 800f57c:	24003650 	.word	0x24003650
 800f580:	24002e00 	.word	0x24002e00
 800f584:	24002dfc 	.word	0x24002dfc
 800f588:	24002e10 	.word	0x24002e10
 800f58c:	24002df8 	.word	0x24002df8
 800f590:	24002e08 	.word	0x24002e08
 800f594:	24002e0a 	.word	0x24002e0a
 800f598:	24002e0c 	.word	0x24002e0c
 800f59c:	24002e0e 	.word	0x24002e0e
 800f5a0:	24003658 	.word	0x24003658
 800f5a4:	24003228 	.word	0x24003228
 800f5a8:	24002e14 	.word	0x24002e14
 800f5ac:	24002df9 	.word	0x24002df9
 800f5b0:	24003644 	.word	0x24003644
 800f5b4:	2400363c 	.word	0x2400363c
 800f5b8:	24003654 	.word	0x24003654
 800f5bc:	24002e04 	.word	0x24002e04
 800f5c0:	0800f411 	.word	0x0800f411
 800f5c4:	24003664 	.word	0x24003664
 800f5c8:	24003668 	.word	0x24003668
 800f5cc:	2400366c 	.word	0x2400366c
 800f5d0:	0800f3f9 	.word	0x0800f3f9
 800f5d4:	2400365e 	.word	0x2400365e
 800f5d8:	24003660 	.word	0x24003660
 800f5dc:	0800f22d 	.word	0x0800f22d

0800f5e0 <ABCC_DrvSerRunDriverTx>:
** Returns:
**       -
**------------------------------------------------------------------------------
*/
void ABCC_DrvSerRunDriverTx( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
   UINT16 iCrc;
   BOOL   fHandleWriteMsg = FALSE;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	607b      	str	r3, [r7, #4]

   ABCC_PORT_UseCritical();

   if( drv_eState == SM_SER_RDY_TO_SEND_PING )
 800f5ea:	4b59      	ldr	r3, [pc, #356]	@ (800f750 <ABCC_DrvSerRunDriverTx+0x170>)
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	f040 80aa 	bne.w	800f748 <ABCC_DrvSerRunDriverTx+0x168>
   {
      drv_eState = SM_SER_WAITING_FOR_PONG;
 800f5f4:	4b56      	ldr	r3, [pc, #344]	@ (800f750 <ABCC_DrvSerRunDriverTx+0x170>)
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	701a      	strb	r2, [r3, #0]
      drv_sTxTelegram.bControl &= ABP_CTRL_T_BIT;
 800f5fa:	4b56      	ldr	r3, [pc, #344]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f602:	b2da      	uxtb	r2, r3
 800f604:	4b53      	ldr	r3, [pc, #332]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f606:	701a      	strb	r2, [r3, #0]

      if( !fTelegramTmo )
 800f608:	4b53      	ldr	r3, [pc, #332]	@ (800f758 <ABCC_DrvSerRunDriverTx+0x178>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d125      	bne.n	800f65c <ABCC_DrvSerRunDriverTx+0x7c>
      {
         /*
         ** Everything is OK. Reset retransmission and toggle the T bit.
         */
         drv_sTxTelegram.bControl ^= ABP_CTRL_T_BIT;
 800f610:	4b50      	ldr	r3, [pc, #320]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f612:	781a      	ldrb	r2, [r3, #0]
 800f614:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f618:	4053      	eors	r3, r2
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b4d      	ldr	r3, [pc, #308]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f61e:	701a      	strb	r2, [r3, #0]

         ABCC_PORT_EnterCritical();

         if( ( drv_psWriteMessage != 0 ) && !drv_isWrMsgSendingInprogress( &sTxFragHandle ) )
 800f620:	4b4e      	ldr	r3, [pc, #312]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d019      	beq.n	800f65c <ABCC_DrvSerRunDriverTx+0x7c>
 800f628:	484d      	ldr	r0, [pc, #308]	@ (800f760 <ABCC_DrvSerRunDriverTx+0x180>)
 800f62a:	f7ff fe7a 	bl	800f322 <drv_isWrMsgSendingInprogress>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d113      	bne.n	800f65c <ABCC_DrvSerRunDriverTx+0x7c>
         {
            drv_psWriteMessage->sHeader.bReserved = (UINT8)( iLeTOi( drv_psWriteMessage->sHeader.iDataSize ) );
 800f634:	4b49      	ldr	r3, [pc, #292]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	4b47      	ldr	r3, [pc, #284]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	b2d2      	uxtb	r2, r2
 800f642:	725a      	strb	r2, [r3, #9]
            drv_WriteFragInit( &sTxFragHandle, &drv_psWriteMessage->sHeader.bSourceId, (UINT16)drv_psWriteMessage->sHeader.bReserved + SER_MSG_HEADER_LEN, SER_MSG_FRAG_LEN );
 800f644:	4b45      	ldr	r3, [pc, #276]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	1d19      	adds	r1, r3, #4
 800f64a:	4b44      	ldr	r3, [pc, #272]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	7a5b      	ldrb	r3, [r3, #9]
 800f650:	3308      	adds	r3, #8
 800f652:	b29a      	uxth	r2, r3
 800f654:	2310      	movs	r3, #16
 800f656:	4842      	ldr	r0, [pc, #264]	@ (800f760 <ABCC_DrvSerRunDriverTx+0x180>)
 800f658:	f7ff fdf4 	bl	800f244 <drv_WriteFragInit>
         }

         ABCC_PORT_ExitCritical();
      }

      fTelegramTmo = FALSE;
 800f65c:	4b3e      	ldr	r3, [pc, #248]	@ (800f758 <ABCC_DrvSerRunDriverTx+0x178>)
 800f65e:	2200      	movs	r2, #0
 800f660:	601a      	str	r2, [r3, #0]

      /*---------------------------------------------------------------------------
      ** Write message handling.
      **---------------------------------------------------------------------------
      */
      if( drv_isWrMsgSendingInprogress( &sTxFragHandle ) )
 800f662:	483f      	ldr	r0, [pc, #252]	@ (800f760 <ABCC_DrvSerRunDriverTx+0x180>)
 800f664:	f7ff fe5d 	bl	800f322 <drv_isWrMsgSendingInprogress>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d001      	beq.n	800f672 <ABCC_DrvSerRunDriverTx+0x92>
      {
         fHandleWriteMsg = TRUE;
 800f66e:	2301      	movs	r3, #1
 800f670:	607b      	str	r3, [r7, #4]
      }

      drv_sTxTelegram.bControl &= ~ABP_CTRL_M_BIT;
 800f672:	4b38      	ldr	r3, [pc, #224]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	4b35      	ldr	r3, [pc, #212]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f67e:	701a      	strb	r2, [r3, #0]

      if( fHandleWriteMsg )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d023      	beq.n	800f6ce <ABCC_DrvSerRunDriverTx+0xee>
      {
         if( !fSendWriteMessageEndMark )
 800f686:	4b37      	ldr	r3, [pc, #220]	@ (800f764 <ABCC_DrvSerRunDriverTx+0x184>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d10b      	bne.n	800f6a6 <ABCC_DrvSerRunDriverTx+0xc6>
         {
            drv_GetWriteFrag( &sTxFragHandle, drv_sTxTelegram.abWrMsg );
 800f68e:	4936      	ldr	r1, [pc, #216]	@ (800f768 <ABCC_DrvSerRunDriverTx+0x188>)
 800f690:	4833      	ldr	r0, [pc, #204]	@ (800f760 <ABCC_DrvSerRunDriverTx+0x180>)
 800f692:	f7ff fdf3 	bl	800f27c <drv_GetWriteFrag>
            drv_sTxTelegram.bControl |= ABP_CTRL_M_BIT;
 800f696:	4b2f      	ldr	r3, [pc, #188]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	4b2c      	ldr	r3, [pc, #176]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f6a2:	701a      	strb	r2, [r3, #0]
 800f6a4:	e013      	b.n	800f6ce <ABCC_DrvSerRunDriverTx+0xee>
            ** Position to update the rx frame size to match the length of
            ** the new RdPd size after a read remap.
            ** The last fragment of the remap response has been sent
            ** and the ABCC will adjust the length in the next frame.
            */
            if( ( drv_psWriteMessage->sHeader.bDestObj == ABP_OBJ_NUM_APPD ) &&
 800f6a6:	4b2d      	ldr	r3, [pc, #180]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	795b      	ldrb	r3, [r3, #5]
 800f6ac:	2bfe      	cmp	r3, #254	@ 0xfe
 800f6ae:	d10e      	bne.n	800f6ce <ABCC_DrvSerRunDriverTx+0xee>
                ( drv_psWriteMessage->sHeader.bCmd == ABP_APPD_REMAP_ADI_READ_AREA ) )
 800f6b0:	4b2a      	ldr	r3, [pc, #168]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	7a1b      	ldrb	r3, [r3, #8]
            if( ( drv_psWriteMessage->sHeader.bDestObj == ABP_OBJ_NUM_APPD ) &&
 800f6b6:	2b14      	cmp	r3, #20
 800f6b8:	d109      	bne.n	800f6ce <ABCC_DrvSerRunDriverTx+0xee>
            {
               if( pnABCC_DrvCbfReadRemapDone != NULL )
 800f6ba:	4b2c      	ldr	r3, [pc, #176]	@ (800f76c <ABCC_DrvSerRunDriverTx+0x18c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d005      	beq.n	800f6ce <ABCC_DrvSerRunDriverTx+0xee>
               {
                  pnABCC_DrvCbfReadRemapDone( drv_psWriteMessage );
 800f6c2:	4b2a      	ldr	r3, [pc, #168]	@ (800f76c <ABCC_DrvSerRunDriverTx+0x18c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a25      	ldr	r2, [pc, #148]	@ (800f75c <ABCC_DrvSerRunDriverTx+0x17c>)
 800f6c8:	6812      	ldr	r2, [r2, #0]
 800f6ca:	4610      	mov	r0, r2
 800f6cc:	4798      	blx	r3
               }
            }
         }
      }

      if( drv_bNbrOfCmds > 0 )
 800f6ce:	4b28      	ldr	r3, [pc, #160]	@ (800f770 <ABCC_DrvSerRunDriverTx+0x190>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d006      	beq.n	800f6e4 <ABCC_DrvSerRunDriverTx+0x104>
      {
         drv_sTxTelegram.bControl |= ABP_CTRL_R_BIT;
 800f6d6:	4b1f      	ldr	r3, [pc, #124]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f043 0320 	orr.w	r3, r3, #32
 800f6de:	b2da      	uxtb	r2, r3
 800f6e0:	4b1c      	ldr	r3, [pc, #112]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f6e2:	701a      	strb	r2, [r3, #0]
      }

      drv_bpRdPd = NULL;
 800f6e4:	4b23      	ldr	r3, [pc, #140]	@ (800f774 <ABCC_DrvSerRunDriverTx+0x194>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	601a      	str	r2, [r3, #0]

      /*
      ** Apply the CRC checksum.
      */
      iCrc = CRC_Crc16( (UINT8*)&drv_sTxTelegram, drv_iTxFrameSize );
 800f6ea:	4b23      	ldr	r3, [pc, #140]	@ (800f778 <ABCC_DrvSerRunDriverTx+0x198>)
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	4818      	ldr	r0, [pc, #96]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f6f2:	f7ff fd2f 	bl	800f154 <CRC_Crc16>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	807b      	strh	r3, [r7, #2]

      drv_sTxTelegram.abData[ drv_iWritePdSize + 1] = (UINT8)( iCrc & 0xFF );
 800f6fa:	4b20      	ldr	r3, [pc, #128]	@ (800f77c <ABCC_DrvSerRunDriverTx+0x19c>)
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	3301      	adds	r3, #1
 800f700:	887a      	ldrh	r2, [r7, #2]
 800f702:	b2d1      	uxtb	r1, r2
 800f704:	4a13      	ldr	r2, [pc, #76]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f706:	4413      	add	r3, r2
 800f708:	460a      	mov	r2, r1
 800f70a:	745a      	strb	r2, [r3, #17]
      drv_sTxTelegram.abData[ drv_iWritePdSize  ] = (UINT8)( iCrc >> 8 );
 800f70c:	887b      	ldrh	r3, [r7, #2]
 800f70e:	0a1b      	lsrs	r3, r3, #8
 800f710:	b29a      	uxth	r2, r3
 800f712:	4b1a      	ldr	r3, [pc, #104]	@ (800f77c <ABCC_DrvSerRunDriverTx+0x19c>)
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	4619      	mov	r1, r3
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	4b0e      	ldr	r3, [pc, #56]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f71c:	440b      	add	r3, r1
 800f71e:	745a      	strb	r2, [r3, #17]

      /*
      ** Send  TX telegram and received Rx telegram.
      */
      ABCC_LOG_DEBUG_UART_HEXDUMP_TX( (UINT8*)&drv_sTxTelegram, drv_iTxFrameSize + SER_CRC_LEN );
      ABCC_TimerStart( xTelegramTmoHandle, iTelegramTmoMs );
 800f720:	4b17      	ldr	r3, [pc, #92]	@ (800f780 <ABCC_DrvSerRunDriverTx+0x1a0>)
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	4a17      	ldr	r2, [pc, #92]	@ (800f784 <ABCC_DrvSerRunDriverTx+0x1a4>)
 800f726:	8812      	ldrh	r2, [r2, #0]
 800f728:	4611      	mov	r1, r2
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7ff fc28 	bl	800ef80 <ABCC_TimerStart>
      ABCC_HAL_SerSendReceive( (UINT8*)&drv_sTxTelegram,  (UINT8*)&drv_sRxTelegram, drv_iTxFrameSize + SER_CRC_LEN, drv_iRxFrameSize + SER_CRC_LEN );
 800f730:	4b11      	ldr	r3, [pc, #68]	@ (800f778 <ABCC_DrvSerRunDriverTx+0x198>)
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	3302      	adds	r3, #2
 800f736:	b29a      	uxth	r2, r3
 800f738:	4b13      	ldr	r3, [pc, #76]	@ (800f788 <ABCC_DrvSerRunDriverTx+0x1a8>)
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	3302      	adds	r3, #2
 800f73e:	b29b      	uxth	r3, r3
 800f740:	4912      	ldr	r1, [pc, #72]	@ (800f78c <ABCC_DrvSerRunDriverTx+0x1ac>)
 800f742:	4804      	ldr	r0, [pc, #16]	@ (800f754 <ABCC_DrvSerRunDriverTx+0x174>)
 800f744:	f005 f910 	bl	8014968 <ABCC_HAL_SerSendReceive>
   }
}
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	24002df8 	.word	0x24002df8
 800f754:	24003228 	.word	0x24003228
 800f758:	24003668 	.word	0x24003668
 800f75c:	24002dfc 	.word	0x24002dfc
 800f760:	2400363c 	.word	0x2400363c
 800f764:	24003650 	.word	0x24003650
 800f768:	24003229 	.word	0x24003229
 800f76c:	240014fc 	.word	0x240014fc
 800f770:	24002e10 	.word	0x24002e10
 800f774:	24003658 	.word	0x24003658
 800f778:	24002e0c 	.word	0x24002e0c
 800f77c:	24002e08 	.word	0x24002e08
 800f780:	24003664 	.word	0x24003664
 800f784:	2400366c 	.word	0x2400366c
 800f788:	24002e0e 	.word	0x24002e0e
 800f78c:	24002e14 	.word	0x24002e14

0800f790 <ABCC_DrvSerRunDriverRx>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
ABP_MsgType* ABCC_DrvSerRunDriverRx( void )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b086      	sub	sp, #24
 800f794:	af04      	add	r7, sp, #16
   UINT16 iCalcCrc;
   UINT16 iReceivedCrc;

   ABP_MsgType* psWriteMsg = NULL;
 800f796:	2300      	movs	r3, #0
 800f798:	607b      	str	r3, [r7, #4]

   if( drv_eState == SM_SER_WAITING_FOR_PONG )
 800f79a:	4b8b      	ldr	r3, [pc, #556]	@ (800f9c8 <ABCC_DrvSerRunDriverRx+0x238>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	2b02      	cmp	r3, #2
 800f7a0:	f040 80ff 	bne.w	800f9a2 <ABCC_DrvSerRunDriverRx+0x212>
   {
      if( !drv_fNewRxTelegramReceived )
 800f7a4:	4b89      	ldr	r3, [pc, #548]	@ (800f9cc <ABCC_DrvSerRunDriverRx+0x23c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10a      	bne.n	800f7c2 <ABCC_DrvSerRunDriverRx+0x32>
      {
         if( fTelegramTmo )
 800f7ac:	4b88      	ldr	r3, [pc, #544]	@ (800f9d0 <ABCC_DrvSerRunDriverRx+0x240>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d004      	beq.n	800f7be <ABCC_DrvSerRunDriverRx+0x2e>
         {
            ABCC_HAL_SerRestart();
 800f7b4:	f005 f94a 	bl	8014a4c <ABCC_HAL_SerRestart>
            drv_eState = SM_SER_RDY_TO_SEND_PING;
 800f7b8:	4b83      	ldr	r3, [pc, #524]	@ (800f9c8 <ABCC_DrvSerRunDriverRx+0x238>)
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	701a      	strb	r2, [r3, #0]
         }

         /*
         ** Nothing has happened. No pong was received.
         */
         return( NULL );
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e0fe      	b.n	800f9c0 <ABCC_DrvSerRunDriverRx+0x230>
      }

      /*
      ** Telegram received
      */
      drv_fNewRxTelegramReceived = FALSE;
 800f7c2:	4b82      	ldr	r3, [pc, #520]	@ (800f9cc <ABCC_DrvSerRunDriverRx+0x23c>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	601a      	str	r2, [r3, #0]

      ABCC_LOG_DEBUG_UART_HEXDUMP_RX( (UINT8*)&drv_sRxTelegram, drv_iRxFrameSize + SER_CRC_LEN );

      iReceivedCrc = CRC_Crc16( (UINT8*)&drv_sRxTelegram, drv_iRxFrameSize );
 800f7c8:	4b82      	ldr	r3, [pc, #520]	@ (800f9d4 <ABCC_DrvSerRunDriverRx+0x244>)
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4882      	ldr	r0, [pc, #520]	@ (800f9d8 <ABCC_DrvSerRunDriverRx+0x248>)
 800f7d0:	f7ff fcc0 	bl	800f154 <CRC_Crc16>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	807b      	strh	r3, [r7, #2]

      /*
      ** Read the CRC that is sent with the telegram.
      */
      iCalcCrc = (UINT16)drv_sRxTelegram.abData[ drv_iReadPdSize ] << 8;
 800f7d8:	4b80      	ldr	r3, [pc, #512]	@ (800f9dc <ABCC_DrvSerRunDriverRx+0x24c>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b7e      	ldr	r3, [pc, #504]	@ (800f9d8 <ABCC_DrvSerRunDriverRx+0x248>)
 800f7e0:	4413      	add	r3, r2
 800f7e2:	7c5b      	ldrb	r3, [r3, #17]
 800f7e4:	021b      	lsls	r3, r3, #8
 800f7e6:	803b      	strh	r3, [r7, #0]
      iCalcCrc |= (UINT16)drv_sRxTelegram.abData[ drv_iReadPdSize + 1 ];
 800f7e8:	4b7c      	ldr	r3, [pc, #496]	@ (800f9dc <ABCC_DrvSerRunDriverRx+0x24c>)
 800f7ea:	881b      	ldrh	r3, [r3, #0]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	4a7a      	ldr	r2, [pc, #488]	@ (800f9d8 <ABCC_DrvSerRunDriverRx+0x248>)
 800f7f0:	4413      	add	r3, r2
 800f7f2:	7c5b      	ldrb	r3, [r3, #17]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	883b      	ldrh	r3, [r7, #0]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	803b      	strh	r3, [r7, #0]

      if( ( ( drv_bStatus & ABP_CTRL_T_BIT ) ==
            ( drv_sRxTelegram.bStatus & ABP_CTRL_T_BIT ) ) ||
 800f7fc:	4b76      	ldr	r3, [pc, #472]	@ (800f9d8 <ABCC_DrvSerRunDriverRx+0x248>)
 800f7fe:	781a      	ldrb	r2, [r3, #0]
      if( ( ( drv_bStatus & ABP_CTRL_T_BIT ) ==
 800f800:	4b77      	ldr	r3, [pc, #476]	@ (800f9e0 <ABCC_DrvSerRunDriverRx+0x250>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	4053      	eors	r3, r2
 800f806:	b2db      	uxtb	r3, r3
 800f808:	b25b      	sxtb	r3, r3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	da03      	bge.n	800f816 <ABCC_DrvSerRunDriverRx+0x86>
            ( drv_sRxTelegram.bStatus & ABP_CTRL_T_BIT ) ) ||
 800f80e:	883a      	ldrh	r2, [r7, #0]
 800f810:	887b      	ldrh	r3, [r7, #2]
 800f812:	429a      	cmp	r2, r3
 800f814:	d019      	beq.n	800f84a <ABCC_DrvSerRunDriverRx+0xba>
          ( iCalcCrc != iReceivedCrc ) )
      {
         drv_iCrcErrorCount++;
 800f816:	4b73      	ldr	r3, [pc, #460]	@ (800f9e4 <ABCC_DrvSerRunDriverRx+0x254>)
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	3301      	adds	r3, #1
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	4b71      	ldr	r3, [pc, #452]	@ (800f9e4 <ABCC_DrvSerRunDriverRx+0x254>)
 800f820:	801a      	strh	r2, [r3, #0]
         ABCC_LOG_WARNING( ABCC_EC_CHECKSUM_MISMATCH,
 800f822:	4b70      	ldr	r3, [pc, #448]	@ (800f9e4 <ABCC_DrvSerRunDriverRx+0x254>)
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	4b6e      	ldr	r3, [pc, #440]	@ (800f9e4 <ABCC_DrvSerRunDriverRx+0x254>)
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	9302      	str	r3, [sp, #8]
 800f82e:	4b6e      	ldr	r3, [pc, #440]	@ (800f9e8 <ABCC_DrvSerRunDriverRx+0x258>)
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	f240 2325 	movw	r3, #549	@ 0x225
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	4b6c      	ldr	r3, [pc, #432]	@ (800f9ec <ABCC_DrvSerRunDriverRx+0x25c>)
 800f83a:	2125      	movs	r1, #37	@ 0x25
 800f83c:	2002      	movs	r0, #2
 800f83e:	f7fd ff03 	bl	800d648 <ABCC_LogHandler>
            drv_iCrcErrorCount,
            "CRC check failed for received message (error count: %" PRIu16 ")\n",
            drv_iCrcErrorCount );
         ABCC_HAL_SerRestart();
 800f842:	f005 f903 	bl	8014a4c <ABCC_HAL_SerRestart>
         return( NULL );
 800f846:	2300      	movs	r3, #0
 800f848:	e0ba      	b.n	800f9c0 <ABCC_DrvSerRunDriverRx+0x230>
      }

      if( fWdTmo )
 800f84a:	4b69      	ldr	r3, [pc, #420]	@ (800f9f0 <ABCC_DrvSerRunDriverRx+0x260>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d001      	beq.n	800f856 <ABCC_DrvSerRunDriverRx+0xc6>
      {
         ABCC_CbfWdTimeoutRecovered();
 800f852:	f002 fae3 	bl	8011e1c <ABCC_CbfWdTimeoutRecovered>
      }

      /*
      ** Correct telgram received
      */
      ABCC_TimerStop( xTelegramTmoHandle );
 800f856:	4b67      	ldr	r3, [pc, #412]	@ (800f9f4 <ABCC_DrvSerRunDriverRx+0x264>)
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7ff fbd0 	bl	800f000 <ABCC_TimerStop>
      fTelegramTmo = FALSE;
 800f860:	4b5b      	ldr	r3, [pc, #364]	@ (800f9d0 <ABCC_DrvSerRunDriverRx+0x240>)
 800f862:	2200      	movs	r2, #0
 800f864:	601a      	str	r2, [r3, #0]

      ABCC_TimerStop( xWdTmoHandle );
 800f866:	4b64      	ldr	r3, [pc, #400]	@ (800f9f8 <ABCC_DrvSerRunDriverRx+0x268>)
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7ff fbc8 	bl	800f000 <ABCC_TimerStop>
      fWdTmo = FALSE;
 800f870:	4b5f      	ldr	r3, [pc, #380]	@ (800f9f0 <ABCC_DrvSerRunDriverRx+0x260>)
 800f872:	2200      	movs	r2, #0
 800f874:	601a      	str	r2, [r3, #0]

      /*
      ** Restart watchdog
      */
      ABCC_TimerStart( xWdTmoHandle, ABCC_CFG_WD_TIMEOUT_MS );
 800f876:	4b60      	ldr	r3, [pc, #384]	@ (800f9f8 <ABCC_DrvSerRunDriverRx+0x268>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f87e:	4618      	mov	r0, r3
 800f880:	f7ff fb7e 	bl	800ef80 <ABCC_TimerStart>

      /*
      ** Save the current anybus status.
      */
      drv_bStatus = drv_sRxTelegram.bStatus;
 800f884:	4b54      	ldr	r3, [pc, #336]	@ (800f9d8 <ABCC_DrvSerRunDriverRx+0x248>)
 800f886:	781a      	ldrb	r2, [r3, #0]
 800f888:	4b55      	ldr	r3, [pc, #340]	@ (800f9e0 <ABCC_DrvSerRunDriverRx+0x250>)
 800f88a:	701a      	strb	r2, [r3, #0]
      drv_bpRdPd = drv_sRxTelegram.abData;
 800f88c:	4b5b      	ldr	r3, [pc, #364]	@ (800f9fc <ABCC_DrvSerRunDriverRx+0x26c>)
 800f88e:	4a5c      	ldr	r2, [pc, #368]	@ (800fa00 <ABCC_DrvSerRunDriverRx+0x270>)
 800f890:	601a      	str	r2, [r3, #0]

      /*---------------------------------------------------------------------------
      ** Write message handling.
      **---------------------------------------------------------------------------
      */
      if( drv_isWrMsgSendingInprogress( &sTxFragHandle ) )
 800f892:	485c      	ldr	r0, [pc, #368]	@ (800fa04 <ABCC_DrvSerRunDriverRx+0x274>)
 800f894:	f7ff fd45 	bl	800f322 <drv_isWrMsgSendingInprogress>
 800f898:	4603      	mov	r3, r0
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d026      	beq.n	800f8ec <ABCC_DrvSerRunDriverRx+0x15c>
      {
         /*
         ** End mark is succesfully sent
         */

         if( fSendWriteMessageEndMark )
 800f89e:	4b5a      	ldr	r3, [pc, #360]	@ (800fa08 <ABCC_DrvSerRunDriverRx+0x278>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d01c      	beq.n	800f8e0 <ABCC_DrvSerRunDriverRx+0x150>
         {
            fSendWriteMessageEndMark = FALSE;
 800f8a6:	4b58      	ldr	r3, [pc, #352]	@ (800fa08 <ABCC_DrvSerRunDriverRx+0x278>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
            drv_WriteFragInit( &sTxFragHandle, 0, 0, 0 );
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	4854      	ldr	r0, [pc, #336]	@ (800fa04 <ABCC_DrvSerRunDriverRx+0x274>)
 800f8b4:	f7ff fcc6 	bl	800f244 <drv_WriteFragInit>
            psWriteMsg = drv_psWriteMessage;
 800f8b8:	4b54      	ldr	r3, [pc, #336]	@ (800fa0c <ABCC_DrvSerRunDriverRx+0x27c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	607b      	str	r3, [r7, #4]

            /*
            ** Update the application flow control.
            */
            if( ( drv_psWriteMessage->sHeader.bCmd & ABP_MSG_HEADER_C_BIT ) == 0 )
 800f8be:	4b53      	ldr	r3, [pc, #332]	@ (800fa0c <ABCC_DrvSerRunDriverRx+0x27c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	7a1b      	ldrb	r3, [r3, #8]
 800f8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d105      	bne.n	800f8d8 <ABCC_DrvSerRunDriverRx+0x148>
            {
               drv_bNbrOfCmds++;
 800f8cc:	4b50      	ldr	r3, [pc, #320]	@ (800fa10 <ABCC_DrvSerRunDriverRx+0x280>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	4b4e      	ldr	r3, [pc, #312]	@ (800fa10 <ABCC_DrvSerRunDriverRx+0x280>)
 800f8d6:	701a      	strb	r2, [r3, #0]
            }

            drv_psWriteMessage = 0;
 800f8d8:	4b4c      	ldr	r3, [pc, #304]	@ (800fa0c <ABCC_DrvSerRunDriverRx+0x27c>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	e005      	b.n	800f8ec <ABCC_DrvSerRunDriverRx+0x15c>
         }
         else
         {
            fSendWriteMessageEndMark = drv_PrepareNextWriteFrag( &sTxFragHandle );
 800f8e0:	4848      	ldr	r0, [pc, #288]	@ (800fa04 <ABCC_DrvSerRunDriverRx+0x274>)
 800f8e2:	f7ff fcf3 	bl	800f2cc <drv_PrepareNextWriteFrag>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	4a47      	ldr	r2, [pc, #284]	@ (800fa08 <ABCC_DrvSerRunDriverRx+0x278>)
 800f8ea:	6013      	str	r3, [r2, #0]

      /*---------------------------------------------------------------------------
      ** Read message handling
      ** --------------------------------------------------------------------------
      */
      if( drv_bStatus & ABP_STAT_M_BIT  )
 800f8ec:	4b3c      	ldr	r3, [pc, #240]	@ (800f9e0 <ABCC_DrvSerRunDriverRx+0x250>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d02e      	beq.n	800f956 <ABCC_DrvSerRunDriverRx+0x1c6>
      {
         if( !drv_isRdMsgReceiveInprogress( &sRxFragHandle ) )
 800f8f8:	4846      	ldr	r0, [pc, #280]	@ (800fa14 <ABCC_DrvSerRunDriverRx+0x284>)
 800f8fa:	f7ff fd6b 	bl	800f3d4 <drv_isRdMsgReceiveInprogress>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d123      	bne.n	800f94c <ABCC_DrvSerRunDriverRx+0x1bc>
         {
            if( drv_psReadMessage == NULL )
 800f904:	4b44      	ldr	r3, [pc, #272]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d116      	bne.n	800f93a <ABCC_DrvSerRunDriverRx+0x1aa>
            {
               DrvSerSetMsgReceiverBuffer( ABCC_MemAlloc() );
 800f90c:	f7fd ffaa 	bl	800d864 <ABCC_MemAlloc>
 800f910:	4603      	mov	r3, r0
 800f912:	4618      	mov	r0, r3
 800f914:	f000 f984 	bl	800fc20 <DrvSerSetMsgReceiverBuffer>

               if( drv_psReadMessage == NULL )
 800f918:	4b3f      	ldr	r3, [pc, #252]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d10c      	bne.n	800f93a <ABCC_DrvSerRunDriverRx+0x1aa>
               {
                  ABCC_LOG_WARNING( ABCC_EC_OUT_OF_MSG_BUFFERS,
 800f920:	4b3e      	ldr	r3, [pc, #248]	@ (800fa1c <ABCC_DrvSerRunDriverRx+0x28c>)
 800f922:	9301      	str	r3, [sp, #4]
 800f924:	f44f 731d 	mov.w	r3, #628	@ 0x274
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	4b30      	ldr	r3, [pc, #192]	@ (800f9ec <ABCC_DrvSerRunDriverRx+0x25c>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	2104      	movs	r1, #4
 800f930:	2002      	movs	r0, #2
 800f932:	f7fd fe89 	bl	800d648 <ABCC_LogHandler>
                     0,
                     "Out of message buffers when attempting to read a message\n" );
                  return( NULL );
 800f936:	2300      	movs	r3, #0
 800f938:	e042      	b.n	800f9c0 <ABCC_DrvSerRunDriverRx+0x230>
            }

            /*
            ** Start receiving on legacy start position which corresponds to &drv_psReadMessage->sHeader.bSourceId
            */
            drv_InitReadFrag( &sRxFragHandle, &drv_psReadMessage->sHeader.bSourceId, SER_MSG_FRAG_LEN, ABCC_CFG_MAX_MSG_SIZE + SER_MSG_HEADER_LEN );
 800f93a:	4b37      	ldr	r3, [pc, #220]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	1d19      	adds	r1, r3, #4
 800f940:	f240 53fc 	movw	r3, #1532	@ 0x5fc
 800f944:	2210      	movs	r2, #16
 800f946:	4833      	ldr	r0, [pc, #204]	@ (800fa14 <ABCC_DrvSerRunDriverRx+0x284>)
 800f948:	f7ff fcfc 	bl	800f344 <drv_InitReadFrag>
         }

         drv_AddReadFrag( &sRxFragHandle, drv_sRxTelegram.abRdMsg );
 800f94c:	4934      	ldr	r1, [pc, #208]	@ (800fa20 <ABCC_DrvSerRunDriverRx+0x290>)
 800f94e:	4831      	ldr	r0, [pc, #196]	@ (800fa14 <ABCC_DrvSerRunDriverRx+0x284>)
 800f950:	f7ff fd15 	bl	800f37e <drv_AddReadFrag>
 800f954:	e021      	b.n	800f99a <ABCC_DrvSerRunDriverRx+0x20a>
      }
      else
      {
         if( drv_isRdMsgReceiveInprogress( &sRxFragHandle ) )
 800f956:	482f      	ldr	r0, [pc, #188]	@ (800fa14 <ABCC_DrvSerRunDriverRx+0x284>)
 800f958:	f7ff fd3c 	bl	800f3d4 <drv_isRdMsgReceiveInprogress>
 800f95c:	4603      	mov	r3, r0
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d01b      	beq.n	800f99a <ABCC_DrvSerRunDriverRx+0x20a>
         {
            /*
            ** Empty message endmarker received
            ** Copy old message format size parameter to Large message format used by the driver
            */
            drv_psReadMessage->sHeader.iDataSize = iTOiLe( (UINT16)drv_psReadMessage->sHeader.bReserved );
 800f962:	4b2d      	ldr	r3, [pc, #180]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	7a5a      	ldrb	r2, [r3, #9]
 800f968:	4b2b      	ldr	r3, [pc, #172]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	801a      	strh	r2, [r3, #0]

            /*
            ** Update the application flow control.
            */
            if( drv_psReadMessage->sHeader.bCmd & ABP_MSG_HEADER_C_BIT )
 800f96e:	4b2a      	ldr	r3, [pc, #168]	@ (800fa18 <ABCC_DrvSerRunDriverRx+0x288>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	7a1b      	ldrb	r3, [r3, #8]
 800f974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d005      	beq.n	800f988 <ABCC_DrvSerRunDriverRx+0x1f8>
            {
               drv_bNbrOfCmds--;
 800f97c:	4b24      	ldr	r3, [pc, #144]	@ (800fa10 <ABCC_DrvSerRunDriverRx+0x280>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	3b01      	subs	r3, #1
 800f982:	b2da      	uxtb	r2, r3
 800f984:	4b22      	ldr	r3, [pc, #136]	@ (800fa10 <ABCC_DrvSerRunDriverRx+0x280>)
 800f986:	701a      	strb	r2, [r3, #0]
            }
            drv_fNewReadMessage = TRUE;
 800f988:	4b26      	ldr	r3, [pc, #152]	@ (800fa24 <ABCC_DrvSerRunDriverRx+0x294>)
 800f98a:	2201      	movs	r2, #1
 800f98c:	601a      	str	r2, [r3, #0]
            drv_InitReadFrag( &sRxFragHandle, 0, 0, 0 );
 800f98e:	2300      	movs	r3, #0
 800f990:	2200      	movs	r2, #0
 800f992:	2100      	movs	r1, #0
 800f994:	481f      	ldr	r0, [pc, #124]	@ (800fa14 <ABCC_DrvSerRunDriverRx+0x284>)
 800f996:	f7ff fcd5 	bl	800f344 <drv_InitReadFrag>
         }
      }
      drv_eState = SM_SER_RDY_TO_SEND_PING;
 800f99a:	4b0b      	ldr	r3, [pc, #44]	@ (800f9c8 <ABCC_DrvSerRunDriverRx+0x238>)
 800f99c:	2201      	movs	r2, #1
 800f99e:	701a      	strb	r2, [r3, #0]
 800f9a0:	e00d      	b.n	800f9be <ABCC_DrvSerRunDriverRx+0x22e>
   }
   else if( drv_eState == SM_SER_INIT )
 800f9a2:	4b09      	ldr	r3, [pc, #36]	@ (800f9c8 <ABCC_DrvSerRunDriverRx+0x238>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d109      	bne.n	800f9be <ABCC_DrvSerRunDriverRx+0x22e>
   {
      ABCC_TimerStart( xWdTmoHandle, ABCC_CFG_WD_TIMEOUT_MS );
 800f9aa:	4b13      	ldr	r3, [pc, #76]	@ (800f9f8 <ABCC_DrvSerRunDriverRx+0x268>)
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7ff fae4 	bl	800ef80 <ABCC_TimerStart>
      drv_eState = SM_SER_RDY_TO_SEND_PING;
 800f9b8:	4b03      	ldr	r3, [pc, #12]	@ (800f9c8 <ABCC_DrvSerRunDriverRx+0x238>)
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	701a      	strb	r2, [r3, #0]
   }
   return( psWriteMsg );
 800f9be:	687b      	ldr	r3, [r7, #4]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	24002df8 	.word	0x24002df8
 800f9cc:	24003654 	.word	0x24003654
 800f9d0:	24003668 	.word	0x24003668
 800f9d4:	24002e0e 	.word	0x24002e0e
 800f9d8:	24002e14 	.word	0x24002e14
 800f9dc:	24002e0a 	.word	0x24002e0a
 800f9e0:	24002df9 	.word	0x24002df9
 800f9e4:	2400365c 	.word	0x2400365c
 800f9e8:	080166f0 	.word	0x080166f0
 800f9ec:	080166a0 	.word	0x080166a0
 800f9f0:	24003660 	.word	0x24003660
 800f9f4:	24003664 	.word	0x24003664
 800f9f8:	2400365e 	.word	0x2400365e
 800f9fc:	24003658 	.word	0x24003658
 800fa00:	24002e25 	.word	0x24002e25
 800fa04:	2400363c 	.word	0x2400363c
 800fa08:	24003650 	.word	0x24003650
 800fa0c:	24002dfc 	.word	0x24002dfc
 800fa10:	24002e10 	.word	0x24002e10
 800fa14:	24003644 	.word	0x24003644
 800fa18:	24002e00 	.word	0x24002e00
 800fa1c:	0801672c 	.word	0x0801672c
 800fa20:	24002e15 	.word	0x24002e15
 800fa24:	24002e04 	.word	0x24002e04

0800fa28 <ABCC_DrvSerISR>:

UINT16 ABCC_DrvSerISR( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	af00      	add	r7, sp, #0
   return( 0 );
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <ABCC_DrvSerWriteMessage>:

BOOL ABCC_DrvSerWriteMessage( ABP_MsgType* psWriteMsg )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af04      	add	r7, sp, #16
 800fa3e:	6078      	str	r0, [r7, #4]
   ABCC_PORT_UseCritical();
   if( !psWriteMsg )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d10a      	bne.n	800fa5c <ABCC_DrvSerWriteMessage+0x24>
   {
      ABCC_LOG_FATAL( ABCC_EC_UNEXPECTED_NULL_PTR,
 800fa46:	4b13      	ldr	r3, [pc, #76]	@ (800fa94 <ABCC_DrvSerWriteMessage+0x5c>)
 800fa48:	9301      	str	r3, [sp, #4]
 800fa4a:	f44f 732b 	mov.w	r3, #684	@ 0x2ac
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	4b11      	ldr	r3, [pc, #68]	@ (800fa98 <ABCC_DrvSerWriteMessage+0x60>)
 800fa52:	2200      	movs	r2, #0
 800fa54:	211e      	movs	r1, #30
 800fa56:	2000      	movs	r0, #0
 800fa58:	f7fd fdf6 	bl	800d648 <ABCC_LogHandler>
         "Unexpected NULL pointer\n" );
   }

   ABCC_PORT_EnterCritical();

   if( drv_psWriteMessage )
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	@ (800fa9c <ABCC_DrvSerWriteMessage+0x64>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d00f      	beq.n	800fa84 <ABCC_DrvSerWriteMessage+0x4c>
   {
      ABCC_LOG_FATAL( ABCC_EC_INCORRECT_STATE,
 800fa64:	4b0d      	ldr	r3, [pc, #52]	@ (800fa9c <ABCC_DrvSerWriteMessage+0x64>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	461a      	mov	r2, r3
 800fa6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa9c <ABCC_DrvSerWriteMessage+0x64>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	4b0b      	ldr	r3, [pc, #44]	@ (800faa0 <ABCC_DrvSerWriteMessage+0x68>)
 800fa72:	9301      	str	r3, [sp, #4]
 800fa74:	f240 23b5 	movw	r3, #693	@ 0x2b5
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	4b07      	ldr	r3, [pc, #28]	@ (800fa98 <ABCC_DrvSerWriteMessage+0x60>)
 800fa7c:	2107      	movs	r1, #7
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7fd fde2 	bl	800d648 <ABCC_LogHandler>
         (UINT32)drv_psWriteMessage,
         "Expected drv_psWriteMessage to be NULL, was %p\n",
         (void*)drv_psWriteMessage );
   }

   drv_psWriteMessage = psWriteMsg;
 800fa84:	4a05      	ldr	r2, [pc, #20]	@ (800fa9c <ABCC_DrvSerWriteMessage+0x64>)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6013      	str	r3, [r2, #0]
   ABCC_PORT_ExitCritical();

   /*
   ** The serial driver owns the buffer.
   */
   return( FALSE );
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	08016768 	.word	0x08016768
 800fa98:	080166a0 	.word	0x080166a0
 800fa9c:	24002dfc 	.word	0x24002dfc
 800faa0:	08016784 	.word	0x08016784

0800faa4 <ABCC_DrvSerWriteProcessData>:

void ABCC_DrvSerWriteProcessData( void* pxProcessData )
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b086      	sub	sp, #24
 800faa8:	af04      	add	r7, sp, #16
 800faaa:	6078      	str	r0, [r7, #4]
   (void)pxProcessData;
   /*
   ** Nothing needs to be done here since the buffer is already updated by the application
   */
   if( drv_eState != SM_SER_RDY_TO_SEND_PING )
 800faac:	4b0b      	ldr	r3, [pc, #44]	@ (800fadc <ABCC_DrvSerWriteProcessData+0x38>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d00f      	beq.n	800fad4 <ABCC_DrvSerWriteProcessData+0x30>
   {
      ABCC_LOG_ERROR( ABCC_EC_INCORRECT_STATE,
 800fab4:	4b09      	ldr	r3, [pc, #36]	@ (800fadc <ABCC_DrvSerWriteProcessData+0x38>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	4b08      	ldr	r3, [pc, #32]	@ (800fadc <ABCC_DrvSerWriteProcessData+0x38>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	9302      	str	r3, [sp, #8]
 800fac0:	4b07      	ldr	r3, [pc, #28]	@ (800fae0 <ABCC_DrvSerWriteProcessData+0x3c>)
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	f44f 7333 	mov.w	r3, #716	@ 0x2cc
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	4b06      	ldr	r3, [pc, #24]	@ (800fae4 <ABCC_DrvSerWriteProcessData+0x40>)
 800facc:	2107      	movs	r1, #7
 800face:	2001      	movs	r0, #1
 800fad0:	f7fd fdba 	bl	800d648 <ABCC_LogHandler>
         (UINT32)drv_eState,
         "Wrong driver state (%d)\n",
         drv_eState );
   }
}
 800fad4:	bf00      	nop
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}
 800fadc:	24002df8 	.word	0x24002df8
 800fae0:	080167b4 	.word	0x080167b4
 800fae4:	080166a0 	.word	0x080166a0

0800fae8 <ABCC_DrvSerIsReadyForWriteMessage>:

/*
** This function must be called from a critical section.
*/
BOOL ABCC_DrvSerIsReadyForWriteMessage( void )
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
   BOOL fRdyForWrMsg = FALSE;
 800faee:	2300      	movs	r3, #0
 800faf0:	607b      	str	r3, [r7, #4]

   if( drv_psWriteMessage == NULL )
 800faf2:	4b06      	ldr	r3, [pc, #24]	@ (800fb0c <ABCC_DrvSerIsReadyForWriteMessage+0x24>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d101      	bne.n	800fafe <ABCC_DrvSerIsReadyForWriteMessage+0x16>
   {
      fRdyForWrMsg = TRUE;
 800fafa:	2301      	movs	r3, #1
 800fafc:	607b      	str	r3, [r7, #4]
   }
   return( fRdyForWrMsg );
 800fafe:	687b      	ldr	r3, [r7, #4]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	24002dfc 	.word	0x24002dfc

0800fb10 <ABCC_DrvSerIsReadyForCmd>:

/*
** This function must be called from a critical section.
*/
BOOL ABCC_DrvSerIsReadyForCmd( void )
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	af00      	add	r7, sp, #0
   return( pnABCC_DrvISReadyForWriteMessage() && ( drv_bStatus & ABP_STAT_R_BIT ) );
 800fb14:	4b08      	ldr	r3, [pc, #32]	@ (800fb38 <ABCC_DrvSerIsReadyForCmd+0x28>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4798      	blx	r3
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d007      	beq.n	800fb30 <ABCC_DrvSerIsReadyForCmd+0x20>
 800fb20:	4b06      	ldr	r3, [pc, #24]	@ (800fb3c <ABCC_DrvSerIsReadyForCmd+0x2c>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	f003 0320 	and.w	r3, r3, #32
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d001      	beq.n	800fb30 <ABCC_DrvSerIsReadyForCmd+0x20>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	e000      	b.n	800fb32 <ABCC_DrvSerIsReadyForCmd+0x22>
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	bd80      	pop	{r7, pc}
 800fb36:	bf00      	nop
 800fb38:	24001498 	.word	0x24001498
 800fb3c:	24002df9 	.word	0x24002df9

0800fb40 <ABCC_DrvSerSetNbrOfCmds>:

void ABCC_DrvSerSetNbrOfCmds( UINT8 bNbrOfCmds )
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	4603      	mov	r3, r0
 800fb48:	71fb      	strb	r3, [r7, #7]
   drv_bNbrOfCmds = bNbrOfCmds;
 800fb4a:	4a04      	ldr	r2, [pc, #16]	@ (800fb5c <ABCC_DrvSerSetNbrOfCmds+0x1c>)
 800fb4c:	79fb      	ldrb	r3, [r7, #7]
 800fb4e:	7013      	strb	r3, [r2, #0]
}
 800fb50:	bf00      	nop
 800fb52:	370c      	adds	r7, #12
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	24002e10 	.word	0x24002e10

0800fb60 <ABCC_DrvSerSetAppStatus>:

void ABCC_DrvSerSetAppStatus( ABP_AppStatusType eAppStatus )
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	4603      	mov	r3, r0
 800fb68:	71fb      	strb	r3, [r7, #7]
   (void)eAppStatus;
}
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr
	...

0800fb78 <ABCC_DrvSerSetPdSize>:

void ABCC_DrvSerSetPdSize( const UINT16  iReadPdSize, const UINT16  iWritePdSize )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af04      	add	r7, sp, #16
 800fb7e:	4603      	mov	r3, r0
 800fb80:	460a      	mov	r2, r1
 800fb82:	80fb      	strh	r3, [r7, #6]
 800fb84:	4613      	mov	r3, r2
 800fb86:	80bb      	strh	r3, [r7, #4]
   /*
   ** The serial application interface can't handle more than 256 bytes of PD.
   ** Pull the plug if someone orders a larger PD size than that.
   */
   if( iReadPdSize > ABP_MAX_PROCESS_DATA )
 800fb88:	88fb      	ldrh	r3, [r7, #6]
 800fb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fb8e:	d910      	bls.n	800fbb2 <ABCC_DrvSerSetPdSize+0x3a>
   {
      ABCC_LOG_ERROR( ABCC_EC_RDPD_SIZE_ERR,
 800fb90:	88fb      	ldrh	r3, [r7, #6]
 800fb92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fb96:	9203      	str	r2, [sp, #12]
 800fb98:	9302      	str	r3, [sp, #8]
 800fb9a:	4b1b      	ldr	r3, [pc, #108]	@ (800fc08 <ABCC_DrvSerSetPdSize+0x90>)
 800fb9c:	9301      	str	r3, [sp, #4]
 800fb9e:	f240 23fb 	movw	r3, #763	@ 0x2fb
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	4b19      	ldr	r3, [pc, #100]	@ (800fc0c <ABCC_DrvSerSetPdSize+0x94>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	210a      	movs	r1, #10
 800fbaa:	2001      	movs	r0, #1
 800fbac:	f7fd fd4c 	bl	800d648 <ABCC_LogHandler>
         0,
         "Read PD size too big for serial operating mode PD size error %" PRIu16 ">%d\n",
         iReadPdSize,
         ABP_MAX_PROCESS_DATA );

      return;
 800fbb0:	e026      	b.n	800fc00 <ABCC_DrvSerSetPdSize+0x88>
   }
   else if( iWritePdSize > ABP_MAX_PROCESS_DATA )
 800fbb2:	88bb      	ldrh	r3, [r7, #4]
 800fbb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbb8:	d910      	bls.n	800fbdc <ABCC_DrvSerSetPdSize+0x64>
   {
      ABCC_LOG_ERROR( ABCC_EC_WRPD_SIZE_ERR,
 800fbba:	88bb      	ldrh	r3, [r7, #4]
 800fbbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fbc0:	9203      	str	r2, [sp, #12]
 800fbc2:	9302      	str	r3, [sp, #8]
 800fbc4:	4b10      	ldr	r3, [pc, #64]	@ (800fc08 <ABCC_DrvSerSetPdSize+0x90>)
 800fbc6:	9301      	str	r3, [sp, #4]
 800fbc8:	f240 3305 	movw	r3, #773	@ 0x305
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	4b0f      	ldr	r3, [pc, #60]	@ (800fc0c <ABCC_DrvSerSetPdSize+0x94>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	2109      	movs	r1, #9
 800fbd4:	2001      	movs	r0, #1
 800fbd6:	f7fd fd37 	bl	800d648 <ABCC_LogHandler>
         0,
         "Read PD size too big for serial operating mode PD size error %" PRIu16 ">%d\n",
         iWritePdSize,
         ABP_MAX_PROCESS_DATA );

      return;
 800fbda:	e011      	b.n	800fc00 <ABCC_DrvSerSetPdSize+0x88>
   }

   /*
   **  Update lengths dependent on pd sizes
   */
   drv_iWritePdSize = iWritePdSize;
 800fbdc:	4a0c      	ldr	r2, [pc, #48]	@ (800fc10 <ABCC_DrvSerSetPdSize+0x98>)
 800fbde:	88bb      	ldrh	r3, [r7, #4]
 800fbe0:	8013      	strh	r3, [r2, #0]
   drv_iReadPdSize = iReadPdSize;
 800fbe2:	4a0c      	ldr	r2, [pc, #48]	@ (800fc14 <ABCC_DrvSerSetPdSize+0x9c>)
 800fbe4:	88fb      	ldrh	r3, [r7, #6]
 800fbe6:	8013      	strh	r3, [r2, #0]
   drv_iTxFrameSize = SER_CMD_STAT_REG_LEN + SER_MSG_FRAG_LEN + drv_iWritePdSize;
 800fbe8:	4b09      	ldr	r3, [pc, #36]	@ (800fc10 <ABCC_DrvSerSetPdSize+0x98>)
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	3311      	adds	r3, #17
 800fbee:	b29a      	uxth	r2, r3
 800fbf0:	4b09      	ldr	r3, [pc, #36]	@ (800fc18 <ABCC_DrvSerSetPdSize+0xa0>)
 800fbf2:	801a      	strh	r2, [r3, #0]
   drv_iRxFrameSize = SER_CMD_STAT_REG_LEN + SER_MSG_FRAG_LEN + drv_iReadPdSize;
 800fbf4:	4b07      	ldr	r3, [pc, #28]	@ (800fc14 <ABCC_DrvSerSetPdSize+0x9c>)
 800fbf6:	881b      	ldrh	r3, [r3, #0]
 800fbf8:	3311      	adds	r3, #17
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	4b07      	ldr	r3, [pc, #28]	@ (800fc1c <ABCC_DrvSerSetPdSize+0xa4>)
 800fbfe:	801a      	strh	r2, [r3, #0]
}
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	080167d0 	.word	0x080167d0
 800fc0c:	080166a0 	.word	0x080166a0
 800fc10:	24002e08 	.word	0x24002e08
 800fc14:	24002e0a 	.word	0x24002e0a
 800fc18:	24002e0c 	.word	0x24002e0c
 800fc1c:	24002e0e 	.word	0x24002e0e

0800fc20 <DrvSerSetMsgReceiverBuffer>:

static void DrvSerSetMsgReceiverBuffer( ABP_MsgType* const psReadMsg )
{
 800fc20:	b480      	push	{r7}
 800fc22:	b083      	sub	sp, #12
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
   /*
   ** The buffer can be NULL if we are out of msg resources.
   */
   drv_psReadMessage = psReadMsg;
 800fc28:	4a04      	ldr	r2, [pc, #16]	@ (800fc3c <DrvSerSetMsgReceiverBuffer+0x1c>)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6013      	str	r3, [r2, #0]
}
 800fc2e:	bf00      	nop
 800fc30:	370c      	adds	r7, #12
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	24002e00 	.word	0x24002e00

0800fc40 <ABCC_DrvSerGetIntStatus>:

UINT16 ABCC_DrvSerGetIntStatus( void )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_INTSTATUS_NOT_SUPPORTED_BY_DRV_IMPL,
 800fc46:	4b07      	ldr	r3, [pc, #28]	@ (800fc64 <ABCC_DrvSerGetIntStatus+0x24>)
 800fc48:	9301      	str	r3, [sp, #4]
 800fc4a:	f240 3321 	movw	r3, #801	@ 0x321
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4b05      	ldr	r3, [pc, #20]	@ (800fc68 <ABCC_DrvSerGetIntStatus+0x28>)
 800fc52:	2200      	movs	r2, #0
 800fc54:	2113      	movs	r1, #19
 800fc56:	2002      	movs	r0, #2
 800fc58:	f7fd fcf6 	bl	800d648 <ABCC_LogHandler>
      0,
      "Interrupt status not supported by serial driver\n" );

   return( 0 );
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	08016818 	.word	0x08016818
 800fc68:	080166a0 	.word	0x080166a0

0800fc6c <ABCC_DrvSerGetAnybusState>:

UINT8 ABCC_DrvSerGetAnybusState( void )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	af00      	add	r7, sp, #0
   return( drv_bStatus & ABP_STAT_S_BITS );
 800fc70:	4b04      	ldr	r3, [pc, #16]	@ (800fc84 <ABCC_DrvSerGetAnybusState+0x18>)
 800fc72:	781b      	ldrb	r3, [r3, #0]
 800fc74:	f003 0307 	and.w	r3, r3, #7
 800fc78:	b2db      	uxtb	r3, r3
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	24002df9 	.word	0x24002df9

0800fc88 <ABCC_DrvSerReadProcessData>:

void* ABCC_DrvSerReadProcessData( void )
{
 800fc88:	b480      	push	{r7}
 800fc8a:	af00      	add	r7, sp, #0
   return( drv_bpRdPd );
 800fc8c:	4b03      	ldr	r3, [pc, #12]	@ (800fc9c <ABCC_DrvSerReadProcessData+0x14>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	24003658 	.word	0x24003658

0800fca0 <ABCC_DrvSerReadMessage>:

ABP_MsgType* ABCC_DrvSerReadMessage( void )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
   ABP_MsgType* psMsg = NULL;
 800fca6:	2300      	movs	r3, #0
 800fca8:	607b      	str	r3, [r7, #4]

   if( drv_fNewReadMessage )
 800fcaa:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd4 <ABCC_DrvSerReadMessage+0x34>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d008      	beq.n	800fcc4 <ABCC_DrvSerReadMessage+0x24>
   {
      psMsg = drv_psReadMessage;
 800fcb2:	4b09      	ldr	r3, [pc, #36]	@ (800fcd8 <ABCC_DrvSerReadMessage+0x38>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	607b      	str	r3, [r7, #4]
      drv_fNewReadMessage = FALSE;
 800fcb8:	4b06      	ldr	r3, [pc, #24]	@ (800fcd4 <ABCC_DrvSerReadMessage+0x34>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
      drv_psReadMessage = NULL;
 800fcbe:	4b06      	ldr	r3, [pc, #24]	@ (800fcd8 <ABCC_DrvSerReadMessage+0x38>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	601a      	str	r2, [r3, #0]
   }

   return( psMsg );
 800fcc4:	687b      	ldr	r3, [r7, #4]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	24002e04 	.word	0x24002e04
 800fcd8:	24002e00 	.word	0x24002e00

0800fcdc <ABCC_DrvSerSetIntMask>:

void ABCC_DrvSerSetIntMask( const UINT16 iIntMask )
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	4603      	mov	r3, r0
 800fce4:	80fb      	strh	r3, [r7, #6]
   (void)iIntMask;
   /*
   ** Not possible to set interrupt mask for serial driver.
   */
}
 800fce6:	bf00      	nop
 800fce8:	370c      	adds	r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <ABCC_DrvSerGetWrPdBuffer>:

void* ABCC_DrvSerGetWrPdBuffer( void )
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	af00      	add	r7, sp, #0
   /*
   ** Return position to WrPd position in tx telegraam
   */
   return( drv_sTxTelegram.abData );
 800fcf8:	4b02      	ldr	r3, [pc, #8]	@ (800fd04 <ABCC_DrvSerGetWrPdBuffer+0x10>)
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	24003239 	.word	0x24003239

0800fd08 <ABCC_DrvSerGetModCap>:

UINT16 ABCC_DrvSerGetModCap( void )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b082      	sub	sp, #8
 800fd0c:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_MODCAP_NOT_SUPPORTED_BY_DRV_IMPL,
 800fd0e:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <ABCC_DrvSerGetModCap+0x24>)
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	f240 3352 	movw	r3, #850	@ 0x352
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	4b05      	ldr	r3, [pc, #20]	@ (800fd30 <ABCC_DrvSerGetModCap+0x28>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2114      	movs	r1, #20
 800fd1e:	2002      	movs	r0, #2
 800fd20:	f7fd fc92 	bl	800d648 <ABCC_LogHandler>
      0,
      "Module capability not supported by serial driver\n" );
   return( 0 );
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	0801684c 	.word	0x0801684c
 800fd30:	080166a0 	.word	0x080166a0

0800fd34 <ABCC_DrvSerGetLedStatus>:

UINT16 ABCC_DrvSerGetLedStatus( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_LEDSTATUS_NOT_SUPPORTED_BY_DRV_IMPL,
 800fd3a:	4b07      	ldr	r3, [pc, #28]	@ (800fd58 <ABCC_DrvSerGetLedStatus+0x24>)
 800fd3c:	9301      	str	r3, [sp, #4]
 800fd3e:	f240 335a 	movw	r3, #858	@ 0x35a
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	4b05      	ldr	r3, [pc, #20]	@ (800fd5c <ABCC_DrvSerGetLedStatus+0x28>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	2115      	movs	r1, #21
 800fd4a:	2002      	movs	r0, #2
 800fd4c:	f7fd fc7c 	bl	800d648 <ABCC_LogHandler>
      0,
      "LED status not supported by serial driver\n" );
   return( 0 );
 800fd50:	2300      	movs	r3, #0
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	08016880 	.word	0x08016880
 800fd5c:	080166a0 	.word	0x080166a0

0800fd60 <ABCC_DrvSerIsReadyForWrPd>:

BOOL ABCC_DrvSerIsReadyForWrPd( void )
{
 800fd60:	b480      	push	{r7}
 800fd62:	af00      	add	r7, sp, #0
   if( drv_eState == SM_SER_RDY_TO_SEND_PING )
 800fd64:	4b05      	ldr	r3, [pc, #20]	@ (800fd7c <ABCC_DrvSerIsReadyForWrPd+0x1c>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d101      	bne.n	800fd70 <ABCC_DrvSerIsReadyForWrPd+0x10>
   {
      return( TRUE );
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e000      	b.n	800fd72 <ABCC_DrvSerIsReadyForWrPd+0x12>
   }
   return( FALSE );
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	24002df8 	.word	0x24002df8

0800fd80 <ABCC_DrvSerIsSupervised>:

BOOL ABCC_DrvSerIsSupervised( void )
{
 800fd80:	b480      	push	{r7}
 800fd82:	af00      	add	r7, sp, #0
   return( ( drv_bStatus & ABP_STAT_SUP_BIT ) == ABP_STAT_SUP_BIT );
 800fd84:	4b06      	ldr	r3, [pc, #24]	@ (800fda0 <ABCC_DrvSerIsSupervised+0x20>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	f003 0308 	and.w	r3, r3, #8
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	bf14      	ite	ne
 800fd90:	2301      	movne	r3, #1
 800fd92:	2300      	moveq	r3, #0
 800fd94:	b2db      	uxtb	r3, r3
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	24002df9 	.word	0x24002df9

0800fda4 <ABCC_DrvSerGetAnbStatus>:

UINT8 ABCC_DrvSerGetAnbStatus( void )
{
 800fda4:	b480      	push	{r7}
 800fda6:	af00      	add	r7, sp, #0
   return( drv_bStatus & ( ABP_STAT_SUP_BIT | ABP_STAT_S_BITS ) );
 800fda8:	4b04      	ldr	r3, [pc, #16]	@ (800fdbc <ABCC_DrvSerGetAnbStatus+0x18>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	f003 030f 	and.w	r3, r3, #15
 800fdb0:	b2db      	uxtb	r3, r3
}
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr
 800fdbc:	24002df9 	.word	0x24002df9

0800fdc0 <CRC_Crc32>:
   0x89B8FD09UL, 0x8D79E0BEUL, 0x803AC667UL, 0x84FBDBD0UL, 0x9ABC8BD5UL, 0x9E7D9662UL, 0x933EB0BBUL, 0x97FFAD0CUL, 0xAFB010B1UL, 0xAB710D06UL, 0xA6322BDFUL, 0xA2F33668UL, 0xBCB4666DUL, 0xB8757BDAUL, 0xB5365D03UL, 0xB1F740B4UL
};
#endif

UINT32 CRC_Crc32( UINT8* pbBuffer, size_t xLength )
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
   UINT32 lData;
   UINT32 lCrc = 0xFFFFFFFF;
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
 800fdce:	617b      	str	r3, [r7, #20]
   size_t xNum32Bits;
   size_t xNumRemainderBytes;

   xNum32Bits = xLength / 4;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	089b      	lsrs	r3, r3, #2
 800fdd4:	613b      	str	r3, [r7, #16]
   xNumRemainderBytes = xLength & 3;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	f003 0303 	and.w	r3, r3, #3
 800fddc:	60fb      	str	r3, [r7, #12]

   while( xNum32Bits-- )
 800fdde:	e060      	b.n	800fea2 <CRC_Crc32+0xe2>
   {
      lData = pbBuffer[ 0 ] << 24 | pbBuffer[ 1 ] << 16 | pbBuffer[ 2 ] << 8 | pbBuffer[ 3 ];
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	061a      	lsls	r2, r3, #24
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3301      	adds	r3, #1
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	041b      	lsls	r3, r3, #16
 800fdee:	431a      	orrs	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	3302      	adds	r3, #2
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	021b      	lsls	r3, r3, #8
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	3203      	adds	r2, #3
 800fdfe:	7812      	ldrb	r2, [r2, #0]
 800fe00:	4313      	orrs	r3, r2
 800fe02:	60bb      	str	r3, [r7, #8]

      lCrc = lCrc ^ lData;
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	4053      	eors	r3, r2
 800fe0a:	617b      	str	r3, [r7, #20]
#if ABCC_SPI_CRC_REDUCED_TABLE_ENABLED
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	011a      	lsls	r2, r3, #4
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	0f1b      	lsrs	r3, r3, #28
 800fe14:	4939      	ldr	r1, [pc, #228]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe1a:	4053      	eors	r3, r2
 800fe1c:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	011a      	lsls	r2, r3, #4
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	0f1b      	lsrs	r3, r3, #28
 800fe26:	4935      	ldr	r1, [pc, #212]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe2c:	4053      	eors	r3, r2
 800fe2e:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	011a      	lsls	r2, r3, #4
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	0f1b      	lsrs	r3, r3, #28
 800fe38:	4930      	ldr	r1, [pc, #192]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe3e:	4053      	eors	r3, r2
 800fe40:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	011a      	lsls	r2, r3, #4
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	0f1b      	lsrs	r3, r3, #28
 800fe4a:	492c      	ldr	r1, [pc, #176]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe50:	4053      	eors	r3, r2
 800fe52:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	011a      	lsls	r2, r3, #4
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	0f1b      	lsrs	r3, r3, #28
 800fe5c:	4927      	ldr	r1, [pc, #156]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe62:	4053      	eors	r3, r2
 800fe64:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	011a      	lsls	r2, r3, #4
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	0f1b      	lsrs	r3, r3, #28
 800fe6e:	4923      	ldr	r1, [pc, #140]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe74:	4053      	eors	r3, r2
 800fe76:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	011a      	lsls	r2, r3, #4
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	0f1b      	lsrs	r3, r3, #28
 800fe80:	491e      	ldr	r1, [pc, #120]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe86:	4053      	eors	r3, r2
 800fe88:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	011a      	lsls	r2, r3, #4
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	0f1b      	lsrs	r3, r3, #28
 800fe92:	491a      	ldr	r1, [pc, #104]	@ (800fefc <CRC_Crc32+0x13c>)
 800fe94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe98:	4053      	eors	r3, r2
 800fe9a:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 8 ) ^ crc_table32[ lCrc >> 24 ];
      lCrc = ( lCrc << 8 ) ^ crc_table32[ lCrc >> 24 ];
      lCrc = ( lCrc << 8 ) ^ crc_table32[ lCrc >> 24 ];
#endif

      pbBuffer += 4;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	3304      	adds	r3, #4
 800fea0:	607b      	str	r3, [r7, #4]
   while( xNum32Bits-- )
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	1e5a      	subs	r2, r3, #1
 800fea6:	613a      	str	r2, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d199      	bne.n	800fde0 <CRC_Crc32+0x20>
   }

   while( xNumRemainderBytes-- )
 800feac:	e019      	b.n	800fee2 <CRC_Crc32+0x122>
   {
      lCrc = lCrc ^ (*pbBuffer++ << 24);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	1c5a      	adds	r2, r3, #1
 800feb2:	607a      	str	r2, [r7, #4]
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	061b      	lsls	r3, r3, #24
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	4053      	eors	r3, r2
 800febc:	617b      	str	r3, [r7, #20]
#if ABCC_SPI_CRC_REDUCED_TABLE_ENABLED
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	011a      	lsls	r2, r3, #4
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	0f1b      	lsrs	r3, r3, #28
 800fec6:	490d      	ldr	r1, [pc, #52]	@ (800fefc <CRC_Crc32+0x13c>)
 800fec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fecc:	4053      	eors	r3, r2
 800fece:	617b      	str	r3, [r7, #20]
      lCrc = ( lCrc << 4 ) ^ crc_table32[ lCrc >> 28 ];
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	011a      	lsls	r2, r3, #4
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	0f1b      	lsrs	r3, r3, #28
 800fed8:	4908      	ldr	r1, [pc, #32]	@ (800fefc <CRC_Crc32+0x13c>)
 800feda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fede:	4053      	eors	r3, r2
 800fee0:	617b      	str	r3, [r7, #20]
   while( xNumRemainderBytes-- )
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	1e5a      	subs	r2, r3, #1
 800fee6:	60fa      	str	r2, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d1e0      	bne.n	800feae <CRC_Crc32+0xee>
#else
      lCrc = ( lCrc << 8 ) ^ crc_table32[ lCrc >> 24 ];
#endif
   }

   return( ~lCrc );
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	43db      	mvns	r3, r3
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	371c      	adds	r7, #28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr
 800fefc:	08017a38 	.word	0x08017a38

0800ff00 <ABCC_SpiRunDriver>:
/*------------------------------------------------------------------------------
** pnABCC_DrvRun()
**------------------------------------------------------------------------------
*/
void ABCC_SpiRunDriver( void )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af04      	add	r7, sp, #16
   ABCC_MainStateType eMainState;

   eMainState = ABCC_GetMainState();
 800ff06:	f7fc f80d 	bl	800bf24 <ABCC_GetMainState>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	71fb      	strb	r3, [r7, #7]

   if( eMainState < ABCC_DRV_SETUP )
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	2b03      	cmp	r3, #3
 800ff12:	d80f      	bhi.n	800ff34 <ABCC_SpiRunDriver+0x34>
   {
      if( eMainState != ABCC_DRV_ERROR )
 800ff14:	79fb      	ldrb	r3, [r7, #7]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	d01e      	beq.n	800ff58 <ABCC_SpiRunDriver+0x58>
      {
         ABCC_LOG_ERROR( ABCC_EC_INCORRECT_STATE,
 800ff1a:	79fa      	ldrb	r2, [r7, #7]
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	9302      	str	r3, [sp, #8]
 800ff20:	4b0f      	ldr	r3, [pc, #60]	@ (800ff60 <ABCC_SpiRunDriver+0x60>)
 800ff22:	9301      	str	r3, [sp, #4]
 800ff24:	2328      	movs	r3, #40	@ 0x28
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	4b0e      	ldr	r3, [pc, #56]	@ (800ff64 <ABCC_SpiRunDriver+0x64>)
 800ff2a:	2107      	movs	r1, #7
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	f7fd fb8b 	bl	800d648 <ABCC_LogHandler>
            (UINT32)eMainState,
            "ABCC_RunDriver() called in incorrect state (%d)\n",
            eMainState );
      }
      return;
 800ff32:	e011      	b.n	800ff58 <ABCC_SpiRunDriver+0x58>
   }

   ABCC_CheckWrPdUpdate();
 800ff34:	f7fb ffb2 	bl	800be9c <ABCC_CheckWrPdUpdate>
   ABCC_LinkCheckSendMessage();
 800ff38:	f7fd f942 	bl	800d1c0 <ABCC_LinkCheckSendMessage>

   /*
   ** Send MOSI frame
   */
   pnABCC_DrvRunDriverTx();
 800ff3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ff68 <ABCC_SpiRunDriver+0x68>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4798      	blx	r3
#endif

   /*
   ** Handle received MISO frame
   */
   ABCC_LinkRunDriverRx();
 800ff42:	f7fd f99f 	bl	800d284 <ABCC_LinkRunDriverRx>

   ABCC_TriggerRdPdUpdate();
 800ff46:	f7fc fae1 	bl	800c50c <ABCC_TriggerRdPdUpdate>
   ABCC_TriggerAnbStatusUpdate();
 800ff4a:	f7fc f815 	bl	800bf78 <ABCC_TriggerAnbStatusUpdate>
   ABCC_TriggerReceiveMessage();
 800ff4e:	f7fc faf9 	bl	800c544 <ABCC_TriggerReceiveMessage>
#if ABCC_CFG_DRV_CMD_SEQ_ENABLED
   ABCC_CmdSequencerExec();
 800ff52:	f7fb fead 	bl	800bcb0 <ABCC_CmdSequencerExec>
 800ff56:	e000      	b.n	800ff5a <ABCC_SpiRunDriver+0x5a>
      return;
 800ff58:	bf00      	nop
#endif
}
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	080168c0 	.word	0x080168c0
 800ff64:	080168ac 	.word	0x080168ac
 800ff68:	24001480 	.word	0x24001480

0800ff6c <ABCC_SpiISR>:

   ABCC_CbfEvent( 0 );
}
#else
void ABCC_SpiISR()
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_INTERNAL_ERROR,
 800ff72:	4b06      	ldr	r3, [pc, #24]	@ (800ff8c <ABCC_SpiISR+0x20>)
 800ff74:	9301      	str	r3, [sp, #4]
 800ff76:	2368      	movs	r3, #104	@ 0x68
 800ff78:	9300      	str	r3, [sp, #0]
 800ff7a:	4b05      	ldr	r3, [pc, #20]	@ (800ff90 <ABCC_SpiISR+0x24>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	2101      	movs	r1, #1
 800ff80:	2002      	movs	r0, #2
 800ff82:	f7fd fb61 	bl	800d648 <ABCC_LogHandler>
      0,
      "ABCC_SpiISR() called when ABCC_CFG_INT_ENABLED is 0\n" );
}
 800ff86:	bf00      	nop
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	080168f4 	.word	0x080168f4
 800ff90:	080168ac 	.word	0x080168ac

0800ff94 <ABCC_DrvSpiRunDriverTx>:
** Returns:
**       Driver status.
**------------------------------------------------------------------------------
*/
void ABCC_DrvSpiRunDriverTx( void )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af02      	add	r7, sp, #8
   UINT32 lCrc;
   BOOL   fHandleWriteMsg = FALSE;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	60fb      	str	r3, [r7, #12]
   UINT16 iRdyForCmd;

   ABCC_PORT_UseCritical();

   if( spi_drv_eState ==  SM_SPI_RDY_TO_SEND_MOSI )
 800ff9e:	4b87      	ldr	r3, [pc, #540]	@ (80101bc <ABCC_DrvSpiRunDriverTx+0x228>)
 800ffa0:	781b      	ldrb	r3, [r3, #0]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	f040 80f7 	bne.w	8010196 <ABCC_DrvSpiRunDriverTx+0x202>
   {
      spi_drv_eState = SM_SPI_WAITING_FOR_MISO;
 800ffa8:	4b84      	ldr	r3, [pc, #528]	@ (80101bc <ABCC_DrvSpiRunDriverTx+0x228>)
 800ffaa:	2202      	movs	r2, #2
 800ffac:	701a      	strb	r2, [r3, #0]

      if( !spi_drv_fRetransmit )
 800ffae:	4b84      	ldr	r3, [pc, #528]	@ (80101c0 <ABCC_DrvSpiRunDriverTx+0x22c>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <ABCC_DrvSpiRunDriverTx+0x30>
      {
         /*
         ** Everything is OK. Reset retransmission and toggle the T bit.
         */
         spi_drv_sMosiFrame.iSpiControl ^= iSpiCtrl_T;
 800ffb6:	4b83      	ldr	r3, [pc, #524]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	2280      	movs	r2, #128	@ 0x80
 800ffbc:	4053      	eors	r3, r2
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	4b80      	ldr	r3, [pc, #512]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 800ffc2:	801a      	strh	r2, [r3, #0]
      }

      spi_drv_fRetransmit = FALSE;
 800ffc4:	4b7e      	ldr	r3, [pc, #504]	@ (80101c0 <ABCC_DrvSpiRunDriverTx+0x22c>)
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	601a      	str	r2, [r3, #0]
      /*---------------------------------------------------------------------------
      ** Write message handling.
      **---------------------------------------------------------------------------
      */
      ABCC_PORT_EnterCritical();
      if( spi_drv_sWriteFragInfo.psWriteMsg != NULL )
 800ffca:	4b7f      	ldr	r3, [pc, #508]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <ABCC_DrvSpiRunDriverTx+0x42>
      {
         fHandleWriteMsg = TRUE;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	60fb      	str	r3, [r7, #12]
      }
      ABCC_PORT_ExitCritical();

      if( fHandleWriteMsg )
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d046      	beq.n	801006a <ABCC_DrvSpiRunDriverTx+0xd6>
      {
         if( !spi_drv_sWriteFragInfo.puCurrPtr )
 800ffdc:	4b7a      	ldr	r3, [pc, #488]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d10b      	bne.n	800fffc <ABCC_DrvSpiRunDriverTx+0x68>
         {
            ABCC_LOG_FATAL( ABCC_EC_UNEXPECTED_NULL_PTR,
 800ffe4:	4b78      	ldr	r3, [pc, #480]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b78      	ldr	r3, [pc, #480]	@ (80101cc <ABCC_DrvSpiRunDriverTx+0x238>)
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	23f5      	movs	r3, #245	@ 0xf5
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	4b77      	ldr	r3, [pc, #476]	@ (80101d0 <ABCC_DrvSpiRunDriverTx+0x23c>)
 800fff4:	211e      	movs	r1, #30
 800fff6:	2000      	movs	r0, #0
 800fff8:	f7fd fb26 	bl	800d648 <ABCC_LogHandler>
         }

         /*
         ** Write the message to be sent.
         */
         spi_drv_sMosiFrame.iSpiControl |= iSpiCtrl_M;
 800fffc:	4b71      	ldr	r3, [pc, #452]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 800fffe:	881b      	ldrh	r3, [r3, #0]
 8010000:	2208      	movs	r2, #8
 8010002:	4313      	orrs	r3, r2
 8010004:	b29a      	uxth	r2, r3
 8010006:	4b6f      	ldr	r3, [pc, #444]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010008:	801a      	strh	r2, [r3, #0]

         if( spi_drv_sWriteFragInfo.iNumWordsLeft <= spi_drv_iMsgLen )
 801000a:	4b6f      	ldr	r3, [pc, #444]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 801000c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010010:	461a      	mov	r2, r3
 8010012:	4b70      	ldr	r3, [pc, #448]	@ (80101d4 <ABCC_DrvSpiRunDriverTx+0x240>)
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	dc0d      	bgt.n	8010036 <ABCC_DrvSpiRunDriverTx+0xa2>
         {
            spi_drv_sMosiFrame.iSpiControl |= iSpiCtrlLastFrag;
 801001a:	4b6a      	ldr	r3, [pc, #424]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	2210      	movs	r2, #16
 8010020:	4313      	orrs	r3, r2
 8010022:	b29a      	uxth	r2, r3
 8010024:	4b67      	ldr	r3, [pc, #412]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010026:	801a      	strh	r2, [r3, #0]
            spi_drv_sWriteFragInfo.iCurrFragLength = spi_drv_sWriteFragInfo.iNumWordsLeft;
 8010028:	4b67      	ldr	r3, [pc, #412]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 801002a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801002e:	b29a      	uxth	r2, r3
 8010030:	4b65      	ldr	r3, [pc, #404]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 8010032:	815a      	strh	r2, [r3, #10]
 8010034:	e00f      	b.n	8010056 <ABCC_DrvSpiRunDriverTx+0xc2>
         else
         {
            /*
            ** This is not the last fragment.
            */
            spi_drv_sMosiFrame.iSpiControl &= ~iSpiCtrlLastFrag;
 8010036:	4b63      	ldr	r3, [pc, #396]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	b21a      	sxth	r2, r3
 801003c:	2310      	movs	r3, #16
 801003e:	b21b      	sxth	r3, r3
 8010040:	43db      	mvns	r3, r3
 8010042:	b21b      	sxth	r3, r3
 8010044:	4013      	ands	r3, r2
 8010046:	b21b      	sxth	r3, r3
 8010048:	b29a      	uxth	r2, r3
 801004a:	4b5e      	ldr	r3, [pc, #376]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 801004c:	801a      	strh	r2, [r3, #0]
            spi_drv_sWriteFragInfo.iCurrFragLength = spi_drv_iMsgLen;
 801004e:	4b61      	ldr	r3, [pc, #388]	@ (80101d4 <ABCC_DrvSpiRunDriverTx+0x240>)
 8010050:	881a      	ldrh	r2, [r3, #0]
 8010052:	4b5d      	ldr	r3, [pc, #372]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 8010054:	815a      	strh	r2, [r3, #10]

         /*
         ** Copy the message into the MOSI frame buffer.
         */
         ABCC_PORT_MemCpy( (void*)spi_drv_sMosiFrame.iData,
                           (void*)spi_drv_sWriteFragInfo.puCurrPtr,
 8010056:	4b5c      	ldr	r3, [pc, #368]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 8010058:	685b      	ldr	r3, [r3, #4]
                           spi_drv_sWriteFragInfo.iCurrFragLength << 1 );
 801005a:	4a5b      	ldr	r2, [pc, #364]	@ (80101c8 <ABCC_DrvSpiRunDriverTx+0x234>)
 801005c:	8952      	ldrh	r2, [r2, #10]
         ABCC_PORT_MemCpy( (void*)spi_drv_sMosiFrame.iData,
 801005e:	0052      	lsls	r2, r2, #1
 8010060:	4619      	mov	r1, r3
 8010062:	485d      	ldr	r0, [pc, #372]	@ (80101d8 <ABCC_DrvSpiRunDriverTx+0x244>)
 8010064:	f005 f87d 	bl	8015162 <memcpy>
 8010068:	e017      	b.n	801009a <ABCC_DrvSpiRunDriverTx+0x106>
      else
      {
         /*
         ** There is no message fragment to be sent.
         */
         spi_drv_sMosiFrame.iSpiControl &= ~iSpiCtrl_M;
 801006a:	4b56      	ldr	r3, [pc, #344]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	b21a      	sxth	r2, r3
 8010070:	2308      	movs	r3, #8
 8010072:	b21b      	sxth	r3, r3
 8010074:	43db      	mvns	r3, r3
 8010076:	b21b      	sxth	r3, r3
 8010078:	4013      	ands	r3, r2
 801007a:	b21b      	sxth	r3, r3
 801007c:	b29a      	uxth	r2, r3
 801007e:	4b51      	ldr	r3, [pc, #324]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010080:	801a      	strh	r2, [r3, #0]
         spi_drv_sMosiFrame.iSpiControl &= ~iSpiCtrlLastFrag;
 8010082:	4b50      	ldr	r3, [pc, #320]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010084:	881b      	ldrh	r3, [r3, #0]
 8010086:	b21a      	sxth	r2, r3
 8010088:	2310      	movs	r3, #16
 801008a:	b21b      	sxth	r3, r3
 801008c:	43db      	mvns	r3, r3
 801008e:	b21b      	sxth	r3, r3
 8010090:	4013      	ands	r3, r2
 8010092:	b21b      	sxth	r3, r3
 8010094:	b29a      	uxth	r2, r3
 8010096:	4b4b      	ldr	r3, [pc, #300]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010098:	801a      	strh	r2, [r3, #0]
      }

      iRdyForCmd = 0;
 801009a:	2300      	movs	r3, #0
 801009c:	817b      	strh	r3, [r7, #10]
      if( spi_drv_bNbrOfCmds > 3 )
 801009e:	4b4f      	ldr	r3, [pc, #316]	@ (80101dc <ABCC_DrvSpiRunDriverTx+0x248>)
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d902      	bls.n	80100ac <ABCC_DrvSpiRunDriverTx+0x118>
      {
         iRdyForCmd = 3;
 80100a6:	2303      	movs	r3, #3
 80100a8:	817b      	strh	r3, [r7, #10]
 80100aa:	e004      	b.n	80100b6 <ABCC_DrvSpiRunDriverTx+0x122>
      }
      else
      {
         iRdyForCmd =  spi_drv_bNbrOfCmds & 0x3;
 80100ac:	4b4b      	ldr	r3, [pc, #300]	@ (80101dc <ABCC_DrvSpiRunDriverTx+0x248>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	f003 0303 	and.w	r3, r3, #3
 80100b4:	817b      	strh	r3, [r7, #10]
      }
      INSERT_SPI_CTRL_CMDCNT( spi_drv_sMosiFrame.iSpiControl, iRdyForCmd );
 80100b6:	4b43      	ldr	r3, [pc, #268]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100b8:	881b      	ldrh	r3, [r3, #0]
 80100ba:	b21a      	sxth	r2, r3
 80100bc:	2306      	movs	r3, #6
 80100be:	b21b      	sxth	r3, r3
 80100c0:	43db      	mvns	r3, r3
 80100c2:	b21b      	sxth	r3, r3
 80100c4:	4013      	ands	r3, r2
 80100c6:	b21a      	sxth	r2, r3
 80100c8:	897b      	ldrh	r3, [r7, #10]
 80100ca:	2101      	movs	r1, #1
 80100cc:	408b      	lsls	r3, r1
 80100ce:	b21b      	sxth	r3, r3
 80100d0:	4313      	orrs	r3, r2
 80100d2:	b21b      	sxth	r3, r3
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	4b3b      	ldr	r3, [pc, #236]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100d8:	801a      	strh	r2, [r3, #0]

      ABCC_SetLowAddrOct( spi_drv_sMosiFrame.iIntMaskAppStatus, spi_drv_bNextAppStatus );
 80100da:	4b3a      	ldr	r3, [pc, #232]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100dc:	88db      	ldrh	r3, [r3, #6]
 80100de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	4b37      	ldr	r3, [pc, #220]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100e6:	80da      	strh	r2, [r3, #6]
 80100e8:	4b36      	ldr	r3, [pc, #216]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100ea:	88db      	ldrh	r3, [r3, #6]
 80100ec:	4a3c      	ldr	r2, [pc, #240]	@ (80101e0 <ABCC_DrvSpiRunDriverTx+0x24c>)
 80100ee:	7812      	ldrb	r2, [r2, #0]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	b29a      	uxth	r2, r3
 80100f4:	4b33      	ldr	r3, [pc, #204]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100f6:	80da      	strh	r2, [r3, #6]
      ABCC_SetHighAddrOct( spi_drv_sMosiFrame.iIntMaskAppStatus, spi_drv_bNextIntMask );
 80100f8:	4b32      	ldr	r3, [pc, #200]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 80100fa:	88db      	ldrh	r3, [r3, #6]
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	b29a      	uxth	r2, r3
 8010100:	4b30      	ldr	r3, [pc, #192]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010102:	80da      	strh	r2, [r3, #6]
 8010104:	4b2f      	ldr	r3, [pc, #188]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010106:	88db      	ldrh	r3, [r3, #6]
 8010108:	b21a      	sxth	r2, r3
 801010a:	4b36      	ldr	r3, [pc, #216]	@ (80101e4 <ABCC_DrvSpiRunDriverTx+0x250>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	b21b      	sxth	r3, r3
 8010110:	021b      	lsls	r3, r3, #8
 8010112:	b21b      	sxth	r3, r3
 8010114:	4313      	orrs	r3, r2
 8010116:	b21b      	sxth	r3, r3
 8010118:	b29a      	uxth	r2, r3
 801011a:	4b2a      	ldr	r3, [pc, #168]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 801011c:	80da      	strh	r2, [r3, #6]
      spi_drv_bpRdPd = NULL;
 801011e:	4b32      	ldr	r3, [pc, #200]	@ (80101e8 <ABCC_DrvSpiRunDriverTx+0x254>)
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]

      /*
      ** Apply the CRC checksum.
      */
      lCrc = CRC_Crc32( (UINT8*)&spi_drv_sMosiFrame, spi_drv_iSpiFrameSize*2 - 6 );
 8010124:	4b31      	ldr	r3, [pc, #196]	@ (80101ec <ABCC_DrvSpiRunDriverTx+0x258>)
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	3b03      	subs	r3, #3
 801012a:	005b      	lsls	r3, r3, #1
 801012c:	4619      	mov	r1, r3
 801012e:	4825      	ldr	r0, [pc, #148]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010130:	f7ff fe46 	bl	800fdc0 <CRC_Crc32>
 8010134:	4603      	mov	r3, r0
 8010136:	607b      	str	r3, [r7, #4]
      lCrc = lTOlBe( lCrc );
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	b29b      	uxth	r3, r3
 801013c:	0a1b      	lsrs	r3, r3, #8
 801013e:	b29b      	uxth	r3, r3
 8010140:	b21a      	sxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	b21b      	sxth	r3, r3
 8010146:	021b      	lsls	r3, r3, #8
 8010148:	b21b      	sxth	r3, r3
 801014a:	4313      	orrs	r3, r2
 801014c:	b21b      	sxth	r3, r3
 801014e:	b29b      	uxth	r3, r3
 8010150:	041b      	lsls	r3, r3, #16
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	0c12      	lsrs	r2, r2, #16
 8010156:	b292      	uxth	r2, r2
 8010158:	0a12      	lsrs	r2, r2, #8
 801015a:	b292      	uxth	r2, r2
 801015c:	b211      	sxth	r1, r2
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	0c12      	lsrs	r2, r2, #16
 8010162:	b212      	sxth	r2, r2
 8010164:	0212      	lsls	r2, r2, #8
 8010166:	b212      	sxth	r2, r2
 8010168:	430a      	orrs	r2, r1
 801016a:	b212      	sxth	r2, r2
 801016c:	b292      	uxth	r2, r2
 801016e:	4313      	orrs	r3, r2
 8010170:	607b      	str	r3, [r7, #4]

      ABCC_PORT_MemCpy( &spi_drv_sMosiFrame.iData[ spi_drv_iCrcOffset ],
 8010172:	4b1f      	ldr	r3, [pc, #124]	@ (80101f0 <ABCC_DrvSpiRunDriverTx+0x25c>)
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	3304      	adds	r3, #4
 8010178:	005b      	lsls	r3, r3, #1
 801017a:	4a12      	ldr	r2, [pc, #72]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 801017c:	4413      	add	r3, r2
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	601a      	str	r2, [r3, #0]

      /*
      ** Send the MOSI frame.
      */
      ABCC_LOG_DEBUG_SPI_HEXDUMP_MOSI( (UINT16*)&spi_drv_sMosiFrame, spi_drv_iSpiFrameSize );
      ABCC_HAL_SpiSendReceive( &spi_drv_sMosiFrame, &spi_drv_sMisoFrame, spi_drv_iSpiFrameSize << 1 );
 8010182:	4b1a      	ldr	r3, [pc, #104]	@ (80101ec <ABCC_DrvSpiRunDriverTx+0x258>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	b29b      	uxth	r3, r3
 801018a:	461a      	mov	r2, r3
 801018c:	4919      	ldr	r1, [pc, #100]	@ (80101f4 <ABCC_DrvSpiRunDriverTx+0x260>)
 801018e:	480d      	ldr	r0, [pc, #52]	@ (80101c4 <ABCC_DrvSpiRunDriverTx+0x230>)
 8010190:	f004 fb6a 	bl	8014868 <ABCC_HAL_SpiSendReceive>
   else if( spi_drv_eState == SM_SPI_INIT )
   {
      ABCC_TimerStart( xWdTmoHandle, ABCC_CFG_WD_TIMEOUT_MS );
      spi_drv_eState = SM_SPI_RDY_TO_SEND_MOSI;
   }
}
 8010194:	e00d      	b.n	80101b2 <ABCC_DrvSpiRunDriverTx+0x21e>
   else if( spi_drv_eState == SM_SPI_INIT )
 8010196:	4b09      	ldr	r3, [pc, #36]	@ (80101bc <ABCC_DrvSpiRunDriverTx+0x228>)
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d109      	bne.n	80101b2 <ABCC_DrvSpiRunDriverTx+0x21e>
      ABCC_TimerStart( xWdTmoHandle, ABCC_CFG_WD_TIMEOUT_MS );
 801019e:	4b16      	ldr	r3, [pc, #88]	@ (80101f8 <ABCC_DrvSpiRunDriverTx+0x264>)
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fe feea 	bl	800ef80 <ABCC_TimerStart>
      spi_drv_eState = SM_SPI_RDY_TO_SEND_MOSI;
 80101ac:	4b03      	ldr	r3, [pc, #12]	@ (80101bc <ABCC_DrvSpiRunDriverTx+0x228>)
 80101ae:	2201      	movs	r2, #1
 80101b0:	701a      	strb	r2, [r3, #0]
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	24003ef0 	.word	0x24003ef0
 80101c0:	24003eec 	.word	0x24003eec
 80101c4:	24003ab0 	.word	0x24003ab0
 80101c8:	24003ed0 	.word	0x24003ed0
 80101cc:	08016940 	.word	0x08016940
 80101d0:	0801692c 	.word	0x0801692c
 80101d4:	24003ef8 	.word	0x24003ef8
 80101d8:	24003ab8 	.word	0x24003ab8
 80101dc:	24003edc 	.word	0x24003edc
 80101e0:	24003edd 	.word	0x24003edd
 80101e4:	24003ede 	.word	0x24003ede
 80101e8:	24003aa8 	.word	0x24003aa8
 80101ec:	24003eea 	.word	0x24003eea
 80101f0:	24003ee2 	.word	0x24003ee2
 80101f4:	24003670 	.word	0x24003670
 80101f8:	24003ef1 	.word	0x24003ef1

080101fc <ABCC_DrvSpiRunDriverRx>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
ABP_MsgType* ABCC_DrvSpiRunDriverRx( void )
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b088      	sub	sp, #32
 8010200:	af04      	add	r7, sp, #16
   UINT32 lRecievedCrc;
   UINT32 lCalculatedCrc;
   ABP_MsgType* psWriteMsg = NULL;
 8010202:	2300      	movs	r3, #0
 8010204:	60fb      	str	r3, [r7, #12]

   if( spi_drv_eState == SM_SPI_WAITING_FOR_MISO )
 8010206:	4b7c      	ldr	r3, [pc, #496]	@ (80103f8 <ABCC_DrvSpiRunDriverRx+0x1fc>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	2b02      	cmp	r3, #2
 801020c:	f040 816b 	bne.w	80104e6 <ABCC_DrvSpiRunDriverRx+0x2ea>
   {
      if( !spi_drv_fNewMisoReceived )
 8010210:	4b7a      	ldr	r3, [pc, #488]	@ (80103fc <ABCC_DrvSpiRunDriverRx+0x200>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d101      	bne.n	801021c <ABCC_DrvSpiRunDriverRx+0x20>
      {
         /*
         ** Nothing has happened. No MISO was received.
         */
         return( psWriteMsg );
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	e16c      	b.n	80104f6 <ABCC_DrvSpiRunDriverRx+0x2fa>
      }
      else
      {
         spi_drv_fNewMisoReceived = FALSE;
 801021c:	4b77      	ldr	r3, [pc, #476]	@ (80103fc <ABCC_DrvSpiRunDriverRx+0x200>)
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]
      }

      ABCC_LOG_DEBUG_SPI_HEXDUMP_MISO( (UINT16*)&spi_drv_sMisoFrame, spi_drv_iSpiFrameSize );

      lCalculatedCrc = CRC_Crc32( (UINT8*)&spi_drv_sMisoFrame, spi_drv_iSpiFrameSize*2 - 4 );
 8010222:	4b77      	ldr	r3, [pc, #476]	@ (8010400 <ABCC_DrvSpiRunDriverRx+0x204>)
 8010224:	881b      	ldrh	r3, [r3, #0]
 8010226:	3b02      	subs	r3, #2
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	4619      	mov	r1, r3
 801022c:	4875      	ldr	r0, [pc, #468]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 801022e:	f7ff fdc7 	bl	800fdc0 <CRC_Crc32>
 8010232:	60b8      	str	r0, [r7, #8]
      lCalculatedCrc = lTOlBe( lCalculatedCrc );
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	b29b      	uxth	r3, r3
 8010238:	0a1b      	lsrs	r3, r3, #8
 801023a:	b29b      	uxth	r3, r3
 801023c:	b21a      	sxth	r2, r3
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	b21b      	sxth	r3, r3
 8010242:	021b      	lsls	r3, r3, #8
 8010244:	b21b      	sxth	r3, r3
 8010246:	4313      	orrs	r3, r2
 8010248:	b21b      	sxth	r3, r3
 801024a:	b29b      	uxth	r3, r3
 801024c:	041b      	lsls	r3, r3, #16
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	0c12      	lsrs	r2, r2, #16
 8010252:	b292      	uxth	r2, r2
 8010254:	0a12      	lsrs	r2, r2, #8
 8010256:	b292      	uxth	r2, r2
 8010258:	b211      	sxth	r1, r2
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	0c12      	lsrs	r2, r2, #16
 801025e:	b212      	sxth	r2, r2
 8010260:	0212      	lsls	r2, r2, #8
 8010262:	b212      	sxth	r2, r2
 8010264:	430a      	orrs	r2, r1
 8010266:	b212      	sxth	r2, r2
 8010268:	b292      	uxth	r2, r2
 801026a:	4313      	orrs	r3, r2
 801026c:	60bb      	str	r3, [r7, #8]

      ABCC_PORT_MemCpy( &lRecievedCrc,
                        &spi_drv_sMisoFrame.iData[ spi_drv_iCrcOffset ],
 801026e:	4b66      	ldr	r3, [pc, #408]	@ (8010408 <ABCC_DrvSpiRunDriverRx+0x20c>)
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	3304      	adds	r3, #4
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	4a63      	ldr	r2, [pc, #396]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 8010278:	4413      	add	r3, r2
 801027a:	3302      	adds	r3, #2
      ABCC_PORT_MemCpy( &lRecievedCrc,
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	607b      	str	r3, [r7, #4]
                        ABP_UINT32_SIZEOF );

      if( lCalculatedCrc != lRecievedCrc )
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	429a      	cmp	r2, r3
 8010286:	d01d      	beq.n	80102c4 <ABCC_DrvSpiRunDriverRx+0xc8>
      {
         /*
         ** We will request a retransmit if the data is corrupt.
         */
         drv_iCrcErrorCount++;
 8010288:	4b60      	ldr	r3, [pc, #384]	@ (801040c <ABCC_DrvSpiRunDriverRx+0x210>)
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	3301      	adds	r3, #1
 801028e:	b29a      	uxth	r2, r3
 8010290:	4b5e      	ldr	r3, [pc, #376]	@ (801040c <ABCC_DrvSpiRunDriverRx+0x210>)
 8010292:	801a      	strh	r2, [r3, #0]
         ABCC_LOG_WARNING( ABCC_EC_CHECKSUM_MISMATCH,
 8010294:	4b5d      	ldr	r3, [pc, #372]	@ (801040c <ABCC_DrvSpiRunDriverRx+0x210>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	4b5c      	ldr	r3, [pc, #368]	@ (801040c <ABCC_DrvSpiRunDriverRx+0x210>)
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	9302      	str	r3, [sp, #8]
 80102a0:	4b5b      	ldr	r3, [pc, #364]	@ (8010410 <ABCC_DrvSpiRunDriverRx+0x214>)
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4b5a      	ldr	r3, [pc, #360]	@ (8010414 <ABCC_DrvSpiRunDriverRx+0x218>)
 80102ac:	2125      	movs	r1, #37	@ 0x25
 80102ae:	2002      	movs	r0, #2
 80102b0:	f7fd f9ca 	bl	800d648 <ABCC_LogHandler>
            drv_iCrcErrorCount,
            "CRC check failed for received message (error count: %" PRIu16 ")\n",
            drv_iCrcErrorCount );
         spi_drv_fRetransmit = TRUE;
 80102b4:	4b58      	ldr	r3, [pc, #352]	@ (8010418 <ABCC_DrvSpiRunDriverRx+0x21c>)
 80102b6:	2201      	movs	r2, #1
 80102b8:	601a      	str	r2, [r3, #0]
         spi_drv_eState = SM_SPI_RDY_TO_SEND_MOSI;
 80102ba:	4b4f      	ldr	r3, [pc, #316]	@ (80103f8 <ABCC_DrvSpiRunDriverRx+0x1fc>)
 80102bc:	2201      	movs	r2, #1
 80102be:	701a      	strb	r2, [r3, #0]
         return( NULL );
 80102c0:	2300      	movs	r3, #0
 80102c2:	e118      	b.n	80104f6 <ABCC_DrvSpiRunDriverRx+0x2fa>
      }

      /*
      ** Restart watchdog
      */
      if( fWdTmo )
 80102c4:	4b55      	ldr	r3, [pc, #340]	@ (801041c <ABCC_DrvSpiRunDriverRx+0x220>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <ABCC_DrvSpiRunDriverRx+0xd4>
      {
        ABCC_CbfWdTimeoutRecovered();
 80102cc:	f001 fda6 	bl	8011e1c <ABCC_CbfWdTimeoutRecovered>
      }

      ABCC_TimerStop( xWdTmoHandle );
 80102d0:	4b53      	ldr	r3, [pc, #332]	@ (8010420 <ABCC_DrvSpiRunDriverRx+0x224>)
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe fe93 	bl	800f000 <ABCC_TimerStop>
      fWdTmo = FALSE;
 80102da:	4b50      	ldr	r3, [pc, #320]	@ (801041c <ABCC_DrvSpiRunDriverRx+0x220>)
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
      ABCC_TimerStart( xWdTmoHandle, ABCC_CFG_WD_TIMEOUT_MS );
 80102e0:	4b4f      	ldr	r3, [pc, #316]	@ (8010420 <ABCC_DrvSpiRunDriverRx+0x224>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fe fe49 	bl	800ef80 <ABCC_TimerStart>

      /*
      ** Save the current anybus status.
      */
      spi_drv_bAnbStatus =  ABCC_GetLowAddrOct( spi_drv_sMisoFrame.iSpiStatusAnbStatus );
 80102ee:	4b45      	ldr	r3, [pc, #276]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 80102f0:	889b      	ldrh	r3, [r3, #4]
 80102f2:	b2da      	uxtb	r2, r3
 80102f4:	4b4b      	ldr	r3, [pc, #300]	@ (8010424 <ABCC_DrvSpiRunDriverRx+0x228>)
 80102f6:	701a      	strb	r2, [r3, #0]
      spi_drv_iLedStatus  = iLeTOi( spi_drv_sMisoFrame.iLedStat );
 80102f8:	4b42      	ldr	r3, [pc, #264]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 80102fa:	885a      	ldrh	r2, [r3, #2]
 80102fc:	4b4a      	ldr	r3, [pc, #296]	@ (8010428 <ABCC_DrvSpiRunDriverRx+0x22c>)
 80102fe:	801a      	strh	r2, [r3, #0]

      spi_drv_bAnbCmdCnt = (UINT8)EXTRACT_SPI_STATUS_CMDCNT( spi_drv_sMisoFrame.iSpiStatusAnbStatus  );
 8010300:	4b40      	ldr	r3, [pc, #256]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 8010302:	889b      	ldrh	r3, [r3, #4]
 8010304:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8010308:	4013      	ands	r3, r2
 801030a:	b29b      	uxth	r3, r3
 801030c:	461a      	mov	r2, r3
 801030e:	2309      	movs	r3, #9
 8010310:	fa42 f303 	asr.w	r3, r2, r3
 8010314:	b2da      	uxtb	r2, r3
 8010316:	4b45      	ldr	r3, [pc, #276]	@ (801042c <ABCC_DrvSpiRunDriverRx+0x230>)
 8010318:	701a      	strb	r2, [r3, #0]

      if( spi_drv_sMisoFrame.iSpiStatusAnbStatus & iSpiStatusNewPd )
 801031a:	4b3a      	ldr	r3, [pc, #232]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 801031c:	889b      	ldrh	r3, [r3, #4]
 801031e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8010322:	4013      	ands	r3, r2
 8010324:	b29b      	uxth	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	d008      	beq.n	801033c <ABCC_DrvSpiRunDriverRx+0x140>
      {
         /*
         ** Report the new process data.
         */
         spi_drv_bpRdPd = (UINT8*)&spi_drv_sMisoFrame.iData[ spi_drv_iPdOffset ];
 801032a:	4b41      	ldr	r3, [pc, #260]	@ (8010430 <ABCC_DrvSpiRunDriverRx+0x234>)
 801032c:	881b      	ldrh	r3, [r3, #0]
 801032e:	3304      	adds	r3, #4
 8010330:	005b      	lsls	r3, r3, #1
 8010332:	4a34      	ldr	r2, [pc, #208]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 8010334:	4413      	add	r3, r2
 8010336:	3302      	adds	r3, #2
 8010338:	4a3e      	ldr	r2, [pc, #248]	@ (8010434 <ABCC_DrvSpiRunDriverRx+0x238>)
 801033a:	6013      	str	r3, [r2, #0]

      /*---------------------------------------------------------------------------
      ** Write message handling.
      **---------------------------------------------------------------------------
      */
      if( spi_drv_sWriteFragInfo.iCurrFragLength != 0 )
 801033c:	4b3e      	ldr	r3, [pc, #248]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 801033e:	895b      	ldrh	r3, [r3, #10]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d034      	beq.n	80103ae <ABCC_DrvSpiRunDriverRx+0x1b2>
      {
         /*
         ** Write the message to be sent.
         */
         if( !( spi_drv_sMisoFrame.iSpiStatusAnbStatus & iSpiStatusWrMsgFull ) )
 8010344:	4b2f      	ldr	r3, [pc, #188]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 8010346:	889b      	ldrh	r3, [r3, #4]
 8010348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801034c:	4013      	ands	r3, r2
 801034e:	b29b      	uxth	r3, r3
 8010350:	2b00      	cmp	r3, #0
 8010352:	d12c      	bne.n	80103ae <ABCC_DrvSpiRunDriverRx+0x1b2>
         {
            /*
            ** Write message was received.
            ** Update the write fragmentation information.
            */
            spi_drv_sWriteFragInfo.puCurrPtr         += spi_drv_sWriteFragInfo.iCurrFragLength;
 8010354:	4b38      	ldr	r3, [pc, #224]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	4b37      	ldr	r3, [pc, #220]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 801035a:	895b      	ldrh	r3, [r3, #10]
 801035c:	005b      	lsls	r3, r3, #1
 801035e:	4413      	add	r3, r2
 8010360:	4a35      	ldr	r2, [pc, #212]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 8010362:	6053      	str	r3, [r2, #4]
            spi_drv_sWriteFragInfo.iNumWordsLeft     -= spi_drv_sWriteFragInfo.iCurrFragLength;
 8010364:	4b34      	ldr	r3, [pc, #208]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 8010366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801036a:	b29a      	uxth	r2, r3
 801036c:	4b32      	ldr	r3, [pc, #200]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 801036e:	895b      	ldrh	r3, [r3, #10]
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	b29b      	uxth	r3, r3
 8010374:	b21a      	sxth	r2, r3
 8010376:	4b30      	ldr	r3, [pc, #192]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 8010378:	811a      	strh	r2, [r3, #8]
            spi_drv_sWriteFragInfo.iCurrFragLength    = 0;
 801037a:	4b2f      	ldr	r3, [pc, #188]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 801037c:	2200      	movs	r2, #0
 801037e:	815a      	strh	r2, [r3, #10]

            if( spi_drv_sWriteFragInfo.iNumWordsLeft <= 0 )
 8010380:	4b2d      	ldr	r3, [pc, #180]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 8010382:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010386:	2b00      	cmp	r3, #0
 8010388:	dc11      	bgt.n	80103ae <ABCC_DrvSpiRunDriverRx+0x1b2>
            {
               psWriteMsg = (ABP_MsgType*)spi_drv_sWriteFragInfo.psWriteMsg;
 801038a:	4b2b      	ldr	r3, [pc, #172]	@ (8010438 <ABCC_DrvSpiRunDriverRx+0x23c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	60fb      	str	r3, [r7, #12]

               spi_drv_ResetWriteFragInfo();
 8010390:	f000 f8e4 	bl	801055c <spi_drv_ResetWriteFragInfo>

               if( ( ABCC_GetLowAddrOct( ((ABP_MsgType16*)psWriteMsg)->sHeader.iCmdReserved ) & ABP_MSG_HEADER_C_BIT ) == 0 )
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	891b      	ldrh	r3, [r3, #8]
 8010398:	b29b      	uxth	r3, r3
 801039a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d105      	bne.n	80103ae <ABCC_DrvSpiRunDriverRx+0x1b2>
               {
                  spi_drv_bNbrOfCmds++;
 80103a2:	4b26      	ldr	r3, [pc, #152]	@ (801043c <ABCC_DrvSpiRunDriverRx+0x240>)
 80103a4:	781b      	ldrb	r3, [r3, #0]
 80103a6:	3301      	adds	r3, #1
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	4b24      	ldr	r3, [pc, #144]	@ (801043c <ABCC_DrvSpiRunDriverRx+0x240>)
 80103ac:	701a      	strb	r2, [r3, #0]

      /*---------------------------------------------------------------------------
      ** Read message handling
      ** --------------------------------------------------------------------------
      */
      if( spi_drv_sMisoFrame.iSpiStatusAnbStatus & iSpiStatus_M )
 80103ae:	4b15      	ldr	r3, [pc, #84]	@ (8010404 <ABCC_DrvSpiRunDriverRx+0x208>)
 80103b0:	889b      	ldrh	r3, [r3, #4]
 80103b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80103b6:	4013      	ands	r3, r2
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f000 8083 	beq.w	80104c6 <ABCC_DrvSpiRunDriverRx+0x2ca>
         /*
         ** Read message was received.
         ** Update the read fragmentation information.
         */

         if( spi_drv_sReadFragInfo.puCurrPtr == 0 )
 80103c0:	4b1f      	ldr	r3, [pc, #124]	@ (8010440 <ABCC_DrvSpiRunDriverRx+0x244>)
 80103c2:	685b      	ldr	r3, [r3, #4]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d13f      	bne.n	8010448 <ABCC_DrvSpiRunDriverRx+0x24c>
         {
            DrvSpiSetMsgReceiverBuffer( ABCC_MemAlloc() );
 80103c8:	f7fd fa4c 	bl	800d864 <ABCC_MemAlloc>
 80103cc:	4603      	mov	r3, r0
 80103ce:	4618      	mov	r0, r3
 80103d0:	f000 faa4 	bl	801091c <DrvSpiSetMsgReceiverBuffer>

            if( spi_drv_sReadFragInfo.puCurrPtr == 0 )
 80103d4:	4b1a      	ldr	r3, [pc, #104]	@ (8010440 <ABCC_DrvSpiRunDriverRx+0x244>)
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d135      	bne.n	8010448 <ABCC_DrvSpiRunDriverRx+0x24c>
            {
               ABCC_LOG_WARNING( ABCC_EC_OUT_OF_MSG_BUFFERS, 0, "Out of message buffers when attempting to read a message\n" );
 80103dc:	4b19      	ldr	r3, [pc, #100]	@ (8010444 <ABCC_DrvSpiRunDriverRx+0x248>)
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	f240 13c7 	movw	r3, #455	@ 0x1c7
 80103e4:	9300      	str	r3, [sp, #0]
 80103e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010414 <ABCC_DrvSpiRunDriverRx+0x218>)
 80103e8:	2200      	movs	r2, #0
 80103ea:	2104      	movs	r1, #4
 80103ec:	2002      	movs	r0, #2
 80103ee:	f7fd f92b 	bl	800d648 <ABCC_LogHandler>
               return( NULL );
 80103f2:	2300      	movs	r3, #0
 80103f4:	e07f      	b.n	80104f6 <ABCC_DrvSpiRunDriverRx+0x2fa>
 80103f6:	bf00      	nop
 80103f8:	24003ef0 	.word	0x24003ef0
 80103fc:	24003a9c 	.word	0x24003a9c
 8010400:	24003eea 	.word	0x24003eea
 8010404:	24003670 	.word	0x24003670
 8010408:	24003ee2 	.word	0x24003ee2
 801040c:	24003efa 	.word	0x24003efa
 8010410:	0801695c 	.word	0x0801695c
 8010414:	0801692c 	.word	0x0801692c
 8010418:	24003eec 	.word	0x24003eec
 801041c:	24003ef4 	.word	0x24003ef4
 8010420:	24003ef1 	.word	0x24003ef1
 8010424:	24003aa0 	.word	0x24003aa0
 8010428:	24003aa2 	.word	0x24003aa2
 801042c:	24003aa4 	.word	0x24003aa4
 8010430:	24003ee0 	.word	0x24003ee0
 8010434:	24003aa8 	.word	0x24003aa8
 8010438:	24003ed0 	.word	0x24003ed0
 801043c:	24003edc 	.word	0x24003edc
 8010440:	24003a90 	.word	0x24003a90
 8010444:	08016998 	.word	0x08016998
            }
         }

         if( ( ( spi_drv_sReadFragInfo.iNumWordsReceived + spi_drv_iMsgLen ) << 1 ) <=
 8010448:	4b2d      	ldr	r3, [pc, #180]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 801044a:	891b      	ldrh	r3, [r3, #8]
 801044c:	461a      	mov	r2, r3
 801044e:	4b2d      	ldr	r3, [pc, #180]	@ (8010504 <ABCC_DrvSpiRunDriverRx+0x308>)
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	4413      	add	r3, r2
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801045a:	dc18      	bgt.n	801048e <ABCC_DrvSpiRunDriverRx+0x292>
             ( ABCC_CFG_MAX_MSG_SIZE + ABCC_MSG_HEADER_TYPE_SIZEOF ) )
         {
            /*
            ** Message fits in buffer so read it.
            */
            ABCC_PORT_MemCpy( spi_drv_sReadFragInfo.puCurrPtr,
 801045c:	4b28      	ldr	r3, [pc, #160]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 801045e:	685b      	ldr	r3, [r3, #4]
                              spi_drv_sMisoFrame.iData,
                              spi_drv_iMsgLen << 1 );
 8010460:	4a28      	ldr	r2, [pc, #160]	@ (8010504 <ABCC_DrvSpiRunDriverRx+0x308>)
 8010462:	8812      	ldrh	r2, [r2, #0]
            ABCC_PORT_MemCpy( spi_drv_sReadFragInfo.puCurrPtr,
 8010464:	0052      	lsls	r2, r2, #1
 8010466:	4928      	ldr	r1, [pc, #160]	@ (8010508 <ABCC_DrvSpiRunDriverRx+0x30c>)
 8010468:	4618      	mov	r0, r3
 801046a:	f004 fe7a 	bl	8015162 <memcpy>

            spi_drv_sReadFragInfo.puCurrPtr += spi_drv_iMsgLen;
 801046e:	4b24      	ldr	r3, [pc, #144]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 8010470:	685a      	ldr	r2, [r3, #4]
 8010472:	4b24      	ldr	r3, [pc, #144]	@ (8010504 <ABCC_DrvSpiRunDriverRx+0x308>)
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	4413      	add	r3, r2
 801047a:	4a21      	ldr	r2, [pc, #132]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 801047c:	6053      	str	r3, [r2, #4]
            spi_drv_sReadFragInfo.iNumWordsReceived += spi_drv_iMsgLen;
 801047e:	4b20      	ldr	r3, [pc, #128]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 8010480:	891a      	ldrh	r2, [r3, #8]
 8010482:	4b20      	ldr	r3, [pc, #128]	@ (8010504 <ABCC_DrvSpiRunDriverRx+0x308>)
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	4413      	add	r3, r2
 8010488:	b29a      	uxth	r2, r3
 801048a:	4b1d      	ldr	r3, [pc, #116]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 801048c:	811a      	strh	r2, [r3, #8]
         }

         if( spi_drv_sMisoFrame.iSpiStatusAnbStatus & iSpiStatusLastFrag )
 801048e:	4b1f      	ldr	r3, [pc, #124]	@ (801050c <ABCC_DrvSpiRunDriverRx+0x310>)
 8010490:	889b      	ldrh	r3, [r3, #4]
 8010492:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8010496:	4013      	ands	r3, r2
 8010498:	b29b      	uxth	r3, r3
 801049a:	2b00      	cmp	r3, #0
 801049c:	d013      	beq.n	80104c6 <ABCC_DrvSpiRunDriverRx+0x2ca>
         {
            /*
            ** Last fragment of the read message. Return the message.
            ** Update the application flow control.
            */
            if( ABCC_GetLowAddrOct( ((ABP_MsgType16*)spi_drv_sReadFragInfo.psReadMsg)->sHeader.iCmdReserved ) & ABP_MSG_HEADER_C_BIT )
 801049e:	4b18      	ldr	r3, [pc, #96]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	891b      	ldrh	r3, [r3, #8]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d005      	beq.n	80104ba <ABCC_DrvSpiRunDriverRx+0x2be>
            {
               spi_drv_bNbrOfCmds--;
 80104ae:	4b18      	ldr	r3, [pc, #96]	@ (8010510 <ABCC_DrvSpiRunDriverRx+0x314>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	3b01      	subs	r3, #1
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	4b16      	ldr	r3, [pc, #88]	@ (8010510 <ABCC_DrvSpiRunDriverRx+0x314>)
 80104b8:	701a      	strb	r2, [r3, #0]
            }

            spi_drv_psReadMessage = spi_drv_sReadFragInfo.psReadMsg;
 80104ba:	4b11      	ldr	r3, [pc, #68]	@ (8010500 <ABCC_DrvSpiRunDriverRx+0x304>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4a15      	ldr	r2, [pc, #84]	@ (8010514 <ABCC_DrvSpiRunDriverRx+0x318>)
 80104c0:	6013      	str	r3, [r2, #0]
            spi_drv_ResetReadFragInfo();
 80104c2:	f000 f839 	bl	8010538 <spi_drv_ResetReadFragInfo>
      }

      /*
      ** Clear the valid pd for the next frame.
      */
      spi_drv_sMosiFrame.iSpiControl &= ~iSpiCtrlWrPdWalid;
 80104c6:	4b14      	ldr	r3, [pc, #80]	@ (8010518 <ABCC_DrvSpiRunDriverRx+0x31c>)
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	b21a      	sxth	r2, r3
 80104cc:	2301      	movs	r3, #1
 80104ce:	b21b      	sxth	r3, r3
 80104d0:	43db      	mvns	r3, r3
 80104d2:	b21b      	sxth	r3, r3
 80104d4:	4013      	ands	r3, r2
 80104d6:	b21b      	sxth	r3, r3
 80104d8:	b29a      	uxth	r2, r3
 80104da:	4b0f      	ldr	r3, [pc, #60]	@ (8010518 <ABCC_DrvSpiRunDriverRx+0x31c>)
 80104dc:	801a      	strh	r2, [r3, #0]
      spi_drv_eState = SM_SPI_RDY_TO_SEND_MOSI;
 80104de:	4b0f      	ldr	r3, [pc, #60]	@ (801051c <ABCC_DrvSpiRunDriverRx+0x320>)
 80104e0:	2201      	movs	r2, #1
 80104e2:	701a      	strb	r2, [r3, #0]
 80104e4:	e006      	b.n	80104f4 <ABCC_DrvSpiRunDriverRx+0x2f8>
   }
   else if( spi_drv_eState == SM_SPI_INIT )
 80104e6:	4b0d      	ldr	r3, [pc, #52]	@ (801051c <ABCC_DrvSpiRunDriverRx+0x320>)
 80104e8:	781b      	ldrb	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d102      	bne.n	80104f4 <ABCC_DrvSpiRunDriverRx+0x2f8>
   {
      spi_drv_eState = SM_SPI_RDY_TO_SEND_MOSI;
 80104ee:	4b0b      	ldr	r3, [pc, #44]	@ (801051c <ABCC_DrvSpiRunDriverRx+0x320>)
 80104f0:	2201      	movs	r2, #1
 80104f2:	701a      	strb	r2, [r3, #0]
   }

   return( psWriteMsg );
 80104f4:	68fb      	ldr	r3, [r7, #12]
} /* end of spi_drv_HandleMiso() */
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	24003a90 	.word	0x24003a90
 8010504:	24003ef8 	.word	0x24003ef8
 8010508:	2400367a 	.word	0x2400367a
 801050c:	24003670 	.word	0x24003670
 8010510:	24003edc 	.word	0x24003edc
 8010514:	24003aac 	.word	0x24003aac
 8010518:	24003ab0 	.word	0x24003ab0
 801051c:	24003ef0 	.word	0x24003ef0

08010520 <spi_drv_DataReceived>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void spi_drv_DataReceived( void )
{
 8010520:	b480      	push	{r7}
 8010522:	af00      	add	r7, sp, #0
   spi_drv_fNewMisoReceived = TRUE;
 8010524:	4b03      	ldr	r3, [pc, #12]	@ (8010534 <spi_drv_DataReceived+0x14>)
 8010526:	2201      	movs	r2, #1
 8010528:	601a      	str	r2, [r3, #0]
}
 801052a:	bf00      	nop
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	24003a9c 	.word	0x24003a9c

08010538 <spi_drv_ResetReadFragInfo>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void spi_drv_ResetReadFragInfo( void )
{
 8010538:	b480      	push	{r7}
 801053a:	af00      	add	r7, sp, #0
   spi_drv_sReadFragInfo.iNumWordsReceived = 0;
 801053c:	4b06      	ldr	r3, [pc, #24]	@ (8010558 <spi_drv_ResetReadFragInfo+0x20>)
 801053e:	2200      	movs	r2, #0
 8010540:	811a      	strh	r2, [r3, #8]
   spi_drv_sReadFragInfo.psReadMsg = NULL;
 8010542:	4b05      	ldr	r3, [pc, #20]	@ (8010558 <spi_drv_ResetReadFragInfo+0x20>)
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
   spi_drv_sReadFragInfo.puCurrPtr = NULL;
 8010548:	4b03      	ldr	r3, [pc, #12]	@ (8010558 <spi_drv_ResetReadFragInfo+0x20>)
 801054a:	2200      	movs	r2, #0
 801054c:	605a      	str	r2, [r3, #4]
}
 801054e:	bf00      	nop
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr
 8010558:	24003a90 	.word	0x24003a90

0801055c <spi_drv_ResetWriteFragInfo>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void spi_drv_ResetWriteFragInfo( void )
{
 801055c:	b480      	push	{r7}
 801055e:	af00      	add	r7, sp, #0
   ABCC_PORT_UseCritical();

   spi_drv_sWriteFragInfo.iNumWordsLeft = 0;
 8010560:	4b08      	ldr	r3, [pc, #32]	@ (8010584 <spi_drv_ResetWriteFragInfo+0x28>)
 8010562:	2200      	movs	r2, #0
 8010564:	811a      	strh	r2, [r3, #8]
   spi_drv_sWriteFragInfo.iCurrFragLength = 0;
 8010566:	4b07      	ldr	r3, [pc, #28]	@ (8010584 <spi_drv_ResetWriteFragInfo+0x28>)
 8010568:	2200      	movs	r2, #0
 801056a:	815a      	strh	r2, [r3, #10]
   spi_drv_sWriteFragInfo.puCurrPtr = NULL;
 801056c:	4b05      	ldr	r3, [pc, #20]	@ (8010584 <spi_drv_ResetWriteFragInfo+0x28>)
 801056e:	2200      	movs	r2, #0
 8010570:	605a      	str	r2, [r3, #4]

   ABCC_PORT_EnterCritical();
   spi_drv_sWriteFragInfo.psWriteMsg = NULL;
 8010572:	4b04      	ldr	r3, [pc, #16]	@ (8010584 <spi_drv_ResetWriteFragInfo+0x28>)
 8010574:	2200      	movs	r2, #0
 8010576:	601a      	str	r2, [r3, #0]
   ABCC_PORT_ExitCritical();
}
 8010578:	bf00      	nop
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr
 8010582:	bf00      	nop
 8010584:	24003ed0 	.word	0x24003ed0

08010588 <drv_WdTimeoutHandler>:
** Returns:
**       None.
**------------------------------------------------------------------------------
*/
static void drv_WdTimeoutHandler( void )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	af00      	add	r7, sp, #0
   fWdTmo = TRUE;
 801058c:	4b03      	ldr	r3, [pc, #12]	@ (801059c <drv_WdTimeoutHandler+0x14>)
 801058e:	2201      	movs	r2, #1
 8010590:	601a      	str	r2, [r3, #0]
   ABCC_CbfWdTimeout();
 8010592:	f001 fc0d 	bl	8011db0 <ABCC_CbfWdTimeout>
}
 8010596:	bf00      	nop
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	24003ef4 	.word	0x24003ef4

080105a0 <ABCC_DrvSpiInit>:

void ABCC_DrvSpiInit( UINT8 bOpmode )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	4603      	mov	r3, r0
 80105a8:	71fb      	strb	r3, [r7, #7]
   UINT16 i;
   (void)bOpmode;

   spi_drv_sMosiFrame.iSpiControl = 0;
 80105aa:	4b3a      	ldr	r3, [pc, #232]	@ (8010694 <ABCC_DrvSpiInit+0xf4>)
 80105ac:	2200      	movs	r2, #0
 80105ae:	801a      	strh	r2, [r3, #0]
   for( i = 0; i < MAX_PAYLOAD_WORD_LEN; i++ )
 80105b0:	2300      	movs	r3, #0
 80105b2:	81fb      	strh	r3, [r7, #14]
 80105b4:	e00f      	b.n	80105d6 <ABCC_DrvSpiInit+0x36>
   {
      spi_drv_sMosiFrame.iData[ i ] = 0;
 80105b6:	89fb      	ldrh	r3, [r7, #14]
 80105b8:	4a36      	ldr	r2, [pc, #216]	@ (8010694 <ABCC_DrvSpiInit+0xf4>)
 80105ba:	3304      	adds	r3, #4
 80105bc:	2100      	movs	r1, #0
 80105be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      spi_drv_sMisoFrame.iData[ i ] = 0;
 80105c2:	89fb      	ldrh	r3, [r7, #14]
 80105c4:	4a34      	ldr	r2, [pc, #208]	@ (8010698 <ABCC_DrvSpiInit+0xf8>)
 80105c6:	3304      	adds	r3, #4
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	2200      	movs	r2, #0
 80105ce:	805a      	strh	r2, [r3, #2]
   for( i = 0; i < MAX_PAYLOAD_WORD_LEN; i++ )
 80105d0:	89fb      	ldrh	r3, [r7, #14]
 80105d2:	3301      	adds	r3, #1
 80105d4:	81fb      	strh	r3, [r7, #14]
 80105d6:	89fb      	ldrh	r3, [r7, #14]
 80105d8:	f240 2209 	movw	r2, #521	@ 0x209
 80105dc:	4293      	cmp	r3, r2
 80105de:	d9ea      	bls.n	80105b6 <ABCC_DrvSpiInit+0x16>
   }

   spi_drv_ResetReadFragInfo();
 80105e0:	f7ff ffaa 	bl	8010538 <spi_drv_ResetReadFragInfo>
   spi_drv_fNewMisoReceived = FALSE;
 80105e4:	4b2d      	ldr	r3, [pc, #180]	@ (801069c <ABCC_DrvSpiInit+0xfc>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
   spi_drv_bAnbStatus = 0;
 80105ea:	4b2d      	ldr	r3, [pc, #180]	@ (80106a0 <ABCC_DrvSpiInit+0x100>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	701a      	strb	r2, [r3, #0]
   spi_drv_psReadMessage = 0;
 80105f0:	4b2c      	ldr	r3, [pc, #176]	@ (80106a4 <ABCC_DrvSpiInit+0x104>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
   spi_drv_ResetWriteFragInfo();
 80105f6:	f7ff ffb1 	bl	801055c <spi_drv_ResetWriteFragInfo>
   spi_drv_sMosiFrame.iIntMaskAppStatus = 0;
 80105fa:	4b26      	ldr	r3, [pc, #152]	@ (8010694 <ABCC_DrvSpiInit+0xf4>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	80da      	strh	r2, [r3, #6]
   spi_drv_bNbrOfCmds = 0;
 8010600:	4b29      	ldr	r3, [pc, #164]	@ (80106a8 <ABCC_DrvSpiInit+0x108>)
 8010602:	2200      	movs	r2, #0
 8010604:	701a      	strb	r2, [r3, #0]
   spi_drv_eState = SM_SPI_INIT;
 8010606:	4b29      	ldr	r3, [pc, #164]	@ (80106ac <ABCC_DrvSpiInit+0x10c>)
 8010608:	2200      	movs	r2, #0
 801060a:	701a      	strb	r2, [r3, #0]
   spi_drv_iPdSize = SPI_DEFAULT_PD_LEN;
 801060c:	4b28      	ldr	r3, [pc, #160]	@ (80106b0 <ABCC_DrvSpiInit+0x110>)
 801060e:	2200      	movs	r2, #0
 8010610:	801a      	strh	r2, [r3, #0]
   spi_drv_iWritePdSize = SPI_DEFAULT_PD_LEN;
 8010612:	4b28      	ldr	r3, [pc, #160]	@ (80106b4 <ABCC_DrvSpiInit+0x114>)
 8010614:	2200      	movs	r2, #0
 8010616:	801a      	strh	r2, [r3, #0]
   spi_drv_iReadPdSize = SPI_DEFAULT_PD_LEN;
 8010618:	4b27      	ldr	r3, [pc, #156]	@ (80106b8 <ABCC_DrvSpiInit+0x118>)
 801061a:	2200      	movs	r2, #0
 801061c:	801a      	strh	r2, [r3, #0]
   spi_drv_iPdOffset = NUM_BYTES_2_WORDS( ABCC_CFG_SPI_MSG_FRAG_LEN );
 801061e:	4b27      	ldr	r3, [pc, #156]	@ (80106bc <ABCC_DrvSpiInit+0x11c>)
 8010620:	2208      	movs	r2, #8
 8010622:	801a      	strh	r2, [r3, #0]
   spi_drv_iCrcOffset = NUM_BYTES_2_WORDS( ABCC_CFG_SPI_MSG_FRAG_LEN ) + SPI_DEFAULT_PD_LEN;
 8010624:	4b26      	ldr	r3, [pc, #152]	@ (80106c0 <ABCC_DrvSpiInit+0x120>)
 8010626:	2208      	movs	r2, #8
 8010628:	801a      	strh	r2, [r3, #0]
   spi_drv_iSpiFrameSize = SPI_FRAME_SIZE_EXCLUDING_DATA + spi_drv_iCrcOffset;
 801062a:	4b25      	ldr	r3, [pc, #148]	@ (80106c0 <ABCC_DrvSpiInit+0x120>)
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	3307      	adds	r3, #7
 8010630:	b29a      	uxth	r2, r3
 8010632:	4b24      	ldr	r3, [pc, #144]	@ (80106c4 <ABCC_DrvSpiInit+0x124>)
 8010634:	801a      	strh	r2, [r3, #0]
   spi_drv_fRetransmit = FALSE;
 8010636:	4b24      	ldr	r3, [pc, #144]	@ (80106c8 <ABCC_DrvSpiInit+0x128>)
 8010638:	2200      	movs	r2, #0
 801063a:	601a      	str	r2, [r3, #0]
   spi_drv_iMsgLen = 0;
 801063c:	4b23      	ldr	r3, [pc, #140]	@ (80106cc <ABCC_DrvSpiInit+0x12c>)
 801063e:	2200      	movs	r2, #0
 8010640:	801a      	strh	r2, [r3, #0]

   spi_drv_iMsgLen = NUM_BYTES_2_WORDS( ABCC_CFG_SPI_MSG_FRAG_LEN );
 8010642:	4b22      	ldr	r3, [pc, #136]	@ (80106cc <ABCC_DrvSpiInit+0x12c>)
 8010644:	2208      	movs	r2, #8
 8010646:	801a      	strh	r2, [r3, #0]
   spi_drv_sMosiFrame.iMsgLen = iTOiLe( spi_drv_iMsgLen );
 8010648:	4b20      	ldr	r3, [pc, #128]	@ (80106cc <ABCC_DrvSpiInit+0x12c>)
 801064a:	881a      	ldrh	r2, [r3, #0]
 801064c:	4b11      	ldr	r3, [pc, #68]	@ (8010694 <ABCC_DrvSpiInit+0xf4>)
 801064e:	805a      	strh	r2, [r3, #2]

   spi_drv_sMosiFrame.iPdLen = iTOiLe( spi_drv_iPdSize );
 8010650:	4b17      	ldr	r3, [pc, #92]	@ (80106b0 <ABCC_DrvSpiInit+0x110>)
 8010652:	881a      	ldrh	r2, [r3, #0]
 8010654:	4b0f      	ldr	r3, [pc, #60]	@ (8010694 <ABCC_DrvSpiInit+0xf4>)
 8010656:	809a      	strh	r2, [r3, #4]
   spi_drv_bNextAppStatus = 0;
 8010658:	4b1d      	ldr	r3, [pc, #116]	@ (80106d0 <ABCC_DrvSpiInit+0x130>)
 801065a:	2200      	movs	r2, #0
 801065c:	701a      	strb	r2, [r3, #0]
   spi_drv_bNextIntMask = 0;
 801065e:	4b1d      	ldr	r3, [pc, #116]	@ (80106d4 <ABCC_DrvSpiInit+0x134>)
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
   spi_drv_bpRdPd = NULL;
 8010664:	4b1c      	ldr	r3, [pc, #112]	@ (80106d8 <ABCC_DrvSpiInit+0x138>)
 8010666:	2200      	movs	r2, #0
 8010668:	601a      	str	r2, [r3, #0]
   spi_drv_bAnbCmdCnt = 0;
 801066a:	4b1c      	ldr	r3, [pc, #112]	@ (80106dc <ABCC_DrvSpiInit+0x13c>)
 801066c:	2200      	movs	r2, #0
 801066e:	701a      	strb	r2, [r3, #0]
   xWdTmoHandle = ABCC_TimerCreate( drv_WdTimeoutHandler );
 8010670:	481b      	ldr	r0, [pc, #108]	@ (80106e0 <ABCC_DrvSpiInit+0x140>)
 8010672:	f7fe fc4b 	bl	800ef0c <ABCC_TimerCreate>
 8010676:	4603      	mov	r3, r0
 8010678:	461a      	mov	r2, r3
 801067a:	4b1a      	ldr	r3, [pc, #104]	@ (80106e4 <ABCC_DrvSpiInit+0x144>)
 801067c:	701a      	strb	r2, [r3, #0]
   fWdTmo = FALSE;
 801067e:	4b1a      	ldr	r3, [pc, #104]	@ (80106e8 <ABCC_DrvSpiInit+0x148>)
 8010680:	2200      	movs	r2, #0
 8010682:	601a      	str	r2, [r3, #0]

   /*
   ** Register the MISO indicator for the physical SPI driver.
   */
   ABCC_HAL_SpiRegDataReceived( spi_drv_DataReceived );
 8010684:	4819      	ldr	r0, [pc, #100]	@ (80106ec <ABCC_DrvSpiInit+0x14c>)
 8010686:	f004 f8cd 	bl	8014824 <ABCC_HAL_SpiRegDataReceived>
   /*
   ** Initialise sync measurement flag
   */
   fAbccUserSyncMeasurementIp = FALSE;
#endif
}
 801068a:	bf00      	nop
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop
 8010694:	24003ab0 	.word	0x24003ab0
 8010698:	24003670 	.word	0x24003670
 801069c:	24003a9c 	.word	0x24003a9c
 80106a0:	24003aa0 	.word	0x24003aa0
 80106a4:	24003aac 	.word	0x24003aac
 80106a8:	24003edc 	.word	0x24003edc
 80106ac:	24003ef0 	.word	0x24003ef0
 80106b0:	24003ee4 	.word	0x24003ee4
 80106b4:	24003ee6 	.word	0x24003ee6
 80106b8:	24003ee8 	.word	0x24003ee8
 80106bc:	24003ee0 	.word	0x24003ee0
 80106c0:	24003ee2 	.word	0x24003ee2
 80106c4:	24003eea 	.word	0x24003eea
 80106c8:	24003eec 	.word	0x24003eec
 80106cc:	24003ef8 	.word	0x24003ef8
 80106d0:	24003edd 	.word	0x24003edd
 80106d4:	24003ede 	.word	0x24003ede
 80106d8:	24003aa8 	.word	0x24003aa8
 80106dc:	24003aa4 	.word	0x24003aa4
 80106e0:	08010589 	.word	0x08010589
 80106e4:	24003ef1 	.word	0x24003ef1
 80106e8:	24003ef4 	.word	0x24003ef4
 80106ec:	08010521 	.word	0x08010521

080106f0 <ABCC_DrvSpiWriteMessage>:

BOOL ABCC_DrvSpiWriteMessage( ABP_MsgType* psWriteMsg )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	6078      	str	r0, [r7, #4]
   ABCC_PORT_UseCritical();

   if( !psWriteMsg )
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d10a      	bne.n	8010714 <ABCC_DrvSpiWriteMessage+0x24>
   {
      ABCC_LOG_FATAL( ABCC_EC_UNEXPECTED_NULL_PTR,
 80106fe:	4b17      	ldr	r3, [pc, #92]	@ (801075c <ABCC_DrvSpiWriteMessage+0x6c>)
 8010700:	9301      	str	r3, [sp, #4]
 8010702:	f240 237a 	movw	r3, #634	@ 0x27a
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	4b15      	ldr	r3, [pc, #84]	@ (8010760 <ABCC_DrvSpiWriteMessage+0x70>)
 801070a:	2200      	movs	r2, #0
 801070c:	211e      	movs	r1, #30
 801070e:	2000      	movs	r0, #0
 8010710:	f7fc ff9a 	bl	800d648 <ABCC_LogHandler>
         0,
         "Unexpected NULL pointer\n" );
   }

   ABCC_PORT_EnterCritical();
   if( spi_drv_sWriteFragInfo.psWriteMsg != NULL )
 8010714:	4b13      	ldr	r3, [pc, #76]	@ (8010764 <ABCC_DrvSpiWriteMessage+0x74>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00c      	beq.n	8010736 <ABCC_DrvSpiWriteMessage+0x46>
   {
      ABCC_PORT_ExitCritical();
      ABCC_LOG_WARNING( ABCC_EC_ASSERT_FAILED, 0, "Write message not NULL\n" );
 801071c:	4b12      	ldr	r3, [pc, #72]	@ (8010768 <ABCC_DrvSpiWriteMessage+0x78>)
 801071e:	9301      	str	r3, [sp, #4]
 8010720:	f240 2383 	movw	r3, #643	@ 0x283
 8010724:	9300      	str	r3, [sp, #0]
 8010726:	4b0e      	ldr	r3, [pc, #56]	@ (8010760 <ABCC_DrvSpiWriteMessage+0x70>)
 8010728:	2200      	movs	r2, #0
 801072a:	212b      	movs	r1, #43	@ 0x2b
 801072c:	2002      	movs	r0, #2
 801072e:	f7fc ff8b 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 8010732:	2300      	movs	r3, #0
 8010734:	e00e      	b.n	8010754 <ABCC_DrvSpiWriteMessage+0x64>
   #pragma GCC diagnostic ignored "-Waddress-of-packed-member"
   /*
   ** psWriteMsg is 32 bit aligned so it is safe to ignore this warning
   */
#endif
   spi_drv_sWriteFragInfo.puCurrPtr = (UINT16*)psWriteMsg;
 8010736:	4a0b      	ldr	r2, [pc, #44]	@ (8010764 <ABCC_DrvSpiWriteMessage+0x74>)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6053      	str	r3, [r2, #4]
#if ( __GNUC__ >= 9 )
   #pragma GCC diagnostic pop
#endif
   spi_drv_sWriteFragInfo.iNumWordsLeft = NUM_BYTES_2_WORDS( iLeTOi( psWriteMsg->sHeader.iDataSize ) + ABCC_MSG_HEADER_TYPE_SIZEOF );
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	b29b      	uxth	r3, r3
 8010742:	330d      	adds	r3, #13
 8010744:	105b      	asrs	r3, r3, #1
 8010746:	b21a      	sxth	r2, r3
 8010748:	4b06      	ldr	r3, [pc, #24]	@ (8010764 <ABCC_DrvSpiWriteMessage+0x74>)
 801074a:	811a      	strh	r2, [r3, #8]
   spi_drv_sWriteFragInfo.psWriteMsg = psWriteMsg;
 801074c:	4a05      	ldr	r2, [pc, #20]	@ (8010764 <ABCC_DrvSpiWriteMessage+0x74>)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6013      	str	r3, [r2, #0]
   ABCC_PORT_ExitCritical();

   /*
   ** The SPI driver still owns the buffer.
   */
   return( FALSE );
 8010752:	2300      	movs	r3, #0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	08016940 	.word	0x08016940
 8010760:	0801692c 	.word	0x0801692c
 8010764:	24003ed0 	.word	0x24003ed0
 8010768:	080169d4 	.word	0x080169d4

0801076c <ABCC_DrvSpiWriteProcessData>:

void ABCC_DrvSpiWriteProcessData( void* pxProcessData )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af04      	add	r7, sp, #16
 8010772:	6078      	str	r0, [r7, #4]
   (void)pxProcessData;
   if( spi_drv_eState == SM_SPI_RDY_TO_SEND_MOSI )
 8010774:	4b0f      	ldr	r3, [pc, #60]	@ (80107b4 <ABCC_DrvSpiWriteProcessData+0x48>)
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	2b01      	cmp	r3, #1
 801077a:	d107      	bne.n	801078c <ABCC_DrvSpiWriteProcessData+0x20>
   {
      spi_drv_sMosiFrame.iSpiControl |= iSpiCtrlWrPdWalid;
 801077c:	4b0e      	ldr	r3, [pc, #56]	@ (80107b8 <ABCC_DrvSpiWriteProcessData+0x4c>)
 801077e:	881b      	ldrh	r3, [r3, #0]
 8010780:	2201      	movs	r2, #1
 8010782:	4313      	orrs	r3, r2
 8010784:	b29a      	uxth	r2, r3
 8010786:	4b0c      	ldr	r3, [pc, #48]	@ (80107b8 <ABCC_DrvSpiWriteProcessData+0x4c>)
 8010788:	801a      	strh	r2, [r3, #0]
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
         (UINT32)spi_drv_eState,
         "Write process data operation not allowed in this state (state: %d)\n",
         spi_drv_eState );
   }
}
 801078a:	e00f      	b.n	80107ac <ABCC_DrvSpiWriteProcessData+0x40>
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
 801078c:	4b09      	ldr	r3, [pc, #36]	@ (80107b4 <ABCC_DrvSpiWriteProcessData+0x48>)
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	461a      	mov	r2, r3
 8010792:	4b08      	ldr	r3, [pc, #32]	@ (80107b4 <ABCC_DrvSpiWriteProcessData+0x48>)
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	9302      	str	r3, [sp, #8]
 8010798:	4b08      	ldr	r3, [pc, #32]	@ (80107bc <ABCC_DrvSpiWriteProcessData+0x50>)
 801079a:	9301      	str	r3, [sp, #4]
 801079c:	f44f 7329 	mov.w	r3, #676	@ 0x2a4
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	4b07      	ldr	r3, [pc, #28]	@ (80107c0 <ABCC_DrvSpiWriteProcessData+0x54>)
 80107a4:	2116      	movs	r1, #22
 80107a6:	2002      	movs	r0, #2
 80107a8:	f7fc ff4e 	bl	800d648 <ABCC_LogHandler>
}
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	24003ef0 	.word	0x24003ef0
 80107b8:	24003ab0 	.word	0x24003ab0
 80107bc:	080169ec 	.word	0x080169ec
 80107c0:	0801692c 	.word	0x0801692c

080107c4 <ABCC_DrvSpiIsReadyForWriteMessage>:

BOOL ABCC_DrvSpiIsReadyForWriteMessage( void )
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
   BOOL fRdyForWrMsg = FALSE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	607b      	str	r3, [r7, #4]

   if( spi_drv_sWriteFragInfo.psWriteMsg == NULL )
 80107ce:	4b06      	ldr	r3, [pc, #24]	@ (80107e8 <ABCC_DrvSpiIsReadyForWriteMessage+0x24>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d101      	bne.n	80107da <ABCC_DrvSpiIsReadyForWriteMessage+0x16>
   {
      fRdyForWrMsg = TRUE;
 80107d6:	2301      	movs	r3, #1
 80107d8:	607b      	str	r3, [r7, #4]
   }
   return( fRdyForWrMsg );
 80107da:	687b      	ldr	r3, [r7, #4]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	24003ed0 	.word	0x24003ed0

080107ec <ABCC_DrvSpiIsReadyForCmd>:

BOOL ABCC_DrvSpiIsReadyForCmd( void )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	af00      	add	r7, sp, #0
   return( pnABCC_DrvISReadyForWriteMessage() && ( spi_drv_bAnbCmdCnt > 0 ) );
 80107f0:	4b07      	ldr	r3, [pc, #28]	@ (8010810 <ABCC_DrvSpiIsReadyForCmd+0x24>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4798      	blx	r3
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d005      	beq.n	8010808 <ABCC_DrvSpiIsReadyForCmd+0x1c>
 80107fc:	4b05      	ldr	r3, [pc, #20]	@ (8010814 <ABCC_DrvSpiIsReadyForCmd+0x28>)
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <ABCC_DrvSpiIsReadyForCmd+0x1c>
 8010804:	2301      	movs	r3, #1
 8010806:	e000      	b.n	801080a <ABCC_DrvSpiIsReadyForCmd+0x1e>
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	24001498 	.word	0x24001498
 8010814:	24003aa4 	.word	0x24003aa4

08010818 <ABCC_DrvSpiSetNbrOfCmds>:

void ABCC_DrvSpiSetNbrOfCmds( UINT8 bNbrOfCmds )
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	4603      	mov	r3, r0
 8010820:	71fb      	strb	r3, [r7, #7]
   spi_drv_bNbrOfCmds = bNbrOfCmds;
 8010822:	4a04      	ldr	r2, [pc, #16]	@ (8010834 <ABCC_DrvSpiSetNbrOfCmds+0x1c>)
 8010824:	79fb      	ldrb	r3, [r7, #7]
 8010826:	7013      	strb	r3, [r2, #0]
}
 8010828:	bf00      	nop
 801082a:	370c      	adds	r7, #12
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	4770      	bx	lr
 8010834:	24003edc 	.word	0x24003edc

08010838 <ABCC_DrvSpiSetAppStatus>:

void ABCC_DrvSpiSetAppStatus( ABP_AppStatusType eAppStatus )
{
 8010838:	b480      	push	{r7}
 801083a:	b083      	sub	sp, #12
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	71fb      	strb	r3, [r7, #7]
   spi_drv_bNextAppStatus = eAppStatus;
 8010842:	4a04      	ldr	r2, [pc, #16]	@ (8010854 <ABCC_DrvSpiSetAppStatus+0x1c>)
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	7013      	strb	r3, [r2, #0]
}
 8010848:	bf00      	nop
 801084a:	370c      	adds	r7, #12
 801084c:	46bd      	mov	sp, r7
 801084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010852:	4770      	bx	lr
 8010854:	24003edd 	.word	0x24003edd

08010858 <ABCC_DrvSpiSetPdSize>:

void ABCC_DrvSpiSetPdSize( const UINT16  iReadPdSize, const UINT16  iWritePdSize )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b086      	sub	sp, #24
 801085c:	af04      	add	r7, sp, #16
 801085e:	4603      	mov	r3, r0
 8010860:	460a      	mov	r2, r1
 8010862:	80fb      	strh	r3, [r7, #6]
 8010864:	4613      	mov	r3, r2
 8010866:	80bb      	strh	r3, [r7, #4]
   if( spi_drv_eState == SM_SPI_RDY_TO_SEND_MOSI )
 8010868:	4b22      	ldr	r3, [pc, #136]	@ (80108f4 <ABCC_DrvSpiSetPdSize+0x9c>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	2b01      	cmp	r3, #1
 801086e:	d12c      	bne.n	80108ca <ABCC_DrvSpiSetPdSize+0x72>
   {
      /*
      ** Use the largest PD data size since the PD cannot be fragmented.
      */
      spi_drv_iWritePdSize = NUM_BYTES_2_WORDS( iWritePdSize );
 8010870:	88bb      	ldrh	r3, [r7, #4]
 8010872:	3301      	adds	r3, #1
 8010874:	105b      	asrs	r3, r3, #1
 8010876:	b29a      	uxth	r2, r3
 8010878:	4b1f      	ldr	r3, [pc, #124]	@ (80108f8 <ABCC_DrvSpiSetPdSize+0xa0>)
 801087a:	801a      	strh	r2, [r3, #0]
      spi_drv_iReadPdSize = NUM_BYTES_2_WORDS( iReadPdSize );
 801087c:	88fb      	ldrh	r3, [r7, #6]
 801087e:	3301      	adds	r3, #1
 8010880:	105b      	asrs	r3, r3, #1
 8010882:	b29a      	uxth	r2, r3
 8010884:	4b1d      	ldr	r3, [pc, #116]	@ (80108fc <ABCC_DrvSpiSetPdSize+0xa4>)
 8010886:	801a      	strh	r2, [r3, #0]

      spi_drv_iPdSize = spi_drv_iWritePdSize;
 8010888:	4b1b      	ldr	r3, [pc, #108]	@ (80108f8 <ABCC_DrvSpiSetPdSize+0xa0>)
 801088a:	881a      	ldrh	r2, [r3, #0]
 801088c:	4b1c      	ldr	r3, [pc, #112]	@ (8010900 <ABCC_DrvSpiSetPdSize+0xa8>)
 801088e:	801a      	strh	r2, [r3, #0]
      if( spi_drv_iReadPdSize > spi_drv_iWritePdSize )
 8010890:	4b1a      	ldr	r3, [pc, #104]	@ (80108fc <ABCC_DrvSpiSetPdSize+0xa4>)
 8010892:	881a      	ldrh	r2, [r3, #0]
 8010894:	4b18      	ldr	r3, [pc, #96]	@ (80108f8 <ABCC_DrvSpiSetPdSize+0xa0>)
 8010896:	881b      	ldrh	r3, [r3, #0]
 8010898:	429a      	cmp	r2, r3
 801089a:	d903      	bls.n	80108a4 <ABCC_DrvSpiSetPdSize+0x4c>
      {
         spi_drv_iPdSize = spi_drv_iReadPdSize;
 801089c:	4b17      	ldr	r3, [pc, #92]	@ (80108fc <ABCC_DrvSpiSetPdSize+0xa4>)
 801089e:	881a      	ldrh	r2, [r3, #0]
 80108a0:	4b17      	ldr	r3, [pc, #92]	@ (8010900 <ABCC_DrvSpiSetPdSize+0xa8>)
 80108a2:	801a      	strh	r2, [r3, #0]

      /*
      ** Update the CRC position and the total frame size since the process data
      ** size might have changed.
      */
      spi_drv_iCrcOffset = spi_drv_iPdOffset + spi_drv_iPdSize;
 80108a4:	4b17      	ldr	r3, [pc, #92]	@ (8010904 <ABCC_DrvSpiSetPdSize+0xac>)
 80108a6:	881a      	ldrh	r2, [r3, #0]
 80108a8:	4b15      	ldr	r3, [pc, #84]	@ (8010900 <ABCC_DrvSpiSetPdSize+0xa8>)
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	4413      	add	r3, r2
 80108ae:	b29a      	uxth	r2, r3
 80108b0:	4b15      	ldr	r3, [pc, #84]	@ (8010908 <ABCC_DrvSpiSetPdSize+0xb0>)
 80108b2:	801a      	strh	r2, [r3, #0]
      spi_drv_iSpiFrameSize = SPI_FRAME_SIZE_EXCLUDING_DATA + spi_drv_iCrcOffset;
 80108b4:	4b14      	ldr	r3, [pc, #80]	@ (8010908 <ABCC_DrvSpiSetPdSize+0xb0>)
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	3307      	adds	r3, #7
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	4b13      	ldr	r3, [pc, #76]	@ (801090c <ABCC_DrvSpiSetPdSize+0xb4>)
 80108be:	801a      	strh	r2, [r3, #0]
      spi_drv_sMosiFrame.iPdLen = iTOiLe( spi_drv_iPdSize );
 80108c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010900 <ABCC_DrvSpiSetPdSize+0xa8>)
 80108c2:	881a      	ldrh	r2, [r3, #0]
 80108c4:	4b12      	ldr	r3, [pc, #72]	@ (8010910 <ABCC_DrvSpiSetPdSize+0xb8>)
 80108c6:	809a      	strh	r2, [r3, #4]
   else
   {
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
         (UINT32)spi_drv_eState, "Set PD size operation not allowed in this state (state: %d)\n", spi_drv_eState );
   }
}
 80108c8:	e00f      	b.n	80108ea <ABCC_DrvSpiSetPdSize+0x92>
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
 80108ca:	4b0a      	ldr	r3, [pc, #40]	@ (80108f4 <ABCC_DrvSpiSetPdSize+0x9c>)
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	461a      	mov	r2, r3
 80108d0:	4b08      	ldr	r3, [pc, #32]	@ (80108f4 <ABCC_DrvSpiSetPdSize+0x9c>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	9302      	str	r3, [sp, #8]
 80108d6:	4b0f      	ldr	r3, [pc, #60]	@ (8010914 <ABCC_DrvSpiSetPdSize+0xbc>)
 80108d8:	9301      	str	r3, [sp, #4]
 80108da:	f240 23df 	movw	r3, #735	@ 0x2df
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010918 <ABCC_DrvSpiSetPdSize+0xc0>)
 80108e2:	2116      	movs	r1, #22
 80108e4:	2002      	movs	r0, #2
 80108e6:	f7fc feaf 	bl	800d648 <ABCC_LogHandler>
}
 80108ea:	bf00      	nop
 80108ec:	3708      	adds	r7, #8
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	24003ef0 	.word	0x24003ef0
 80108f8:	24003ee6 	.word	0x24003ee6
 80108fc:	24003ee8 	.word	0x24003ee8
 8010900:	24003ee4 	.word	0x24003ee4
 8010904:	24003ee0 	.word	0x24003ee0
 8010908:	24003ee2 	.word	0x24003ee2
 801090c:	24003eea 	.word	0x24003eea
 8010910:	24003ab0 	.word	0x24003ab0
 8010914:	08016a30 	.word	0x08016a30
 8010918:	0801692c 	.word	0x0801692c

0801091c <DrvSpiSetMsgReceiverBuffer>:

static void DrvSpiSetMsgReceiverBuffer( ABP_MsgType* const psReadMsg )
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af04      	add	r7, sp, #16
 8010922:	6078      	str	r0, [r7, #4]
   if( spi_drv_sReadFragInfo.puCurrPtr == NULL )
 8010924:	4b10      	ldr	r3, [pc, #64]	@ (8010968 <DrvSpiSetMsgReceiverBuffer+0x4c>)
 8010926:	685b      	ldr	r3, [r3, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d109      	bne.n	8010940 <DrvSpiSetMsgReceiverBuffer+0x24>
   {
      spi_drv_sReadFragInfo.psReadMsg = psReadMsg;
 801092c:	4a0e      	ldr	r2, [pc, #56]	@ (8010968 <DrvSpiSetMsgReceiverBuffer+0x4c>)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6013      	str	r3, [r2, #0]
   #pragma GCC diagnostic ignored "-Waddress-of-packed-member"
   /*
   ** psReadMsg is 32 bit aligned so it is safe to ignore this warning
   */
#endif
      spi_drv_sReadFragInfo.puCurrPtr = (UINT16*)psReadMsg;
 8010932:	4a0d      	ldr	r2, [pc, #52]	@ (8010968 <DrvSpiSetMsgReceiverBuffer+0x4c>)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6053      	str	r3, [r2, #4]
#if ( __GNUC__ >= 9 )
   #pragma GCC diagnostic pop
#endif
      spi_drv_sReadFragInfo.iNumWordsReceived = 0;
 8010938:	4b0b      	ldr	r3, [pc, #44]	@ (8010968 <DrvSpiSetMsgReceiverBuffer+0x4c>)
 801093a:	2200      	movs	r2, #0
 801093c:	811a      	strh	r2, [r3, #8]
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
         (UINT32)spi_drv_sReadFragInfo.puCurrPtr,
         "Set message receiver buffer operation not allowed in this state (state: %d)\n",
         spi_drv_eState );
   }
}
 801093e:	e00f      	b.n	8010960 <DrvSpiSetMsgReceiverBuffer+0x44>
      ABCC_LOG_WARNING( ABCC_EC_SPI_OP_NOT_ALLOWED_DURING_SPI_TRANSACTION,
 8010940:	4b09      	ldr	r3, [pc, #36]	@ (8010968 <DrvSpiSetMsgReceiverBuffer+0x4c>)
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	461a      	mov	r2, r3
 8010946:	4b09      	ldr	r3, [pc, #36]	@ (801096c <DrvSpiSetMsgReceiverBuffer+0x50>)
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	9302      	str	r3, [sp, #8]
 801094c:	4b08      	ldr	r3, [pc, #32]	@ (8010970 <DrvSpiSetMsgReceiverBuffer+0x54>)
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	f44f 733e 	mov.w	r3, #760	@ 0x2f8
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	4b07      	ldr	r3, [pc, #28]	@ (8010974 <DrvSpiSetMsgReceiverBuffer+0x58>)
 8010958:	2116      	movs	r1, #22
 801095a:	2002      	movs	r0, #2
 801095c:	f7fc fe74 	bl	800d648 <ABCC_LogHandler>
}
 8010960:	bf00      	nop
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	24003a90 	.word	0x24003a90
 801096c:	24003ef0 	.word	0x24003ef0
 8010970:	08016a70 	.word	0x08016a70
 8010974:	0801692c 	.word	0x0801692c

08010978 <ABCC_DrvSpiGetIntStatus>:

UINT16 ABCC_DrvSpiGetIntStatus( void )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af02      	add	r7, sp, #8
   ABCC_LOG_FATAL( ABCC_EC_INTSTATUS_NOT_SUPPORTED_BY_DRV_IMPL,
 801097e:	4b08      	ldr	r3, [pc, #32]	@ (80109a0 <ABCC_DrvSpiGetIntStatus+0x28>)
 8010980:	9301      	str	r3, [sp, #4]
 8010982:	f240 3301 	movw	r3, #769	@ 0x301
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	4b06      	ldr	r3, [pc, #24]	@ (80109a4 <ABCC_DrvSpiGetIntStatus+0x2c>)
 801098a:	2200      	movs	r2, #0
 801098c:	2113      	movs	r1, #19
 801098e:	2000      	movs	r0, #0
 8010990:	f7fc fe5a 	bl	800d648 <ABCC_LogHandler>
      0,
      "Interrupt status not supported by SPI driver\n" );

   return( 0xFFFF );
 8010994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010998:	4618      	mov	r0, r3
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	08016ac0 	.word	0x08016ac0
 80109a4:	0801692c 	.word	0x0801692c

080109a8 <ABCC_DrvSpiGetAnybusState>:

UINT8 ABCC_DrvSpiGetAnybusState( void )
{
 80109a8:	b480      	push	{r7}
 80109aa:	af00      	add	r7, sp, #0
   return( spi_drv_bAnbStatus & 0x7 );
 80109ac:	4b04      	ldr	r3, [pc, #16]	@ (80109c0 <ABCC_DrvSpiGetAnybusState+0x18>)
 80109ae:	781b      	ldrb	r3, [r3, #0]
 80109b0:	f003 0307 	and.w	r3, r3, #7
 80109b4:	b2db      	uxtb	r3, r3
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	46bd      	mov	sp, r7
 80109ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109be:	4770      	bx	lr
 80109c0:	24003aa0 	.word	0x24003aa0

080109c4 <ABCC_DrvSpiReadProcessData>:

void* ABCC_DrvSpiReadProcessData( void )
{
 80109c4:	b480      	push	{r7}
 80109c6:	b083      	sub	sp, #12
 80109c8:	af00      	add	r7, sp, #0
   UINT8* pxRdPd = NULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	607b      	str	r3, [r7, #4]

   if(  spi_drv_eState == SM_SPI_RDY_TO_SEND_MOSI )
 80109ce:	4b07      	ldr	r3, [pc, #28]	@ (80109ec <ABCC_DrvSpiReadProcessData+0x28>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b01      	cmp	r3, #1
 80109d4:	d102      	bne.n	80109dc <ABCC_DrvSpiReadProcessData+0x18>
   {
      pxRdPd = spi_drv_bpRdPd;
 80109d6:	4b06      	ldr	r3, [pc, #24]	@ (80109f0 <ABCC_DrvSpiReadProcessData+0x2c>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	607b      	str	r3, [r7, #4]
   }
   return( pxRdPd );
 80109dc:	687b      	ldr	r3, [r7, #4]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	24003ef0 	.word	0x24003ef0
 80109f0:	24003aa8 	.word	0x24003aa8

080109f4 <ABCC_DrvSpiReadMessage>:

ABP_MsgType* ABCC_DrvSpiReadMessage( void )
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
   ABP_MsgType* psRdMsg = NULL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	607b      	str	r3, [r7, #4]

   if( spi_drv_eState == SM_SPI_RDY_TO_SEND_MOSI )
 80109fe:	4b0a      	ldr	r3, [pc, #40]	@ (8010a28 <ABCC_DrvSpiReadMessage+0x34>)
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d109      	bne.n	8010a1a <ABCC_DrvSpiReadMessage+0x26>
   {
      if( spi_drv_psReadMessage != NULL )
 8010a06:	4b09      	ldr	r3, [pc, #36]	@ (8010a2c <ABCC_DrvSpiReadMessage+0x38>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d005      	beq.n	8010a1a <ABCC_DrvSpiReadMessage+0x26>
      {
         psRdMsg = spi_drv_psReadMessage;
 8010a0e:	4b07      	ldr	r3, [pc, #28]	@ (8010a2c <ABCC_DrvSpiReadMessage+0x38>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	607b      	str	r3, [r7, #4]
         spi_drv_psReadMessage = NULL;
 8010a14:	4b05      	ldr	r3, [pc, #20]	@ (8010a2c <ABCC_DrvSpiReadMessage+0x38>)
 8010a16:	2200      	movs	r2, #0
 8010a18:	601a      	str	r2, [r3, #0]
      }
   }
   return( psRdMsg );
 8010a1a:	687b      	ldr	r3, [r7, #4]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	370c      	adds	r7, #12
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	24003ef0 	.word	0x24003ef0
 8010a2c:	24003aac 	.word	0x24003aac

08010a30 <ABCC_DrvSpiSetIntMask>:

void ABCC_DrvSpiSetIntMask( const UINT16 iIntMask )
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	4603      	mov	r3, r0
 8010a38:	80fb      	strh	r3, [r7, #6]
   spi_drv_bNextIntMask = (UINT8)iIntMask;
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	4b04      	ldr	r3, [pc, #16]	@ (8010a50 <ABCC_DrvSpiSetIntMask+0x20>)
 8010a40:	701a      	strb	r2, [r3, #0]
}
 8010a42:	bf00      	nop
 8010a44:	370c      	adds	r7, #12
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	24003ede 	.word	0x24003ede

08010a54 <ABCC_DrvSpiGetWrPdBuffer>:

void* ABCC_DrvSpiGetWrPdBuffer( void )
{
 8010a54:	b480      	push	{r7}
 8010a56:	af00      	add	r7, sp, #0
   return( &spi_drv_sMosiFrame.iData[ spi_drv_iPdOffset ] );
 8010a58:	4b05      	ldr	r3, [pc, #20]	@ (8010a70 <ABCC_DrvSpiGetWrPdBuffer+0x1c>)
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	3304      	adds	r3, #4
 8010a5e:	005b      	lsls	r3, r3, #1
 8010a60:	4a04      	ldr	r2, [pc, #16]	@ (8010a74 <ABCC_DrvSpiGetWrPdBuffer+0x20>)
 8010a62:	4413      	add	r3, r2
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	24003ee0 	.word	0x24003ee0
 8010a74:	24003ab0 	.word	0x24003ab0

08010a78 <ABCC_DrvSpiGetModCap>:

UINT16 ABCC_DrvSpiGetModCap( void )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_MODCAP_NOT_SUPPORTED_BY_DRV_IMPL,
 8010a7e:	4b07      	ldr	r3, [pc, #28]	@ (8010a9c <ABCC_DrvSpiGetModCap+0x24>)
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	f240 3333 	movw	r3, #819	@ 0x333
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	4b05      	ldr	r3, [pc, #20]	@ (8010aa0 <ABCC_DrvSpiGetModCap+0x28>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	2114      	movs	r1, #20
 8010a8e:	2002      	movs	r0, #2
 8010a90:	f7fc fdda 	bl	800d648 <ABCC_LogHandler>
      0,
      "Module capability not supported by SPI driver\n" );
   return( 0 );
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	08016af0 	.word	0x08016af0
 8010aa0:	0801692c 	.word	0x0801692c

08010aa4 <ABCC_DrvSpiGetLedStatus>:

UINT16 ABCC_DrvSpiGetLedStatus( void )
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	af00      	add	r7, sp, #0
   return( spi_drv_iLedStatus );
 8010aa8:	4b03      	ldr	r3, [pc, #12]	@ (8010ab8 <ABCC_DrvSpiGetLedStatus+0x14>)
 8010aaa:	881b      	ldrh	r3, [r3, #0]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	24003aa2 	.word	0x24003aa2

08010abc <ABCC_DrvSpiIsReadyForWrPd>:

BOOL ABCC_DrvSpiIsReadyForWrPd( void )
{
 8010abc:	b480      	push	{r7}
 8010abe:	af00      	add	r7, sp, #0
   if( spi_drv_eState == SM_SPI_RDY_TO_SEND_MOSI )
 8010ac0:	4b05      	ldr	r3, [pc, #20]	@ (8010ad8 <ABCC_DrvSpiIsReadyForWrPd+0x1c>)
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d101      	bne.n	8010acc <ABCC_DrvSpiIsReadyForWrPd+0x10>
   {
      return( TRUE );
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e000      	b.n	8010ace <ABCC_DrvSpiIsReadyForWrPd+0x12>
   }
   return( FALSE );
 8010acc:	2300      	movs	r3, #0
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr
 8010ad8:	24003ef0 	.word	0x24003ef0

08010adc <ABCC_DrvSpiIsSupervised>:

BOOL ABCC_DrvSpiIsSupervised( void )
{
 8010adc:	b480      	push	{r7}
 8010ade:	af00      	add	r7, sp, #0
   /*
   ** The Anybus supervision bis is stored in bit 3
   */
   return( ( spi_drv_bAnbStatus  >> 3 ) & 1 );
 8010ae0:	4b05      	ldr	r3, [pc, #20]	@ (8010af8 <ABCC_DrvSpiIsSupervised+0x1c>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	08db      	lsrs	r3, r3, #3
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	f003 0301 	and.w	r3, r3, #1
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	24003aa0 	.word	0x24003aa0

08010afc <ABCC_DrvSpiGetAnbStatus>:

UINT8 ABCC_DrvSpiGetAnbStatus( void )
{
 8010afc:	b480      	push	{r7}
 8010afe:	af00      	add	r7, sp, #0
   return( (UINT8)spi_drv_bAnbStatus & 0xf );
 8010b00:	4b04      	ldr	r3, [pc, #16]	@ (8010b14 <ABCC_DrvSpiGetAnbStatus+0x18>)
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	f003 030f 	and.w	r3, r3, #15
 8010b08:	b2db      	uxtb	r3, r3
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr
 8010b14:	24003aa0 	.word	0x24003aa0

08010b18 <ABCC_CbfHandleCommandMessage>:
static void GetAttributeHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry );
static void SetAttributeHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry );
static BOOL ObjectSpecificHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry );

void ABCC_CbfHandleCommandMessage( ABP_MsgType* psReceivedCommandMsg )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
   {
      return;
   }
#endif

   switch( ABCC_GetMsgDestObj( psReceivedCommandMsg ) )
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	795b      	ldrb	r3, [r3, #5]
 8010b24:	2bfe      	cmp	r3, #254	@ 0xfe
 8010b26:	d103      	bne.n	8010b30 <ABCC_CbfHandleCommandMessage+0x18>
   {
   case ABP_OBJ_NUM_APPD:
      AD_ProcObjectRequest( psReceivedCommandMsg );
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f002 fc49 	bl	80133c0 <AD_ProcObjectRequest>
      return;
 8010b2e:	e006      	b.n	8010b3e <ABCC_CbfHandleCommandMessage+0x26>
   default:
   {
      SetResponseMessage( psReceivedCommandMsg );
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 f807 	bl	8010b44 <SetResponseMessage>
      ABCC_SendRespMsg( psReceivedCommandMsg );
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7fb fde7 	bl	800c70a <ABCC_SendRespMsg>
      return;
 8010b3c:	bf00      	nop
   }
   }
}
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <SetResponseMessage>:

static void SetResponseMessage( ABP_MsgType* psReceivedCommandMsg )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b088      	sub	sp, #32
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
   const Command_Handler_Lookup_Type* psEntry;
   UINT8 bDestObj      = ABCC_GetMsgDestObj( psReceivedCommandMsg );
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	795b      	ldrb	r3, [r3, #5]
 8010b50:	76fb      	strb	r3, [r7, #27]
   UINT16 bInst        = ABCC_GetMsgInstance( psReceivedCommandMsg );
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	799a      	ldrb	r2, [r3, #6]
 8010b56:	79db      	ldrb	r3, [r3, #7]
 8010b58:	021b      	lsls	r3, r3, #8
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	833b      	strh	r3, [r7, #24]
   ABP_MsgCmdType bCmd = ABCC_GetMsgCmdBits( psReceivedCommandMsg );
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	7a1b      	ldrb	r3, [r3, #8]
 8010b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b66:	75fb      	strb	r3, [r7, #23]

   const UINT32 lTableLength = sizeof( command_handler_lookup_table ) / sizeof( Command_Handler_Lookup_Type );
 8010b68:	231c      	movs	r3, #28
 8010b6a:	613b      	str	r3, [r7, #16]

      for( size_t i = 0; i < lTableLength; i++ )
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	61fb      	str	r3, [r7, #28]
 8010b70:	e084      	b.n	8010c7c <SetResponseMessage+0x138>
      {
         psEntry = &command_handler_lookup_table[i];
 8010b72:	69fa      	ldr	r2, [r7, #28]
 8010b74:	4613      	mov	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	4413      	add	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	4a50      	ldr	r2, [pc, #320]	@ (8010cc0 <SetResponseMessage+0x17c>)
 8010b7e:	4413      	add	r3, r2
 8010b80:	60fb      	str	r3, [r7, #12]
         if( bDestObj == psEntry->bObject )
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	7efa      	ldrb	r2, [r7, #27]
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d174      	bne.n	8010c76 <SetResponseMessage+0x132>
         {
            for( ; i < lTableLength; i++ )
 8010b8c:	e056      	b.n	8010c3c <SetResponseMessage+0xf8>
            {
               psEntry = &command_handler_lookup_table[i];
 8010b8e:	69fa      	ldr	r2, [r7, #28]
 8010b90:	4613      	mov	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	4a49      	ldr	r2, [pc, #292]	@ (8010cc0 <SetResponseMessage+0x17c>)
 8010b9a:	4413      	add	r3, r2
 8010b9c:	60fb      	str	r3, [r7, #12]
               if( ( bDestObj == psEntry->bObject ) &&
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	7efa      	ldrb	r2, [r7, #27]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d146      	bne.n	8010c36 <SetResponseMessage+0xf2>
                   ( bInst    == psEntry->bInstance ) )
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	785b      	ldrb	r3, [r3, #1]
 8010bac:	461a      	mov	r2, r3
               if( ( bDestObj == psEntry->bObject ) &&
 8010bae:	8b3b      	ldrh	r3, [r7, #24]
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d140      	bne.n	8010c36 <SetResponseMessage+0xf2>
               {
                  for( ; i < lTableLength; i++ )
 8010bb4:	e022      	b.n	8010bfc <SetResponseMessage+0xb8>
                  {
                     psEntry = &command_handler_lookup_table[i];
 8010bb6:	69fa      	ldr	r2, [r7, #28]
 8010bb8:	4613      	mov	r3, r2
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	4413      	add	r3, r2
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8010cc0 <SetResponseMessage+0x17c>)
 8010bc2:	4413      	add	r3, r2
 8010bc4:	60fb      	str	r3, [r7, #12]
                     if( ( bDestObj == psEntry->bObject ) &&
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	7efa      	ldrb	r2, [r7, #27]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d112      	bne.n	8010bf6 <SetResponseMessage+0xb2>
                         ( bInst    == psEntry->bInstance ) &&
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	785b      	ldrb	r3, [r3, #1]
 8010bd4:	461a      	mov	r2, r3
                     if( ( bDestObj == psEntry->bObject ) &&
 8010bd6:	8b3b      	ldrh	r3, [r7, #24]
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d10c      	bne.n	8010bf6 <SetResponseMessage+0xb2>
                         ( bCmd     == psEntry->bCommand ) )
 8010bdc:	7dfb      	ldrb	r3, [r7, #23]
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	889b      	ldrh	r3, [r3, #4]
                         ( bInst    == psEntry->bInstance ) &&
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d106      	bne.n	8010bf6 <SetResponseMessage+0xb2>
                     {
                        /*
                        ** Entry found.
                        */
                        if( FindCommandHandler( psReceivedCommandMsg, psEntry ) )
 8010be8:	68f9      	ldr	r1, [r7, #12]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f86a 	bl	8010cc4 <FindCommandHandler>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d160      	bne.n	8010cb8 <SetResponseMessage+0x174>
                  for( ; i < lTableLength; i++ )
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	61fb      	str	r3, [r7, #28]
 8010bfc:	69fa      	ldr	r2, [r7, #28]
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d3d8      	bcc.n	8010bb6 <SetResponseMessage+0x72>
                     }
                  }
                  /*
                  ** No command handler entry was found due to unsupported command.
                  */
                  ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_CMD );
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	7a1b      	ldrb	r3, [r3, #8]
 8010c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	721a      	strb	r2, [r3, #8]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	7a1b      	ldrb	r3, [r3, #8]
 8010c16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c1a:	b2da      	uxtb	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	721a      	strb	r2, [r3, #8]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2200      	movs	r2, #0
 8010c24:	f042 0201 	orr.w	r2, r2, #1
 8010c28:	701a      	strb	r2, [r3, #0]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	705a      	strb	r2, [r3, #1]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	2205      	movs	r2, #5
 8010c32:	731a      	strb	r2, [r3, #12]
                  return;
 8010c34:	e041      	b.n	8010cba <SetResponseMessage+0x176>
            for( ; i < lTableLength; i++ )
 8010c36:	69fb      	ldr	r3, [r7, #28]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	61fb      	str	r3, [r7, #28]
 8010c3c:	69fa      	ldr	r2, [r7, #28]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d3a4      	bcc.n	8010b8e <SetResponseMessage+0x4a>
               }
            }
            /*
            ** No command handler entry was found due to unsupported instance.
            */
            ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_INST );
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	7a1b      	ldrb	r3, [r3, #8]
 8010c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	721a      	strb	r2, [r3, #8]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	7a1b      	ldrb	r3, [r3, #8]
 8010c56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	721a      	strb	r2, [r3, #8]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	f042 0201 	orr.w	r2, r2, #1
 8010c68:	701a      	strb	r2, [r3, #0]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	705a      	strb	r2, [r3, #1]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2204      	movs	r2, #4
 8010c72:	731a      	strb	r2, [r3, #12]
            return;
 8010c74:	e021      	b.n	8010cba <SetResponseMessage+0x176>
      for( size_t i = 0; i < lTableLength; i++ )
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	3301      	adds	r3, #1
 8010c7a:	61fb      	str	r3, [r7, #28]
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	f4ff af76 	bcc.w	8010b72 <SetResponseMessage+0x2e>
         }
      }
      /*
      ** No command handler entry was found due to unsupported object.
      */
      ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_OBJ );
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7a1b      	ldrb	r3, [r3, #8]
 8010c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	721a      	strb	r2, [r3, #8]
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7a1b      	ldrb	r3, [r3, #8]
 8010c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c9c:	b2da      	uxtb	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	721a      	strb	r2, [r3, #8]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f042 0201 	orr.w	r2, r2, #1
 8010caa:	701a      	strb	r2, [r3, #0]
 8010cac:	2200      	movs	r2, #0
 8010cae:	705a      	strb	r2, [r3, #1]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2203      	movs	r2, #3
 8010cb4:	731a      	strb	r2, [r3, #12]
      return;
 8010cb6:	e000      	b.n	8010cba <SetResponseMessage+0x176>
                           return;
 8010cb8:	bf00      	nop
}
 8010cba:	3720      	adds	r7, #32
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	08017a78 	.word	0x08017a78

08010cc4 <FindCommandHandler>:

static BOOL FindCommandHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry )
{
 8010cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc6:	b087      	sub	sp, #28
 8010cc8:	af02      	add	r7, sp, #8
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
   switch( psEntry->bCommand )
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	889b      	ldrh	r3, [r3, #4]
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	2b05      	cmp	r3, #5
 8010cd6:	f200 8091 	bhi.w	8010dfc <FindCommandHandler+0x138>
 8010cda:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce0 <FindCommandHandler+0x1c>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010cf9 	.word	0x08010cf9
 8010ce4:	08010d13 	.word	0x08010d13
 8010ce8:	08010dfd 	.word	0x08010dfd
 8010cec:	08010dfd 	.word	0x08010dfd
 8010cf0:	08010d2d 	.word	0x08010d2d
 8010cf4:	08010d55 	.word	0x08010d55
   {
   case ABP_CMD_GET_ATTR:
      if( ABCC_GetMsgCmdExt0( psReceivedCommandMsg ) == psEntry->uCmdExt.bAttr )
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	7a9a      	ldrb	r2, [r3, #10]
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	789b      	ldrb	r3, [r3, #2]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	f040 80a7 	bne.w	8010e54 <FindCommandHandler+0x190>
      {
         GetAttributeHandler( psReceivedCommandMsg, psEntry );
 8010d06:	6839      	ldr	r1, [r7, #0]
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f000 f8b1 	bl	8010e70 <GetAttributeHandler>
         return( TRUE );
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e0a6      	b.n	8010e60 <FindCommandHandler+0x19c>
      }
      break;
   case ABP_CMD_SET_ATTR:
      if( ABCC_GetMsgCmdExt0( psReceivedCommandMsg ) == psEntry->uCmdExt.bAttr )
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	7a9a      	ldrb	r2, [r3, #10]
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	789b      	ldrb	r3, [r3, #2]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	f040 809c 	bne.w	8010e58 <FindCommandHandler+0x194>
      {
         SetAttributeHandler( psReceivedCommandMsg, psEntry );
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fa66 	bl	80111f4 <SetAttributeHandler>
         return( TRUE );
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e099      	b.n	8010e60 <FindCommandHandler+0x19c>
      }
      break;
   case ABP_CMD_RESET:
      psEntry->uCbx.pnResetObj( ABCC_GetMsgCmdExt1( psReceivedCommandMsg ) );
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	7ad2      	ldrb	r2, [r2, #11]
 8010d34:	4610      	mov	r0, r2
 8010d36:	4798      	blx	r3
      ABP_SetMsgResponse( psReceivedCommandMsg, 0 );
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	7a1b      	ldrb	r3, [r3, #8]
 8010d3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	721a      	strb	r2, [r3, #8]
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	701a      	strb	r2, [r3, #0]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	705a      	strb	r2, [r3, #1]
      return( TRUE );
 8010d50:	2301      	movs	r3, #1
 8010d52:	e085      	b.n	8010e60 <FindCommandHandler+0x19c>
   case ABP_CMD_GET_ENUM_STR:
      if( ABCC_GetMsgCmdExt0( psReceivedCommandMsg ) == psEntry->uCmdExt.bAttr )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	7a9a      	ldrb	r2, [r3, #10]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	789b      	ldrb	r3, [r3, #2]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d17d      	bne.n	8010e5c <FindCommandHandler+0x198>
      {
         if( psEntry->uCbx.pnGetEnumStrAttr( ABCC_GetMsgCmdExt1( psReceivedCommandMsg ),
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	689c      	ldr	r4, [r3, #8]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	7add      	ldrb	r5, [r3, #11]
                                             (char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f103 060c 	add.w	r6, r3, #12
         if( psEntry->uCbx.pnGetEnumStrAttr( ABCC_GetMsgCmdExt1( psReceivedCommandMsg ),
 8010d6e:	f7fb f8f1 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010d72:	4603      	mov	r3, r0
 8010d74:	461a      	mov	r2, r3
 8010d76:	4631      	mov	r1, r6
 8010d78:	4628      	mov	r0, r5
 8010d7a:	47a0      	blx	r4
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d022      	beq.n	8010dc8 <FindCommandHandler+0x104>
                                             ABCC_GetMaxMessageSize() ) )
         {
            UINT16 iStrLength = (UINT16)strlen((char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ));
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	330c      	adds	r3, #12
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7ef faaa 	bl	80002e0 <strlen>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	81fb      	strh	r3, [r7, #14]
            if( iStrLength > ABCC_GetMaxMessageSize() )
 8010d90:	f7fb f8e0 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010d94:	4603      	mov	r3, r0
 8010d96:	461a      	mov	r2, r3
 8010d98:	89fb      	ldrh	r3, [r7, #14]
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d909      	bls.n	8010db2 <FindCommandHandler+0xee>
            {
               ABCC_LOG_FATAL( ABCC_EC_MSG_BUFFER_OVERRUN, iStrLength, "Message buffer size exceeded.\n" );
 8010d9e:	89fa      	ldrh	r2, [r7, #14]
 8010da0:	4b31      	ldr	r3, [pc, #196]	@ (8010e68 <FindCommandHandler+0x1a4>)
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	2392      	movs	r3, #146	@ 0x92
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	4b30      	ldr	r3, [pc, #192]	@ (8010e6c <FindCommandHandler+0x1a8>)
 8010daa:	2127      	movs	r1, #39	@ 0x27
 8010dac:	2000      	movs	r0, #0
 8010dae:	f7fc fc4b 	bl	800d648 <ABCC_LogHandler>
            }
            ABP_SetMsgResponse( psReceivedCommandMsg, iStrLength );
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	7a1b      	ldrb	r3, [r3, #8]
 8010db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010dba:	b2da      	uxtb	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	721a      	strb	r2, [r3, #8]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	89fa      	ldrh	r2, [r7, #14]
 8010dc4:	801a      	strh	r2, [r3, #0]
 8010dc6:	e017      	b.n	8010df8 <FindCommandHandler+0x134>
         }
         else
         {
            ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_INV_CMD_EXT_1 );
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	7a1b      	ldrb	r3, [r3, #8]
 8010dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	721a      	strb	r2, [r3, #8]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	7a1b      	ldrb	r3, [r3, #8]
 8010dda:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010dde:	b2da      	uxtb	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	721a      	strb	r2, [r3, #8]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f042 0201 	orr.w	r2, r2, #1
 8010dec:	701a      	strb	r2, [r3, #0]
 8010dee:	2200      	movs	r2, #0
 8010df0:	705a      	strb	r2, [r3, #1]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2207      	movs	r2, #7
 8010df6:	731a      	strb	r2, [r3, #12]
         }
         return( TRUE );
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e031      	b.n	8010e60 <FindCommandHandler+0x19c>
      }
      break;
   default:
      if( ABCC_OBJ_SPECIFIC_COMMAND( psEntry->bCommand ) )
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	889b      	ldrh	r3, [r3, #4]
 8010e00:	2b0f      	cmp	r3, #15
 8010e02:	d903      	bls.n	8010e0c <FindCommandHandler+0x148>
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	889b      	ldrh	r3, [r3, #4]
 8010e08:	2b30      	cmp	r3, #48	@ 0x30
 8010e0a:	d903      	bls.n	8010e14 <FindCommandHandler+0x150>
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	889b      	ldrh	r3, [r3, #4]
 8010e10:	2b3f      	cmp	r3, #63	@ 0x3f
 8010e12:	d105      	bne.n	8010e20 <FindCommandHandler+0x15c>
      {
         return( ObjectSpecificHandler( psReceivedCommandMsg, psEntry ) );
 8010e14:	6839      	ldr	r1, [r7, #0]
 8010e16:	6878      	ldr	r0, [r7, #4]
 8010e18:	f000 faea 	bl	80113f0 <ObjectSpecificHandler>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	e01f      	b.n	8010e60 <FindCommandHandler+0x19c>
      }
      /*
      ** The command code is unknown.
      */
      ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_CMD );
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	7a1b      	ldrb	r3, [r3, #8]
 8010e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e28:	b2da      	uxtb	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	721a      	strb	r2, [r3, #8]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	7a1b      	ldrb	r3, [r3, #8]
 8010e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	721a      	strb	r2, [r3, #8]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	f042 0201 	orr.w	r2, r2, #1
 8010e44:	701a      	strb	r2, [r3, #0]
 8010e46:	2200      	movs	r2, #0
 8010e48:	705a      	strb	r2, [r3, #1]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2205      	movs	r2, #5
 8010e4e:	731a      	strb	r2, [r3, #12]
      return( TRUE );
 8010e50:	2301      	movs	r3, #1
 8010e52:	e005      	b.n	8010e60 <FindCommandHandler+0x19c>
      break;
 8010e54:	bf00      	nop
 8010e56:	e002      	b.n	8010e5e <FindCommandHandler+0x19a>
      break;
 8010e58:	bf00      	nop
 8010e5a:	e000      	b.n	8010e5e <FindCommandHandler+0x19a>
      break;
 8010e5c:	bf00      	nop
   }
   return( FALSE );
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3714      	adds	r7, #20
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e68:	08016b7c 	.word	0x08016b7c
 8010e6c:	08016b60 	.word	0x08016b60

08010e70 <GetAttributeHandler>:

static void GetAttributeHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry )
{
 8010e70:	b5b0      	push	{r4, r5, r7, lr}
 8010e72:	b088      	sub	sp, #32
 8010e74:	af04      	add	r7, sp, #16
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
   switch( psEntry->eServiceTag )
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	799b      	ldrb	r3, [r3, #6]
 8010e7e:	2b08      	cmp	r3, #8
 8010e80:	f200 818c 	bhi.w	801119c <GetAttributeHandler+0x32c>
 8010e84:	a201      	add	r2, pc, #4	@ (adr r2, 8010e8c <GetAttributeHandler+0x1c>)
 8010e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8a:	bf00      	nop
 8010e8c:	08010eb1 	.word	0x08010eb1
 8010e90:	08010eb1 	.word	0x08010eb1
 8010e94:	08010eb1 	.word	0x08010eb1
 8010e98:	08010f21 	.word	0x08010f21
 8010e9c:	08010f21 	.word	0x08010f21
 8010ea0:	08010f91 	.word	0x08010f91
 8010ea4:	08010f91 	.word	0x08010f91
 8010ea8:	08011001 	.word	0x08011001
 8010eac:	080110a3 	.word	0x080110a3
   {
      case SERVICE_BOOL8:
      case SERVICE_INT8:
      case SERVICE_UINT8:
         ABCC_SetMsgData8( psReceivedCommandMsg,
 8010eb0:	f7fb f850 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d110      	bne.n	8010edc <GetAttributeHandler+0x6c>
 8010eba:	f7fb f84b 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	9303      	str	r3, [sp, #12]
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	9302      	str	r3, [sp, #8]
 8010ec6:	4ba8      	ldr	r3, [pc, #672]	@ (8011168 <GetAttributeHandler+0x2f8>)
 8010ec8:	9301      	str	r3, [sp, #4]
 8010eca:	23b2      	movs	r3, #178	@ 0xb2
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	4ba7      	ldr	r3, [pc, #668]	@ (801116c <GetAttributeHandler+0x2fc>)
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	2127      	movs	r1, #39	@ 0x27
 8010ed4:	2001      	movs	r0, #1
 8010ed6:	f7fc fbb7 	bl	800d648 <ABCC_LogHandler>
 8010eda:	e012      	b.n	8010f02 <GetAttributeHandler+0x92>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f103 040c 	add.w	r4, r3, #12
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	689b      	ldr	r3, [r3, #8]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d004      	beq.n	8010ef4 <GetAttributeHandler+0x84>
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	4798      	blx	r3
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	e001      	b.n	8010ef8 <GetAttributeHandler+0x88>
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	7b1b      	ldrb	r3, [r3, #12]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	4619      	mov	r1, r3
 8010efc:	4620      	mov	r0, r4
 8010efe:	f7fb ffcb 	bl	800ce98 <ABCC_SetData8>
                           psEntry->uCbx.pnGetUint8Attr ?
                           psEntry->uCbx.pnGetUint8Attr() :
                           psEntry->uData.bUnsigned8,
                           0 );
         ABP_SetMsgResponse( psReceivedCommandMsg, ABP_UINT8_SIZEOF );
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	7a1b      	ldrb	r3, [r3, #8]
 8010f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	721a      	strb	r2, [r3, #8]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2200      	movs	r2, #0
 8010f14:	f042 0201 	orr.w	r2, r2, #1
 8010f18:	701a      	strb	r2, [r3, #0]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	705a      	strb	r2, [r3, #1]
         return;
 8010f1e:	e162      	b.n	80111e6 <GetAttributeHandler+0x376>
      case SERVICE_INT16:
      case SERVICE_UINT16:
         ABCC_SetMsgData16( psReceivedCommandMsg,
 8010f20:	f7fb f818 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d810      	bhi.n	8010f4c <GetAttributeHandler+0xdc>
 8010f2a:	f7fb f813 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	9303      	str	r3, [sp, #12]
 8010f32:	2302      	movs	r3, #2
 8010f34:	9302      	str	r3, [sp, #8]
 8010f36:	4b8c      	ldr	r3, [pc, #560]	@ (8011168 <GetAttributeHandler+0x2f8>)
 8010f38:	9301      	str	r3, [sp, #4]
 8010f3a:	23bb      	movs	r3, #187	@ 0xbb
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	4b8b      	ldr	r3, [pc, #556]	@ (801116c <GetAttributeHandler+0x2fc>)
 8010f40:	2202      	movs	r2, #2
 8010f42:	2127      	movs	r1, #39	@ 0x27
 8010f44:	2001      	movs	r0, #1
 8010f46:	f7fc fb7f 	bl	800d648 <ABCC_LogHandler>
 8010f4a:	e012      	b.n	8010f72 <GetAttributeHandler+0x102>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f103 040c 	add.w	r4, r3, #12
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	689b      	ldr	r3, [r3, #8]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d004      	beq.n	8010f64 <GetAttributeHandler+0xf4>
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	4798      	blx	r3
 8010f60:	4603      	mov	r3, r0
 8010f62:	e001      	b.n	8010f68 <GetAttributeHandler+0xf8>
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	899b      	ldrh	r3, [r3, #12]
 8010f68:	2200      	movs	r2, #0
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f7fb ffbe 	bl	800ceee <ABCC_SetData16>
                            psEntry->uCbx.pnGetUint16Attr ?
                            psEntry->uCbx.pnGetUint16Attr() :
                            psEntry->uData.iUnsigned16,
                            0 );
         ABP_SetMsgResponse( psReceivedCommandMsg, ABP_UINT16_SIZEOF );
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	7a1b      	ldrb	r3, [r3, #8]
 8010f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f7a:	b2da      	uxtb	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	721a      	strb	r2, [r3, #8]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2200      	movs	r2, #0
 8010f84:	f042 0202 	orr.w	r2, r2, #2
 8010f88:	701a      	strb	r2, [r3, #0]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	705a      	strb	r2, [r3, #1]
         return;
 8010f8e:	e12a      	b.n	80111e6 <GetAttributeHandler+0x376>
      case SERVICE_INT32:
      case SERVICE_UINT32:
         ABCC_SetMsgData32( psReceivedCommandMsg,
 8010f90:	f7fa ffe0 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b03      	cmp	r3, #3
 8010f98:	d810      	bhi.n	8010fbc <GetAttributeHandler+0x14c>
 8010f9a:	f7fa ffdb 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	2304      	movs	r3, #4
 8010fa4:	9302      	str	r3, [sp, #8]
 8010fa6:	4b70      	ldr	r3, [pc, #448]	@ (8011168 <GetAttributeHandler+0x2f8>)
 8010fa8:	9301      	str	r3, [sp, #4]
 8010faa:	23c4      	movs	r3, #196	@ 0xc4
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	4b6f      	ldr	r3, [pc, #444]	@ (801116c <GetAttributeHandler+0x2fc>)
 8010fb0:	2204      	movs	r2, #4
 8010fb2:	2127      	movs	r1, #39	@ 0x27
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	f7fc fb47 	bl	800d648 <ABCC_LogHandler>
 8010fba:	e012      	b.n	8010fe2 <GetAttributeHandler+0x172>
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f103 040c 	add.w	r4, r3, #12
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d004      	beq.n	8010fd4 <GetAttributeHandler+0x164>
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	4798      	blx	r3
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	e001      	b.n	8010fd8 <GetAttributeHandler+0x168>
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4619      	mov	r1, r3
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7fb ffb3 	bl	800cf48 <ABCC_SetData32>
                            psEntry->uCbx.pnGetUint32Attr ?
                            psEntry->uCbx.pnGetUint32Attr() :
                            psEntry->uData.lUnsigned32,
                            0 );
         ABP_SetMsgResponse( psReceivedCommandMsg, ABP_UINT32_SIZEOF );
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	7a1b      	ldrb	r3, [r3, #8]
 8010fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	721a      	strb	r2, [r3, #8]
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f042 0204 	orr.w	r2, r2, #4
 8010ff8:	701a      	strb	r2, [r3, #0]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	705a      	strb	r2, [r3, #1]
         return;
 8010ffe:	e0f2      	b.n	80111e6 <GetAttributeHandler+0x376>
      case SERVICE_STR:
      {
         UINT16 iStrLength;
         if( psEntry->uCbx.pnGetStrAttr )
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d018      	beq.n	801103a <GetAttributeHandler+0x1ca>
         {
            iStrLength = psEntry->uCbx.pnGetStrAttr( (char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	689c      	ldr	r4, [r3, #8]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f103 050c 	add.w	r5, r3, #12
                                                     ABCC_MATH_MIN( ABCC_GetMaxMessageSize(),
 8011012:	f7fa ff9f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011016:	4603      	mov	r3, r0
 8011018:	461a      	mov	r2, r3
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	8a1b      	ldrh	r3, [r3, #16]
            iStrLength = psEntry->uCbx.pnGetStrAttr( (char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 801101e:	429a      	cmp	r2, r3
 8011020:	d203      	bcs.n	801102a <GetAttributeHandler+0x1ba>
                                                     ABCC_MATH_MIN( ABCC_GetMaxMessageSize(),
 8011022:	f7fa ff97 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011026:	4603      	mov	r3, r0
 8011028:	e001      	b.n	801102e <GetAttributeHandler+0x1be>
            iStrLength = psEntry->uCbx.pnGetStrAttr( (char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	8a1b      	ldrh	r3, [r3, #16]
 801102e:	4619      	mov	r1, r3
 8011030:	4628      	mov	r0, r5
 8011032:	47a0      	blx	r4
 8011034:	4603      	mov	r3, r0
 8011036:	81fb      	strh	r3, [r7, #14]
 8011038:	e028      	b.n	801108c <GetAttributeHandler+0x21c>
                                                     psEntry->uAttrLength.iMaxDataSize ) );
         }
         else
         {
            const char* pStr = psEntry->uData.pacString;
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	60bb      	str	r3, [r7, #8]
            iStrLength = ( UINT16 )strlen( pStr );
 8011040:	68b8      	ldr	r0, [r7, #8]
 8011042:	f7ef f94d 	bl	80002e0 <strlen>
 8011046:	4603      	mov	r3, r0
 8011048:	81fb      	strh	r3, [r7, #14]
            ABCC_SetMsgString( psReceivedCommandMsg,
 801104a:	f7fa ff83 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801104e:	4603      	mov	r3, r0
 8011050:	461a      	mov	r2, r3
 8011052:	89fb      	ldrh	r3, [r7, #14]
 8011054:	4293      	cmp	r3, r2
 8011056:	d911      	bls.n	801107c <GetAttributeHandler+0x20c>
 8011058:	89fd      	ldrh	r5, [r7, #14]
 801105a:	89fc      	ldrh	r4, [r7, #14]
 801105c:	f7fa ff7a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011060:	4603      	mov	r3, r0
 8011062:	9303      	str	r3, [sp, #12]
 8011064:	9402      	str	r4, [sp, #8]
 8011066:	4b40      	ldr	r3, [pc, #256]	@ (8011168 <GetAttributeHandler+0x2f8>)
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	23d8      	movs	r3, #216	@ 0xd8
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	4b3f      	ldr	r3, [pc, #252]	@ (801116c <GetAttributeHandler+0x2fc>)
 8011070:	462a      	mov	r2, r5
 8011072:	2127      	movs	r1, #39	@ 0x27
 8011074:	2001      	movs	r0, #1
 8011076:	f7fc fae7 	bl	800d648 <ABCC_LogHandler>
 801107a:	e007      	b.n	801108c <GetAttributeHandler+0x21c>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f103 000c 	add.w	r0, r3, #12
 8011082:	89fa      	ldrh	r2, [r7, #14]
 8011084:	2300      	movs	r3, #0
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	f7fb fedc 	bl	800ce44 <ABCC_SetString>
                               pStr,
                               iStrLength,
                               0 );
         }
         ABP_SetMsgResponse( psReceivedCommandMsg, iStrLength );
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	7a1b      	ldrb	r3, [r3, #8]
 8011090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011094:	b2da      	uxtb	r2, r3
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	721a      	strb	r2, [r3, #8]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	89fa      	ldrh	r2, [r7, #14]
 801109e:	801a      	strh	r2, [r3, #0]
         return;
 80110a0:	e0a1      	b.n	80111e6 <GetAttributeHandler+0x376>
      }
      case SERVICE_BUFFER:
         if( psEntry->uCbx.pnGetArrAttr )
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d040      	beq.n	801112c <GetAttributeHandler+0x2bc>
         {
            UINT16 iSizeBytes = psEntry->uCbx.pnGetArrAttr( ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	689c      	ldr	r4, [r3, #8]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f103 050c 	add.w	r5, r3, #12
                                                            psEntry->uAttrLength.iMaxDataSize ?
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	8a1b      	ldrh	r3, [r3, #16]
            UINT16 iSizeBytes = psEntry->uCbx.pnGetArrAttr( ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d002      	beq.n	80110c2 <GetAttributeHandler+0x252>
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	8a1b      	ldrh	r3, [r3, #16]
 80110c0:	e002      	b.n	80110c8 <GetAttributeHandler+0x258>
                                                            psEntry->uAttrLength.iMaxDataSize :
                                                            ABCC_GetMaxMessageSize() );
 80110c2:	f7fa ff47 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80110c6:	4603      	mov	r3, r0
            UINT16 iSizeBytes = psEntry->uCbx.pnGetArrAttr( ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 80110c8:	4619      	mov	r1, r3
 80110ca:	4628      	mov	r0, r5
 80110cc:	47a0      	blx	r4
 80110ce:	4603      	mov	r3, r0
 80110d0:	81bb      	strh	r3, [r7, #12]
            ABCC_SetMsgString( psReceivedCommandMsg,
 80110d2:	f7fa ff3f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80110d6:	4603      	mov	r3, r0
 80110d8:	461a      	mov	r2, r3
 80110da:	89bb      	ldrh	r3, [r7, #12]
 80110dc:	4293      	cmp	r3, r2
 80110de:	d911      	bls.n	8011104 <GetAttributeHandler+0x294>
 80110e0:	89bd      	ldrh	r5, [r7, #12]
 80110e2:	89bc      	ldrh	r4, [r7, #12]
 80110e4:	f7fa ff36 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80110e8:	4603      	mov	r3, r0
 80110ea:	9303      	str	r3, [sp, #12]
 80110ec:	9402      	str	r4, [sp, #8]
 80110ee:	4b1e      	ldr	r3, [pc, #120]	@ (8011168 <GetAttributeHandler+0x2f8>)
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	23e7      	movs	r3, #231	@ 0xe7
 80110f4:	9300      	str	r3, [sp, #0]
 80110f6:	4b1d      	ldr	r3, [pc, #116]	@ (801116c <GetAttributeHandler+0x2fc>)
 80110f8:	462a      	mov	r2, r5
 80110fa:	2127      	movs	r1, #39	@ 0x27
 80110fc:	2001      	movs	r0, #1
 80110fe:	f7fc faa3 	bl	800d648 <ABCC_LogHandler>
 8011102:	e008      	b.n	8011116 <GetAttributeHandler+0x2a6>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f103 000c 	add.w	r0, r3, #12
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	68d9      	ldr	r1, [r3, #12]
 801110e:	89ba      	ldrh	r2, [r7, #12]
 8011110:	2300      	movs	r3, #0
 8011112:	f7fb fe97 	bl	800ce44 <ABCC_SetString>
                               psEntry->uData.pacStringBuffer,
                               iSizeBytes,
                               0 );
            ABP_SetMsgResponse( psReceivedCommandMsg, iSizeBytes );
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7a1b      	ldrb	r3, [r3, #8]
 801111a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801111e:	b2da      	uxtb	r2, r3
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	721a      	strb	r2, [r3, #8]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	89ba      	ldrh	r2, [r7, #12]
 8011128:	801a      	strh	r2, [r3, #0]
                               psEntry->uData.pacStringBuffer,
                               psEntry->uAttrLength.iDataSize,
                               0 );
            ABP_SetMsgResponse( psReceivedCommandMsg, psEntry->uAttrLength.iDataSize );
         }
         return;
 801112a:	e05c      	b.n	80111e6 <GetAttributeHandler+0x376>
            ABCC_SetMsgString( psReceivedCommandMsg,
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	8a1c      	ldrh	r4, [r3, #16]
 8011130:	f7fa ff10 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011134:	4603      	mov	r3, r0
 8011136:	429c      	cmp	r4, r3
 8011138:	d91a      	bls.n	8011170 <GetAttributeHandler+0x300>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	8a1b      	ldrh	r3, [r3, #16]
 801113e:	461d      	mov	r5, r3
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	8a1b      	ldrh	r3, [r3, #16]
 8011144:	461c      	mov	r4, r3
 8011146:	f7fa ff05 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801114a:	4603      	mov	r3, r0
 801114c:	9303      	str	r3, [sp, #12]
 801114e:	9402      	str	r4, [sp, #8]
 8011150:	4b05      	ldr	r3, [pc, #20]	@ (8011168 <GetAttributeHandler+0x2f8>)
 8011152:	9301      	str	r3, [sp, #4]
 8011154:	23ef      	movs	r3, #239	@ 0xef
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	4b04      	ldr	r3, [pc, #16]	@ (801116c <GetAttributeHandler+0x2fc>)
 801115a:	462a      	mov	r2, r5
 801115c:	2127      	movs	r1, #39	@ 0x27
 801115e:	2001      	movs	r0, #1
 8011160:	f7fc fa72 	bl	800d648 <ABCC_LogHandler>
 8011164:	e00e      	b.n	8011184 <GetAttributeHandler+0x314>
 8011166:	bf00      	nop
 8011168:	08016b9c 	.word	0x08016b9c
 801116c:	08016b60 	.word	0x08016b60
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f103 000c 	add.w	r0, r3, #12
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	68d9      	ldr	r1, [r3, #12]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	8a1a      	ldrh	r2, [r3, #16]
 801117e:	2300      	movs	r3, #0
 8011180:	f7fb fe60 	bl	800ce44 <ABCC_SetString>
            ABP_SetMsgResponse( psReceivedCommandMsg, psEntry->uAttrLength.iDataSize );
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	7a1b      	ldrb	r3, [r3, #8]
 8011188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801118c:	b2da      	uxtb	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	721a      	strb	r2, [r3, #8]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	8a1a      	ldrh	r2, [r3, #16]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	801a      	strh	r2, [r3, #0]
         return;
 801119a:	e024      	b.n	80111e6 <GetAttributeHandler+0x376>
      default:
         ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_GENERAL_ERROR );
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	7a1b      	ldrb	r3, [r3, #8]
 80111a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111a4:	b2da      	uxtb	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	721a      	strb	r2, [r3, #8]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	7a1b      	ldrb	r3, [r3, #8]
 80111ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80111b2:	b2da      	uxtb	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	721a      	strb	r2, [r3, #8]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2200      	movs	r2, #0
 80111bc:	f042 0201 	orr.w	r2, r2, #1
 80111c0:	701a      	strb	r2, [r3, #0]
 80111c2:	2200      	movs	r2, #0
 80111c4:	705a      	strb	r2, [r3, #1]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2215      	movs	r2, #21
 80111ca:	731a      	strb	r2, [r3, #12]
         ABCC_LOG_ERROR( ABCC_EC_UNSUPPORTED_DATA_TYPE, (UINT32)psEntry->eServiceTag, "Response to Get_Attribute command not possible (unsupported datatype).\n" );
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	799b      	ldrb	r3, [r3, #6]
 80111d0:	461a      	mov	r2, r3
 80111d2:	4b06      	ldr	r3, [pc, #24]	@ (80111ec <GetAttributeHandler+0x37c>)
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	23f8      	movs	r3, #248	@ 0xf8
 80111d8:	9300      	str	r3, [sp, #0]
 80111da:	4b05      	ldr	r3, [pc, #20]	@ (80111f0 <GetAttributeHandler+0x380>)
 80111dc:	2124      	movs	r1, #36	@ 0x24
 80111de:	2001      	movs	r0, #1
 80111e0:	f7fc fa32 	bl	800d648 <ABCC_LogHandler>
         break;
 80111e4:	bf00      	nop
   }
}
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bdb0      	pop	{r4, r5, r7, pc}
 80111ec:	08016bc8 	.word	0x08016bc8
 80111f0:	08016b60 	.word	0x08016b60

080111f4 <SetAttributeHandler>:

static void SetAttributeHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry )
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b088      	sub	sp, #32
 80111f8:	af04      	add	r7, sp, #16
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
   switch( psEntry->eServiceTag )
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	799b      	ldrb	r3, [r3, #6]
 8011202:	2b08      	cmp	r3, #8
 8011204:	f200 80c5 	bhi.w	8011392 <SetAttributeHandler+0x19e>
 8011208:	a201      	add	r2, pc, #4	@ (adr r2, 8011210 <SetAttributeHandler+0x1c>)
 801120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801120e:	bf00      	nop
 8011210:	08011235 	.word	0x08011235
 8011214:	08011235 	.word	0x08011235
 8011218:	08011235 	.word	0x08011235
 801121c:	0801129b 	.word	0x0801129b
 8011220:	0801129b 	.word	0x0801129b
 8011224:	08011301 	.word	0x08011301
 8011228:	08011301 	.word	0x08011301
 801122c:	08011367 	.word	0x08011367
 8011230:	0801137d 	.word	0x0801137d
   {
   case SERVICE_BOOL8:
   case SERVICE_INT8:
   case SERVICE_UINT8:
   {
      UINT8 bValue = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	73fb      	strb	r3, [r7, #15]
      ABCC_GetMsgData8( psReceivedCommandMsg, &bValue, 0 );
 8011238:	f7fa fe8c 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d111      	bne.n	8011266 <SetAttributeHandler+0x72>
 8011242:	f7fa fe87 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011246:	4603      	mov	r3, r0
 8011248:	9303      	str	r3, [sp, #12]
 801124a:	2301      	movs	r3, #1
 801124c:	9302      	str	r3, [sp, #8]
 801124e:	4b65      	ldr	r3, [pc, #404]	@ (80113e4 <SetAttributeHandler+0x1f0>)
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	4b63      	ldr	r3, [pc, #396]	@ (80113e8 <SetAttributeHandler+0x1f4>)
 801125a:	2201      	movs	r2, #1
 801125c:	2127      	movs	r1, #39	@ 0x27
 801125e:	2001      	movs	r0, #1
 8011260:	f7fc f9f2 	bl	800d648 <ABCC_LogHandler>
 8011264:	e007      	b.n	8011276 <SetAttributeHandler+0x82>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	330c      	adds	r3, #12
 801126a:	f107 010f 	add.w	r1, r7, #15
 801126e:	2200      	movs	r2, #0
 8011270:	4618      	mov	r0, r3
 8011272:	f7fb fdfe 	bl	800ce72 <ABCC_GetData8>
      psEntry->uCbx.pnSetUint8Attr( bValue );
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	689b      	ldr	r3, [r3, #8]
 801127a:	7bfa      	ldrb	r2, [r7, #15]
 801127c:	4610      	mov	r0, r2
 801127e:	4798      	blx	r3
      ABP_SetMsgResponse( psReceivedCommandMsg, 0 );
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	7a1b      	ldrb	r3, [r3, #8]
 8011284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011288:	b2da      	uxtb	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	721a      	strb	r2, [r3, #8]
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2200      	movs	r2, #0
 8011292:	701a      	strb	r2, [r3, #0]
 8011294:	2200      	movs	r2, #0
 8011296:	705a      	strb	r2, [r3, #1]
      return;
 8011298:	e0a1      	b.n	80113de <SetAttributeHandler+0x1ea>
   }
   case SERVICE_INT16:
   case SERVICE_UINT16:
   {
      UINT16 iValue = 0;
 801129a:	2300      	movs	r3, #0
 801129c:	81bb      	strh	r3, [r7, #12]
      ABCC_GetMsgData16( psReceivedCommandMsg, &iValue, 0 );
 801129e:	f7fa fe59 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d811      	bhi.n	80112cc <SetAttributeHandler+0xd8>
 80112a8:	f7fa fe54 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80112ac:	4603      	mov	r3, r0
 80112ae:	9303      	str	r3, [sp, #12]
 80112b0:	2302      	movs	r3, #2
 80112b2:	9302      	str	r3, [sp, #8]
 80112b4:	4b4b      	ldr	r3, [pc, #300]	@ (80113e4 <SetAttributeHandler+0x1f0>)
 80112b6:	9301      	str	r3, [sp, #4]
 80112b8:	f240 130f 	movw	r3, #271	@ 0x10f
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	4b4a      	ldr	r3, [pc, #296]	@ (80113e8 <SetAttributeHandler+0x1f4>)
 80112c0:	2202      	movs	r2, #2
 80112c2:	2127      	movs	r1, #39	@ 0x27
 80112c4:	2001      	movs	r0, #1
 80112c6:	f7fc f9bf 	bl	800d648 <ABCC_LogHandler>
 80112ca:	e007      	b.n	80112dc <SetAttributeHandler+0xe8>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	330c      	adds	r3, #12
 80112d0:	f107 010c 	add.w	r1, r7, #12
 80112d4:	2200      	movs	r2, #0
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fb fdf1 	bl	800cebe <ABCC_GetData16>
      psEntry->uCbx.pnSetUint16Attr( iValue );
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	89ba      	ldrh	r2, [r7, #12]
 80112e2:	4610      	mov	r0, r2
 80112e4:	4798      	blx	r3
      ABP_SetMsgResponse( psReceivedCommandMsg, 0 );
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7a1b      	ldrb	r3, [r3, #8]
 80112ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80112ee:	b2da      	uxtb	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	721a      	strb	r2, [r3, #8]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	701a      	strb	r2, [r3, #0]
 80112fa:	2200      	movs	r2, #0
 80112fc:	705a      	strb	r2, [r3, #1]
      return;
 80112fe:	e06e      	b.n	80113de <SetAttributeHandler+0x1ea>
   }
   case SERVICE_INT32:
   case SERVICE_UINT32:
   {
      UINT32 lValue = 0;
 8011300:	2300      	movs	r3, #0
 8011302:	60bb      	str	r3, [r7, #8]
      ABCC_GetMsgData32( psReceivedCommandMsg, &lValue, 0 );
 8011304:	f7fa fe26 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011308:	4603      	mov	r3, r0
 801130a:	2b03      	cmp	r3, #3
 801130c:	d811      	bhi.n	8011332 <SetAttributeHandler+0x13e>
 801130e:	f7fa fe21 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011312:	4603      	mov	r3, r0
 8011314:	9303      	str	r3, [sp, #12]
 8011316:	2304      	movs	r3, #4
 8011318:	9302      	str	r3, [sp, #8]
 801131a:	4b32      	ldr	r3, [pc, #200]	@ (80113e4 <SetAttributeHandler+0x1f0>)
 801131c:	9301      	str	r3, [sp, #4]
 801131e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8011322:	9300      	str	r3, [sp, #0]
 8011324:	4b30      	ldr	r3, [pc, #192]	@ (80113e8 <SetAttributeHandler+0x1f4>)
 8011326:	2204      	movs	r2, #4
 8011328:	2127      	movs	r1, #39	@ 0x27
 801132a:	2001      	movs	r0, #1
 801132c:	f7fc f98c 	bl	800d648 <ABCC_LogHandler>
 8011330:	e007      	b.n	8011342 <SetAttributeHandler+0x14e>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	330c      	adds	r3, #12
 8011336:	f107 0108 	add.w	r1, r7, #8
 801133a:	2200      	movs	r2, #0
 801133c:	4618      	mov	r0, r3
 801133e:	f7fb fdeb 	bl	800cf18 <ABCC_GetData32>
      psEntry->uCbx.pnSetUint32Attr( lValue );
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	68ba      	ldr	r2, [r7, #8]
 8011348:	4610      	mov	r0, r2
 801134a:	4798      	blx	r3
      ABP_SetMsgResponse( psReceivedCommandMsg, 0 );
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	7a1b      	ldrb	r3, [r3, #8]
 8011350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011354:	b2da      	uxtb	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	721a      	strb	r2, [r3, #8]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2200      	movs	r2, #0
 801135e:	701a      	strb	r2, [r3, #0]
 8011360:	2200      	movs	r2, #0
 8011362:	705a      	strb	r2, [r3, #1]
      return;
 8011364:	e03b      	b.n	80113de <SetAttributeHandler+0x1ea>
   }
   case SERVICE_STR:
      psEntry->uCbx.pnSetStrAttr(
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	689b      	ldr	r3, [r3, #8]
         (char*)ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	f102 000c 	add.w	r0, r2, #12
         ABCC_GetMsgDataSize( psReceivedCommandMsg ) );
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	8812      	ldrh	r2, [r2, #0]
 8011374:	b292      	uxth	r2, r2
      psEntry->uCbx.pnSetStrAttr(
 8011376:	4611      	mov	r1, r2
 8011378:	4798      	blx	r3
      return;
 801137a:	e030      	b.n	80113de <SetAttributeHandler+0x1ea>
   case SERVICE_BUFFER:
      psEntry->uCbx.pnSetArrAttr(
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	689b      	ldr	r3, [r3, #8]
         ABCC_GetMsgDataPtr( psReceivedCommandMsg ),
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	f102 000c 	add.w	r0, r2, #12
         ABCC_GetMsgDataSize( psReceivedCommandMsg ) );
 8011386:	687a      	ldr	r2, [r7, #4]
 8011388:	8812      	ldrh	r2, [r2, #0]
 801138a:	b292      	uxth	r2, r2
      psEntry->uCbx.pnSetArrAttr(
 801138c:	4611      	mov	r1, r2
 801138e:	4798      	blx	r3
      return;
 8011390:	e025      	b.n	80113de <SetAttributeHandler+0x1ea>
   default:
     ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_GENERAL_ERROR );
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7a1b      	ldrb	r3, [r3, #8]
 8011396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801139a:	b2da      	uxtb	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	721a      	strb	r2, [r3, #8]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	7a1b      	ldrb	r3, [r3, #8]
 80113a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	721a      	strb	r2, [r3, #8]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	f042 0201 	orr.w	r2, r2, #1
 80113b6:	701a      	strb	r2, [r3, #0]
 80113b8:	2200      	movs	r2, #0
 80113ba:	705a      	strb	r2, [r3, #1]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2215      	movs	r2, #21
 80113c0:	731a      	strb	r2, [r3, #12]
     ABCC_LOG_ERROR( ABCC_EC_UNSUPPORTED_DATA_TYPE, (UINT32)psEntry->eServiceTag, "Unsupported Set_Attribute datatype.\n" );
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	799b      	ldrb	r3, [r3, #6]
 80113c6:	461a      	mov	r2, r3
 80113c8:	4b08      	ldr	r3, [pc, #32]	@ (80113ec <SetAttributeHandler+0x1f8>)
 80113ca:	9301      	str	r3, [sp, #4]
 80113cc:	f240 1329 	movw	r3, #297	@ 0x129
 80113d0:	9300      	str	r3, [sp, #0]
 80113d2:	4b05      	ldr	r3, [pc, #20]	@ (80113e8 <SetAttributeHandler+0x1f4>)
 80113d4:	2124      	movs	r1, #36	@ 0x24
 80113d6:	2001      	movs	r0, #1
 80113d8:	f7fc f936 	bl	800d648 <ABCC_LogHandler>
     break;
 80113dc:	bf00      	nop
   }
}
 80113de:	3710      	adds	r7, #16
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	08016b9c 	.word	0x08016b9c
 80113e8:	08016b60 	.word	0x08016b60
 80113ec:	08016c10 	.word	0x08016c10

080113f0 <ObjectSpecificHandler>:

static BOOL ObjectSpecificHandler( ABP_MsgType* psReceivedCommandMsg, const Command_Handler_Lookup_Type* psEntry )
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	6039      	str	r1, [r7, #0]
   switch( psEntry->bObject )
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2bff      	cmp	r3, #255	@ 0xff
 8011400:	d006      	beq.n	8011410 <ObjectSpecificHandler+0x20>
 8011402:	2bff      	cmp	r3, #255	@ 0xff
 8011404:	dc52      	bgt.n	80114ac <ObjectSpecificHandler+0xbc>
 8011406:	2bf8      	cmp	r3, #248	@ 0xf8
 8011408:	d06a      	beq.n	80114e0 <ObjectSpecificHandler+0xf0>
 801140a:	2bfa      	cmp	r3, #250	@ 0xfa
 801140c:	d06a      	beq.n	80114e4 <ObjectSpecificHandler+0xf4>
 801140e:	e04d      	b.n	80114ac <ObjectSpecificHandler+0xbc>
   case ABP_OBJ_NUM_BAC:
   break;
#endif
#if APP_OBJ_ENABLE
   case ABP_OBJ_NUM_APP:
      switch( psEntry->bCommand )
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	889b      	ldrh	r3, [r3, #4]
 8011414:	2b10      	cmp	r3, #16
 8011416:	d12f      	bne.n	8011478 <ObjectSpecificHandler+0x88>
      {
      case ABP_APP_CMD_RESET_REQUEST:
         if( psEntry->uCbx.pnResetReqObj( ABCC_GetMsgCmdExt1( psReceivedCommandMsg ) ) )
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	689b      	ldr	r3, [r3, #8]
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	7ad2      	ldrb	r2, [r2, #11]
 8011420:	4610      	mov	r0, r2
 8011422:	4798      	blx	r3
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00c      	beq.n	8011444 <ObjectSpecificHandler+0x54>
         {
            ABP_SetMsgResponse( psReceivedCommandMsg, 0 );
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	7a1b      	ldrb	r3, [r3, #8]
 801142e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011432:	b2da      	uxtb	r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	721a      	strb	r2, [r3, #8]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2200      	movs	r2, #0
 801143c:	701a      	strb	r2, [r3, #0]
 801143e:	2200      	movs	r2, #0
 8011440:	705a      	strb	r2, [r3, #1]
 8011442:	e017      	b.n	8011474 <ObjectSpecificHandler+0x84>
         }
         else
         {
            ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_OBJ_SPECIFIC );
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7a1b      	ldrb	r3, [r3, #8]
 8011448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801144c:	b2da      	uxtb	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	721a      	strb	r2, [r3, #8]
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	7a1b      	ldrb	r3, [r3, #8]
 8011456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801145a:	b2da      	uxtb	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	721a      	strb	r2, [r3, #8]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f042 0201 	orr.w	r2, r2, #1
 8011468:	701a      	strb	r2, [r3, #0]
 801146a:	2200      	movs	r2, #0
 801146c:	705a      	strb	r2, [r3, #1]
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	22ff      	movs	r2, #255	@ 0xff
 8011472:	731a      	strb	r2, [r3, #12]
         }
         return( TRUE );
 8011474:	2301      	movs	r3, #1
 8011476:	e037      	b.n	80114e8 <ObjectSpecificHandler+0xf8>
      default:
         /*
         ** The entry states support for an object specific command not found
         ** in this handler.
         */
         ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_CMD );
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	7a1b      	ldrb	r3, [r3, #8]
 801147c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011480:	b2da      	uxtb	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	721a      	strb	r2, [r3, #8]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	7a1b      	ldrb	r3, [r3, #8]
 801148a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801148e:	b2da      	uxtb	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	721a      	strb	r2, [r3, #8]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	f042 0201 	orr.w	r2, r2, #1
 801149c:	701a      	strb	r2, [r3, #0]
 801149e:	2200      	movs	r2, #0
 80114a0:	705a      	strb	r2, [r3, #1]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2205      	movs	r2, #5
 80114a6:	731a      	strb	r2, [r3, #12]
         return( TRUE );
 80114a8:	2301      	movs	r3, #1
 80114aa:	e01d      	b.n	80114e8 <ObjectSpecificHandler+0xf8>
   default:
      /*
      ** The entry states support for an object specific command to an object
      ** not found in this handler.
      */
      ABP_SetMsgErrorResponse( psReceivedCommandMsg, 1, ABP_ERR_UNSUP_CMD );
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	7a1b      	ldrb	r3, [r3, #8]
 80114b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	721a      	strb	r2, [r3, #8]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	7a1b      	ldrb	r3, [r3, #8]
 80114be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	721a      	strb	r2, [r3, #8]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f042 0201 	orr.w	r2, r2, #1
 80114d0:	701a      	strb	r2, [r3, #0]
 80114d2:	2200      	movs	r2, #0
 80114d4:	705a      	strb	r2, [r3, #1]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2205      	movs	r2, #5
 80114da:	731a      	strb	r2, [r3, #12]
      return( TRUE );
 80114dc:	2301      	movs	r3, #1
 80114de:	e003      	b.n	80114e8 <ObjectSpecificHandler+0xf8>
   break;
 80114e0:	bf00      	nop
 80114e2:	e000      	b.n	80114e6 <ObjectSpecificHandler+0xf6>
   break;
 80114e4:	bf00      	nop
   }
   /*
   ** The entry matched object, instance, and command, but other data did not
   ** match. Keep looking for another entry.
   */
   return( FALSE );
 80114e6:	2300      	movs	r3, #0
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3708      	adds	r7, #8
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <ReadExeption>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType ReadExeption( ABP_MsgType* psMsg, void* pxUserData )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af02      	add	r7, sp, #8
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_ANB, 1, ABP_ANB_IA_EXCEPTION, ABCC_GetNewSourceId() );
 80114fa:	f7fb f9ef 	bl	800c8dc <ABCC_GetNewSourceId>
 80114fe:	4603      	mov	r3, r0
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	2306      	movs	r3, #6
 8011504:	2201      	movs	r2, #1
 8011506:	2101      	movs	r1, #1
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f7fb fa08 	bl	800c91e <ABCC_GetAttribute>
   return( ABCC_CMDSEQ_CMD_SEND );
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <ReadExeptionInfo>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType ReadExeptionInfo( ABP_MsgType* psMsg, void* pxUserData )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af02      	add	r7, sp, #8
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   ABCC_GetAttribute( psMsg, ABP_OBJ_NUM_NW, 1, ABP_NW_IA_EXCEPTION_INFO, ABCC_GetNewSourceId() );
 8011522:	f7fb f9db 	bl	800c8dc <ABCC_GetNewSourceId>
 8011526:	4603      	mov	r3, r0
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	2307      	movs	r3, #7
 801152c:	2201      	movs	r2, #1
 801152e:	2103      	movs	r1, #3
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7fb f9f4 	bl	800c91e <ABCC_GetAttribute>
   return( ABCC_CMDSEQ_CMD_SEND );
 8011536:	2300      	movs	r3, #0
}
 8011538:	4618      	mov	r0, r3
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <HandleExceptionResp>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType HandleExceptionResp( ABP_MsgType* psMsg, void* pxUserData )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b088      	sub	sp, #32
 8011544:	af04      	add	r7, sp, #16
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
   UINT8 bException;
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f7fb fb4a 	bl	800cbe4 <ABCC_VerifyMessage>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d011      	beq.n	801157a <HandleExceptionResp+0x3a>
   {
      ABCC_LOG_ERROR( ABCC_EC_RESP_MSG_E_BIT_SET,
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	7b1b      	ldrb	r3, [r3, #12]
 801155a:	461a      	mov	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	7b1b      	ldrb	r3, [r3, #12]
 8011560:	9302      	str	r3, [sp, #8]
 8011562:	4b1e      	ldr	r3, [pc, #120]	@ (80115dc <HandleExceptionResp+0x9c>)
 8011564:	9301      	str	r3, [sp, #4]
 8011566:	f240 1331 	movw	r3, #305	@ 0x131
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	4b1c      	ldr	r3, [pc, #112]	@ (80115e0 <HandleExceptionResp+0xa0>)
 801156e:	2108      	movs	r1, #8
 8011570:	2001      	movs	r0, #1
 8011572:	f7fc f869 	bl	800d648 <ABCC_LogHandler>
         ABCC_GetErrorCode( psMsg ),
         "Get exception code failed (%" PRIu8 ")\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 8011576:	2300      	movs	r3, #0
 8011578:	e02c      	b.n	80115d4 <HandleExceptionResp+0x94>
   }

   ABCC_GetMsgData8( psMsg, &bException, 0 );
 801157a:	f7fa fceb 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d111      	bne.n	80115a8 <HandleExceptionResp+0x68>
 8011584:	f7fa fce6 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011588:	4603      	mov	r3, r0
 801158a:	9303      	str	r3, [sp, #12]
 801158c:	2301      	movs	r3, #1
 801158e:	9302      	str	r3, [sp, #8]
 8011590:	4b14      	ldr	r3, [pc, #80]	@ (80115e4 <HandleExceptionResp+0xa4>)
 8011592:	9301      	str	r3, [sp, #4]
 8011594:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	4b11      	ldr	r3, [pc, #68]	@ (80115e0 <HandleExceptionResp+0xa0>)
 801159c:	2201      	movs	r2, #1
 801159e:	2127      	movs	r1, #39	@ 0x27
 80115a0:	2001      	movs	r0, #1
 80115a2:	f7fc f851 	bl	800d648 <ABCC_LogHandler>
 80115a6:	e007      	b.n	80115b8 <HandleExceptionResp+0x78>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	330c      	adds	r3, #12
 80115ac:	f107 010f 	add.w	r1, r7, #15
 80115b0:	2200      	movs	r2, #0
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fb fc5d 	bl	800ce72 <ABCC_GetData8>
   ABCC_LOG_INFO( "Exception Code: %X:\n", bException );
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
 80115ba:	9302      	str	r3, [sp, #8]
 80115bc:	4b0a      	ldr	r3, [pc, #40]	@ (80115e8 <HandleExceptionResp+0xa8>)
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	f240 1339 	movw	r3, #313	@ 0x139
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	4b06      	ldr	r3, [pc, #24]	@ (80115e0 <HandleExceptionResp+0xa0>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	2100      	movs	r1, #0
 80115cc:	2003      	movs	r0, #3
 80115ce:	f7fc f83b 	bl	800d648 <ABCC_LogHandler>

   (void)bException;
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 80115d2:	2300      	movs	r3, #0
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	08016c4c 	.word	0x08016c4c
 80115e0:	08016c38 	.word	0x08016c38
 80115e4:	08016c70 	.word	0x08016c70
 80115e8:	08016c9c 	.word	0x08016c9c

080115ec <HandleExceptionInfoResp>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqRespHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqRespStatusType HandleExceptionInfoResp( ABP_MsgType* psMsg, void* pxUserData )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b088      	sub	sp, #32
 80115f0:	af04      	add	r7, sp, #16
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
   UINT8 bExceptionInfo;
   (void)pxUserData;

   if( ABCC_VerifyMessage( psMsg ) != ABCC_EC_NO_ERROR )
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7fb faf4 	bl	800cbe4 <ABCC_VerifyMessage>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d011      	beq.n	8011626 <HandleExceptionInfoResp+0x3a>
   {
      ABCC_LOG_ERROR( ABCC_EC_RESP_MSG_E_BIT_SET,
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	7b1b      	ldrb	r3, [r3, #12]
 8011606:	461a      	mov	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	7b1b      	ldrb	r3, [r3, #12]
 801160c:	9302      	str	r3, [sp, #8]
 801160e:	4b1e      	ldr	r3, [pc, #120]	@ (8011688 <HandleExceptionInfoResp+0x9c>)
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	f240 134d 	movw	r3, #333	@ 0x14d
 8011616:	9300      	str	r3, [sp, #0]
 8011618:	4b1c      	ldr	r3, [pc, #112]	@ (801168c <HandleExceptionInfoResp+0xa0>)
 801161a:	2108      	movs	r1, #8
 801161c:	2001      	movs	r0, #1
 801161e:	f7fc f813 	bl	800d648 <ABCC_LogHandler>
         ABCC_GetErrorCode( psMsg ),
         "Get exception info failed (%" PRIu8 ")\n",
         ABCC_GetErrorCode( psMsg ) );
      return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 8011622:	2300      	movs	r3, #0
 8011624:	e02c      	b.n	8011680 <HandleExceptionInfoResp+0x94>
   }

   ABCC_GetMsgData8( psMsg, &bExceptionInfo, 0 );
 8011626:	f7fa fc95 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d111      	bne.n	8011654 <HandleExceptionInfoResp+0x68>
 8011630:	f7fa fc90 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011634:	4603      	mov	r3, r0
 8011636:	9303      	str	r3, [sp, #12]
 8011638:	2301      	movs	r3, #1
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	4b14      	ldr	r3, [pc, #80]	@ (8011690 <HandleExceptionInfoResp+0xa4>)
 801163e:	9301      	str	r3, [sp, #4]
 8011640:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	4b11      	ldr	r3, [pc, #68]	@ (801168c <HandleExceptionInfoResp+0xa0>)
 8011648:	2201      	movs	r2, #1
 801164a:	2127      	movs	r1, #39	@ 0x27
 801164c:	2001      	movs	r0, #1
 801164e:	f7fb fffb 	bl	800d648 <ABCC_LogHandler>
 8011652:	e007      	b.n	8011664 <HandleExceptionInfoResp+0x78>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	330c      	adds	r3, #12
 8011658:	f107 010f 	add.w	r1, r7, #15
 801165c:	2200      	movs	r2, #0
 801165e:	4618      	mov	r0, r3
 8011660:	f7fb fc07 	bl	800ce72 <ABCC_GetData8>
   ABCC_LOG_INFO( "Exception Info: %X:\n", bExceptionInfo );
 8011664:	7bfb      	ldrb	r3, [r7, #15]
 8011666:	9302      	str	r3, [sp, #8]
 8011668:	4b0a      	ldr	r3, [pc, #40]	@ (8011694 <HandleExceptionInfoResp+0xa8>)
 801166a:	9301      	str	r3, [sp, #4]
 801166c:	f240 1355 	movw	r3, #341	@ 0x155
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	4b06      	ldr	r3, [pc, #24]	@ (801168c <HandleExceptionInfoResp+0xa0>)
 8011674:	2200      	movs	r2, #0
 8011676:	2100      	movs	r1, #0
 8011678:	2003      	movs	r0, #3
 801167a:	f7fb ffe5 	bl	800d648 <ABCC_LogHandler>

   (void)bExceptionInfo;
   return( ABCC_CMDSEQ_RESP_EXEC_NEXT );
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3710      	adds	r7, #16
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08016cb4 	.word	0x08016cb4
 801168c:	08016c38 	.word	0x08016c38
 8011690:	08016c70 	.word	0x08016c70
 8011694:	08016cd8 	.word	0x08016cd8

08011698 <UpdateIpAddress>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateIpAddress( ABP_MsgType* psMsg, void* pxUserData )
{
 8011698:	b590      	push	{r4, r7, lr}
 801169a:	b087      	sub	sp, #28
 801169c:	af04      	add	r7, sp, #16
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( !appl_fNwSupportsNodeId ) &&
 80116a2:	4b1f      	ldr	r3, [pc, #124]	@ (8011720 <UpdateIpAddress+0x88>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d134      	bne.n	8011714 <UpdateIpAddress+0x7c>
 80116aa:	4b1e      	ldr	r3, [pc, #120]	@ (8011724 <UpdateIpAddress+0x8c>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d030      	beq.n	8011714 <UpdateIpAddress+0x7c>
       ( appl_fSetAddr ) )
   {
      ABCC_SetMsgHeader( psMsg,
 80116b2:	4b1d      	ldr	r3, [pc, #116]	@ (8011728 <UpdateIpAddress+0x90>)
 80116b4:	881c      	ldrh	r4, [r3, #0]
 80116b6:	f7fb f911 	bl	800c8dc <ABCC_GetNewSourceId>
 80116ba:	4603      	mov	r3, r0
 80116bc:	9302      	str	r3, [sp, #8]
 80116be:	2304      	movs	r3, #4
 80116c0:	9301      	str	r3, [sp, #4]
 80116c2:	2302      	movs	r3, #2
 80116c4:	9300      	str	r3, [sp, #0]
 80116c6:	2305      	movs	r3, #5
 80116c8:	4622      	mov	r2, r4
 80116ca:	2104      	movs	r1, #4
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7fb fa17 	bl	800cb00 <ABCC_SetMsgHeader>
                         ABP_NC_VAR_IA_VALUE,
                         ABP_CMD_SET_ATTR,
                         4,
                         ABCC_GetNewSourceId() );

      ABCC_SetMsgString( psMsg, (char*)appl_sIpSettings.sAddress.uValue.abValue, 4, 0 );
 80116d2:	f7fa fc3f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b03      	cmp	r3, #3
 80116da:	d811      	bhi.n	8011700 <UpdateIpAddress+0x68>
 80116dc:	f7fa fc3a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80116e0:	4603      	mov	r3, r0
 80116e2:	9303      	str	r3, [sp, #12]
 80116e4:	2304      	movs	r3, #4
 80116e6:	9302      	str	r3, [sp, #8]
 80116e8:	4b10      	ldr	r3, [pc, #64]	@ (801172c <UpdateIpAddress+0x94>)
 80116ea:	9301      	str	r3, [sp, #4]
 80116ec:	f240 1391 	movw	r3, #401	@ 0x191
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	4b0f      	ldr	r3, [pc, #60]	@ (8011730 <UpdateIpAddress+0x98>)
 80116f4:	2204      	movs	r2, #4
 80116f6:	2127      	movs	r1, #39	@ 0x27
 80116f8:	2001      	movs	r0, #1
 80116fa:	f7fb ffa5 	bl	800d648 <ABCC_LogHandler>
 80116fe:	e007      	b.n	8011710 <UpdateIpAddress+0x78>
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f103 000c 	add.w	r0, r3, #12
 8011706:	2300      	movs	r3, #0
 8011708:	2204      	movs	r2, #4
 801170a:	490a      	ldr	r1, [pc, #40]	@ (8011734 <UpdateIpAddress+0x9c>)
 801170c:	f7fb fb9a 	bl	800ce44 <ABCC_SetString>

      return( ABCC_CMDSEQ_CMD_SEND );
 8011710:	2300      	movs	r3, #0
 8011712:	e000      	b.n	8011716 <UpdateIpAddress+0x7e>
   }

   return( ABCC_CMDSEQ_CMD_SKIP );
 8011714:	2301      	movs	r3, #1
}
 8011716:	4618      	mov	r0, r3
 8011718:	370c      	adds	r7, #12
 801171a:	46bd      	mov	sp, r7
 801171c:	bd90      	pop	{r4, r7, pc}
 801171e:	bf00      	nop
 8011720:	24003f14 	.word	0x24003f14
 8011724:	24003f00 	.word	0x24003f00
 8011728:	24000028 	.word	0x24000028
 801172c:	08016c70 	.word	0x08016c70
 8011730:	08016c38 	.word	0x08016c38
 8011734:	2400002c 	.word	0x2400002c

08011738 <UpdateNetmask>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateNetmask( ABP_MsgType* psMsg, void* pxUserData )
{
 8011738:	b590      	push	{r4, r7, lr}
 801173a:	b087      	sub	sp, #28
 801173c:	af04      	add	r7, sp, #16
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( !appl_fNwSupportsNodeId ) &&
 8011742:	4b1f      	ldr	r3, [pc, #124]	@ (80117c0 <UpdateNetmask+0x88>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d134      	bne.n	80117b4 <UpdateNetmask+0x7c>
 801174a:	4b1e      	ldr	r3, [pc, #120]	@ (80117c4 <UpdateNetmask+0x8c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d030      	beq.n	80117b4 <UpdateNetmask+0x7c>
       ( appl_fSetAddr ) )
   {
      ABCC_SetMsgHeader( psMsg,
 8011752:	4b1d      	ldr	r3, [pc, #116]	@ (80117c8 <UpdateNetmask+0x90>)
 8011754:	891c      	ldrh	r4, [r3, #8]
 8011756:	f7fb f8c1 	bl	800c8dc <ABCC_GetNewSourceId>
 801175a:	4603      	mov	r3, r0
 801175c:	9302      	str	r3, [sp, #8]
 801175e:	2304      	movs	r3, #4
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	2302      	movs	r3, #2
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	2305      	movs	r3, #5
 8011768:	4622      	mov	r2, r4
 801176a:	2104      	movs	r1, #4
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7fb f9c7 	bl	800cb00 <ABCC_SetMsgHeader>
                         ABP_NC_VAR_IA_VALUE,
                         ABP_CMD_SET_ATTR,
                         4,
                         ABCC_GetNewSourceId() );

      ABCC_SetMsgString( psMsg, (char*)appl_sIpSettings.sNetmask.uValue.abValue, 4, 0 );
 8011772:	f7fa fbef 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011776:	4603      	mov	r3, r0
 8011778:	2b03      	cmp	r3, #3
 801177a:	d811      	bhi.n	80117a0 <UpdateNetmask+0x68>
 801177c:	f7fa fbea 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011780:	4603      	mov	r3, r0
 8011782:	9303      	str	r3, [sp, #12]
 8011784:	2304      	movs	r3, #4
 8011786:	9302      	str	r3, [sp, #8]
 8011788:	4b10      	ldr	r3, [pc, #64]	@ (80117cc <UpdateNetmask+0x94>)
 801178a:	9301      	str	r3, [sp, #4]
 801178c:	f240 13af 	movw	r3, #431	@ 0x1af
 8011790:	9300      	str	r3, [sp, #0]
 8011792:	4b0f      	ldr	r3, [pc, #60]	@ (80117d0 <UpdateNetmask+0x98>)
 8011794:	2204      	movs	r2, #4
 8011796:	2127      	movs	r1, #39	@ 0x27
 8011798:	2001      	movs	r0, #1
 801179a:	f7fb ff55 	bl	800d648 <ABCC_LogHandler>
 801179e:	e007      	b.n	80117b0 <UpdateNetmask+0x78>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f103 000c 	add.w	r0, r3, #12
 80117a6:	2300      	movs	r3, #0
 80117a8:	2204      	movs	r2, #4
 80117aa:	490a      	ldr	r1, [pc, #40]	@ (80117d4 <UpdateNetmask+0x9c>)
 80117ac:	f7fb fb4a 	bl	800ce44 <ABCC_SetString>

      return( ABCC_CMDSEQ_CMD_SEND );
 80117b0:	2300      	movs	r3, #0
 80117b2:	e000      	b.n	80117b6 <UpdateNetmask+0x7e>
   }

   return( ABCC_CMDSEQ_CMD_SKIP );
 80117b4:	2301      	movs	r3, #1
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd90      	pop	{r4, r7, pc}
 80117be:	bf00      	nop
 80117c0:	24003f14 	.word	0x24003f14
 80117c4:	24003f00 	.word	0x24003f00
 80117c8:	24000028 	.word	0x24000028
 80117cc:	08016c70 	.word	0x08016c70
 80117d0:	08016c38 	.word	0x08016c38
 80117d4:	24000034 	.word	0x24000034

080117d8 <UpdateGateway>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateGateway( ABP_MsgType* psMsg, void* pxUserData )
{
 80117d8:	b590      	push	{r4, r7, lr}
 80117da:	b087      	sub	sp, #28
 80117dc:	af04      	add	r7, sp, #16
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( !appl_fNwSupportsNodeId ) &&
 80117e2:	4b1f      	ldr	r3, [pc, #124]	@ (8011860 <UpdateGateway+0x88>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d134      	bne.n	8011854 <UpdateGateway+0x7c>
 80117ea:	4b1e      	ldr	r3, [pc, #120]	@ (8011864 <UpdateGateway+0x8c>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d030      	beq.n	8011854 <UpdateGateway+0x7c>
       ( appl_fSetAddr ) )
   {
      ABCC_SetMsgHeader( psMsg,
 80117f2:	4b1d      	ldr	r3, [pc, #116]	@ (8011868 <UpdateGateway+0x90>)
 80117f4:	8a1c      	ldrh	r4, [r3, #16]
 80117f6:	f7fb f871 	bl	800c8dc <ABCC_GetNewSourceId>
 80117fa:	4603      	mov	r3, r0
 80117fc:	9302      	str	r3, [sp, #8]
 80117fe:	2304      	movs	r3, #4
 8011800:	9301      	str	r3, [sp, #4]
 8011802:	2302      	movs	r3, #2
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	2305      	movs	r3, #5
 8011808:	4622      	mov	r2, r4
 801180a:	2104      	movs	r1, #4
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7fb f977 	bl	800cb00 <ABCC_SetMsgHeader>
                         ABP_NC_VAR_IA_VALUE,
                         ABP_CMD_SET_ATTR,
                         4,
                         ABCC_GetNewSourceId() );

      ABCC_SetMsgString( psMsg, (char*)appl_sIpSettings.sGateway.uValue.abValue, 4, 0 );
 8011812:	f7fa fb9f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011816:	4603      	mov	r3, r0
 8011818:	2b03      	cmp	r3, #3
 801181a:	d811      	bhi.n	8011840 <UpdateGateway+0x68>
 801181c:	f7fa fb9a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011820:	4603      	mov	r3, r0
 8011822:	9303      	str	r3, [sp, #12]
 8011824:	2304      	movs	r3, #4
 8011826:	9302      	str	r3, [sp, #8]
 8011828:	4b10      	ldr	r3, [pc, #64]	@ (801186c <UpdateGateway+0x94>)
 801182a:	9301      	str	r3, [sp, #4]
 801182c:	f240 13cd 	movw	r3, #461	@ 0x1cd
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	4b0f      	ldr	r3, [pc, #60]	@ (8011870 <UpdateGateway+0x98>)
 8011834:	2204      	movs	r2, #4
 8011836:	2127      	movs	r1, #39	@ 0x27
 8011838:	2001      	movs	r0, #1
 801183a:	f7fb ff05 	bl	800d648 <ABCC_LogHandler>
 801183e:	e007      	b.n	8011850 <UpdateGateway+0x78>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f103 000c 	add.w	r0, r3, #12
 8011846:	2300      	movs	r3, #0
 8011848:	2204      	movs	r2, #4
 801184a:	490a      	ldr	r1, [pc, #40]	@ (8011874 <UpdateGateway+0x9c>)
 801184c:	f7fb fafa 	bl	800ce44 <ABCC_SetString>

      return( ABCC_CMDSEQ_CMD_SEND );
 8011850:	2300      	movs	r3, #0
 8011852:	e000      	b.n	8011856 <UpdateGateway+0x7e>
   }

   return( ABCC_CMDSEQ_CMD_SKIP );
 8011854:	2301      	movs	r3, #1
}
 8011856:	4618      	mov	r0, r3
 8011858:	370c      	adds	r7, #12
 801185a:	46bd      	mov	sp, r7
 801185c:	bd90      	pop	{r4, r7, pc}
 801185e:	bf00      	nop
 8011860:	24003f14 	.word	0x24003f14
 8011864:	24003f00 	.word	0x24003f00
 8011868:	24000028 	.word	0x24000028
 801186c:	08016c70 	.word	0x08016c70
 8011870:	08016c38 	.word	0x08016c38
 8011874:	2400003c 	.word	0x2400003c

08011878 <UpdateDhcp>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateDhcp( ABP_MsgType* psMsg, void* pxUserData )
{
 8011878:	b5b0      	push	{r4, r5, r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af02      	add	r7, sp, #8
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( appl_fNwSupportsDhcp ) &&
 8011882:	4b0f      	ldr	r3, [pc, #60]	@ (80118c0 <UpdateDhcp+0x48>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d015      	beq.n	80118b6 <UpdateDhcp+0x3e>
 801188a:	4b0e      	ldr	r3, [pc, #56]	@ (80118c4 <UpdateDhcp+0x4c>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d011      	beq.n	80118b6 <UpdateDhcp+0x3e>
       ( appl_fSetAddr ) )
   {
      ABCC_SetByteAttribute( psMsg, ABP_OBJ_NUM_NC,
 8011892:	4b0d      	ldr	r3, [pc, #52]	@ (80118c8 <UpdateDhcp+0x50>)
 8011894:	8b1d      	ldrh	r5, [r3, #24]
                             appl_sIpSettings.sDhcp.iInstance,
                             ABP_NC_VAR_IA_VALUE,
                             (UINT8)appl_sIpSettings.sDhcp.uValue.fValue,
 8011896:	4b0c      	ldr	r3, [pc, #48]	@ (80118c8 <UpdateDhcp+0x50>)
 8011898:	69db      	ldr	r3, [r3, #28]
      ABCC_SetByteAttribute( psMsg, ABP_OBJ_NUM_NC,
 801189a:	b2dc      	uxtb	r4, r3
 801189c:	f7fb f81e 	bl	800c8dc <ABCC_GetNewSourceId>
 80118a0:	4603      	mov	r3, r0
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	9400      	str	r4, [sp, #0]
 80118a6:	2305      	movs	r3, #5
 80118a8:	462a      	mov	r2, r5
 80118aa:	2104      	movs	r1, #4
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7fb f8a5 	bl	800c9fc <ABCC_SetByteAttribute>
                             ABCC_GetNewSourceId() );

      return( ABCC_CMDSEQ_CMD_SEND );
 80118b2:	2300      	movs	r3, #0
 80118b4:	e000      	b.n	80118b8 <UpdateDhcp+0x40>
   }
   return( ABCC_CMDSEQ_CMD_SKIP );
 80118b6:	2301      	movs	r3, #1
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bdb0      	pop	{r4, r5, r7, pc}
 80118c0:	24003f1c 	.word	0x24003f1c
 80118c4:	24003f00 	.word	0x24003f00
 80118c8:	24000028 	.word	0x24000028

080118cc <UpdateNodeAddress>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateNodeAddress( ABP_MsgType* psMsg, void* pxUserData )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b086      	sub	sp, #24
 80118d0:	af04      	add	r7, sp, #16
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( appl_fNwSupportsNodeId ) &&
 80118d6:	4b1e      	ldr	r3, [pc, #120]	@ (8011950 <UpdateNodeAddress+0x84>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d032      	beq.n	8011944 <UpdateNodeAddress+0x78>
 80118de:	4b1d      	ldr	r3, [pc, #116]	@ (8011954 <UpdateNodeAddress+0x88>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d02e      	beq.n	8011944 <UpdateNodeAddress+0x78>
       ( appl_fSetAddr ) )
   {
      ABCC_SetMsgHeader( psMsg,
 80118e6:	f7fa fff9 	bl	800c8dc <ABCC_GetNewSourceId>
 80118ea:	4603      	mov	r3, r0
 80118ec:	9302      	str	r3, [sp, #8]
 80118ee:	2302      	movs	r3, #2
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	2302      	movs	r3, #2
 80118f4:	9300      	str	r3, [sp, #0]
 80118f6:	2305      	movs	r3, #5
 80118f8:	2201      	movs	r2, #1
 80118fa:	2104      	movs	r1, #4
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7fb f8ff 	bl	800cb00 <ABCC_SetMsgHeader>
                         ABP_NC_VAR_IA_VALUE,
                         ABP_CMD_SET_ATTR,
                         ABP_UINT16_SIZEOF,
                         ABCC_GetNewSourceId() );

      ABCC_SetMsgData16( psMsg, appl_iNwNodeAddress, 0 );
 8011902:	f7fa fb27 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011906:	4603      	mov	r3, r0
 8011908:	2b01      	cmp	r3, #1
 801190a:	d811      	bhi.n	8011930 <UpdateNodeAddress+0x64>
 801190c:	f7fa fb22 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8011910:	4603      	mov	r3, r0
 8011912:	9303      	str	r3, [sp, #12]
 8011914:	2302      	movs	r3, #2
 8011916:	9302      	str	r3, [sp, #8]
 8011918:	4b0f      	ldr	r3, [pc, #60]	@ (8011958 <UpdateNodeAddress+0x8c>)
 801191a:	9301      	str	r3, [sp, #4]
 801191c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8011920:	9300      	str	r3, [sp, #0]
 8011922:	4b0e      	ldr	r3, [pc, #56]	@ (801195c <UpdateNodeAddress+0x90>)
 8011924:	2202      	movs	r2, #2
 8011926:	2127      	movs	r1, #39	@ 0x27
 8011928:	2001      	movs	r0, #1
 801192a:	f7fb fe8d 	bl	800d648 <ABCC_LogHandler>
 801192e:	e007      	b.n	8011940 <UpdateNodeAddress+0x74>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	330c      	adds	r3, #12
 8011934:	4a0a      	ldr	r2, [pc, #40]	@ (8011960 <UpdateNodeAddress+0x94>)
 8011936:	8811      	ldrh	r1, [r2, #0]
 8011938:	2200      	movs	r2, #0
 801193a:	4618      	mov	r0, r3
 801193c:	f7fb fad7 	bl	800ceee <ABCC_SetData16>

      return( ABCC_CMDSEQ_CMD_SEND );
 8011940:	2300      	movs	r3, #0
 8011942:	e000      	b.n	8011946 <UpdateNodeAddress+0x7a>
   }

   return( ABCC_CMDSEQ_CMD_SKIP );
 8011944:	2301      	movs	r3, #1
}
 8011946:	4618      	mov	r0, r3
 8011948:	3708      	adds	r7, #8
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	24003f14 	.word	0x24003f14
 8011954:	24003f00 	.word	0x24003f00
 8011958:	08016c70 	.word	0x08016c70
 801195c:	08016c38 	.word	0x08016c38
 8011960:	24003efe 	.word	0x24003efe

08011964 <SetCommSettingCmdMsgData>:
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType SetCommSettingCmdMsgData( ABP_MsgType* psMsg,
                                                          UINT16 iInstance,
                                                          ABCC_API_CommSettingType eCommSetting )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af02      	add	r7, sp, #8
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	460b      	mov	r3, r1
 801196e:	807b      	strh	r3, [r7, #2]
 8011970:	4613      	mov	r3, r2
 8011972:	707b      	strb	r3, [r7, #1]
   if( ( appl_fNwSupportsCommSettings ) &&
 8011974:	4b0d      	ldr	r3, [pc, #52]	@ (80119ac <SetCommSettingCmdMsgData+0x48>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d011      	beq.n	80119a0 <SetCommSettingCmdMsgData+0x3c>
 801197c:	4b0c      	ldr	r3, [pc, #48]	@ (80119b0 <SetCommSettingCmdMsgData+0x4c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00d      	beq.n	80119a0 <SetCommSettingCmdMsgData+0x3c>
       ( appl_fSetCommSettings ) )
   {
      ABCC_SetByteAttribute( psMsg,
 8011984:	f7fa ffaa 	bl	800c8dc <ABCC_GetNewSourceId>
 8011988:	4603      	mov	r3, r0
 801198a:	887a      	ldrh	r2, [r7, #2]
 801198c:	9301      	str	r3, [sp, #4]
 801198e:	787b      	ldrb	r3, [r7, #1]
 8011990:	9300      	str	r3, [sp, #0]
 8011992:	2305      	movs	r3, #5
 8011994:	2104      	movs	r1, #4
 8011996:	6878      	ldr	r0, [r7, #4]
 8011998:	f7fb f830 	bl	800c9fc <ABCC_SetByteAttribute>
                             ABP_OBJ_NUM_NC,
                             iInstance,
                             ABP_NC_VAR_IA_VALUE,
                             (UINT8)eCommSetting,
                             ABCC_GetNewSourceId() );
      return( ABCC_CMDSEQ_CMD_SEND );
 801199c:	2300      	movs	r3, #0
 801199e:	e000      	b.n	80119a2 <SetCommSettingCmdMsgData+0x3e>
   }

   return( ABCC_CMDSEQ_CMD_SKIP );
 80119a0:	2301      	movs	r3, #1
}
 80119a2:	4618      	mov	r0, r3
 80119a4:	3708      	adds	r7, #8
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	24003f20 	.word	0x24003f20
 80119b0:	24003f10 	.word	0x24003f10

080119b4 <UpdateCommSetting1>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateCommSetting1( ABP_MsgType* psMsg, void* pxUserData )
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   return( SetCommSettingCmdMsgData( psMsg, ABCC_API_COMM_SETTING_1_INSTANCE, appl_eCommSettings1 ) );
 80119be:	4b06      	ldr	r3, [pc, #24]	@ (80119d8 <UpdateCommSetting1+0x24>)
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	461a      	mov	r2, r3
 80119c4:	2107      	movs	r1, #7
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f7ff ffcc 	bl	8011964 <SetCommSettingCmdMsgData>
 80119cc:	4603      	mov	r3, r0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3708      	adds	r7, #8
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}
 80119d6:	bf00      	nop
 80119d8:	24003f0c 	.word	0x24003f0c

080119dc <UpdateCommSetting2>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateCommSetting2( ABP_MsgType* psMsg, void* pxUserData )
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   return( SetCommSettingCmdMsgData( psMsg, ABCC_API_COMM_SETTING_2_INSTANCE, appl_eCommSettings2 ) );
 80119e6:	4b06      	ldr	r3, [pc, #24]	@ (8011a00 <UpdateCommSetting2+0x24>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	2108      	movs	r1, #8
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f7ff ffb8 	bl	8011964 <SetCommSettingCmdMsgData>
 80119f4:	4603      	mov	r3, r0
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	24003f0d 	.word	0x24003f0d

08011a04 <UpdateBaudRate>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqCmdHandler type in cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static ABCC_CmdSeqCmdStatusType UpdateBaudRate( ABP_MsgType* psMsg, void* pxUserData )
{
 8011a04:	b590      	push	{r4, r7, lr}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af02      	add	r7, sp, #8
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
   (void)pxUserData;

   if( ( appl_fNwSupportsBaudRate ) &&
 8011a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8011a48 <UpdateBaudRate+0x44>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d012      	beq.n	8011a3c <UpdateBaudRate+0x38>
 8011a16:	4b0d      	ldr	r3, [pc, #52]	@ (8011a4c <UpdateBaudRate+0x48>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00e      	beq.n	8011a3c <UpdateBaudRate+0x38>
       ( appl_fSetBaudRate ) )
   {
      ABCC_SetByteAttribute( psMsg, ABP_OBJ_NUM_NC,
 8011a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a50 <UpdateBaudRate+0x4c>)
 8011a20:	781c      	ldrb	r4, [r3, #0]
 8011a22:	f7fa ff5b 	bl	800c8dc <ABCC_GetNewSourceId>
 8011a26:	4603      	mov	r3, r0
 8011a28:	9301      	str	r3, [sp, #4]
 8011a2a:	9400      	str	r4, [sp, #0]
 8011a2c:	2305      	movs	r3, #5
 8011a2e:	2202      	movs	r2, #2
 8011a30:	2104      	movs	r1, #4
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f7fa ffe2 	bl	800c9fc <ABCC_SetByteAttribute>
                             ABP_NC_INST_NUM_SW2,
                             ABP_NC_VAR_IA_VALUE,
                             appl_bNwBaudRate,
                             ABCC_GetNewSourceId() );

      return( ABCC_CMDSEQ_CMD_SEND );
 8011a38:	2300      	movs	r3, #0
 8011a3a:	e000      	b.n	8011a3e <UpdateBaudRate+0x3a>
   }
   return( ABCC_CMDSEQ_CMD_SKIP );
 8011a3c:	2301      	movs	r3, #1
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd90      	pop	{r4, r7, pc}
 8011a46:	bf00      	nop
 8011a48:	24003f18 	.word	0x24003f18
 8011a4c:	24003f08 	.word	0x24003f08
 8011a50:	24003f04 	.word	0x24003f04

08011a54 <UserInitPrepDone>:
**  This function is a part of a command sequence. See description of
**  ABCC_CmdSeqDoneHandler type in abcc_cmd_seq_if.h
**------------------------------------------------------------------------------
*/
static void UserInitPrepDone( const ABCC_CmdSeqResultType eSeqResult, void* pxUserData )
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af02      	add	r7, sp, #8
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	6039      	str	r1, [r7, #0]
 8011a5e:	71fb      	strb	r3, [r7, #7]
   (void)pxUserData;

   switch( eSeqResult )
 8011a60:	79fb      	ldrb	r3, [r7, #7]
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d027      	beq.n	8011ab6 <UserInitPrepDone+0x62>
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	dc31      	bgt.n	8011ace <UserInitPrepDone+0x7a>
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d002      	beq.n	8011a74 <UserInitPrepDone+0x20>
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d015      	beq.n	8011a9e <UserInitPrepDone+0x4a>
 8011a72:	e02c      	b.n	8011ace <UserInitPrepDone+0x7a>
   case ABCC_CMDSEQ_RESULT_COMPLETED:
   {
      ABCC_API_FwVersionType iFirmwareVersion;
      ABCC_API_NetworkType iNetworkType;

      iNetworkType = (ABCC_API_NetworkType)ABCC_NetworkType();
 8011a74:	f7fd fa08 	bl	800ee88 <ABCC_NetworkType>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	81fb      	strh	r3, [r7, #14]
      iFirmwareVersion = ABCC_FirmwareVersion();
 8011a7c:	f7fd f9e6 	bl	800ee4c <ABCC_FirmwareVersion>
 8011a80:	4603      	mov	r3, r0
 8011a82:	461a      	mov	r2, r3
 8011a84:	723a      	strb	r2, [r7, #8]
 8011a86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011a8a:	727a      	strb	r2, [r7, #9]
 8011a8c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8011a90:	72bb      	strb	r3, [r7, #10]

      ABCC_API_CbfUserInit( iNetworkType, iFirmwareVersion );
 8011a92:	89fb      	ldrh	r3, [r7, #14]
 8011a94:	68b9      	ldr	r1, [r7, #8]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7ef f89b 	bl	8000bd2 <ABCC_API_CbfUserInit>
      break;
 8011a9c:	e023      	b.n	8011ae6 <UserInitPrepDone+0x92>
   }
   case ABCC_CMDSEQ_RESULT_ABORT_INT:
      ABCC_LOG_ERROR( ABCC_EC_INTERNAL_ERROR,
 8011a9e:	4b14      	ldr	r3, [pc, #80]	@ (8011af0 <UserInitPrepDone+0x9c>)
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	f240 23b1 	movw	r3, #689	@ 0x2b1
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	4b12      	ldr	r3, [pc, #72]	@ (8011af4 <UserInitPrepDone+0xa0>)
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2101      	movs	r1, #1
 8011aae:	2001      	movs	r0, #1
 8011ab0:	f7fb fdca 	bl	800d648 <ABCC_LogHandler>
         0,
         "UserInitPrepDone reported internally aborted command sequence.\n" );
      break;
 8011ab4:	e017      	b.n	8011ae6 <UserInitPrepDone+0x92>

   case ABCC_CMDSEQ_RESULT_ABORT_EXT:
      ABCC_LOG_ERROR( ABCC_EC_INTERNAL_ERROR,
 8011ab6:	4b10      	ldr	r3, [pc, #64]	@ (8011af8 <UserInitPrepDone+0xa4>)
 8011ab8:	9301      	str	r3, [sp, #4]
 8011aba:	f240 23b7 	movw	r3, #695	@ 0x2b7
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8011af4 <UserInitPrepDone+0xa0>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	2101      	movs	r1, #1
 8011ac6:	2001      	movs	r0, #1
 8011ac8:	f7fb fdbe 	bl	800d648 <ABCC_LogHandler>
         0,
         "UserInitPrepDone reported externally aborted command sequence.\n" );
      break;
 8011acc:	e00b      	b.n	8011ae6 <UserInitPrepDone+0x92>

   default:
      ABCC_LOG_ERROR( ABCC_EC_INTERNAL_ERROR,
 8011ace:	79fa      	ldrb	r2, [r7, #7]
 8011ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8011afc <UserInitPrepDone+0xa8>)
 8011ad2:	9301      	str	r3, [sp, #4]
 8011ad4:	f240 23bd 	movw	r3, #701	@ 0x2bd
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	4b06      	ldr	r3, [pc, #24]	@ (8011af4 <UserInitPrepDone+0xa0>)
 8011adc:	2101      	movs	r1, #1
 8011ade:	2001      	movs	r0, #1
 8011ae0:	f7fb fdb2 	bl	800d648 <ABCC_LogHandler>
         eSeqResult,
         "UserInitPrepDone reported unknown abort code.\n" );
      break;
 8011ae4:	bf00      	nop
   }
}
 8011ae6:	bf00      	nop
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	08016f3c 	.word	0x08016f3c
 8011af4:	08016c38 	.word	0x08016c38
 8011af8:	08016f7c 	.word	0x08016f7c
 8011afc:	08016fbc 	.word	0x08016fbc

08011b00 <ABCC_API_UserInitComplete>:
void ABCC_API_UserInitComplete()
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	af00      	add	r7, sp, #0
      appl_fUserInitPrepDone = TRUE;
 8011b04:	4b03      	ldr	r3, [pc, #12]	@ (8011b14 <ABCC_API_UserInitComplete+0x14>)
 8011b06:	2201      	movs	r2, #1
 8011b08:	601a      	str	r2, [r3, #0]
      ABCC_UserInitComplete();
 8011b0a:	f7fd f991 	bl	800ee30 <ABCC_UserInitComplete>
}
 8011b0e:	bf00      	nop
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	24003f24 	.word	0x24003f24

08011b18 <ABCC_API_RunTimerSystem>:

void ABCC_API_RunTimerSystem( const INT16 iDeltaTimeMs )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	4603      	mov	r3, r0
 8011b20:	80fb      	strh	r3, [r7, #6]
   if( appl_eAbccHandlerState > ABCC_API_WAITCOM )
 8011b22:	4b06      	ldr	r3, [pc, #24]	@ (8011b3c <ABCC_API_RunTimerSystem+0x24>)
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d904      	bls.n	8011b34 <ABCC_API_RunTimerSystem+0x1c>
   {
      ABCC_RunTimerSystem( iDeltaTimeMs );
 8011b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fa febd 	bl	800c8ae <ABCC_RunTimerSystem>
   }
}
 8011b34:	bf00      	nop
 8011b36:	3708      	adds	r7, #8
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	24003efc 	.word	0x24003efc

08011b40 <ABCC_API_Init>:

EXTFUNC ABCC_ErrorCodeType ABCC_API_Init( void )
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	af00      	add	r7, sp, #0
   return( ABCC_HwInit() );
 8011b44:	f7fa fa36 	bl	800bfb4 <ABCC_HwInit>
 8011b48:	4603      	mov	r3, r0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	bd80      	pop	{r7, pc}
	...

08011b50 <ABCC_API_Run>:

ABCC_ErrorCodeType ABCC_API_Run( void )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b086      	sub	sp, #24
 8011b54:	af04      	add	r7, sp, #16
   static ABCC_ErrorCodeType eErrorCode = ABCC_EC_NO_ERROR;
   UINT32 lStartupTimeMs;
   ABCC_CommunicationStateType eAbccComState;

   switch( appl_eAbccHandlerState )
 8011b56:	4b62      	ldr	r3, [pc, #392]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	2b05      	cmp	r3, #5
 8011b5c:	f200 80b2 	bhi.w	8011cc4 <ABCC_API_Run+0x174>
 8011b60:	a201      	add	r2, pc, #4	@ (adr r2, 8011b68 <ABCC_API_Run+0x18>)
 8011b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b66:	bf00      	nop
 8011b68:	08011b81 	.word	0x08011b81
 8011b6c:	08011c25 	.word	0x08011c25
 8011b70:	08011c25 	.word	0x08011c25
 8011b74:	08011c93 	.word	0x08011c93
 8011b78:	08011cb3 	.word	0x08011cb3
 8011b7c:	08011cc5 	.word	0x08011cc5
   {
   case ABCC_API_INIT:

      eErrorCode = ABCC_EC_NO_ERROR;
 8011b80:	4b58      	ldr	r3, [pc, #352]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011b82:	2200      	movs	r2, #0
 8011b84:	801a      	strh	r2, [r3, #0]
      appl_fMsgReceivedEvent = FALSE;
      appl_fRdPdReceivedEvent = FALSE;
      appl_fTransmitMsgEvent = FALSE;
      appl_fAbccStatusEvent = FALSE;
#endif
      appl_fUserInitPrepDone = FALSE;
 8011b86:	4b58      	ldr	r3, [pc, #352]	@ (8011ce8 <ABCC_API_Run+0x198>)
 8011b88:	2200      	movs	r2, #0
 8011b8a:	601a      	str	r2, [r3, #0]

      if( !ABCC_ModuleDetect() )
 8011b8c:	f7fa fe5e 	bl	800c84c <ABCC_ModuleDetect>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d102      	bne.n	8011b9c <ABCC_API_Run+0x4c>
      {
         eErrorCode = ABCC_EC_MODULE_NOT_DECTECTED;
 8011b96:	4b53      	ldr	r3, [pc, #332]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011b98:	220d      	movs	r2, #13
 8011b9a:	801a      	strh	r2, [r3, #0]
      }

      if( eErrorCode == ABCC_EC_NO_ERROR )
 8011b9c:	4b51      	ldr	r3, [pc, #324]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10f      	bne.n	8011bc4 <ABCC_API_Run+0x74>
      {
         /*
         ** Init application data object
         */
         if( AD_Init( ABCC_API_asAdiEntryList,
 8011ba4:	f002 ff74 	bl	8014a90 <ABCC_API_CbfGetNumAdi>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	4a50      	ldr	r2, [pc, #320]	@ (8011cec <ABCC_API_Run+0x19c>)
 8011bac:	4619      	mov	r1, r3
 8011bae:	4850      	ldr	r0, [pc, #320]	@ (8011cf0 <ABCC_API_Run+0x1a0>)
 8011bb0:	f001 fa36 	bl	8013020 <AD_Init>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d002      	beq.n	8011bc0 <ABCC_API_Run+0x70>
                      ABCC_API_CbfGetNumAdi(),
                      ABCC_API_asAdObjDefaultMap ) != ABCC_EC_NO_ERROR )
         {
            eErrorCode = ABCC_EC_INTERNAL_ERROR;
 8011bba:	4b4a      	ldr	r3, [pc, #296]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	801a      	strh	r2, [r3, #0]
         ** Init Assembly mapping object
         */
         ASM_Init();
#endif
#if ANB_FSI_OBJ_ENABLE
         ANB_FSI_Init();
 8011bc0:	f000 f9dc 	bl	8011f7c <ANB_FSI_Init>
#endif
      }

      if( eErrorCode == ABCC_EC_NO_ERROR )
 8011bc4:	4b47      	ldr	r3, [pc, #284]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d123      	bne.n	8011c14 <ABCC_API_Run+0xc4>
      {
#if APP_OBJ_ENABLE
         if( ABCC_CbfApplicationObjFirmwareAvailable_Get() == TRUE )
 8011bcc:	f002 ffe0 	bl	8014b90 <ABCC_CbfApplicationObjFirmwareAvailable_Get>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d10d      	bne.n	8011bf2 <ABCC_API_Run+0xa2>
         {
            ABCC_LOG_INFO( "Waiting for firmware update to complete.\n" );
 8011bd6:	4b47      	ldr	r3, [pc, #284]	@ (8011cf4 <ABCC_API_Run+0x1a4>)
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	f240 330a 	movw	r3, #778	@ 0x30a
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	4b45      	ldr	r3, [pc, #276]	@ (8011cf8 <ABCC_API_Run+0x1a8>)
 8011be2:	2200      	movs	r2, #0
 8011be4:	2100      	movs	r1, #0
 8011be6:	2003      	movs	r0, #3
 8011be8:	f7fb fd2e 	bl	800d648 <ABCC_LogHandler>
            lStartupTimeMs = ABCC_API_FW_UPGRADE_STARTUP_TIME_MS;
 8011bec:	4b43      	ldr	r3, [pc, #268]	@ (8011cfc <ABCC_API_Run+0x1ac>)
 8011bee:	607b      	str	r3, [r7, #4]
 8011bf0:	e001      	b.n	8011bf6 <ABCC_API_Run+0xa6>
#endif
         {
            /*
            ** Default time will be used
            */
            lStartupTimeMs = 0;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	607b      	str	r3, [r7, #4]
         }

         if( ABCC_StartDriver( lStartupTimeMs ) == ABCC_EC_NO_ERROR )
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f7fa f9e8 	bl	800bfcc <ABCC_StartDriver>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d105      	bne.n	8011c0e <ABCC_API_Run+0xbe>
         {
            ABCC_HWReleaseReset();
 8011c02:	f7fa fe35 	bl	800c870 <ABCC_HWReleaseReset>
            appl_eAbccHandlerState = ABCC_API_WAITCOM;
 8011c06:	4b36      	ldr	r3, [pc, #216]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011c08:	2201      	movs	r2, #1
 8011c0a:	701a      	strb	r2, [r3, #0]
 8011c0c:	e002      	b.n	8011c14 <ABCC_API_Run+0xc4>
         }
         else
         {
            eErrorCode = ABCC_EC_MODULE_NOT_ANSWERING;
 8011c0e:	4b35      	ldr	r3, [pc, #212]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011c10:	2228      	movs	r2, #40	@ 0x28
 8011c12:	801a      	strh	r2, [r3, #0]
         }
      }

      if( eErrorCode != ABCC_EC_NO_ERROR )
 8011c14:	4b33      	ldr	r3, [pc, #204]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011c16:	881b      	ldrh	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d055      	beq.n	8011cc8 <ABCC_API_Run+0x178>
      {
         appl_eAbccHandlerState = ABCC_API_HALT;
 8011c1c:	4b30      	ldr	r3, [pc, #192]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011c1e:	2205      	movs	r2, #5
 8011c20:	701a      	strb	r2, [r3, #0]
      }

      break;
 8011c22:	e051      	b.n	8011cc8 <ABCC_API_Run+0x178>

   case ABCC_API_WAITCOM:
   case ABCC_API_WAIT_FW_UPDATE:

      eAbccComState = ABCC_isReadyForCommunication();
 8011c24:	f7fa fc1a 	bl	800c45c <ABCC_isReadyForCommunication>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	70fb      	strb	r3, [r7, #3]

      if( eAbccComState == ABCC_READY_FOR_COMMUNICATION )
 8011c2c:	78fb      	ldrb	r3, [r7, #3]
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d103      	bne.n	8011c3a <ABCC_API_Run+0xea>
      {
         appl_eAbccHandlerState = ABCC_API_RUN;
 8011c32:	4b2b      	ldr	r3, [pc, #172]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011c34:	2203      	movs	r2, #3
 8011c36:	701a      	strb	r2, [r3, #0]
         ABCC_LOG_INFO( "ABCC did not start within the expected time. Assume firmware update is ongoing. \n" \
                           "Now waiting an additional %lu ms\n", ABCC_API_FW_UPGRADE_STARTUP_TIME_MS );
         ABCC_WaitForFwUpdate( ABCC_API_FW_UPGRADE_STARTUP_TIME_MS );
      }
#endif
      break;
 8011c38:	e048      	b.n	8011ccc <ABCC_API_Run+0x17c>
      else if( eAbccComState == ABCC_STARTUP_TIMEOUT )
 8011c3a:	78fb      	ldrb	r3, [r7, #3]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d111      	bne.n	8011c64 <ABCC_API_Run+0x114>
         appl_eAbccHandlerState = ABCC_API_HALT;
 8011c40:	4b27      	ldr	r3, [pc, #156]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011c42:	2205      	movs	r2, #5
 8011c44:	701a      	strb	r2, [r3, #0]
         eErrorCode = ABCC_EC_MODULE_NOT_ANSWERING;
 8011c46:	4b27      	ldr	r3, [pc, #156]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011c48:	2228      	movs	r2, #40	@ 0x28
 8011c4a:	801a      	strh	r2, [r3, #0]
         ABCC_LOG_ERROR( ABCC_EC_MODULE_NOT_ANSWERING, 0, "ABCC did not start within the expected time\n" );
 8011c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8011d00 <ABCC_API_Run+0x1b0>)
 8011c4e:	9301      	str	r3, [sp, #4]
 8011c50:	f240 3335 	movw	r3, #821	@ 0x335
 8011c54:	9300      	str	r3, [sp, #0]
 8011c56:	4b28      	ldr	r3, [pc, #160]	@ (8011cf8 <ABCC_API_Run+0x1a8>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	2128      	movs	r1, #40	@ 0x28
 8011c5c:	2001      	movs	r0, #1
 8011c5e:	f7fb fcf3 	bl	800d648 <ABCC_LogHandler>
      break;
 8011c62:	e033      	b.n	8011ccc <ABCC_API_Run+0x17c>
      else if( eAbccComState == ABCC_ASSUME_FW_UPDATE )
 8011c64:	78fb      	ldrb	r3, [r7, #3]
 8011c66:	2b03      	cmp	r3, #3
 8011c68:	d130      	bne.n	8011ccc <ABCC_API_Run+0x17c>
         appl_eAbccHandlerState = ABCC_API_WAIT_FW_UPDATE;
 8011c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011c6c:	2202      	movs	r2, #2
 8011c6e:	701a      	strb	r2, [r3, #0]
         ABCC_LOG_INFO( "ABCC did not start within the expected time. Assume firmware update is ongoing. \n" \
 8011c70:	4b22      	ldr	r3, [pc, #136]	@ (8011cfc <ABCC_API_Run+0x1ac>)
 8011c72:	9302      	str	r3, [sp, #8]
 8011c74:	4b23      	ldr	r3, [pc, #140]	@ (8011d04 <ABCC_API_Run+0x1b4>)
 8011c76:	9301      	str	r3, [sp, #4]
 8011c78:	f240 333b 	movw	r3, #827	@ 0x33b
 8011c7c:	9300      	str	r3, [sp, #0]
 8011c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf8 <ABCC_API_Run+0x1a8>)
 8011c80:	2200      	movs	r2, #0
 8011c82:	2100      	movs	r1, #0
 8011c84:	2003      	movs	r0, #3
 8011c86:	f7fb fcdf 	bl	800d648 <ABCC_LogHandler>
         ABCC_WaitForFwUpdate( ABCC_API_FW_UPGRADE_STARTUP_TIME_MS );
 8011c8a:	481c      	ldr	r0, [pc, #112]	@ (8011cfc <ABCC_API_Run+0x1ac>)
 8011c8c:	f7fa fbba 	bl	800c404 <ABCC_WaitForFwUpdate>
      break;
 8011c90:	e01c      	b.n	8011ccc <ABCC_API_Run+0x17c>
      }
#else
      /*
      ** Always update write process data
      */
      ABCC_TriggerWrPdUpdate();
 8011c92:	4b1d      	ldr	r3, [pc, #116]	@ (8011d08 <ABCC_API_Run+0x1b8>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4798      	blx	r3
#endif

      eErrorCode = ABCC_RunDriver();
 8011c98:	f7fa fd86 	bl	800c7a8 <ABCC_RunDriver>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	4b10      	ldr	r3, [pc, #64]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011ca2:	801a      	strh	r2, [r3, #0]

      if( eErrorCode == ABCC_EC_NO_ERROR )
 8011ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011ca6:	881b      	ldrh	r3, [r3, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d111      	bne.n	8011cd0 <ABCC_API_Run+0x180>
      {
         ABCC_API_CbfCyclicalProcessing();
 8011cac:	f002 fef8 	bl	8014aa0 <ABCC_API_CbfCyclicalProcessing>
      }

      break;
 8011cb0:	e00e      	b.n	8011cd0 <ABCC_API_Run+0x180>

   case ABCC_API_RESTART:

      ABCC_HWReset();
 8011cb2:	f7fa fd95 	bl	800c7e0 <ABCC_HWReset>
      appl_eAbccHandlerState = ABCC_API_INIT;
 8011cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8011ce0 <ABCC_API_Run+0x190>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	701a      	strb	r2, [r3, #0]
      eErrorCode = ABCC_EC_NO_ERROR;
 8011cbc:	4b09      	ldr	r3, [pc, #36]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	801a      	strh	r2, [r3, #0]
      break;
 8011cc2:	e006      	b.n	8011cd2 <ABCC_API_Run+0x182>

      break;

   default:

      break;
 8011cc4:	bf00      	nop
 8011cc6:	e004      	b.n	8011cd2 <ABCC_API_Run+0x182>
      break;
 8011cc8:	bf00      	nop
 8011cca:	e002      	b.n	8011cd2 <ABCC_API_Run+0x182>
      break;
 8011ccc:	bf00      	nop
 8011cce:	e000      	b.n	8011cd2 <ABCC_API_Run+0x182>
      break;
 8011cd0:	bf00      	nop
   }

   return( eErrorCode );
 8011cd2:	4b04      	ldr	r3, [pc, #16]	@ (8011ce4 <ABCC_API_Run+0x194>)
 8011cd4:	881b      	ldrh	r3, [r3, #0]
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	24003efc 	.word	0x24003efc
 8011ce4:	24003f28 	.word	0x24003f28
 8011ce8:	24003f24 	.word	0x24003f24
 8011cec:	08017d30 	.word	0x08017d30
 8011cf0:	08017d08 	.word	0x08017d08
 8011cf4:	08016fec 	.word	0x08016fec
 8011cf8:	08016c38 	.word	0x08016c38
 8011cfc:	0002bf20 	.word	0x0002bf20
 8011d00:	08017018 	.word	0x08017018
 8011d04:	08017048 	.word	0x08017048
 8011d08:	2400146c 	.word	0x2400146c

08011d0c <ABCC_API_Shutdown>:
   }
   appl_fSetCommSettings = TRUE;
}

void ABCC_API_Shutdown( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	af00      	add	r7, sp, #0
   ABCC_HWReset();
 8011d10:	f7fa fd66 	bl	800c7e0 <ABCC_HWReset>
}
 8011d14:	bf00      	nop
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <ABCC_API_Restart>:

void ABCC_API_Restart( void )
{
 8011d18:	b480      	push	{r7}
 8011d1a:	af00      	add	r7, sp, #0
   appl_eAbccHandlerState = ABCC_API_RESTART;
 8011d1c:	4b03      	ldr	r3, [pc, #12]	@ (8011d2c <ABCC_API_Restart+0x14>)
 8011d1e:	2204      	movs	r2, #4
 8011d20:	701a      	strb	r2, [r3, #0]
}
 8011d22:	bf00      	nop
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr
 8011d2c:	24003efc 	.word	0x24003efc

08011d30 <ABCC_API_AnbState>:

ABP_AnbStateType ABCC_API_AnbState( void )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	af00      	add	r7, sp, #0
   return( (ABP_AnbStateType)ABCC_AnbState() );
 8011d34:	f7fa fd92 	bl	800c85c <ABCC_AnbState>
 8011d38:	4603      	mov	r3, r0
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <ABCC_CbfAdiMappingReq>:
   return( ABCC_IsSupervised() );
}

UINT16  ABCC_CbfAdiMappingReq( const AD_AdiEntryType**  const ppsAdiEntry,
                               const AD_MapType** const ppsDefaultMap )
{
 8011d3e:	b580      	push	{r7, lr}
 8011d40:	b082      	sub	sp, #8
 8011d42:	af00      	add	r7, sp, #0
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	6039      	str	r1, [r7, #0]
   return( AD_AdiMappingReq( ppsAdiEntry, ppsDefaultMap ) );
 8011d48:	6839      	ldr	r1, [r7, #0]
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f002 f93a 	bl	8013fc4 <AD_AdiMappingReq>
 8011d50:	4603      	mov	r3, r0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3708      	adds	r7, #8
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <ABCC_CbfUpdateWriteProcessData>:

BOOL ABCC_CbfUpdateWriteProcessData( void* pxWritePd )
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b082      	sub	sp, #8
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
   ** AD_UpdatePdWriteData is a general function that updates all ADI:s according
   ** to current map.
   ** If the ADI mapping is fixed there is potential for doing that in a more
   ** optimized way, for example by using memcpy.
   */
   return( AD_UpdatePdWriteData( pxWritePd ) );
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f002 f914 	bl	8013f90 <AD_UpdatePdWriteData>
 8011d68:	4603      	mov	r3, r0
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}

08011d72 <ABCC_CbfRemapDone>:

#if( ABCC_CFG_REMAP_SUPPORT_ENABLED )
void ABCC_CbfRemapDone( void )
{
 8011d72:	b580      	push	{r7, lr}
 8011d74:	af00      	add	r7, sp, #0
   AD_RemapDone();
 8011d76:	f002 f965 	bl	8014044 <AD_RemapDone>
}
 8011d7a:	bf00      	nop
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <ABCC_CbfNewReadPd>:
#endif

void ABCC_CbfNewReadPd( void* pxReadPd )
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b082      	sub	sp, #8
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
   ** AD_UpdatePdReadData is a general function that updates all ADI:s according
   ** to current map.
   ** If the ADI mapping is fixed there is potential for doing that in a more
   ** optimized way, for example by using memcpy.
   */
   AD_UpdatePdReadData( pxReadPd );
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f002 f8ea 	bl	8013f60 <AD_UpdatePdReadData>
}
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <ABCC_CbfDriverError>:

void ABCC_CbfDriverError( ABCC_LogSeverityType eSeverity, ABCC_ErrorCodeType iErrorCode, UINT32 lAddInfo )
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	603a      	str	r2, [r7, #0]
 8011d9e:	71fb      	strb	r3, [r7, #7]
 8011da0:	460b      	mov	r3, r1
 8011da2:	80bb      	strh	r3, [r7, #4]
   (void)lAddInfo;

#ifdef ABCC_API_CONFIG_ERROR_EVENT_NOTIFY
   ABCC_API_CONFIG_ERROR_EVENT_NOTIFY( eSeverity, iErrorCode, lAddInfo );
#endif
}
 8011da4:	bf00      	nop
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <ABCC_CbfWdTimeout>:

void ABCC_CbfWdTimeout( void )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b084      	sub	sp, #16
 8011db4:	af04      	add	r7, sp, #16
   ABCC_LOG_WARNING( ABCC_EC_MODULE_NOT_ANSWERING, 0, "ABCC watchdog timeout\n" );
 8011db6:	4b14      	ldr	r3, [pc, #80]	@ (8011e08 <ABCC_CbfWdTimeout+0x58>)
 8011db8:	9301      	str	r3, [sp, #4]
 8011dba:	f240 4341 	movw	r3, #1089	@ 0x441
 8011dbe:	9300      	str	r3, [sp, #0]
 8011dc0:	4b12      	ldr	r3, [pc, #72]	@ (8011e0c <ABCC_CbfWdTimeout+0x5c>)
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	2128      	movs	r1, #40	@ 0x28
 8011dc6:	2002      	movs	r0, #2
 8011dc8:	f7fb fc3e 	bl	800d648 <ABCC_LogHandler>

#if ABCC_CFG_DRV_ASSUME_FW_UPDATE_ENABLED
   if( ABCC_IsFirstCommandPending() )
 8011dcc:	f7fc f916 	bl	800dffc <ABCC_IsFirstCommandPending>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d015      	beq.n	8011e02 <ABCC_CbfWdTimeout+0x52>
   {
      if( ABCC_WaitForFwUpdate( ABCC_API_FW_UPGRADE_STARTUP_TIME_MS ) )
 8011dd6:	480e      	ldr	r0, [pc, #56]	@ (8011e10 <ABCC_CbfWdTimeout+0x60>)
 8011dd8:	f7fa fb14 	bl	800c404 <ABCC_WaitForFwUpdate>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00f      	beq.n	8011e02 <ABCC_CbfWdTimeout+0x52>
      {
         appl_eAbccHandlerState = ABCC_API_WAIT_FW_UPDATE;
 8011de2:	4b0c      	ldr	r3, [pc, #48]	@ (8011e14 <ABCC_CbfWdTimeout+0x64>)
 8011de4:	2202      	movs	r2, #2
 8011de6:	701a      	strb	r2, [r3, #0]
         ABCC_LOG_INFO( "Failed to establish communication within the expected time. Assume firmware" \
 8011de8:	4b09      	ldr	r3, [pc, #36]	@ (8011e10 <ABCC_CbfWdTimeout+0x60>)
 8011dea:	9302      	str	r3, [sp, #8]
 8011dec:	4b0a      	ldr	r3, [pc, #40]	@ (8011e18 <ABCC_CbfWdTimeout+0x68>)
 8011dee:	9301      	str	r3, [sp, #4]
 8011df0:	f240 4349 	movw	r3, #1097	@ 0x449
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	4b05      	ldr	r3, [pc, #20]	@ (8011e0c <ABCC_CbfWdTimeout+0x5c>)
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	2003      	movs	r0, #3
 8011dfe:	f7fb fc23 	bl	800d648 <ABCC_LogHandler>
                        "update is ongoing. Now waiting an additional %lu ms\n", ABCC_API_FW_UPGRADE_STARTUP_TIME_MS );
      }
   }
#endif
}
 8011e02:	bf00      	nop
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	080170bc 	.word	0x080170bc
 8011e0c:	08016c38 	.word	0x08016c38
 8011e10:	0002bf20 	.word	0x0002bf20
 8011e14:	24003efc 	.word	0x24003efc
 8011e18:	080170d4 	.word	0x080170d4

08011e1c <ABCC_CbfWdTimeoutRecovered>:

void ABCC_CbfWdTimeoutRecovered( void )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af02      	add	r7, sp, #8
   ABCC_LOG_WARNING( ABCC_EC_NO_ERROR, 0, "ABCC watchdog recovered\n" );
 8011e22:	4b07      	ldr	r3, [pc, #28]	@ (8011e40 <ABCC_CbfWdTimeoutRecovered+0x24>)
 8011e24:	9301      	str	r3, [sp, #4]
 8011e26:	f240 4352 	movw	r3, #1106	@ 0x452
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	4b05      	ldr	r3, [pc, #20]	@ (8011e44 <ABCC_CbfWdTimeoutRecovered+0x28>)
 8011e2e:	2200      	movs	r2, #0
 8011e30:	2100      	movs	r1, #0
 8011e32:	2002      	movs	r0, #2
 8011e34:	f7fb fc08 	bl	800d648 <ABCC_LogHandler>
}
 8011e38:	bf00      	nop
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	08017154 	.word	0x08017154
 8011e44:	08016c38 	.word	0x08016c38

08011e48 <ABCC_CbfAnbStateChanged>:
   }
}
#endif

void ABCC_CbfAnbStateChanged( ABP_AnbStateType eNewAnbState )
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b086      	sub	sp, #24
 8011e4c:	af04      	add	r7, sp, #16
 8011e4e:	4603      	mov	r3, r0
 8011e50:	71fb      	strb	r3, [r7, #7]
      "",
      "ABP_ANB_STATE_EXCEPTION"
   };
   (void)AnbStateString[ 0 ];

   ABCC_LOG_INFO( "ANB_STATE: %s \n",
 8011e52:	79fb      	ldrb	r3, [r7, #7]
 8011e54:	4a11      	ldr	r2, [pc, #68]	@ (8011e9c <ABCC_CbfAnbStateChanged+0x54>)
 8011e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e5a:	9302      	str	r3, [sp, #8]
 8011e5c:	4b10      	ldr	r3, [pc, #64]	@ (8011ea0 <ABCC_CbfAnbStateChanged+0x58>)
 8011e5e:	9301      	str	r3, [sp, #4]
 8011e60:	f240 438e 	movw	r3, #1166	@ 0x48e
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	4b0f      	ldr	r3, [pc, #60]	@ (8011ea4 <ABCC_CbfAnbStateChanged+0x5c>)
 8011e68:	2200      	movs	r2, #0
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	2003      	movs	r0, #3
 8011e6e:	f7fb fbeb 	bl	800d648 <ABCC_LogHandler>
                     AnbStateString[ eNewAnbState ] );

   switch( eNewAnbState )
 8011e72:	79fb      	ldrb	r3, [r7, #7]
 8011e74:	2b04      	cmp	r3, #4
 8011e76:	d002      	beq.n	8011e7e <ABCC_CbfAnbStateChanged+0x36>
 8011e78:	2b07      	cmp	r3, #7
 8011e7a:	d004      	beq.n	8011e86 <ABCC_CbfAnbStateChanged+0x3e>
      ABCC_CmdSeqAdd( appl_asReadExeptionCmdSeq, NULL, NULL, NULL );
      break;

   default:

      break;
 8011e7c:	e00a      	b.n	8011e94 <ABCC_CbfAnbStateChanged+0x4c>
      ABCC_TriggerWrPdUpdate();
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ea8 <ABCC_CbfAnbStateChanged+0x60>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	4798      	blx	r3
      break;
 8011e84:	e006      	b.n	8011e94 <ABCC_CbfAnbStateChanged+0x4c>
      ABCC_CmdSeqAdd( appl_asReadExeptionCmdSeq, NULL, NULL, NULL );
 8011e86:	2300      	movs	r3, #0
 8011e88:	2200      	movs	r2, #0
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	4807      	ldr	r0, [pc, #28]	@ (8011eac <ABCC_CbfAnbStateChanged+0x64>)
 8011e8e:	f7f9 fe83 	bl	800bb98 <ABCC_CmdSeqAdd>
      break;
 8011e92:	bf00      	nop
   }

#ifdef ABCC_API_CONFIG_ANYBUS_STATE_CHANGE_NOTIFY
   ABCC_API_CONFIG_ANYBUS_STATE_CHANGE_NOTIFY( eNewAnbState );
#endif
}
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}
 8011e9c:	24000048 	.word	0x24000048
 8011ea0:	08017170 	.word	0x08017170
 8011ea4:	08016c38 	.word	0x08016c38
 8011ea8:	2400146c 	.word	0x2400146c
 8011eac:	08017cf0 	.word	0x08017cf0

08011eb0 <ABCC_CbfUserInitReq>:

void ABCC_CbfUserInitReq( void )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b082      	sub	sp, #8
 8011eb4:	af00      	add	r7, sp, #0
   UINT16 iNetworkType;
   iNetworkType = ABCC_NetworkType();
 8011eb6:	f7fc ffe7 	bl	800ee88 <ABCC_NetworkType>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	80fb      	strh	r3, [r7, #6]

   if( ( iNetworkType == ABP_NW_TYPE_DEV ) ||
 8011ebe:	88fb      	ldrh	r3, [r7, #6]
 8011ec0:	2b25      	cmp	r3, #37	@ 0x25
 8011ec2:	d01a      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
 8011ec4:	88fb      	ldrh	r3, [r7, #6]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d017      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_PDPV0 ) ||
 8011eca:	88fb      	ldrh	r3, [r7, #6]
 8011ecc:	2b05      	cmp	r3, #5
 8011ece:	d014      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_PDPV1 ) ||
 8011ed0:	88fb      	ldrh	r3, [r7, #6]
 8011ed2:	2b20      	cmp	r3, #32
 8011ed4:	d011      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_COP ) ||
 8011ed6:	88fb      	ldrh	r3, [r7, #6]
 8011ed8:	2b65      	cmp	r3, #101	@ 0x65
 8011eda:	d00e      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_CNT ) ||
 8011edc:	88fb      	ldrh	r3, [r7, #6]
 8011ede:	2b90      	cmp	r3, #144	@ 0x90
 8011ee0:	d00b      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_CCL ) ||
 8011ee2:	88fb      	ldrh	r3, [r7, #6]
 8011ee4:	2b9e      	cmp	r3, #158	@ 0x9e
 8011ee6:	d008      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_CFN ) ||
 8011ee8:	88fb      	ldrh	r3, [r7, #6]
 8011eea:	2b95      	cmp	r3, #149	@ 0x95
 8011eec:	d005      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_CPN ) ||
 8011eee:	88fb      	ldrh	r3, [r7, #6]
 8011ef0:	2b87      	cmp	r3, #135	@ 0x87
 8011ef2:	d002      	beq.n	8011efa <ABCC_CbfUserInitReq+0x4a>
       ( iNetworkType == ABP_NW_TYPE_ECT ) ||
 8011ef4:	88fb      	ldrh	r3, [r7, #6]
 8011ef6:	2b9f      	cmp	r3, #159	@ 0x9f
 8011ef8:	d106      	bne.n	8011f08 <ABCC_CbfUserInitReq+0x58>
       ( iNetworkType == ABP_NW_TYPE_EPL ) )
   {
      appl_fNwSupportsNodeId = TRUE;
 8011efa:	4b1a      	ldr	r3, [pc, #104]	@ (8011f64 <ABCC_CbfUserInitReq+0xb4>)
 8011efc:	2201      	movs	r2, #1
 8011efe:	601a      	str	r2, [r3, #0]
      appl_fNwSupportsDhcp = FALSE;
 8011f00:	4b19      	ldr	r3, [pc, #100]	@ (8011f68 <ABCC_CbfUserInitReq+0xb8>)
 8011f02:	2200      	movs	r2, #0
 8011f04:	601a      	str	r2, [r3, #0]
 8011f06:	e005      	b.n	8011f14 <ABCC_CbfUserInitReq+0x64>
   }
   else
   {
      appl_fNwSupportsNodeId = FALSE;
 8011f08:	4b16      	ldr	r3, [pc, #88]	@ (8011f64 <ABCC_CbfUserInitReq+0xb4>)
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]
      appl_fNwSupportsDhcp = TRUE;
 8011f0e:	4b16      	ldr	r3, [pc, #88]	@ (8011f68 <ABCC_CbfUserInitReq+0xb8>)
 8011f10:	2201      	movs	r2, #1
 8011f12:	601a      	str	r2, [r3, #0]
   }

   if( ( iNetworkType == ABP_NW_TYPE_DEV ) ||
 8011f14:	88fb      	ldrh	r3, [r7, #6]
 8011f16:	2b25      	cmp	r3, #37	@ 0x25
 8011f18:	d005      	beq.n	8011f26 <ABCC_CbfUserInitReq+0x76>
 8011f1a:	88fb      	ldrh	r3, [r7, #6]
 8011f1c:	2b20      	cmp	r3, #32
 8011f1e:	d002      	beq.n	8011f26 <ABCC_CbfUserInitReq+0x76>
       ( iNetworkType == ABP_NW_TYPE_COP ) ||
 8011f20:	88fb      	ldrh	r3, [r7, #6]
 8011f22:	2b90      	cmp	r3, #144	@ 0x90
 8011f24:	d103      	bne.n	8011f2e <ABCC_CbfUserInitReq+0x7e>
       ( iNetworkType == ABP_NW_TYPE_CCL ) )
   {
      appl_fNwSupportsBaudRate = TRUE;
 8011f26:	4b11      	ldr	r3, [pc, #68]	@ (8011f6c <ABCC_CbfUserInitReq+0xbc>)
 8011f28:	2201      	movs	r2, #1
 8011f2a:	601a      	str	r2, [r3, #0]
 8011f2c:	e002      	b.n	8011f34 <ABCC_CbfUserInitReq+0x84>
   }
   else
   {
      appl_fNwSupportsBaudRate = FALSE;
 8011f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8011f6c <ABCC_CbfUserInitReq+0xbc>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	601a      	str	r2, [r3, #0]
   }

   if( iNetworkType == ABP_NW_TYPE_CIET )
 8011f34:	88fb      	ldrh	r3, [r7, #6]
 8011f36:	2bb2      	cmp	r3, #178	@ 0xb2
 8011f38:	d106      	bne.n	8011f48 <ABCC_CbfUserInitReq+0x98>
   {
      appl_fNwSupportsCommSettings = TRUE;
 8011f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8011f70 <ABCC_CbfUserInitReq+0xc0>)
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	601a      	str	r2, [r3, #0]
      appl_fNwSupportsDhcp = FALSE;
 8011f40:	4b09      	ldr	r3, [pc, #36]	@ (8011f68 <ABCC_CbfUserInitReq+0xb8>)
 8011f42:	2200      	movs	r2, #0
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	e002      	b.n	8011f4e <ABCC_CbfUserInitReq+0x9e>
   }
   else
   {
      appl_fNwSupportsCommSettings = FALSE;
 8011f48:	4b09      	ldr	r3, [pc, #36]	@ (8011f70 <ABCC_CbfUserInitReq+0xc0>)
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	601a      	str	r2, [r3, #0]
   }

   /*
   ** Start user init preparation command sequence
   */
   ABCC_CmdSeqAdd( appl_asUserInitPrepCmdSeq, UserInitPrepDone, NULL, NULL );
 8011f4e:	2300      	movs	r3, #0
 8011f50:	2200      	movs	r2, #0
 8011f52:	4908      	ldr	r1, [pc, #32]	@ (8011f74 <ABCC_CbfUserInitReq+0xc4>)
 8011f54:	4808      	ldr	r0, [pc, #32]	@ (8011f78 <ABCC_CbfUserInitReq+0xc8>)
 8011f56:	f7f9 fe1f 	bl	800bb98 <ABCC_CmdSeqAdd>

}
 8011f5a:	bf00      	nop
 8011f5c:	3708      	adds	r7, #8
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	24003f14 	.word	0x24003f14
 8011f68:	24003f1c 	.word	0x24003f1c
 8011f6c:	24003f18 	.word	0x24003f18
 8011f70:	24003f20 	.word	0x24003f20
 8011f74:	08011a55 	.word	0x08011a55
 8011f78:	08017ca8 	.word	0x08017ca8

08011f7c <ANB_FSI_Init>:
** Public Services
********************************************************************************
*/

void ANB_FSI_Init( void )
{
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
   int xIndex;

   for( xIndex = 0; xIndex < ANB_FSI_MAX_CONCURRENT_OPERATIONS; xIndex++ )
 8011f82:	2300      	movs	r3, #0
 8011f84:	607b      	str	r3, [r7, #4]
 8011f86:	e01f      	b.n	8011fc8 <ANB_FSI_Init+0x4c>
   {
      anb_fsi_TransactionList[ xIndex ].fInUse = FALSE;
 8011f88:	4914      	ldr	r1, [pc, #80]	@ (8011fdc <ANB_FSI_Init+0x60>)
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	4413      	add	r3, r2
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	440b      	add	r3, r1
 8011f96:	2200      	movs	r2, #0
 8011f98:	601a      	str	r2, [r3, #0]
      anb_fsi_TransactionList[ xIndex ].bSrcId = 0;
 8011f9a:	4910      	ldr	r1, [pc, #64]	@ (8011fdc <ANB_FSI_Init+0x60>)
 8011f9c:	687a      	ldr	r2, [r7, #4]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	3304      	adds	r3, #4
 8011faa:	2200      	movs	r2, #0
 8011fac:	701a      	strb	r2, [r3, #0]
      anb_fsi_TransactionList[ xIndex ].pnCallback = NULL;
 8011fae:	490b      	ldr	r1, [pc, #44]	@ (8011fdc <ANB_FSI_Init+0x60>)
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	4613      	mov	r3, r2
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	4413      	add	r3, r2
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	440b      	add	r3, r1
 8011fbc:	3308      	adds	r3, #8
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	601a      	str	r2, [r3, #0]
   for( xIndex = 0; xIndex < ANB_FSI_MAX_CONCURRENT_OPERATIONS; xIndex++ )
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	607b      	str	r3, [r7, #4]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b03      	cmp	r3, #3
 8011fcc:	dddc      	ble.n	8011f88 <ANB_FSI_Init+0xc>
   }

   return;
 8011fce:	bf00      	nop
}
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr
 8011fda:	bf00      	nop
 8011fdc:	24003f2c 	.word	0x24003f2c

08011fe0 <Copy16WithEndianSwap>:
**------------------------------------------------------------------------------
*/
static void Copy16WithEndianSwap( void* pxDest, UINT16 iDestOctetOffset,
                                  const void* pxSrc, UINT16 iSrcOctetOffset,
                                  UINT16 iNumElem )
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	607a      	str	r2, [r7, #4]
 8011fea:	461a      	mov	r2, r3
 8011fec:	460b      	mov	r3, r1
 8011fee:	817b      	strh	r3, [r7, #10]
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	813b      	strh	r3, [r7, #8]
   UINT16 i;
   UINT16 iConv;

   for( i = 0; i < iNumElem; i++ )
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	82fb      	strh	r3, [r7, #22]
 8011ff8:	e021      	b.n	801203e <Copy16WithEndianSwap+0x5e>
   {
      ABCC_PORT_Copy16( &iConv, 0, pxSrc, iSrcOctetOffset + ( i << 1 ) );
 8011ffa:	893a      	ldrh	r2, [r7, #8]
 8011ffc:	8afb      	ldrh	r3, [r7, #22]
 8011ffe:	005b      	lsls	r3, r3, #1
 8012000:	4413      	add	r3, r2
 8012002:	461a      	mov	r2, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	4413      	add	r3, r2
 8012008:	881b      	ldrh	r3, [r3, #0]
 801200a:	b29b      	uxth	r3, r3
 801200c:	82bb      	strh	r3, [r7, #20]
      iConv = ABCC_iEndianSwap( iConv );
 801200e:	8abb      	ldrh	r3, [r7, #20]
 8012010:	0a1b      	lsrs	r3, r3, #8
 8012012:	b29b      	uxth	r3, r3
 8012014:	b21a      	sxth	r2, r3
 8012016:	8abb      	ldrh	r3, [r7, #20]
 8012018:	b21b      	sxth	r3, r3
 801201a:	021b      	lsls	r3, r3, #8
 801201c:	b21b      	sxth	r3, r3
 801201e:	4313      	orrs	r3, r2
 8012020:	b21b      	sxth	r3, r3
 8012022:	b29b      	uxth	r3, r3
 8012024:	82bb      	strh	r3, [r7, #20]
      ABCC_PORT_Copy16( pxDest, iDestOctetOffset + ( i << 1 ), &iConv, 0 );
 8012026:	897a      	ldrh	r2, [r7, #10]
 8012028:	8afb      	ldrh	r3, [r7, #22]
 801202a:	005b      	lsls	r3, r3, #1
 801202c:	4413      	add	r3, r2
 801202e:	461a      	mov	r2, r3
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	4413      	add	r3, r2
 8012034:	8aba      	ldrh	r2, [r7, #20]
 8012036:	801a      	strh	r2, [r3, #0]
   for( i = 0; i < iNumElem; i++ )
 8012038:	8afb      	ldrh	r3, [r7, #22]
 801203a:	3301      	adds	r3, #1
 801203c:	82fb      	strh	r3, [r7, #22]
 801203e:	8afa      	ldrh	r2, [r7, #22]
 8012040:	8c3b      	ldrh	r3, [r7, #32]
 8012042:	429a      	cmp	r2, r3
 8012044:	d3d9      	bcc.n	8011ffa <Copy16WithEndianSwap+0x1a>
   }
}
 8012046:	bf00      	nop
 8012048:	bf00      	nop
 801204a:	371c      	adds	r7, #28
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <Copy32WithEndianSwap>:
**------------------------------------------------------------------------------
*/
static void Copy32WithEndianSwap( void* pxDest, UINT16 iDestOctetOffset,
                                  const void* pxSrc, UINT16 iSrcOctetOffset,
                                  UINT16 iNumElem )
{
 8012054:	b480      	push	{r7}
 8012056:	b087      	sub	sp, #28
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	607a      	str	r2, [r7, #4]
 801205e:	461a      	mov	r2, r3
 8012060:	460b      	mov	r3, r1
 8012062:	817b      	strh	r3, [r7, #10]
 8012064:	4613      	mov	r3, r2
 8012066:	813b      	strh	r3, [r7, #8]
   UINT16 i;
   UINT32 lConv;

   for( i = 0; i < iNumElem; i++ )
 8012068:	2300      	movs	r3, #0
 801206a:	82fb      	strh	r3, [r7, #22]
 801206c:	e031      	b.n	80120d2 <Copy32WithEndianSwap+0x7e>
   {
      ABCC_PORT_Copy32( &lConv, 0, pxSrc, iSrcOctetOffset + ( i << 2 ) );
 801206e:	893a      	ldrh	r2, [r7, #8]
 8012070:	8afb      	ldrh	r3, [r7, #22]
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	4413      	add	r3, r2
 8012076:	461a      	mov	r2, r3
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	4413      	add	r3, r2
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	613b      	str	r3, [r7, #16]
      lConv = ABCC_lEndianSwap( lConv );
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	b29b      	uxth	r3, r3
 8012084:	0a1b      	lsrs	r3, r3, #8
 8012086:	b29b      	uxth	r3, r3
 8012088:	b21a      	sxth	r2, r3
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	b21b      	sxth	r3, r3
 801208e:	021b      	lsls	r3, r3, #8
 8012090:	b21b      	sxth	r3, r3
 8012092:	4313      	orrs	r3, r2
 8012094:	b21b      	sxth	r3, r3
 8012096:	b29b      	uxth	r3, r3
 8012098:	041b      	lsls	r3, r3, #16
 801209a:	693a      	ldr	r2, [r7, #16]
 801209c:	0c12      	lsrs	r2, r2, #16
 801209e:	b292      	uxth	r2, r2
 80120a0:	0a12      	lsrs	r2, r2, #8
 80120a2:	b292      	uxth	r2, r2
 80120a4:	b211      	sxth	r1, r2
 80120a6:	693a      	ldr	r2, [r7, #16]
 80120a8:	0c12      	lsrs	r2, r2, #16
 80120aa:	b212      	sxth	r2, r2
 80120ac:	0212      	lsls	r2, r2, #8
 80120ae:	b212      	sxth	r2, r2
 80120b0:	430a      	orrs	r2, r1
 80120b2:	b212      	sxth	r2, r2
 80120b4:	b292      	uxth	r2, r2
 80120b6:	4313      	orrs	r3, r2
 80120b8:	613b      	str	r3, [r7, #16]
      ABCC_PORT_Copy32( pxDest, iDestOctetOffset + ( i << 2 ), &lConv, 0 );
 80120ba:	897a      	ldrh	r2, [r7, #10]
 80120bc:	8afb      	ldrh	r3, [r7, #22]
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	461a      	mov	r2, r3
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	4413      	add	r3, r2
 80120c8:	693a      	ldr	r2, [r7, #16]
 80120ca:	601a      	str	r2, [r3, #0]
   for( i = 0; i < iNumElem; i++ )
 80120cc:	8afb      	ldrh	r3, [r7, #22]
 80120ce:	3301      	adds	r3, #1
 80120d0:	82fb      	strh	r3, [r7, #22]
 80120d2:	8afa      	ldrh	r2, [r7, #22]
 80120d4:	8c3b      	ldrh	r3, [r7, #32]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d3c9      	bcc.n	801206e <Copy32WithEndianSwap+0x1a>
   }
}
 80120da:	bf00      	nop
 80120dc:	bf00      	nop
 80120de:	371c      	adds	r7, #28
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr

080120e8 <Copy64WithEndianSwap>:
*/
#if( ABCC_CFG_64BIT_ADI_SUPPORT_ENABLED || ABCC_CFG_DOUBLE_ADI_SUPPORT_ENABLED )
static void Copy64WithEndianSwap( void* pxDest, UINT16 iDestOctetOffset,
                                  const void* pxSrc, UINT16 iSrcOctetOffset,
                                  UINT16 iNumElem )
{
 80120e8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80120ec:	b08c      	sub	sp, #48	@ 0x30
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	61f8      	str	r0, [r7, #28]
 80120f2:	617a      	str	r2, [r7, #20]
 80120f4:	461a      	mov	r2, r3
 80120f6:	460b      	mov	r3, r1
 80120f8:	837b      	strh	r3, [r7, #26]
 80120fa:	4613      	mov	r3, r2
 80120fc:	833b      	strh	r3, [r7, #24]
   UINT16 i;
   UINT64 lConv;

   for( i = 0; i < iNumElem; i++ )
 80120fe:	2300      	movs	r3, #0
 8012100:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012102:	e08d      	b.n	8012220 <Copy64WithEndianSwap+0x138>
   {
      ABCC_PORT_Copy64( &lConv, 0, pxSrc, iSrcOctetOffset + ( i << 3 ) );
 8012104:	8b3a      	ldrh	r2, [r7, #24]
 8012106:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	4413      	add	r3, r2
 801210c:	461a      	mov	r2, r3
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	4413      	add	r3, r2
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	603a      	str	r2, [r7, #0]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	607b      	str	r3, [r7, #4]
 801211a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801211e:	e9c7 2308 	strd	r2, r3, [r7, #32]
      lConv = ABCC_l64EndianSwap( lConv );
 8012122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012126:	b293      	uxth	r3, r2
 8012128:	0a1b      	lsrs	r3, r3, #8
 801212a:	b29b      	uxth	r3, r3
 801212c:	b219      	sxth	r1, r3
 801212e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012132:	b213      	sxth	r3, r2
 8012134:	021b      	lsls	r3, r3, #8
 8012136:	b21b      	sxth	r3, r3
 8012138:	430b      	orrs	r3, r1
 801213a:	b21b      	sxth	r3, r3
 801213c:	b29b      	uxth	r3, r3
 801213e:	0419      	lsls	r1, r3, #16
 8012140:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012144:	4613      	mov	r3, r2
 8012146:	0c1b      	lsrs	r3, r3, #16
 8012148:	b29b      	uxth	r3, r3
 801214a:	0a1b      	lsrs	r3, r3, #8
 801214c:	b29b      	uxth	r3, r3
 801214e:	b218      	sxth	r0, r3
 8012150:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012154:	4613      	mov	r3, r2
 8012156:	0c1b      	lsrs	r3, r3, #16
 8012158:	b21b      	sxth	r3, r3
 801215a:	021b      	lsls	r3, r3, #8
 801215c:	b21b      	sxth	r3, r3
 801215e:	4303      	orrs	r3, r0
 8012160:	b21b      	sxth	r3, r3
 8012162:	b29b      	uxth	r3, r3
 8012164:	430b      	orrs	r3, r1
 8012166:	2200      	movs	r2, #0
 8012168:	60bb      	str	r3, [r7, #8]
 801216a:	60fa      	str	r2, [r7, #12]
 801216c:	f04f 0400 	mov.w	r4, #0
 8012170:	f04f 0500 	mov.w	r5, #0
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	001d      	movs	r5, r3
 8012178:	2400      	movs	r4, #0
 801217a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801217e:	f04f 0200 	mov.w	r2, #0
 8012182:	f04f 0300 	mov.w	r3, #0
 8012186:	000a      	movs	r2, r1
 8012188:	2300      	movs	r3, #0
 801218a:	b293      	uxth	r3, r2
 801218c:	0a1b      	lsrs	r3, r3, #8
 801218e:	b29b      	uxth	r3, r3
 8012190:	b21e      	sxth	r6, r3
 8012192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012196:	f04f 0000 	mov.w	r0, #0
 801219a:	f04f 0100 	mov.w	r1, #0
 801219e:	0018      	movs	r0, r3
 80121a0:	2100      	movs	r1, #0
 80121a2:	b203      	sxth	r3, r0
 80121a4:	021b      	lsls	r3, r3, #8
 80121a6:	b21b      	sxth	r3, r3
 80121a8:	4333      	orrs	r3, r6
 80121aa:	b21b      	sxth	r3, r3
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80121b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80121b6:	f04f 0000 	mov.w	r0, #0
 80121ba:	f04f 0100 	mov.w	r1, #0
 80121be:	0018      	movs	r0, r3
 80121c0:	2100      	movs	r1, #0
 80121c2:	4603      	mov	r3, r0
 80121c4:	0c1b      	lsrs	r3, r3, #16
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	0a1b      	lsrs	r3, r3, #8
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	b21e      	sxth	r6, r3
 80121ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80121d2:	f04f 0000 	mov.w	r0, #0
 80121d6:	f04f 0100 	mov.w	r1, #0
 80121da:	0018      	movs	r0, r3
 80121dc:	2100      	movs	r1, #0
 80121de:	4603      	mov	r3, r0
 80121e0:	0c1b      	lsrs	r3, r3, #16
 80121e2:	b21b      	sxth	r3, r3
 80121e4:	021b      	lsls	r3, r3, #8
 80121e6:	b21b      	sxth	r3, r3
 80121e8:	4333      	orrs	r3, r6
 80121ea:	b21b      	sxth	r3, r3
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	ea4c 0303 	orr.w	r3, ip, r3
 80121f2:	2200      	movs	r2, #0
 80121f4:	4698      	mov	r8, r3
 80121f6:	4691      	mov	r9, r2
 80121f8:	ea44 0a08 	orr.w	sl, r4, r8
 80121fc:	ea45 0b09 	orr.w	fp, r5, r9
 8012200:	e9c7 ab08 	strd	sl, fp, [r7, #32]
      ABCC_PORT_Copy64( pxDest, iDestOctetOffset + ( i << 3 ), &lConv, 0 );
 8012204:	8b7a      	ldrh	r2, [r7, #26]
 8012206:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012208:	00db      	lsls	r3, r3, #3
 801220a:	4413      	add	r3, r2
 801220c:	461a      	mov	r2, r3
 801220e:	69fb      	ldr	r3, [r7, #28]
 8012210:	1899      	adds	r1, r3, r2
 8012212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012216:	600a      	str	r2, [r1, #0]
 8012218:	604b      	str	r3, [r1, #4]
   for( i = 0; i < iNumElem; i++ )
 801221a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801221c:	3301      	adds	r3, #1
 801221e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8012220:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8012226:	429a      	cmp	r2, r3
 8012228:	f4ff af6c 	bcc.w	8012104 <Copy64WithEndianSwap+0x1c>
   }
}
 801222c:	bf00      	nop
 801222e:	bf00      	nop
 8012230:	3730      	adds	r7, #48	@ 0x30
 8012232:	46bd      	mov	sp, r7
 8012234:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012238:	4770      	bx	lr

0801223a <GetAdiSizeInBits>:
**------------------------------------------------------------------------------
*/
static UINT16 GetAdiSizeInBits( const AD_AdiEntryType* psAdiEntry,
                                UINT8 bNumElem,
                                UINT8 bElemStartIndex )
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b084      	sub	sp, #16
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
 8012242:	460b      	mov	r3, r1
 8012244:	70fb      	strb	r3, [r7, #3]
 8012246:	4613      	mov	r3, r2
 8012248:	70bb      	strb	r3, [r7, #2]
   {
      iSize = ABCC_GetDataTypeSizeInBits( psAdiEntry->bDataType ) * bNumElem;
   }
#else
      (void)bElemStartIndex;
      iSize = ABCC_GetDataTypeSizeInBits( psAdiEntry->bDataType ) * bNumElem;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	7a1b      	ldrb	r3, [r3, #8]
 801224e:	4618      	mov	r0, r3
 8012250:	f7fa fcde 	bl	800cc10 <ABCC_GetDataTypeSizeInBits>
 8012254:	4603      	mov	r3, r0
 8012256:	461a      	mov	r2, r3
 8012258:	78fb      	ldrb	r3, [r7, #3]
 801225a:	b29b      	uxth	r3, r3
 801225c:	fb12 f303 	smulbb	r3, r2, r3
 8012260:	81fb      	strh	r3, [r7, #14]
#endif

   return( iSize );
 8012262:	89fb      	ldrh	r3, [r7, #14]
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <GetAdiSizeInOctets>:
** Returns:
**    Size in octets.
**------------------------------------------------------------------------------
*/
static UINT16 GetAdiSizeInOctets( const AD_AdiEntryType* psAdiEntry )
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
   UINT16 iSize;

   iSize = GetAdiSizeInBits( psAdiEntry, psAdiEntry->bNumOfElements, 0 );
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	7a5b      	ldrb	r3, [r3, #9]
 8012278:	2200      	movs	r2, #0
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f7ff ffdc 	bl	801223a <GetAdiSizeInBits>
 8012282:	4603      	mov	r3, r0
 8012284:	81fb      	strh	r3, [r7, #14]
   iSize = ( iSize + 7 ) / 8;
 8012286:	89fb      	ldrh	r3, [r7, #14]
 8012288:	3307      	adds	r3, #7
 801228a:	2b00      	cmp	r3, #0
 801228c:	da00      	bge.n	8012290 <GetAdiSizeInOctets+0x24>
 801228e:	3307      	adds	r3, #7
 8012290:	10db      	asrs	r3, r3, #3
 8012292:	81fb      	strh	r3, [r7, #14]

   return( iSize );
 8012294:	89fb      	ldrh	r3, [r7, #14]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3710      	adds	r7, #16
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
	...

080122a0 <UpdateMapSize>:
** Returns:
**    None.
**------------------------------------------------------------------------------
*/
static void UpdateMapSize( ad_MapInfoType* psMap )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b088      	sub	sp, #32
 80122a4:	af04      	add	r7, sp, #16
 80122a6:	6078      	str	r0, [r7, #4]
   UINT16 iMapIndex;
   UINT16 iAdiIndex;

   psMap->iPdSize = 0;
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2200      	movs	r2, #0
 80122ac:	811a      	strh	r2, [r3, #8]
   for( iMapIndex = 0; iMapIndex < psMap->iNumMappedAdi; iMapIndex++ )
 80122ae:	2300      	movs	r3, #0
 80122b0:	81fb      	strh	r3, [r7, #14]
 80122b2:	e04c      	b.n	801234e <UpdateMapSize+0xae>
   {
      iAdiIndex = psMap->paiMappedAdiList[ iMapIndex ].iAdiIndex;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681a      	ldr	r2, [r3, #0]
 80122b8:	89fb      	ldrh	r3, [r7, #14]
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4413      	add	r3, r2
 80122be:	881b      	ldrh	r3, [r3, #0]
 80122c0:	81bb      	strh	r3, [r7, #12]

      if( iAdiIndex != AD_MAP_PAD_INDEX )
 80122c2:	89bb      	ldrh	r3, [r7, #12]
 80122c4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80122c8:	4293      	cmp	r3, r2
 80122ca:	d031      	beq.n	8012330 <UpdateMapSize+0x90>
      {
         if( iAdiIndex >= ad_iNumOfADIs )
 80122cc:	4b29      	ldr	r3, [pc, #164]	@ (8012374 <UpdateMapSize+0xd4>)
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	89ba      	ldrh	r2, [r7, #12]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d30c      	bcc.n	80122f0 <UpdateMapSize+0x50>
         {
            /*
            ** Pull the plug! The data in these tables should already have
            ** been checked and should be OK!
            */
            ABCC_LOG_FATAL( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 80122d6:	89ba      	ldrh	r2, [r7, #12]
 80122d8:	89bb      	ldrh	r3, [r7, #12]
 80122da:	9302      	str	r3, [sp, #8]
 80122dc:	4b26      	ldr	r3, [pc, #152]	@ (8012378 <UpdateMapSize+0xd8>)
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80122e4:	9300      	str	r3, [sp, #0]
 80122e6:	4b25      	ldr	r3, [pc, #148]	@ (801237c <UpdateMapSize+0xdc>)
 80122e8:	2121      	movs	r1, #33	@ 0x21
 80122ea:	2000      	movs	r0, #0
 80122ec:	f7fb f9ac 	bl	800d648 <ABCC_LogHandler>
               "Error in PD map configuration, ADI index out of range (%" PRIu16 ")\n",
               iAdiIndex );
         }

         psMap->iPdSize +=
            GetAdiSizeInBits( &ad_asADIEntryList[ iAdiIndex ],
 80122f0:	4b23      	ldr	r3, [pc, #140]	@ (8012380 <UpdateMapSize+0xe0>)
 80122f2:	6819      	ldr	r1, [r3, #0]
 80122f4:	89ba      	ldrh	r2, [r7, #12]
 80122f6:	4613      	mov	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	4413      	add	r3, r2
 80122fc:	009b      	lsls	r3, r3, #2
 80122fe:	18c8      	adds	r0, r1, r3
                                 psMap->paiMappedAdiList[ iMapIndex ].bNumElements,
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	89fb      	ldrh	r3, [r7, #14]
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	4413      	add	r3, r2
            GetAdiSizeInBits( &ad_asADIEntryList[ iAdiIndex ],
 801230a:	7899      	ldrb	r1, [r3, #2]
                                 psMap->paiMappedAdiList[ iMapIndex ].bStartIndex );
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	89fb      	ldrh	r3, [r7, #14]
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	4413      	add	r3, r2
            GetAdiSizeInBits( &ad_asADIEntryList[ iAdiIndex ],
 8012316:	78db      	ldrb	r3, [r3, #3]
 8012318:	461a      	mov	r2, r3
 801231a:	f7ff ff8e 	bl	801223a <GetAdiSizeInBits>
 801231e:	4603      	mov	r3, r0
 8012320:	461a      	mov	r2, r3
         psMap->iPdSize +=
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	891b      	ldrh	r3, [r3, #8]
 8012326:	4413      	add	r3, r2
 8012328:	b29a      	uxth	r2, r3
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	811a      	strh	r2, [r3, #8]
 801232e:	e00b      	b.n	8012348 <UpdateMapSize+0xa8>
      }
      else
      {
         psMap->iPdSize += psMap->paiMappedAdiList[ iMapIndex ].bNumElements;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	891b      	ldrh	r3, [r3, #8]
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	6811      	ldr	r1, [r2, #0]
 8012338:	89fa      	ldrh	r2, [r7, #14]
 801233a:	0092      	lsls	r2, r2, #2
 801233c:	440a      	add	r2, r1
 801233e:	7892      	ldrb	r2, [r2, #2]
 8012340:	4413      	add	r3, r2
 8012342:	b29a      	uxth	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	811a      	strh	r2, [r3, #8]
   for( iMapIndex = 0; iMapIndex < psMap->iNumMappedAdi; iMapIndex++ )
 8012348:	89fb      	ldrh	r3, [r7, #14]
 801234a:	3301      	adds	r3, #1
 801234c:	81fb      	strh	r3, [r7, #14]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	889b      	ldrh	r3, [r3, #4]
 8012352:	89fa      	ldrh	r2, [r7, #14]
 8012354:	429a      	cmp	r2, r3
 8012356:	d3ad      	bcc.n	80122b4 <UpdateMapSize+0x14>
      }
   }
   psMap->iPdSize = SizeInOctets( 0, psMap->iPdSize );
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	891b      	ldrh	r3, [r3, #8]
 801235c:	3307      	adds	r3, #7
 801235e:	2b00      	cmp	r3, #0
 8012360:	da00      	bge.n	8012364 <UpdateMapSize+0xc4>
 8012362:	3307      	adds	r3, #7
 8012364:	10db      	asrs	r3, r3, #3
 8012366:	b29a      	uxth	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	811a      	strh	r2, [r3, #8]
}
 801236c:	bf00      	nop
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	24003f88 	.word	0x24003f88
 8012378:	08017248 	.word	0x08017248
 801237c:	0801722c 	.word	0x0801722c
 8012380:	24003f84 	.word	0x24003f84

08012384 <GetAdiIndex>:
**    0 - 0xfffe                - Index in ADI entry table.
**    AD_INVALID_ADI_INDEX      - Instance was not found.
**------------------------------------------------------------------------------
*/
static UINT16 GetAdiIndex( UINT16 iInstance )
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	4603      	mov	r3, r0
 801238c:	80fb      	strh	r3, [r7, #6]
   UINT16   iLow;
   UINT16   iMid;
   UINT16   iHigh;

   if( iInstance == 0 )
 801238e:	88fb      	ldrh	r3, [r7, #6]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d102      	bne.n	801239a <GetAdiIndex+0x16>
   {
      return( AD_MAP_PAD_INDEX );
 8012394:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8012398:	e03f      	b.n	801241a <GetAdiIndex+0x96>
   }

   if( ad_iNumOfADIs == 0 )
 801239a:	4b23      	ldr	r3, [pc, #140]	@ (8012428 <GetAdiIndex+0xa4>)
 801239c:	881b      	ldrh	r3, [r3, #0]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d102      	bne.n	80123a8 <GetAdiIndex+0x24>
   {
      return( AD_INVALID_ADI_INDEX );
 80123a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80123a6:	e038      	b.n	801241a <GetAdiIndex+0x96>
   }

   iLow = 0;
 80123a8:	2300      	movs	r3, #0
 80123aa:	81fb      	strh	r3, [r7, #14]
   iHigh = ad_iNumOfADIs - 1;
 80123ac:	4b1e      	ldr	r3, [pc, #120]	@ (8012428 <GetAdiIndex+0xa4>)
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	3b01      	subs	r3, #1
 80123b2:	81bb      	strh	r3, [r7, #12]

   while( iLow != iHigh )
 80123b4:	e01d      	b.n	80123f2 <GetAdiIndex+0x6e>
   {
      iMid = iLow + ( ( iHigh - iLow + 1 ) / 2 );
 80123b6:	89ba      	ldrh	r2, [r7, #12]
 80123b8:	89fb      	ldrh	r3, [r7, #14]
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	3301      	adds	r3, #1
 80123be:	2b00      	cmp	r3, #0
 80123c0:	da00      	bge.n	80123c4 <GetAdiIndex+0x40>
 80123c2:	3301      	adds	r3, #1
 80123c4:	105b      	asrs	r3, r3, #1
 80123c6:	b29a      	uxth	r2, r3
 80123c8:	89fb      	ldrh	r3, [r7, #14]
 80123ca:	4413      	add	r3, r2
 80123cc:	817b      	strh	r3, [r7, #10]
      if( ad_asADIEntryList[ iMid ].iInstance > iInstance )
 80123ce:	4b17      	ldr	r3, [pc, #92]	@ (801242c <GetAdiIndex+0xa8>)
 80123d0:	6819      	ldr	r1, [r3, #0]
 80123d2:	897a      	ldrh	r2, [r7, #10]
 80123d4:	4613      	mov	r3, r2
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	4413      	add	r3, r2
 80123da:	009b      	lsls	r3, r3, #2
 80123dc:	440b      	add	r3, r1
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	88fa      	ldrh	r2, [r7, #6]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d203      	bcs.n	80123ee <GetAdiIndex+0x6a>
      {
         iHigh = iMid - 1;
 80123e6:	897b      	ldrh	r3, [r7, #10]
 80123e8:	3b01      	subs	r3, #1
 80123ea:	81bb      	strh	r3, [r7, #12]
 80123ec:	e001      	b.n	80123f2 <GetAdiIndex+0x6e>
      }
      else
      {
         iLow = iMid;
 80123ee:	897b      	ldrh	r3, [r7, #10]
 80123f0:	81fb      	strh	r3, [r7, #14]
   while( iLow != iHigh )
 80123f2:	89fa      	ldrh	r2, [r7, #14]
 80123f4:	89bb      	ldrh	r3, [r7, #12]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d1dd      	bne.n	80123b6 <GetAdiIndex+0x32>
      }
   }

   if( ad_asADIEntryList[ iLow ].iInstance != iInstance )
 80123fa:	4b0c      	ldr	r3, [pc, #48]	@ (801242c <GetAdiIndex+0xa8>)
 80123fc:	6819      	ldr	r1, [r3, #0]
 80123fe:	89fa      	ldrh	r2, [r7, #14]
 8012400:	4613      	mov	r3, r2
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	4413      	add	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	440b      	add	r3, r1
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	88fa      	ldrh	r2, [r7, #6]
 801240e:	429a      	cmp	r2, r3
 8012410:	d002      	beq.n	8012418 <GetAdiIndex+0x94>
   {
      iLow = AD_INVALID_ADI_INDEX;
 8012412:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012416:	81fb      	strh	r3, [r7, #14]
   }

   return( iLow );
 8012418:	89fb      	ldrh	r3, [r7, #14]
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	24003f88 	.word	0x24003f88
 801242c:	24003f84 	.word	0x24003f84

08012430 <IsElementRemapAllowed>:
** Returns:
**    TRUE if the ADI/element is mappable in the indicated direction.
**------------------------------------------------------------------------------
*/
static BOOL IsElementRemapAllowed( UINT8 bDataType, UINT8 bCmd, UINT8 bDesc )
{
 8012430:	b480      	push	{r7}
 8012432:	b083      	sub	sp, #12
 8012434:	af00      	add	r7, sp, #0
 8012436:	4603      	mov	r3, r0
 8012438:	71fb      	strb	r3, [r7, #7]
 801243a:	460b      	mov	r3, r1
 801243c:	71bb      	strb	r3, [r7, #6]
 801243e:	4613      	mov	r3, r2
 8012440:	717b      	strb	r3, [r7, #5]
   /*
   ** PADx is allowed, there does not have to be any valid descriptor to check.
   */
   if( ABP_Is_PADx( bDataType ) )
 8012442:	79fb      	ldrb	r3, [r7, #7]
 8012444:	2b1f      	cmp	r3, #31
 8012446:	d904      	bls.n	8012452 <IsElementRemapAllowed+0x22>
 8012448:	79fb      	ldrb	r3, [r7, #7]
 801244a:	2b30      	cmp	r3, #48	@ 0x30
 801244c:	d801      	bhi.n	8012452 <IsElementRemapAllowed+0x22>
   {
      return( TRUE );
 801244e:	2301      	movs	r3, #1
 8012450:	e012      	b.n	8012478 <IsElementRemapAllowed+0x48>
   }

   if( ( ( bCmd == ABP_APPD_REMAP_ADI_WRITE_AREA ) &&
 8012452:	79bb      	ldrb	r3, [r7, #6]
 8012454:	2b13      	cmp	r3, #19
 8012456:	d104      	bne.n	8012462 <IsElementRemapAllowed+0x32>
         ( bDesc & ABP_APPD_DESCR_MAPPABLE_WRITE_PD ) ) ||
 8012458:	797b      	ldrb	r3, [r7, #5]
 801245a:	f003 0308 	and.w	r3, r3, #8
   if( ( ( bCmd == ABP_APPD_REMAP_ADI_WRITE_AREA ) &&
 801245e:	2b00      	cmp	r3, #0
 8012460:	d107      	bne.n	8012472 <IsElementRemapAllowed+0x42>
         ( bDesc & ABP_APPD_DESCR_MAPPABLE_WRITE_PD ) ) ||
 8012462:	79bb      	ldrb	r3, [r7, #6]
 8012464:	2b14      	cmp	r3, #20
 8012466:	d106      	bne.n	8012476 <IsElementRemapAllowed+0x46>
       ( ( bCmd == ABP_APPD_REMAP_ADI_READ_AREA ) &&
         ( bDesc & ABP_APPD_DESCR_MAPPABLE_READ_PD ) ) )
 8012468:	797b      	ldrb	r3, [r7, #5]
 801246a:	f003 0310 	and.w	r3, r3, #16
       ( ( bCmd == ABP_APPD_REMAP_ADI_READ_AREA ) &&
 801246e:	2b00      	cmp	r3, #0
 8012470:	d001      	beq.n	8012476 <IsElementRemapAllowed+0x46>
   {
      return( TRUE );
 8012472:	2301      	movs	r3, #1
 8012474:	e000      	b.n	8012478 <IsElementRemapAllowed+0x48>
   }

   return( FALSE );
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	370c      	adds	r7, #12
 801247c:	46bd      	mov	sp, r7
 801247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012482:	4770      	bx	lr

08012484 <RemapProcessDataCommand>:
**    None.
**------------------------------------------------------------------------------
*/
static void RemapProcessDataCommand( ABP_MsgType* psMsg,
                                     ad_MapInfoType* psCurrMap )
{
 8012484:	b5b0      	push	{r4, r5, r7, lr}
 8012486:	b08e      	sub	sp, #56	@ 0x38
 8012488:	af04      	add	r7, sp, #16
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
   ad_MapType sMap;
#if( ABCC_CFG_STRUCT_DATA_TYPE_ENABLED )
   UINT16 iCnt;
#endif

   iDataSize = 1;
 801248e:	2301      	movs	r3, #1
 8012490:	83fb      	strh	r3, [r7, #30]
   bStartOfRemap = ABCC_GetMsgCmdExt( psMsg );
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	7a9a      	ldrb	r2, [r3, #10]
 8012496:	7adb      	ldrb	r3, [r3, #11]
 8012498:	021b      	lsls	r3, r3, #8
 801249a:	4313      	orrs	r3, r2
 801249c:	837b      	strh	r3, [r7, #26]

   ABCC_GetMsgData16( psMsg, &iItemsToRemove, 0 );
 801249e:	f7f9 fd59 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d811      	bhi.n	80124cc <RemapProcessDataCommand+0x48>
 80124a8:	f7f9 fd54 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80124ac:	4603      	mov	r3, r0
 80124ae:	9303      	str	r3, [sp, #12]
 80124b0:	2302      	movs	r3, #2
 80124b2:	9302      	str	r3, [sp, #8]
 80124b4:	4bb4      	ldr	r3, [pc, #720]	@ (8012788 <RemapProcessDataCommand+0x304>)
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	f240 2312 	movw	r3, #530	@ 0x212
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	4bb3      	ldr	r3, [pc, #716]	@ (801278c <RemapProcessDataCommand+0x308>)
 80124c0:	2202      	movs	r2, #2
 80124c2:	2127      	movs	r1, #39	@ 0x27
 80124c4:	2001      	movs	r0, #1
 80124c6:	f7fb f8bf 	bl	800d648 <ABCC_LogHandler>
 80124ca:	e007      	b.n	80124dc <RemapProcessDataCommand+0x58>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	330c      	adds	r3, #12
 80124d0:	f107 0110 	add.w	r1, r7, #16
 80124d4:	2200      	movs	r2, #0
 80124d6:	4618      	mov	r0, r3
 80124d8:	f7fa fcf1 	bl	800cebe <ABCC_GetData16>
   ABCC_GetMsgData16( psMsg, &iItemsToAdd, 2 );
 80124dc:	f7f9 fd3a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b03      	cmp	r3, #3
 80124e4:	d811      	bhi.n	801250a <RemapProcessDataCommand+0x86>
 80124e6:	f7f9 fd35 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80124ea:	4603      	mov	r3, r0
 80124ec:	9303      	str	r3, [sp, #12]
 80124ee:	2304      	movs	r3, #4
 80124f0:	9302      	str	r3, [sp, #8]
 80124f2:	4ba5      	ldr	r3, [pc, #660]	@ (8012788 <RemapProcessDataCommand+0x304>)
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	f240 2313 	movw	r3, #531	@ 0x213
 80124fa:	9300      	str	r3, [sp, #0]
 80124fc:	4ba3      	ldr	r3, [pc, #652]	@ (801278c <RemapProcessDataCommand+0x308>)
 80124fe:	2204      	movs	r2, #4
 8012500:	2127      	movs	r1, #39	@ 0x27
 8012502:	2001      	movs	r0, #1
 8012504:	f7fb f8a0 	bl	800d648 <ABCC_LogHandler>
 8012508:	e007      	b.n	801251a <RemapProcessDataCommand+0x96>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	330c      	adds	r3, #12
 801250e:	f107 010e 	add.w	r1, r7, #14
 8012512:	2202      	movs	r2, #2
 8012514:	4618      	mov	r0, r3
 8012516:	f7fa fcd2 	bl	800cebe <ABCC_GetData16>

   /*
   ** A lot of sanity checks first since all actions of the command shall
   ** either be carried out or rejected.
   */
   if( ABCC_GetMsgDataSize( psMsg ) < 4 )
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	881b      	ldrh	r3, [r3, #0]
 801251e:	b29b      	uxth	r3, r3
 8012520:	2b03      	cmp	r3, #3
 8012522:	d803      	bhi.n	801252c <RemapProcessDataCommand+0xa8>
   {
      /*
      ** Not enough data provided
      */
      bErrCode = ABP_ERR_NOT_ENOUGH_DATA;
 8012524:	230b      	movs	r3, #11
 8012526:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801252a:	e03f      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else if( bStartOfRemap > psCurrMap->iNumMappedAdi )
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	889b      	ldrh	r3, [r3, #4]
 8012530:	8b7a      	ldrh	r2, [r7, #26]
 8012532:	429a      	cmp	r2, r3
 8012534:	d903      	bls.n	801253e <RemapProcessDataCommand+0xba>
   {
      /*
      ** Not an allowed mapping number
      */
      bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8012536:	2306      	movs	r3, #6
 8012538:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801253c:	e036      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else if( ( bStartOfRemap + iItemsToRemove ) > psCurrMap->iNumMappedAdi )
 801253e:	8b7b      	ldrh	r3, [r7, #26]
 8012540:	8a3a      	ldrh	r2, [r7, #16]
 8012542:	4413      	add	r3, r2
 8012544:	683a      	ldr	r2, [r7, #0]
 8012546:	8892      	ldrh	r2, [r2, #4]
 8012548:	4293      	cmp	r3, r2
 801254a:	dd03      	ble.n	8012554 <RemapProcessDataCommand+0xd0>
   {
      /*
      ** Cannot remove more than currently is mapped
      */
      bErrCode = ABP_ERR_OUT_OF_RANGE;
 801254c:	230c      	movs	r3, #12
 801254e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8012552:	e02b      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else if( ( psCurrMap->iNumMappedAdi + iItemsToAdd - iItemsToRemove )  >
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	889b      	ldrh	r3, [r3, #4]
 8012558:	461a      	mov	r2, r3
 801255a:	89fb      	ldrh	r3, [r7, #14]
 801255c:	4413      	add	r3, r2
 801255e:	8a3a      	ldrh	r2, [r7, #16]
 8012560:	1a9b      	subs	r3, r3, r2
              psCurrMap->iMaxNumMappedAdi )
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	88d2      	ldrh	r2, [r2, #6]
   else if( ( psCurrMap->iNumMappedAdi + iItemsToAdd - iItemsToRemove )  >
 8012566:	4293      	cmp	r3, r2
 8012568:	dd03      	ble.n	8012572 <RemapProcessDataCommand+0xee>
   {
      /*
      ** This will result in more maps than we can handle
      */
      bErrCode = ABP_ERR_NO_RESOURCES;
 801256a:	230e      	movs	r3, #14
 801256c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8012570:	e01c      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else if( ABCC_GetMsgDataSize( psMsg ) < 4 + ( iItemsToAdd * 4 ) )
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	881b      	ldrh	r3, [r3, #0]
 8012576:	b29b      	uxth	r3, r3
 8012578:	461a      	mov	r2, r3
 801257a:	89fb      	ldrh	r3, [r7, #14]
 801257c:	3301      	adds	r3, #1
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	429a      	cmp	r2, r3
 8012582:	da03      	bge.n	801258c <RemapProcessDataCommand+0x108>
   {
      bErrCode = ABP_ERR_NOT_ENOUGH_DATA;
 8012584:	230b      	movs	r3, #11
 8012586:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801258a:	e00f      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else if( ABCC_GetMsgDataSize( psMsg ) > 4 + ( iItemsToAdd * 4 ) )
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	881b      	ldrh	r3, [r3, #0]
 8012590:	b29b      	uxth	r3, r3
 8012592:	461a      	mov	r2, r3
 8012594:	89fb      	ldrh	r3, [r7, #14]
 8012596:	3301      	adds	r3, #1
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	429a      	cmp	r2, r3
 801259c:	dd03      	ble.n	80125a6 <RemapProcessDataCommand+0x122>
   {
      bErrCode = ABP_ERR_TOO_MUCH_DATA;
 801259e:	230a      	movs	r3, #10
 80125a0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80125a4:	e002      	b.n	80125ac <RemapProcessDataCommand+0x128>
   }
   else
   {
      bErrCode = ABP_ERR_NO_ERROR;
 80125a6:	2300      	movs	r3, #0
 80125a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
   }

   /*
   ** Check New ADI:s
   */
   if( bErrCode == ABP_ERR_NO_ERROR )
 80125ac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f040 8148 	bne.w	8012846 <RemapProcessDataCommand+0x3c2>
   {
      iAddItemIndex = 0;
 80125b6:	2300      	movs	r3, #0
 80125b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
      iMsgIndex = 4;
 80125ba:	2304      	movs	r3, #4
 80125bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
      while( iAddItemIndex < iItemsToAdd )
 80125be:	e13d      	b.n	801283c <RemapProcessDataCommand+0x3b8>
      {
         ABCC_GetMsgData16( psMsg, &iAdi, iMsgIndex );
 80125c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125c2:	1c5c      	adds	r4, r3, #1
 80125c4:	f7f9 fcc6 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80125c8:	4603      	mov	r3, r0
 80125ca:	429c      	cmp	r4, r3
 80125cc:	db15      	blt.n	80125fa <RemapProcessDataCommand+0x176>
 80125ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125d0:	3302      	adds	r3, #2
 80125d2:	461d      	mov	r5, r3
 80125d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80125d6:	1c9c      	adds	r4, r3, #2
 80125d8:	f7f9 fcbc 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80125dc:	4603      	mov	r3, r0
 80125de:	9303      	str	r3, [sp, #12]
 80125e0:	9402      	str	r4, [sp, #8]
 80125e2:	4b69      	ldr	r3, [pc, #420]	@ (8012788 <RemapProcessDataCommand+0x304>)
 80125e4:	9301      	str	r3, [sp, #4]
 80125e6:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	4b67      	ldr	r3, [pc, #412]	@ (801278c <RemapProcessDataCommand+0x308>)
 80125ee:	462a      	mov	r2, r5
 80125f0:	2127      	movs	r1, #39	@ 0x27
 80125f2:	2001      	movs	r0, #1
 80125f4:	f7fb f828 	bl	800d648 <ABCC_LogHandler>
 80125f8:	e007      	b.n	801260a <RemapProcessDataCommand+0x186>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	330c      	adds	r3, #12
 80125fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012600:	f107 0112 	add.w	r1, r7, #18
 8012604:	4618      	mov	r0, r3
 8012606:	f7fa fc5a 	bl	800cebe <ABCC_GetData16>
         sMap.iAdiIndex = GetAdiIndex( iAdi );
 801260a:	8a7b      	ldrh	r3, [r7, #18]
 801260c:	4618      	mov	r0, r3
 801260e:	f7ff feb9 	bl	8012384 <GetAdiIndex>
 8012612:	4603      	mov	r3, r0
 8012614:	813b      	strh	r3, [r7, #8]

         if( sMap.iAdiIndex == AD_INVALID_ADI_INDEX )
 8012616:	893b      	ldrh	r3, [r7, #8]
 8012618:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801261c:	4293      	cmp	r3, r2
 801261e:	d123      	bne.n	8012668 <RemapProcessDataCommand+0x1e4>
         {
            bErrCode = ABP_ERR_OBJ_SPECIFIC;
 8012620:	23ff      	movs	r3, #255	@ 0xff
 8012622:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            /*
            ** The ADI does not exist.
            */
            ABCC_SetMsgData8( psMsg, ABP_APPD_ERR_MAPPING_ITEM_NAK, 1 );
 8012626:	f7f9 fc95 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801262a:	4603      	mov	r3, r0
 801262c:	2b01      	cmp	r3, #1
 801262e:	d811      	bhi.n	8012654 <RemapProcessDataCommand+0x1d0>
 8012630:	f7f9 fc90 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012634:	4603      	mov	r3, r0
 8012636:	9303      	str	r3, [sp, #12]
 8012638:	2302      	movs	r3, #2
 801263a:	9302      	str	r3, [sp, #8]
 801263c:	4b52      	ldr	r3, [pc, #328]	@ (8012788 <RemapProcessDataCommand+0x304>)
 801263e:	9301      	str	r3, [sp, #4]
 8012640:	f240 2355 	movw	r3, #597	@ 0x255
 8012644:	9300      	str	r3, [sp, #0]
 8012646:	4b51      	ldr	r3, [pc, #324]	@ (801278c <RemapProcessDataCommand+0x308>)
 8012648:	2202      	movs	r2, #2
 801264a:	2127      	movs	r1, #39	@ 0x27
 801264c:	2001      	movs	r0, #1
 801264e:	f7fa fffb 	bl	800d648 <ABCC_LogHandler>
 8012652:	e006      	b.n	8012662 <RemapProcessDataCommand+0x1de>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	330c      	adds	r3, #12
 8012658:	2201      	movs	r2, #1
 801265a:	2101      	movs	r1, #1
 801265c:	4618      	mov	r0, r3
 801265e:	f7fa fc1b 	bl	800ce98 <ABCC_SetData8>
            iDataSize = 2;
 8012662:	2302      	movs	r3, #2
 8012664:	83fb      	strh	r3, [r7, #30]
            /*
            ** Break early! It is not a good idea to use AD_INVALID_ADI_INDEX
            ** as an indexing value.
            */
            break;
 8012666:	e0ee      	b.n	8012846 <RemapProcessDataCommand+0x3c2>
         }

         iMsgIndex += 2;
 8012668:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801266a:	3302      	adds	r3, #2
 801266c:	84fb      	strh	r3, [r7, #38]	@ 0x26
         ABCC_GetMsgData8( psMsg, &sMap.bStartIndex, iMsgIndex++ );
 801266e:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8012670:	1c63      	adds	r3, r4, #1
 8012672:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012674:	f7f9 fc6e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012678:	4603      	mov	r3, r0
 801267a:	429c      	cmp	r4, r3
 801267c:	d319      	bcc.n	80126b2 <RemapProcessDataCommand+0x22e>
 801267e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012680:	1c5a      	adds	r2, r3, #1
 8012682:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8012684:	3301      	adds	r3, #1
 8012686:	461d      	mov	r5, r3
 8012688:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801268a:	1c5a      	adds	r2, r3, #1
 801268c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801268e:	1c5c      	adds	r4, r3, #1
 8012690:	f7f9 fc60 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012694:	4603      	mov	r3, r0
 8012696:	9303      	str	r3, [sp, #12]
 8012698:	9402      	str	r4, [sp, #8]
 801269a:	4b3b      	ldr	r3, [pc, #236]	@ (8012788 <RemapProcessDataCommand+0x304>)
 801269c:	9301      	str	r3, [sp, #4]
 801269e:	f240 235f 	movw	r3, #607	@ 0x25f
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	4b39      	ldr	r3, [pc, #228]	@ (801278c <RemapProcessDataCommand+0x308>)
 80126a6:	462a      	mov	r2, r5
 80126a8:	2127      	movs	r1, #39	@ 0x27
 80126aa:	2001      	movs	r0, #1
 80126ac:	f7fa ffcc 	bl	800d648 <ABCC_LogHandler>
 80126b0:	e00b      	b.n	80126ca <RemapProcessDataCommand+0x246>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f103 000c 	add.w	r0, r3, #12
 80126b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80126ba:	1c5a      	adds	r2, r3, #1
 80126bc:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80126be:	f107 0208 	add.w	r2, r7, #8
 80126c2:	1cd1      	adds	r1, r2, #3
 80126c4:	461a      	mov	r2, r3
 80126c6:	f7fa fbd4 	bl	800ce72 <ABCC_GetData8>
         ABCC_GetMsgData8( psMsg, &sMap.bNumElements, iMsgIndex++ );
 80126ca:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80126cc:	1c63      	adds	r3, r4, #1
 80126ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80126d0:	f7f9 fc40 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80126d4:	4603      	mov	r3, r0
 80126d6:	429c      	cmp	r4, r3
 80126d8:	d319      	bcc.n	801270e <RemapProcessDataCommand+0x28a>
 80126da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80126e0:	3301      	adds	r3, #1
 80126e2:	461d      	mov	r5, r3
 80126e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80126e6:	1c5a      	adds	r2, r3, #1
 80126e8:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80126ea:	1c5c      	adds	r4, r3, #1
 80126ec:	f7f9 fc32 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80126f0:	4603      	mov	r3, r0
 80126f2:	9303      	str	r3, [sp, #12]
 80126f4:	9402      	str	r4, [sp, #8]
 80126f6:	4b24      	ldr	r3, [pc, #144]	@ (8012788 <RemapProcessDataCommand+0x304>)
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	f44f 7318 	mov.w	r3, #608	@ 0x260
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	4b22      	ldr	r3, [pc, #136]	@ (801278c <RemapProcessDataCommand+0x308>)
 8012702:	462a      	mov	r2, r5
 8012704:	2127      	movs	r1, #39	@ 0x27
 8012706:	2001      	movs	r0, #1
 8012708:	f7fa ff9e 	bl	800d648 <ABCC_LogHandler>
 801270c:	e00b      	b.n	8012726 <RemapProcessDataCommand+0x2a2>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f103 000c 	add.w	r0, r3, #12
 8012714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012716:	1c5a      	adds	r2, r3, #1
 8012718:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801271a:	f107 0208 	add.w	r2, r7, #8
 801271e:	1c91      	adds	r1, r2, #2
 8012720:	461a      	mov	r2, r3
 8012722:	f7fa fba6 	bl	800ce72 <ABCC_GetData8>

         if( sMap.iAdiIndex != AD_MAP_PAD_INDEX )
 8012726:	893b      	ldrh	r3, [r7, #8]
 8012728:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801272c:	4293      	cmp	r3, r2
 801272e:	f000 8082 	beq.w	8012836 <RemapProcessDataCommand+0x3b2>
         {

            if( ( sMap.bStartIndex + sMap.bNumElements ) >
 8012732:	7afb      	ldrb	r3, [r7, #11]
 8012734:	461a      	mov	r2, r3
 8012736:	7abb      	ldrb	r3, [r7, #10]
 8012738:	441a      	add	r2, r3
                   ad_asADIEntryList[ sMap.iAdiIndex ].bNumOfElements )
 801273a:	4b15      	ldr	r3, [pc, #84]	@ (8012790 <RemapProcessDataCommand+0x30c>)
 801273c:	6819      	ldr	r1, [r3, #0]
 801273e:	893b      	ldrh	r3, [r7, #8]
 8012740:	4618      	mov	r0, r3
 8012742:	4603      	mov	r3, r0
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	4403      	add	r3, r0
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	440b      	add	r3, r1
 801274c:	7a5b      	ldrb	r3, [r3, #9]
            if( ( sMap.bStartIndex + sMap.bNumElements ) >
 801274e:	429a      	cmp	r2, r3
 8012750:	dd2a      	ble.n	80127a8 <RemapProcessDataCommand+0x324>
            {
               bErrCode = ABP_ERR_OBJ_SPECIFIC;
 8012752:	23ff      	movs	r3, #255	@ 0xff
 8012754:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
               /*
               ** Invalid number of elements
               */
               ABCC_SetMsgData8( psMsg, ABP_APPD_ERR_INVALID_TOTAL_SIZE, 1 );
 8012758:	f7f9 fbfc 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801275c:	4603      	mov	r3, r0
 801275e:	2b01      	cmp	r3, #1
 8012760:	d818      	bhi.n	8012794 <RemapProcessDataCommand+0x310>
 8012762:	f7f9 fbf7 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012766:	4603      	mov	r3, r0
 8012768:	9303      	str	r3, [sp, #12]
 801276a:	2302      	movs	r3, #2
 801276c:	9302      	str	r3, [sp, #8]
 801276e:	4b06      	ldr	r3, [pc, #24]	@ (8012788 <RemapProcessDataCommand+0x304>)
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 8012776:	9300      	str	r3, [sp, #0]
 8012778:	4b04      	ldr	r3, [pc, #16]	@ (801278c <RemapProcessDataCommand+0x308>)
 801277a:	2202      	movs	r2, #2
 801277c:	2127      	movs	r1, #39	@ 0x27
 801277e:	2001      	movs	r0, #1
 8012780:	f7fa ff62 	bl	800d648 <ABCC_LogHandler>
 8012784:	e00d      	b.n	80127a2 <RemapProcessDataCommand+0x31e>
 8012786:	bf00      	nop
 8012788:	08017288 	.word	0x08017288
 801278c:	0801722c 	.word	0x0801722c
 8012790:	24003f84 	.word	0x24003f84
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	330c      	adds	r3, #12
 8012798:	2201      	movs	r2, #1
 801279a:	2102      	movs	r1, #2
 801279c:	4618      	mov	r0, r3
 801279e:	f7fa fb7b 	bl	800ce98 <ABCC_SetData8>
               iDataSize = 2;
 80127a2:	2302      	movs	r3, #2
 80127a4:	83fb      	strh	r3, [r7, #30]
               /*
               ** One error is enough for a NAK, break the 'while'.
               */
               break;
 80127a6:	e04e      	b.n	8012846 <RemapProcessDataCommand+0x3c2>
            }
            else
#endif
            {
               if( !( IsElementRemapAllowed(
                  ad_asADIEntryList[ sMap.iAdiIndex ].bDataType,
 80127a8:	4ba8      	ldr	r3, [pc, #672]	@ (8012a4c <RemapProcessDataCommand+0x5c8>)
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	893b      	ldrh	r3, [r7, #8]
 80127ae:	4619      	mov	r1, r3
 80127b0:	460b      	mov	r3, r1
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	440b      	add	r3, r1
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	4413      	add	r3, r2
 80127ba:	7a18      	ldrb	r0, [r3, #8]
                  ABCC_GetMsgCmdBits( psMsg ),
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	7a1b      	ldrb	r3, [r3, #8]
               if( !( IsElementRemapAllowed(
 80127c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80127c4:	b2d9      	uxtb	r1, r3
                  ad_asADIEntryList[ sMap.iAdiIndex ].bDesc ) ) )
 80127c6:	4ba1      	ldr	r3, [pc, #644]	@ (8012a4c <RemapProcessDataCommand+0x5c8>)
 80127c8:	681a      	ldr	r2, [r3, #0]
 80127ca:	893b      	ldrh	r3, [r7, #8]
 80127cc:	461c      	mov	r4, r3
 80127ce:	4623      	mov	r3, r4
 80127d0:	009b      	lsls	r3, r3, #2
 80127d2:	4423      	add	r3, r4
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	4413      	add	r3, r2
 80127d8:	7a9b      	ldrb	r3, [r3, #10]
               if( !( IsElementRemapAllowed(
 80127da:	461a      	mov	r2, r3
 80127dc:	f7ff fe28 	bl	8012430 <IsElementRemapAllowed>
 80127e0:	4603      	mov	r3, r0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d102      	bne.n	80127ec <RemapProcessDataCommand+0x368>
               {
                  bErrCode = ABP_ERR_OBJ_SPECIFIC;
 80127e6:	23ff      	movs	r3, #255	@ 0xff
 80127e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
               }
            }
            if( bErrCode != ABP_ERR_NO_ERROR )
 80127ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d020      	beq.n	8012836 <RemapProcessDataCommand+0x3b2>
            {
               /*
               ** At least one ADI/element was not mappable in the indicated
               ** direction.
               */
               ABCC_SetMsgData8( psMsg, ABP_APPD_ERR_MAPPING_ITEM_NAK, 1 );
 80127f4:	f7f9 fbae 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80127f8:	4603      	mov	r3, r0
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d811      	bhi.n	8012822 <RemapProcessDataCommand+0x39e>
 80127fe:	f7f9 fba9 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012802:	4603      	mov	r3, r0
 8012804:	9303      	str	r3, [sp, #12]
 8012806:	2302      	movs	r3, #2
 8012808:	9302      	str	r3, [sp, #8]
 801280a:	4b91      	ldr	r3, [pc, #580]	@ (8012a50 <RemapProcessDataCommand+0x5cc>)
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	f240 2397 	movw	r3, #663	@ 0x297
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	4b8f      	ldr	r3, [pc, #572]	@ (8012a54 <RemapProcessDataCommand+0x5d0>)
 8012816:	2202      	movs	r2, #2
 8012818:	2127      	movs	r1, #39	@ 0x27
 801281a:	2001      	movs	r0, #1
 801281c:	f7fa ff14 	bl	800d648 <ABCC_LogHandler>
 8012820:	e006      	b.n	8012830 <RemapProcessDataCommand+0x3ac>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	330c      	adds	r3, #12
 8012826:	2201      	movs	r2, #1
 8012828:	2101      	movs	r1, #1
 801282a:	4618      	mov	r0, r3
 801282c:	f7fa fb34 	bl	800ce98 <ABCC_SetData8>
               iDataSize = 2;
 8012830:	2302      	movs	r3, #2
 8012832:	83fb      	strh	r3, [r7, #30]
               /*
               ** One error is enough for a NAK, break the 'while'.
               */
               break;
 8012834:	e007      	b.n	8012846 <RemapProcessDataCommand+0x3c2>
            }

         }
         iAddItemIndex++;
 8012836:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012838:	3301      	adds	r3, #1
 801283a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      while( iAddItemIndex < iItemsToAdd )
 801283c:	89fb      	ldrh	r3, [r7, #14]
 801283e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012840:	429a      	cmp	r2, r3
 8012842:	f4ff aebd 	bcc.w	80125c0 <RemapProcessDataCommand+0x13c>
      }
   }

   if( bErrCode == ABP_ERR_NO_ERROR )
 8012846:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801284a:	2b00      	cmp	r3, #0
 801284c:	f040 8158 	bne.w	8012b00 <RemapProcessDataCommand+0x67c>
   {
      /*
      ** Move ADI if required
      */
      if( ( iItemsToRemove != iItemsToAdd ) &&
 8012850:	8a3a      	ldrh	r2, [r7, #16]
 8012852:	89fb      	ldrh	r3, [r7, #14]
 8012854:	429a      	cmp	r2, r3
 8012856:	d05e      	beq.n	8012916 <RemapProcessDataCommand+0x492>
          ( iItemsToRemove  <  ( psCurrMap->iNumMappedAdi - bStartOfRemap  ) ) )
 8012858:	8a3b      	ldrh	r3, [r7, #16]
 801285a:	461a      	mov	r2, r3
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	889b      	ldrh	r3, [r3, #4]
 8012860:	4619      	mov	r1, r3
 8012862:	8b7b      	ldrh	r3, [r7, #26]
 8012864:	1acb      	subs	r3, r1, r3
      if( ( iItemsToRemove != iItemsToAdd ) &&
 8012866:	429a      	cmp	r2, r3
 8012868:	da55      	bge.n	8012916 <RemapProcessDataCommand+0x492>
         UINT16 iIndex;

         /*
         ** Data needs to be moved
         */
         iMoveFrom = bStartOfRemap + iItemsToRemove;
 801286a:	8a3a      	ldrh	r2, [r7, #16]
 801286c:	8b7b      	ldrh	r3, [r7, #26]
 801286e:	4413      	add	r3, r2
 8012870:	833b      	strh	r3, [r7, #24]
         iMoveTo = bStartOfRemap  + iItemsToAdd;
 8012872:	89fa      	ldrh	r2, [r7, #14]
 8012874:	8b7b      	ldrh	r3, [r7, #26]
 8012876:	4413      	add	r3, r2
 8012878:	82fb      	strh	r3, [r7, #22]
         iItemsToMove = psCurrMap->iNumMappedAdi - bStartOfRemap - iItemsToRemove;
 801287a:	683b      	ldr	r3, [r7, #0]
 801287c:	889a      	ldrh	r2, [r3, #4]
 801287e:	8b7b      	ldrh	r3, [r7, #26]
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	b29a      	uxth	r2, r3
 8012884:	8a3b      	ldrh	r3, [r7, #16]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	b29b      	uxth	r3, r3
 801288a:	82bb      	strh	r3, [r7, #20]

         if( iItemsToRemove > iItemsToAdd )
 801288c:	8a3a      	ldrh	r2, [r7, #16]
 801288e:	89fb      	ldrh	r3, [r7, #14]
 8012890:	429a      	cmp	r2, r3
 8012892:	d91d      	bls.n	80128d0 <RemapProcessDataCommand+0x44c>
         {
            for( iIndex = 0; iIndex < iItemsToMove; iIndex++ )
 8012894:	2300      	movs	r3, #0
 8012896:	83bb      	strh	r3, [r7, #28]
 8012898:	e014      	b.n	80128c4 <RemapProcessDataCommand+0x440>
            {
               psCurrMap->paiMappedAdiList[ iMoveTo + iIndex ] =
                  psCurrMap->paiMappedAdiList[ iMoveFrom + iIndex ];
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	8b39      	ldrh	r1, [r7, #24]
 80128a0:	8bbb      	ldrh	r3, [r7, #28]
 80128a2:	440b      	add	r3, r1
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	18d0      	adds	r0, r2, r3
               psCurrMap->paiMappedAdiList[ iMoveTo + iIndex ] =
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	8af9      	ldrh	r1, [r7, #22]
 80128ae:	8bbb      	ldrh	r3, [r7, #28]
 80128b0:	440b      	add	r3, r1
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	4413      	add	r3, r2
 80128b6:	461a      	mov	r2, r3
 80128b8:	4603      	mov	r3, r0
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	6013      	str	r3, [r2, #0]
            for( iIndex = 0; iIndex < iItemsToMove; iIndex++ )
 80128be:	8bbb      	ldrh	r3, [r7, #28]
 80128c0:	3301      	adds	r3, #1
 80128c2:	83bb      	strh	r3, [r7, #28]
 80128c4:	8bba      	ldrh	r2, [r7, #28]
 80128c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80128ca:	429a      	cmp	r2, r3
 80128cc:	dbe5      	blt.n	801289a <RemapProcessDataCommand+0x416>
 80128ce:	e022      	b.n	8012916 <RemapProcessDataCommand+0x492>
            }
         }
         else
         {
            for( iIndex = iItemsToMove; iIndex > 0; iIndex-- )
 80128d0:	8abb      	ldrh	r3, [r7, #20]
 80128d2:	83bb      	strh	r3, [r7, #28]
 80128d4:	e01c      	b.n	8012910 <RemapProcessDataCommand+0x48c>
            {
               psCurrMap->paiMappedAdiList[ iMoveTo + iIndex - 1 ] =
                  psCurrMap->paiMappedAdiList[ iMoveFrom + iIndex - 1 ];
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	8b39      	ldrh	r1, [r7, #24]
 80128dc:	8bbb      	ldrh	r3, [r7, #28]
 80128de:	440b      	add	r3, r1
 80128e0:	4619      	mov	r1, r3
 80128e2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80128e6:	440b      	add	r3, r1
 80128e8:	009b      	lsls	r3, r3, #2
 80128ea:	18d0      	adds	r0, r2, r3
               psCurrMap->paiMappedAdiList[ iMoveTo + iIndex - 1 ] =
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	8af9      	ldrh	r1, [r7, #22]
 80128f2:	8bbb      	ldrh	r3, [r7, #28]
 80128f4:	440b      	add	r3, r1
 80128f6:	4619      	mov	r1, r3
 80128f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80128fc:	440b      	add	r3, r1
 80128fe:	009b      	lsls	r3, r3, #2
 8012900:	4413      	add	r3, r2
 8012902:	461a      	mov	r2, r3
 8012904:	4603      	mov	r3, r0
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	6013      	str	r3, [r2, #0]
            for( iIndex = iItemsToMove; iIndex > 0; iIndex-- )
 801290a:	8bbb      	ldrh	r3, [r7, #28]
 801290c:	3b01      	subs	r3, #1
 801290e:	83bb      	strh	r3, [r7, #28]
 8012910:	8bbb      	ldrh	r3, [r7, #28]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1df      	bne.n	80128d6 <RemapProcessDataCommand+0x452>
            }
         }
      }

      iMapIndex = bStartOfRemap;
 8012916:	8b7b      	ldrh	r3, [r7, #26]
 8012918:	847b      	strh	r3, [r7, #34]	@ 0x22
      psCurrMap->iNumMappedAdi -= iItemsToRemove;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	889a      	ldrh	r2, [r3, #4]
 801291e:	8a3b      	ldrh	r3, [r7, #16]
 8012920:	1ad3      	subs	r3, r2, r3
 8012922:	b29a      	uxth	r2, r3
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	809a      	strh	r2, [r3, #4]
      psCurrMap->iNumMappedAdi += iItemsToAdd;
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	889a      	ldrh	r2, [r3, #4]
 801292c:	89fb      	ldrh	r3, [r7, #14]
 801292e:	4413      	add	r3, r2
 8012930:	b29a      	uxth	r2, r3
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	809a      	strh	r2, [r3, #4]

      iMsgIndex = 4;
 8012936:	2304      	movs	r3, #4
 8012938:	84fb      	strh	r3, [r7, #38]	@ 0x26
      for( iAddItemIndex = 0; iAddItemIndex < iItemsToAdd; iAddItemIndex++ )
 801293a:	2300      	movs	r3, #0
 801293c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801293e:	e0a0      	b.n	8012a82 <RemapProcessDataCommand+0x5fe>
      {
         ABCC_GetMsgData16( psMsg, &iAdi, iMsgIndex );
 8012940:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012942:	1c5c      	adds	r4, r3, #1
 8012944:	f7f9 fb06 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012948:	4603      	mov	r3, r0
 801294a:	429c      	cmp	r4, r3
 801294c:	db15      	blt.n	801297a <RemapProcessDataCommand+0x4f6>
 801294e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012950:	3302      	adds	r3, #2
 8012952:	461d      	mov	r5, r3
 8012954:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012956:	1c9c      	adds	r4, r3, #2
 8012958:	f7f9 fafc 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801295c:	4603      	mov	r3, r0
 801295e:	9303      	str	r3, [sp, #12]
 8012960:	9402      	str	r4, [sp, #8]
 8012962:	4b3b      	ldr	r3, [pc, #236]	@ (8012a50 <RemapProcessDataCommand+0x5cc>)
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	f240 23d1 	movw	r3, #721	@ 0x2d1
 801296a:	9300      	str	r3, [sp, #0]
 801296c:	4b39      	ldr	r3, [pc, #228]	@ (8012a54 <RemapProcessDataCommand+0x5d0>)
 801296e:	462a      	mov	r2, r5
 8012970:	2127      	movs	r1, #39	@ 0x27
 8012972:	2001      	movs	r0, #1
 8012974:	f7fa fe68 	bl	800d648 <ABCC_LogHandler>
 8012978:	e007      	b.n	801298a <RemapProcessDataCommand+0x506>
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	330c      	adds	r3, #12
 801297e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012980:	f107 0112 	add.w	r1, r7, #18
 8012984:	4618      	mov	r0, r3
 8012986:	f7fa fa9a 	bl	800cebe <ABCC_GetData16>
         psCurrMap->paiMappedAdiList[ iMapIndex ].iAdiIndex = GetAdiIndex( iAdi );
 801298a:	8a79      	ldrh	r1, [r7, #18]
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	18d4      	adds	r4, r2, r3
 8012996:	4608      	mov	r0, r1
 8012998:	f7ff fcf4 	bl	8012384 <GetAdiIndex>
 801299c:	4603      	mov	r3, r0
 801299e:	8023      	strh	r3, [r4, #0]
         iMsgIndex += 2;
 80129a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129a2:	3302      	adds	r3, #2
 80129a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
         ABCC_GetMsgData8( psMsg, &psCurrMap->paiMappedAdiList[ iMapIndex ].bStartIndex, iMsgIndex++ );
 80129a6:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80129a8:	1c63      	adds	r3, r4, #1
 80129aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80129ac:	f7f9 fad2 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80129b0:	4603      	mov	r3, r0
 80129b2:	429c      	cmp	r4, r3
 80129b4:	d319      	bcc.n	80129ea <RemapProcessDataCommand+0x566>
 80129b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129b8:	1c5a      	adds	r2, r3, #1
 80129ba:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80129bc:	3301      	adds	r3, #1
 80129be:	461d      	mov	r5, r3
 80129c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129c2:	1c5a      	adds	r2, r3, #1
 80129c4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80129c6:	1c5c      	adds	r4, r3, #1
 80129c8:	f7f9 fac4 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80129cc:	4603      	mov	r3, r0
 80129ce:	9303      	str	r3, [sp, #12]
 80129d0:	9402      	str	r4, [sp, #8]
 80129d2:	4b1f      	ldr	r3, [pc, #124]	@ (8012a50 <RemapProcessDataCommand+0x5cc>)
 80129d4:	9301      	str	r3, [sp, #4]
 80129d6:	f44f 7335 	mov.w	r3, #724	@ 0x2d4
 80129da:	9300      	str	r3, [sp, #0]
 80129dc:	4b1d      	ldr	r3, [pc, #116]	@ (8012a54 <RemapProcessDataCommand+0x5d0>)
 80129de:	462a      	mov	r2, r5
 80129e0:	2127      	movs	r1, #39	@ 0x27
 80129e2:	2001      	movs	r0, #1
 80129e4:	f7fa fe30 	bl	800d648 <ABCC_LogHandler>
 80129e8:	e00e      	b.n	8012a08 <RemapProcessDataCommand+0x584>
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f103 000c 	add.w	r0, r3, #12
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	1cd9      	adds	r1, r3, #3
 80129fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80129fe:	1c5a      	adds	r2, r3, #1
 8012a00:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8012a02:	461a      	mov	r2, r3
 8012a04:	f7fa fa35 	bl	800ce72 <ABCC_GetData8>
         ABCC_GetMsgData8( psMsg, &psCurrMap->paiMappedAdiList[ iMapIndex ].bNumElements, iMsgIndex++ );
 8012a08:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8012a0a:	1c63      	adds	r3, r4, #1
 8012a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012a0e:	f7f9 faa1 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012a12:	4603      	mov	r3, r0
 8012a14:	429c      	cmp	r4, r3
 8012a16:	d31f      	bcc.n	8012a58 <RemapProcessDataCommand+0x5d4>
 8012a18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012a1a:	1c5a      	adds	r2, r3, #1
 8012a1c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8012a1e:	3301      	adds	r3, #1
 8012a20:	461d      	mov	r5, r3
 8012a22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012a24:	1c5a      	adds	r2, r3, #1
 8012a26:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8012a28:	1c5c      	adds	r4, r3, #1
 8012a2a:	f7f9 fa93 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	9303      	str	r3, [sp, #12]
 8012a32:	9402      	str	r4, [sp, #8]
 8012a34:	4b06      	ldr	r3, [pc, #24]	@ (8012a50 <RemapProcessDataCommand+0x5cc>)
 8012a36:	9301      	str	r3, [sp, #4]
 8012a38:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	4b05      	ldr	r3, [pc, #20]	@ (8012a54 <RemapProcessDataCommand+0x5d0>)
 8012a40:	462a      	mov	r2, r5
 8012a42:	2127      	movs	r1, #39	@ 0x27
 8012a44:	2001      	movs	r0, #1
 8012a46:	f7fa fdff 	bl	800d648 <ABCC_LogHandler>
 8012a4a:	e014      	b.n	8012a76 <RemapProcessDataCommand+0x5f2>
 8012a4c:	24003f84 	.word	0x24003f84
 8012a50:	08017288 	.word	0x08017288
 8012a54:	0801722c 	.word	0x0801722c
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f103 000c 	add.w	r0, r3, #12
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	1c99      	adds	r1, r3, #2
 8012a6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012a6c:	1c5a      	adds	r2, r3, #1
 8012a6e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8012a70:	461a      	mov	r2, r3
 8012a72:	f7fa f9fe 	bl	800ce72 <ABCC_GetData8>
         iMapIndex++;
 8012a76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a78:	3301      	adds	r3, #1
 8012a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
      for( iAddItemIndex = 0; iAddItemIndex < iItemsToAdd; iAddItemIndex++ )
 8012a7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a7e:	3301      	adds	r3, #1
 8012a80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012a82:	89fb      	ldrh	r3, [r7, #14]
 8012a84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a86:	429a      	cmp	r2, r3
 8012a88:	f4ff af5a 	bcc.w	8012940 <RemapProcessDataCommand+0x4bc>
      }

      UpdateMapSize( psCurrMap );
 8012a8c:	6838      	ldr	r0, [r7, #0]
 8012a8e:	f7ff fc07 	bl	80122a0 <UpdateMapSize>

      ABCC_SetMsgData16(psMsg, psCurrMap->iPdSize, 0);
 8012a92:	f7f9 fa5f 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d811      	bhi.n	8012ac0 <RemapProcessDataCommand+0x63c>
 8012a9c:	f7f9 fa5a 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	9303      	str	r3, [sp, #12]
 8012aa4:	2302      	movs	r3, #2
 8012aa6:	9302      	str	r3, [sp, #8]
 8012aa8:	4b23      	ldr	r3, [pc, #140]	@ (8012b38 <RemapProcessDataCommand+0x6b4>)
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	f240 23db 	movw	r3, #731	@ 0x2db
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	4b22      	ldr	r3, [pc, #136]	@ (8012b3c <RemapProcessDataCommand+0x6b8>)
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	2127      	movs	r1, #39	@ 0x27
 8012ab8:	2001      	movs	r0, #1
 8012aba:	f7fa fdc5 	bl	800d648 <ABCC_LogHandler>
 8012abe:	e008      	b.n	8012ad2 <RemapProcessDataCommand+0x64e>
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f103 000c 	add.w	r0, r3, #12
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	891b      	ldrh	r3, [r3, #8]
 8012aca:	2200      	movs	r2, #0
 8012acc:	4619      	mov	r1, r3
 8012ace:	f7fa fa0e 	bl	800ceee <ABCC_SetData16>
      ABP_SetMsgResponse( psMsg, 2 );
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	7a1b      	ldrb	r3, [r3, #8]
 8012ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012ada:	b2da      	uxtb	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	721a      	strb	r2, [r3, #8]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	f042 0202 	orr.w	r2, r2, #2
 8012ae8:	701a      	strb	r2, [r3, #0]
 8012aea:	2200      	movs	r2, #0
 8012aec:	705a      	strb	r2, [r3, #1]
      ABCC_SendRemapRespMsg( psMsg, ad_ReadMapInfo.iPdSize,
 8012aee:	4b14      	ldr	r3, [pc, #80]	@ (8012b40 <RemapProcessDataCommand+0x6bc>)
 8012af0:	891b      	ldrh	r3, [r3, #8]
 8012af2:	4a14      	ldr	r2, [pc, #80]	@ (8012b44 <RemapProcessDataCommand+0x6c0>)
 8012af4:	8912      	ldrh	r2, [r2, #8]
 8012af6:	4619      	mov	r1, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7fa ff8f 	bl	800da1c <ABCC_SendRemapRespMsg>
   else
   {
      ABP_SetMsgErrorResponse( psMsg, iDataSize, bErrCode );
      ABCC_SendRespMsg( psMsg );
   }
}
 8012afe:	e017      	b.n	8012b30 <RemapProcessDataCommand+0x6ac>
      ABP_SetMsgErrorResponse( psMsg, iDataSize, bErrCode );
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	7a1b      	ldrb	r3, [r3, #8]
 8012b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b08:	b2da      	uxtb	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	721a      	strb	r2, [r3, #8]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	7a1b      	ldrb	r3, [r3, #8]
 8012b12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012b16:	b2da      	uxtb	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	721a      	strb	r2, [r3, #8]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	8bfa      	ldrh	r2, [r7, #30]
 8012b20:	801a      	strh	r2, [r3, #0]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8012b28:	731a      	strb	r2, [r3, #12]
      ABCC_SendRespMsg( psMsg );
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7f9 fded 	bl	800c70a <ABCC_SendRespMsg>
}
 8012b30:	bf00      	nop
 8012b32:	3728      	adds	r7, #40	@ 0x28
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bdb0      	pop	{r4, r5, r7, pc}
 8012b38:	08017288 	.word	0x08017288
 8012b3c:	0801722c 	.word	0x0801722c
 8012b40:	2400418c 	.word	0x2400418c
 8012b44:	24004198 	.word	0x24004198

08012b48 <CopyBitData>:
                           UINT16 iDestBitOffset,
                           const void* pxSrc,
                           UINT16 iSrcBitOffset,
                           UINT8 bDataType,
                           UINT16 iNumElem )
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b08a      	sub	sp, #40	@ 0x28
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	607a      	str	r2, [r7, #4]
 8012b52:	461a      	mov	r2, r3
 8012b54:	460b      	mov	r3, r1
 8012b56:	817b      	strh	r3, [r7, #10]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	813b      	strh	r3, [r7, #8]
   UINT8  bCopySize;
   UINT16 i;
   UINT16 iSetBitSize = 0;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
   UINT32 lSrc;
   UINT32 lDest;
   UINT16 iSrcOctetOffset;
   UINT16 iDestOctetOffset;

   iSrcOctetOffset = 0;
 8012b60:	2300      	movs	r3, #0
 8012b62:	847b      	strh	r3, [r7, #34]	@ 0x22
   iDestOctetOffset = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	843b      	strh	r3, [r7, #32]

   if( ABP_Is_PADx( bDataType ) )
 8012b68:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012b6c:	2b1f      	cmp	r3, #31
 8012b6e:	d90c      	bls.n	8012b8a <CopyBitData+0x42>
 8012b70:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012b74:	2b30      	cmp	r3, #48	@ 0x30
 8012b76:	d808      	bhi.n	8012b8a <CopyBitData+0x42>
   {
      /*
      ** This is only a pad. No copy is done.
      */
      iSetBitSize += bDataType - ABP_PAD0;
 8012b78:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b80:	4413      	add	r3, r2
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	3b20      	subs	r3, #32
 8012b86:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012b88:	e09f      	b.n	8012cca <CopyBitData+0x182>
   else
   {
      /*
      ** Separate offsets into octets and bits.
      */
      AddBitsToOctetSize( iSrcOctetOffset, iSrcBitOffset );
 8012b8a:	893b      	ldrh	r3, [r7, #8]
 8012b8c:	08db      	lsrs	r3, r3, #3
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b92:	4413      	add	r3, r2
 8012b94:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012b96:	893b      	ldrh	r3, [r7, #8]
 8012b98:	f003 0307 	and.w	r3, r3, #7
 8012b9c:	813b      	strh	r3, [r7, #8]
      AddBitsToOctetSize( iDestOctetOffset, iDestBitOffset );
 8012b9e:	897b      	ldrh	r3, [r7, #10]
 8012ba0:	08db      	lsrs	r3, r3, #3
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	8c3b      	ldrh	r3, [r7, #32]
 8012ba6:	4413      	add	r3, r2
 8012ba8:	843b      	strh	r3, [r7, #32]
 8012baa:	897b      	ldrh	r3, [r7, #10]
 8012bac:	f003 0307 	and.w	r3, r3, #7
 8012bb0:	817b      	strh	r3, [r7, #10]

      /*
      ** Calculate number of bits to be set.
      */
      if( bDataType == ABP_BOOL1 )
 8012bb2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012bb6:	2b40      	cmp	r3, #64	@ 0x40
 8012bb8:	d103      	bne.n	8012bc2 <CopyBitData+0x7a>
      {
         iSetBitSize += 1;
 8012bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012bc0:	e007      	b.n	8012bd2 <CopyBitData+0x8a>
      }
      else
      {
         iSetBitSize += ( ( bDataType - ABP_BIT1 ) + 1 );
 8012bc2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bca:	4413      	add	r3, r2
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	3b40      	subs	r3, #64	@ 0x40
 8012bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      for( i = 0; i < iNumElem; i++ )
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012bd6:	e06f      	b.n	8012cb8 <CopyBitData+0x170>
      {
         /*
         ** Calculate the number of octets that has to be copied
         ** to include both destination bit offset and bit size.
         */
         bCopySize = (UINT8)( ( iSetBitSize + iDestBitOffset + 7 ) / 8 );
 8012bd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012bda:	897b      	ldrh	r3, [r7, #10]
 8012bdc:	4413      	add	r3, r2
 8012bde:	3307      	adds	r3, #7
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	da00      	bge.n	8012be6 <CopyBitData+0x9e>
 8012be4:	3307      	adds	r3, #7
 8012be6:	10db      	asrs	r3, r3, #3
 8012be8:	77fb      	strb	r3, [r7, #31]

         /*
         ** Copy parts to be manipulated into local 32 bit variables to
         ** guarantee correct alignment.
         */
         ABCC_PORT_CopyOctets( &lSrc, 0, pxSrc, iSrcOctetOffset,
 8012bea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	4413      	add	r3, r2
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	617b      	str	r3, [r7, #20]
                               ABP_UINT32_SIZEOF );
         ABCC_PORT_CopyOctets( &lDest, 0, pxDest, iDestOctetOffset, bCopySize );
 8012bf4:	8c3b      	ldrh	r3, [r7, #32]
 8012bf6:	68fa      	ldr	r2, [r7, #12]
 8012bf8:	18d1      	adds	r1, r2, r3
 8012bfa:	7ffa      	ldrb	r2, [r7, #31]
 8012bfc:	f107 0310 	add.w	r3, r7, #16
 8012c00:	4618      	mov	r0, r3
 8012c02:	f002 faae 	bl	8015162 <memcpy>

         /*
         ** Bit data types crossing octet boundaries are always little endian.
         */
         lSrc = lLeTOl( lSrc );
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	617b      	str	r3, [r7, #20]
         lDest = lLeTOl( lDest );
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	613b      	str	r3, [r7, #16]

         /*
         ** Calculate bit mask and align it with destination bit offset.
         */
         lBitMask = ( (UINT32)1 << iSetBitSize ) - 1;
 8012c0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c10:	2201      	movs	r2, #1
 8012c12:	fa02 f303 	lsl.w	r3, r2, r3
 8012c16:	3b01      	subs	r3, #1
 8012c18:	61bb      	str	r3, [r7, #24]
         lBitMask <<= iDestBitOffset;
 8012c1a:	897b      	ldrh	r3, [r7, #10]
 8012c1c:	69ba      	ldr	r2, [r7, #24]
 8012c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8012c22:	61bb      	str	r3, [r7, #24]

         /*
         ** Align source bits with destination bits
         */
         if( iSrcBitOffset <  iDestBitOffset )
 8012c24:	893a      	ldrh	r2, [r7, #8]
 8012c26:	897b      	ldrh	r3, [r7, #10]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d207      	bcs.n	8012c3c <CopyBitData+0xf4>
         {
            lSrc <<= iDestBitOffset - iSrcBitOffset;
 8012c2c:	697a      	ldr	r2, [r7, #20]
 8012c2e:	8979      	ldrh	r1, [r7, #10]
 8012c30:	893b      	ldrh	r3, [r7, #8]
 8012c32:	1acb      	subs	r3, r1, r3
 8012c34:	fa02 f303 	lsl.w	r3, r2, r3
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	e006      	b.n	8012c4a <CopyBitData+0x102>
         }
         else
         {
            lSrc >>= iSrcBitOffset - iDestBitOffset;
 8012c3c:	697a      	ldr	r2, [r7, #20]
 8012c3e:	8939      	ldrh	r1, [r7, #8]
 8012c40:	897b      	ldrh	r3, [r7, #10]
 8012c42:	1acb      	subs	r3, r1, r3
 8012c44:	fa22 f303 	lsr.w	r3, r2, r3
 8012c48:	617b      	str	r3, [r7, #20]

         /*
         ** Clear destinations bits and mask source bits an insert source bits
         ** into destination bit position.
         */
         lDest &=  ~lBitMask;
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	43da      	mvns	r2, r3
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	4013      	ands	r3, r2
 8012c52:	613b      	str	r3, [r7, #16]
         lSrc &=  lBitMask;
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	69bb      	ldr	r3, [r7, #24]
 8012c58:	4013      	ands	r3, r2
 8012c5a:	617b      	str	r3, [r7, #20]
         lDest |= lSrc;
 8012c5c:	693a      	ldr	r2, [r7, #16]
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	4313      	orrs	r3, r2
 8012c62:	613b      	str	r3, [r7, #16]

         /*
         ** Restore endian.
         */
         lDest = lTOlLe( lDest );
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	613b      	str	r3, [r7, #16]

         /*
         ** Copy local updated data into final destination.
         */
         ABCC_PORT_CopyOctets( pxDest, iDestOctetOffset, &lDest, 0, bCopySize );
 8012c68:	8c3b      	ldrh	r3, [r7, #32]
 8012c6a:	68fa      	ldr	r2, [r7, #12]
 8012c6c:	4413      	add	r3, r2
 8012c6e:	7ffa      	ldrb	r2, [r7, #31]
 8012c70:	f107 0110 	add.w	r1, r7, #16
 8012c74:	4618      	mov	r0, r3
 8012c76:	f002 fa74 	bl	8015162 <memcpy>

         /*
         ** Update bit offsets to next bit field.
         */
         iSrcBitOffset += iSetBitSize;
 8012c7a:	893a      	ldrh	r2, [r7, #8]
 8012c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c7e:	4413      	add	r3, r2
 8012c80:	813b      	strh	r3, [r7, #8]
         AddBitsToOctetSize( iSrcOctetOffset, iSrcBitOffset );
 8012c82:	893b      	ldrh	r3, [r7, #8]
 8012c84:	08db      	lsrs	r3, r3, #3
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012c8a:	4413      	add	r3, r2
 8012c8c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012c8e:	893b      	ldrh	r3, [r7, #8]
 8012c90:	f003 0307 	and.w	r3, r3, #7
 8012c94:	813b      	strh	r3, [r7, #8]
         iDestBitOffset += iSetBitSize;
 8012c96:	897a      	ldrh	r2, [r7, #10]
 8012c98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c9a:	4413      	add	r3, r2
 8012c9c:	817b      	strh	r3, [r7, #10]
         AddBitsToOctetSize( iDestOctetOffset, iDestBitOffset );
 8012c9e:	897b      	ldrh	r3, [r7, #10]
 8012ca0:	08db      	lsrs	r3, r3, #3
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	8c3b      	ldrh	r3, [r7, #32]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	843b      	strh	r3, [r7, #32]
 8012caa:	897b      	ldrh	r3, [r7, #10]
 8012cac:	f003 0307 	and.w	r3, r3, #7
 8012cb0:	817b      	strh	r3, [r7, #10]
      for( i = 0; i < iNumElem; i++ )
 8012cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8012cb8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012cba:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d38b      	bcc.n	8012bd8 <CopyBitData+0x90>
      }
      iSetBitSize *= iNumElem;
 8012cc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012cc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012cc4:	fb12 f303 	smulbb	r3, r2, r3
 8012cc8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   }
   return( iSetBitSize );
 8012cca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3728      	adds	r7, #40	@ 0x28
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <CopyValue>:
                         UINT16 iDestBitOffset,
                         const void* pxSrc,
                         UINT16 iSrcBitOffset,
                         UINT8 bDataType,
                         UINT16 iNumElem )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b088      	sub	sp, #32
 8012cd8:	af02      	add	r7, sp, #8
 8012cda:	60f8      	str	r0, [r7, #12]
 8012cdc:	607a      	str	r2, [r7, #4]
 8012cde:	461a      	mov	r2, r3
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	817b      	strh	r3, [r7, #10]
 8012ce4:	4613      	mov	r3, r2
 8012ce6:	813b      	strh	r3, [r7, #8]
   UINT8 bDataTypeSizeInOctets;
   UINT16 iBitSetSize;

   if( Is_BITx_Or_PADx( bDataType ) || ( bDataType == ABP_BOOL1 ) )
 8012ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012cec:	2b1f      	cmp	r3, #31
 8012cee:	d903      	bls.n	8012cf8 <CopyValue+0x24>
 8012cf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012cf4:	2b30      	cmp	r3, #48	@ 0x30
 8012cf6:	d90b      	bls.n	8012d10 <CopyValue+0x3c>
 8012cf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012cfc:	2b40      	cmp	r3, #64	@ 0x40
 8012cfe:	d903      	bls.n	8012d08 <CopyValue+0x34>
 8012d00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d04:	2b47      	cmp	r3, #71	@ 0x47
 8012d06:	d903      	bls.n	8012d10 <CopyValue+0x3c>
 8012d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d0c:	2b40      	cmp	r3, #64	@ 0x40
 8012d0e:	d10e      	bne.n	8012d2e <CopyValue+0x5a>
   {
      iBitSetSize = CopyBitData( pxDst,
 8012d10:	893a      	ldrh	r2, [r7, #8]
 8012d12:	8979      	ldrh	r1, [r7, #10]
 8012d14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012d16:	9301      	str	r3, [sp, #4]
 8012d18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	4613      	mov	r3, r2
 8012d20:	687a      	ldr	r2, [r7, #4]
 8012d22:	68f8      	ldr	r0, [r7, #12]
 8012d24:	f7ff ff10 	bl	8012b48 <CopyBitData>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	82fb      	strh	r3, [r7, #22]
 8012d2c:	e07a      	b.n	8012e24 <CopyValue+0x150>
                                 bDataType,
                                 iNumElem );
   }
   else
   {
      bDataTypeSizeInOctets = ABCC_GetDataTypeSize( bDataType );
 8012d2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7f9 ff9c 	bl	800cc70 <ABCC_GetDataTypeSize>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	757b      	strb	r3, [r7, #21]

      if( ad_fDoNetworkEndianSwap )
 8012d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8012e30 <CopyValue+0x15c>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d052      	beq.n	8012dea <CopyValue+0x116>
      {
         switch( bDataTypeSizeInOctets )
 8012d44:	7d7b      	ldrb	r3, [r7, #21]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	2b07      	cmp	r3, #7
 8012d4a:	d862      	bhi.n	8012e12 <CopyValue+0x13e>
 8012d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8012d54 <CopyValue+0x80>)
 8012d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d52:	bf00      	nop
 8012d54:	08012d75 	.word	0x08012d75
 8012d58:	08012d97 	.word	0x08012d97
 8012d5c:	08012e13 	.word	0x08012e13
 8012d60:	08012db3 	.word	0x08012db3
 8012d64:	08012e13 	.word	0x08012e13
 8012d68:	08012e13 	.word	0x08012e13
 8012d6c:	08012e13 	.word	0x08012e13
 8012d70:	08012dcf 	.word	0x08012dcf
         {
         case 1:
            ABCC_PORT_CopyOctets( pxDst, BitToOctetOffset( iDestBitOffset ),
 8012d74:	897b      	ldrh	r3, [r7, #10]
 8012d76:	08db      	lsrs	r3, r3, #3
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	1898      	adds	r0, r3, r2
 8012d80:	893b      	ldrh	r3, [r7, #8]
 8012d82:	08db      	lsrs	r3, r3, #3
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	461a      	mov	r2, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012d8e:	4619      	mov	r1, r3
 8012d90:	f002 f9e7 	bl	8015162 <memcpy>
                                  pxSrc, BitToOctetOffset( iSrcBitOffset ),
                                  iNumElem );
            break;
 8012d94:	e03e      	b.n	8012e14 <CopyValue+0x140>

         case 2:
            Copy16WithEndianSwap( pxDst, BitToOctetOffset( iDestBitOffset ),
 8012d96:	897b      	ldrh	r3, [r7, #10]
 8012d98:	08db      	lsrs	r3, r3, #3
 8012d9a:	b299      	uxth	r1, r3
 8012d9c:	893b      	ldrh	r3, [r7, #8]
 8012d9e:	08db      	lsrs	r3, r3, #3
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	4613      	mov	r3, r2
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f7ff f918 	bl	8011fe0 <Copy16WithEndianSwap>
                                  pxSrc, BitToOctetOffset( iSrcBitOffset ),
                                  iNumElem );
            break;
 8012db0:	e030      	b.n	8012e14 <CopyValue+0x140>

         case 4:
            Copy32WithEndianSwap( pxDst, BitToOctetOffset( iDestBitOffset ),
 8012db2:	897b      	ldrh	r3, [r7, #10]
 8012db4:	08db      	lsrs	r3, r3, #3
 8012db6:	b299      	uxth	r1, r3
 8012db8:	893b      	ldrh	r3, [r7, #8]
 8012dba:	08db      	lsrs	r3, r3, #3
 8012dbc:	b29a      	uxth	r2, r3
 8012dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	687a      	ldr	r2, [r7, #4]
 8012dc6:	68f8      	ldr	r0, [r7, #12]
 8012dc8:	f7ff f944 	bl	8012054 <Copy32WithEndianSwap>
                                  pxSrc, BitToOctetOffset( iSrcBitOffset ),
                                  iNumElem );
            break;
 8012dcc:	e022      	b.n	8012e14 <CopyValue+0x140>

#if( ABCC_CFG_64BIT_ADI_SUPPORT_ENABLED || ABCC_CFG_DOUBLE_ADI_SUPPORT_ENABLED )
         case 8:
            Copy64WithEndianSwap( pxDst, BitToOctetOffset( iDestBitOffset ),
 8012dce:	897b      	ldrh	r3, [r7, #10]
 8012dd0:	08db      	lsrs	r3, r3, #3
 8012dd2:	b299      	uxth	r1, r3
 8012dd4:	893b      	ldrh	r3, [r7, #8]
 8012dd6:	08db      	lsrs	r3, r3, #3
 8012dd8:	b29a      	uxth	r2, r3
 8012dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	4613      	mov	r3, r2
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	68f8      	ldr	r0, [r7, #12]
 8012de4:	f7ff f980 	bl	80120e8 <Copy64WithEndianSwap>
                                  pxSrc, BitToOctetOffset( iSrcBitOffset ),
                                  iNumElem );
            break;
 8012de8:	e014      	b.n	8012e14 <CopyValue+0x140>
            break;
         }
      }
      else
      {
         ABCC_PORT_CopyOctets( pxDst, BitToOctetOffset( iDestBitOffset ),
 8012dea:	897b      	ldrh	r3, [r7, #10]
 8012dec:	08db      	lsrs	r3, r3, #3
 8012dee:	b29b      	uxth	r3, r3
 8012df0:	461a      	mov	r2, r3
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	1898      	adds	r0, r3, r2
 8012df6:	893b      	ldrh	r3, [r7, #8]
 8012df8:	08db      	lsrs	r3, r3, #3
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	1899      	adds	r1, r3, r2
 8012e02:	7d7b      	ldrb	r3, [r7, #21]
 8012e04:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012e06:	fb02 f303 	mul.w	r3, r2, r3
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	f002 f9a9 	bl	8015162 <memcpy>
 8012e10:	e000      	b.n	8012e14 <CopyValue+0x140>
            break;
 8012e12:	bf00      	nop
                               pxSrc, BitToOctetOffset( iSrcBitOffset ),
                               bDataTypeSizeInOctets * iNumElem );
      }

      iBitSetSize = ( iNumElem * bDataTypeSizeInOctets ) << 3;
 8012e14:	7d7b      	ldrb	r3, [r7, #21]
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012e1a:	fb12 f303 	smulbb	r3, r2, r3
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	82fb      	strh	r3, [r7, #22]
   }

   return( iBitSetSize );
 8012e24:	8afb      	ldrh	r3, [r7, #22]
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3718      	adds	r7, #24
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	24003f7c 	.word	0x24003f7c

08012e34 <SetAdiValue>:
                         void* pxData,
                         UINT8 bNumElements,
                         UINT8 bStartIndex,
                         UINT16* piSrcBitOffset,
                         BOOL fExplicit )
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b089      	sub	sp, #36	@ 0x24
 8012e38:	af02      	add	r7, sp, #8
 8012e3a:	60f8      	str	r0, [r7, #12]
 8012e3c:	60b9      	str	r1, [r7, #8]
 8012e3e:	4611      	mov	r1, r2
 8012e40:	461a      	mov	r2, r3
 8012e42:	460b      	mov	r3, r1
 8012e44:	71fb      	strb	r3, [r7, #7]
 8012e46:	4613      	mov	r3, r2
 8012e48:	71bb      	strb	r3, [r7, #6]
   else
#else
   (void)fExplicit;
#endif
   {
      iDestBitOffset = CalcStartIndexBitOffset( psAdiEntry->bDataType, bStartIndex );
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7a1b      	ldrb	r3, [r3, #8]
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7f9 fede 	bl	800cc10 <ABCC_GetDataTypeSizeInBits>
 8012e54:	4603      	mov	r3, r0
 8012e56:	461a      	mov	r2, r3
 8012e58:	79bb      	ldrb	r3, [r7, #6]
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	fb12 f303 	smulbb	r3, r2, r3
 8012e60:	82fb      	strh	r3, [r7, #22]
      *piSrcBitOffset += CopyValue( psAdiEntry->uData.sVOID.pxValuePtr,
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	68d8      	ldr	r0, [r3, #12]
 8012e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e68:	881c      	ldrh	r4, [r3, #0]
                                    iDestBitOffset,
                                    pxData,
                                    *piSrcBitOffset,
                                    psAdiEntry->bDataType,
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	7a1b      	ldrb	r3, [r3, #8]
      *piSrcBitOffset += CopyValue( psAdiEntry->uData.sVOID.pxValuePtr,
 8012e6e:	79fa      	ldrb	r2, [r7, #7]
 8012e70:	b292      	uxth	r2, r2
 8012e72:	8af9      	ldrh	r1, [r7, #22]
 8012e74:	9201      	str	r2, [sp, #4]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	4623      	mov	r3, r4
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	f7ff ff2a 	bl	8012cd4 <CopyValue>
 8012e80:	4603      	mov	r3, r0
 8012e82:	461a      	mov	r2, r3
 8012e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	4413      	add	r3, r2
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e8e:	801a      	strh	r2, [r3, #0]
      psAdiEntry->pnSetAdiValue( psAdiEntry,
                                 bNumElements,
                                 bStartIndex );
   }
#endif
}
 8012e90:	bf00      	nop
 8012e92:	371c      	adds	r7, #28
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd90      	pop	{r4, r7, pc}

08012e98 <WriteBufferFromPdMap>:
**------------------------------------------------------------------------------
*/
static void WriteBufferFromPdMap( void* pxDstPdDataBuf,
                                  UINT16* piPdBitOffset,
                                  ad_MapInfoType* pasPdMap )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08a      	sub	sp, #40	@ 0x28
 8012e9c:	af04      	add	r7, sp, #16
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
   UINT16 iIndex;
   const ad_MapType* paiPdMap = pasPdMap->paiMappedAdiList;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	613b      	str	r3, [r7, #16]

   if( paiPdMap )
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d048      	beq.n	8012f42 <WriteBufferFromPdMap+0xaa>
   {
      for( iIndex = 0; iIndex < pasPdMap->iNumMappedAdi; iIndex++ )
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	82fb      	strh	r3, [r7, #22]
 8012eb4:	e040      	b.n	8012f38 <WriteBufferFromPdMap+0xa0>
      {
         if( paiPdMap->iAdiIndex != AD_MAP_PAD_INDEX )
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d02c      	beq.n	8012f1c <WriteBufferFromPdMap+0x84>
         {
            if( paiPdMap->iAdiIndex >= ad_iNumOfADIs )
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	881a      	ldrh	r2, [r3, #0]
 8012ec6:	4b21      	ldr	r3, [pc, #132]	@ (8012f4c <WriteBufferFromPdMap+0xb4>)
 8012ec8:	881b      	ldrh	r3, [r3, #0]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d30f      	bcc.n	8012eee <WriteBufferFromPdMap+0x56>
            {
               /*
               ** Pull the plug! The data in these tables should already have
               ** been checked and should be OK!
               */
               ABCC_LOG_FATAL( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	693b      	ldr	r3, [r7, #16]
 8012ed6:	881b      	ldrh	r3, [r3, #0]
 8012ed8:	9302      	str	r3, [sp, #8]
 8012eda:	4b1d      	ldr	r3, [pc, #116]	@ (8012f50 <WriteBufferFromPdMap+0xb8>)
 8012edc:	9301      	str	r3, [sp, #4]
 8012ede:	f240 6384 	movw	r3, #1668	@ 0x684
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8012f54 <WriteBufferFromPdMap+0xbc>)
 8012ee6:	2121      	movs	r1, #33	@ 0x21
 8012ee8:	2000      	movs	r0, #0
 8012eea:	f7fa fbad 	bl	800d648 <ABCC_LogHandler>
                  (UINT32)paiPdMap->iAdiIndex,
                  "Error in PD map configuration, ADI index out of range (%" PRIu16 ")\n",
                  paiPdMap->iAdiIndex );
            }
            AD_GetAdiValue( &ad_asADIEntryList[ paiPdMap->iAdiIndex ],
 8012eee:	4b1a      	ldr	r3, [pc, #104]	@ (8012f58 <WriteBufferFromPdMap+0xc0>)
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	693b      	ldr	r3, [r7, #16]
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	4619      	mov	r1, r3
 8012ef8:	460b      	mov	r3, r1
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	440b      	add	r3, r1
 8012efe:	009b      	lsls	r3, r3, #2
 8012f00:	18d0      	adds	r0, r2, r3
                            pxDstPdDataBuf,
                            paiPdMap->bNumElements,
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	789a      	ldrb	r2, [r3, #2]
                            paiPdMap->bStartIndex,
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	78d9      	ldrb	r1, [r3, #3]
            AD_GetAdiValue( &ad_asADIEntryList[ paiPdMap->iAdiIndex ],
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	9300      	str	r3, [sp, #0]
 8012f12:	460b      	mov	r3, r1
 8012f14:	68f9      	ldr	r1, [r7, #12]
 8012f16:	f001 f89f 	bl	8014058 <AD_GetAdiValue>
 8012f1a:	e007      	b.n	8012f2c <WriteBufferFromPdMap+0x94>
                            piPdBitOffset,
                            FALSE );
         }
         else
         {
            *piPdBitOffset += paiPdMap->bNumElements;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	881b      	ldrh	r3, [r3, #0]
 8012f20:	693a      	ldr	r2, [r7, #16]
 8012f22:	7892      	ldrb	r2, [r2, #2]
 8012f24:	4413      	add	r3, r2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	801a      	strh	r2, [r3, #0]
         }

         paiPdMap++;
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	3304      	adds	r3, #4
 8012f30:	613b      	str	r3, [r7, #16]
      for( iIndex = 0; iIndex < pasPdMap->iNumMappedAdi; iIndex++ )
 8012f32:	8afb      	ldrh	r3, [r7, #22]
 8012f34:	3301      	adds	r3, #1
 8012f36:	82fb      	strh	r3, [r7, #22]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	889b      	ldrh	r3, [r3, #4]
 8012f3c:	8afa      	ldrh	r2, [r7, #22]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	d3b9      	bcc.n	8012eb6 <WriteBufferFromPdMap+0x1e>
      }
   }
}
 8012f42:	bf00      	nop
 8012f44:	3718      	adds	r7, #24
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	24003f88 	.word	0x24003f88
 8012f50:	08017248 	.word	0x08017248
 8012f54:	0801722c 	.word	0x0801722c
 8012f58:	24003f84 	.word	0x24003f84

08012f5c <WritePdMapFromBuffer>:
**------------------------------------------------------------------------------
*/
static void WritePdMapFromBuffer( const ad_MapInfoType* pasPdMap,
                                  void* pxSrcPdDataBuf,
                                  UINT16* piPdBitOffset )
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b08a      	sub	sp, #40	@ 0x28
 8012f60:	af04      	add	r7, sp, #16
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
   UINT16 iIndex;
   const ad_MapType* paiPdMap = pasPdMap->paiMappedAdiList;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	613b      	str	r3, [r7, #16]

   if( paiPdMap )
 8012f6e:	693b      	ldr	r3, [r7, #16]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d048      	beq.n	8013006 <WritePdMapFromBuffer+0xaa>
   {
      for( iIndex = 0; iIndex < pasPdMap->iNumMappedAdi; iIndex++ )
 8012f74:	2300      	movs	r3, #0
 8012f76:	82fb      	strh	r3, [r7, #22]
 8012f78:	e040      	b.n	8012ffc <WritePdMapFromBuffer+0xa0>
      {
         if( paiPdMap->iAdiIndex != AD_MAP_PAD_INDEX )
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d02c      	beq.n	8012fe0 <WritePdMapFromBuffer+0x84>
         {
            if( paiPdMap->iAdiIndex >= ad_iNumOfADIs )
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	881a      	ldrh	r2, [r3, #0]
 8012f8a:	4b21      	ldr	r3, [pc, #132]	@ (8013010 <WritePdMapFromBuffer+0xb4>)
 8012f8c:	881b      	ldrh	r3, [r3, #0]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d30f      	bcc.n	8012fb2 <WritePdMapFromBuffer+0x56>
            {
               /*
               ** Pull the plug! The data in these tables should already have
               ** been checked and should be OK!
               */
               ABCC_LOG_FATAL( ABCC_EC_ERROR_IN_READ_MAP_CONFIG,
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	461a      	mov	r2, r3
 8012f98:	693b      	ldr	r3, [r7, #16]
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8013014 <WritePdMapFromBuffer+0xb8>)
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	f240 63bb 	movw	r3, #1723	@ 0x6bb
 8012fa6:	9300      	str	r3, [sp, #0]
 8012fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8013018 <WritePdMapFromBuffer+0xbc>)
 8012faa:	2111      	movs	r1, #17
 8012fac:	2000      	movs	r0, #0
 8012fae:	f7fa fb4b 	bl	800d648 <ABCC_LogHandler>
                  (UINT32)paiPdMap->iAdiIndex,
                  "Error in read map configuration, ADI index out of range (%" PRIu16 ")\n",
                  paiPdMap->iAdiIndex );
            }
            SetAdiValue( &ad_asADIEntryList[ paiPdMap->iAdiIndex ],
 8012fb2:	4b1a      	ldr	r3, [pc, #104]	@ (801301c <WritePdMapFromBuffer+0xc0>)
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	4619      	mov	r1, r3
 8012fbc:	460b      	mov	r3, r1
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	440b      	add	r3, r1
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	18d0      	adds	r0, r2, r3
                         pxSrcPdDataBuf,
                         paiPdMap->bNumElements,
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	789a      	ldrb	r2, [r3, #2]
                         paiPdMap->bStartIndex,
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	78d9      	ldrb	r1, [r3, #3]
            SetAdiValue( &ad_asADIEntryList[ paiPdMap->iAdiIndex ],
 8012fce:	2300      	movs	r3, #0
 8012fd0:	9301      	str	r3, [sp, #4]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	68b9      	ldr	r1, [r7, #8]
 8012fda:	f7ff ff2b 	bl	8012e34 <SetAdiValue>
 8012fde:	e007      	b.n	8012ff0 <WritePdMapFromBuffer+0x94>
                         piPdBitOffset,
                         FALSE );
         }
         else
         {
            *piPdBitOffset += paiPdMap->bNumElements;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	7892      	ldrb	r2, [r2, #2]
 8012fe8:	4413      	add	r3, r2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	801a      	strh	r2, [r3, #0]
         }

         paiPdMap++;
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	3304      	adds	r3, #4
 8012ff4:	613b      	str	r3, [r7, #16]
      for( iIndex = 0; iIndex < pasPdMap->iNumMappedAdi; iIndex++ )
 8012ff6:	8afb      	ldrh	r3, [r7, #22]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	82fb      	strh	r3, [r7, #22]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	889b      	ldrh	r3, [r3, #4]
 8013000:	8afa      	ldrh	r2, [r7, #22]
 8013002:	429a      	cmp	r2, r3
 8013004:	d3b9      	bcc.n	8012f7a <WritePdMapFromBuffer+0x1e>
      }
   }
}
 8013006:	bf00      	nop
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}
 801300e:	bf00      	nop
 8013010:	24003f88 	.word	0x24003f88
 8013014:	080172b4 	.word	0x080172b4
 8013018:	0801722c 	.word	0x0801722c
 801301c:	24003f84 	.word	0x24003f84

08013020 <AD_Init>:
EXTFUNC ABCC_ErrorCodeType AD_Init( const AD_AdiEntryType* psAdiEntry,
                                  UINT16 iNumAdi,
                                  const AD_MapType* psDefaultMap )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b08a      	sub	sp, #40	@ 0x28
 8013024:	af04      	add	r7, sp, #16
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	460b      	mov	r3, r1
 801302a:	607a      	str	r2, [r7, #4]
 801302c:	817b      	strh	r3, [r7, #10]
   UINT16 iMapIndex = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	82fb      	strh	r3, [r7, #22]
   UINT16 iAdiIndex = 0;
 8013032:	2300      	movs	r3, #0
 8013034:	82bb      	strh	r3, [r7, #20]
   UINT8 bElemStartIndex;
   /*
   ** In this context we should initialize the AD object to be prepared for
   ** startup.
   */
   ad_asADIEntryList = psAdiEntry;
 8013036:	4a9a      	ldr	r2, [pc, #616]	@ (80132a0 <AD_Init+0x280>)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6013      	str	r3, [r2, #0]
   ad_asDefaultMap = psDefaultMap;
 801303c:	4a99      	ldr	r2, [pc, #612]	@ (80132a4 <AD_Init+0x284>)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6013      	str	r3, [r2, #0]

   ad_iNumOfADIs =  iNumAdi;
 8013042:	4a99      	ldr	r2, [pc, #612]	@ (80132a8 <AD_Init+0x288>)
 8013044:	897b      	ldrh	r3, [r7, #10]
 8013046:	8013      	strh	r3, [r2, #0]
   ad_iHighestInstanceNumber = 0;
 8013048:	4b98      	ldr	r3, [pc, #608]	@ (80132ac <AD_Init+0x28c>)
 801304a:	2200      	movs	r2, #0
 801304c:	801a      	strh	r2, [r3, #0]

   ad_ReadMapInfo.paiMappedAdiList = ad_PdReadMapping;
 801304e:	4b98      	ldr	r3, [pc, #608]	@ (80132b0 <AD_Init+0x290>)
 8013050:	4a98      	ldr	r2, [pc, #608]	@ (80132b4 <AD_Init+0x294>)
 8013052:	601a      	str	r2, [r3, #0]
   ad_ReadMapInfo.iPdSize = 0;
 8013054:	4b96      	ldr	r3, [pc, #600]	@ (80132b0 <AD_Init+0x290>)
 8013056:	2200      	movs	r2, #0
 8013058:	811a      	strh	r2, [r3, #8]
   ad_ReadMapInfo.iNumMappedAdi = 0;
 801305a:	4b95      	ldr	r3, [pc, #596]	@ (80132b0 <AD_Init+0x290>)
 801305c:	2200      	movs	r2, #0
 801305e:	809a      	strh	r2, [r3, #4]
   ad_ReadMapInfo.iMaxNumMappedAdi = AD_MAX_NUM_READ_MAP_ENTRIES;
 8013060:	4b93      	ldr	r3, [pc, #588]	@ (80132b0 <AD_Init+0x290>)
 8013062:	2240      	movs	r2, #64	@ 0x40
 8013064:	80da      	strh	r2, [r3, #6]

   ad_WriteMapInfo.paiMappedAdiList = ad_PdWriteMapping;
 8013066:	4b94      	ldr	r3, [pc, #592]	@ (80132b8 <AD_Init+0x298>)
 8013068:	4a94      	ldr	r2, [pc, #592]	@ (80132bc <AD_Init+0x29c>)
 801306a:	601a      	str	r2, [r3, #0]
   ad_WriteMapInfo.iPdSize = 0;
 801306c:	4b92      	ldr	r3, [pc, #584]	@ (80132b8 <AD_Init+0x298>)
 801306e:	2200      	movs	r2, #0
 8013070:	811a      	strh	r2, [r3, #8]
   ad_WriteMapInfo.iNumMappedAdi = 0;
 8013072:	4b91      	ldr	r3, [pc, #580]	@ (80132b8 <AD_Init+0x298>)
 8013074:	2200      	movs	r2, #0
 8013076:	809a      	strh	r2, [r3, #4]
   ad_WriteMapInfo.iMaxNumMappedAdi = AD_MAX_NUM_WRITE_MAP_ENTRIES;
 8013078:	4b8f      	ldr	r3, [pc, #572]	@ (80132b8 <AD_Init+0x298>)
 801307a:	2240      	movs	r2, #64	@ 0x40
 801307c:	80da      	strh	r2, [r3, #6]

   if( ad_asDefaultMap != NULL )
 801307e:	4b89      	ldr	r3, [pc, #548]	@ (80132a4 <AD_Init+0x284>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	f000 80ec 	beq.w	8013260 <AD_Init+0x240>
   {
      while( ad_asDefaultMap[ iMapIndex ].eDir != PD_END_MAP )
 8013088:	e0de      	b.n	8013248 <AD_Init+0x228>
      {
         iAdiIndex = GetAdiIndex( ad_asDefaultMap[ iMapIndex ].iInstance );
 801308a:	4b86      	ldr	r3, [pc, #536]	@ (80132a4 <AD_Init+0x284>)
 801308c:	6819      	ldr	r1, [r3, #0]
 801308e:	8afa      	ldrh	r2, [r7, #22]
 8013090:	4613      	mov	r3, r2
 8013092:	005b      	lsls	r3, r3, #1
 8013094:	4413      	add	r3, r2
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	440b      	add	r3, r1
 801309a:	881b      	ldrh	r3, [r3, #0]
 801309c:	4618      	mov	r0, r3
 801309e:	f7ff f971 	bl	8012384 <GetAdiIndex>
 80130a2:	4603      	mov	r3, r0
 80130a4:	82bb      	strh	r3, [r7, #20]

         if( iAdiIndex == AD_INVALID_ADI_INDEX )
 80130a6:	8abb      	ldrh	r3, [r7, #20]
 80130a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130ac:	4293      	cmp	r3, r2
 80130ae:	d120      	bne.n	80130f2 <AD_Init+0xd2>
         {
            ABCC_LOG_ERROR( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 80130b0:	4b7c      	ldr	r3, [pc, #496]	@ (80132a4 <AD_Init+0x284>)
 80130b2:	6819      	ldr	r1, [r3, #0]
 80130b4:	8afa      	ldrh	r2, [r7, #22]
 80130b6:	4613      	mov	r3, r2
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	4413      	add	r3, r2
 80130bc:	005b      	lsls	r3, r3, #1
 80130be:	440b      	add	r3, r1
 80130c0:	881b      	ldrh	r3, [r3, #0]
 80130c2:	4618      	mov	r0, r3
 80130c4:	4b77      	ldr	r3, [pc, #476]	@ (80132a4 <AD_Init+0x284>)
 80130c6:	6819      	ldr	r1, [r3, #0]
 80130c8:	8afa      	ldrh	r2, [r7, #22]
 80130ca:	4613      	mov	r3, r2
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	4413      	add	r3, r2
 80130d0:	005b      	lsls	r3, r3, #1
 80130d2:	440b      	add	r3, r1
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	9302      	str	r3, [sp, #8]
 80130d8:	4b79      	ldr	r3, [pc, #484]	@ (80132c0 <AD_Init+0x2a0>)
 80130da:	9301      	str	r3, [sp, #4]
 80130dc:	f240 63f4 	movw	r3, #1780	@ 0x6f4
 80130e0:	9300      	str	r3, [sp, #0]
 80130e2:	4b78      	ldr	r3, [pc, #480]	@ (80132c4 <AD_Init+0x2a4>)
 80130e4:	4602      	mov	r2, r0
 80130e6:	2121      	movs	r1, #33	@ 0x21
 80130e8:	2001      	movs	r0, #1
 80130ea:	f7fa faad 	bl	800d648 <ABCC_LogHandler>
               ad_asDefaultMap[ iMapIndex ].iInstance,
               "Requested ADI could not be found (%" PRIu16 ")\n",
               ad_asDefaultMap[ iMapIndex ].iInstance );

            return( ABCC_EC_ERROR_IN_PD_MAP_CONFIG );
 80130ee:	2321      	movs	r3, #33	@ 0x21
 80130f0:	e12e      	b.n	8013350 <AD_Init+0x330>
         }

         bNumElem = ad_asDefaultMap[ iMapIndex ].bNumElem;
 80130f2:	4b6c      	ldr	r3, [pc, #432]	@ (80132a4 <AD_Init+0x284>)
 80130f4:	6819      	ldr	r1, [r3, #0]
 80130f6:	8afa      	ldrh	r2, [r7, #22]
 80130f8:	4613      	mov	r3, r2
 80130fa:	005b      	lsls	r3, r3, #1
 80130fc:	4413      	add	r3, r2
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	440b      	add	r3, r1
 8013102:	78db      	ldrb	r3, [r3, #3]
 8013104:	74fb      	strb	r3, [r7, #19]
         bElemStartIndex = ad_asDefaultMap[ iMapIndex ].bElemStartIndex;
 8013106:	4b67      	ldr	r3, [pc, #412]	@ (80132a4 <AD_Init+0x284>)
 8013108:	6819      	ldr	r1, [r3, #0]
 801310a:	8afa      	ldrh	r2, [r7, #22]
 801310c:	4613      	mov	r3, r2
 801310e:	005b      	lsls	r3, r3, #1
 8013110:	4413      	add	r3, r2
 8013112:	005b      	lsls	r3, r3, #1
 8013114:	440b      	add	r3, r1
 8013116:	791b      	ldrb	r3, [r3, #4]
 8013118:	74bb      	strb	r3, [r7, #18]

         if( iAdiIndex != AD_MAP_PAD_INDEX )
 801311a:	8abb      	ldrh	r3, [r7, #20]
 801311c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013120:	4293      	cmp	r3, r2
 8013122:	d016      	beq.n	8013152 <AD_Init+0x132>
         {
            if( ad_asDefaultMap[ iMapIndex ].bNumElem == AD_MAP_ALL_ELEM )
 8013124:	4b5f      	ldr	r3, [pc, #380]	@ (80132a4 <AD_Init+0x284>)
 8013126:	6819      	ldr	r1, [r3, #0]
 8013128:	8afa      	ldrh	r2, [r7, #22]
 801312a:	4613      	mov	r3, r2
 801312c:	005b      	lsls	r3, r3, #1
 801312e:	4413      	add	r3, r2
 8013130:	005b      	lsls	r3, r3, #1
 8013132:	440b      	add	r3, r1
 8013134:	78db      	ldrb	r3, [r3, #3]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d10b      	bne.n	8013152 <AD_Init+0x132>
            {
               bNumElem = ad_asADIEntryList[ iAdiIndex ].bNumOfElements;
 801313a:	4b59      	ldr	r3, [pc, #356]	@ (80132a0 <AD_Init+0x280>)
 801313c:	6819      	ldr	r1, [r3, #0]
 801313e:	8aba      	ldrh	r2, [r7, #20]
 8013140:	4613      	mov	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	440b      	add	r3, r1
 801314a:	7a5b      	ldrb	r3, [r3, #9]
 801314c:	74fb      	strb	r3, [r7, #19]
               bElemStartIndex = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	74bb      	strb	r3, [r7, #18]
            }
         }

         if( ad_asDefaultMap[ iMapIndex ].eDir == PD_READ )
 8013152:	4b54      	ldr	r3, [pc, #336]	@ (80132a4 <AD_Init+0x284>)
 8013154:	6819      	ldr	r1, [r3, #0]
 8013156:	8afa      	ldrh	r2, [r7, #22]
 8013158:	4613      	mov	r3, r2
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	4413      	add	r3, r2
 801315e:	005b      	lsls	r3, r3, #1
 8013160:	440b      	add	r3, r1
 8013162:	789b      	ldrb	r3, [r3, #2]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d136      	bne.n	80131d6 <AD_Init+0x1b6>
         {
            if( ad_ReadMapInfo.iNumMappedAdi >= ad_ReadMapInfo.iMaxNumMappedAdi )
 8013168:	4b51      	ldr	r3, [pc, #324]	@ (80132b0 <AD_Init+0x290>)
 801316a:	889a      	ldrh	r2, [r3, #4]
 801316c:	4b50      	ldr	r3, [pc, #320]	@ (80132b0 <AD_Init+0x290>)
 801316e:	88db      	ldrh	r3, [r3, #6]
 8013170:	429a      	cmp	r2, r3
 8013172:	d311      	bcc.n	8013198 <AD_Init+0x178>
            {
               ABCC_LOG_ERROR( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 8013174:	4b4e      	ldr	r3, [pc, #312]	@ (80132b0 <AD_Init+0x290>)
 8013176:	889b      	ldrh	r3, [r3, #4]
 8013178:	461a      	mov	r2, r3
 801317a:	4b4d      	ldr	r3, [pc, #308]	@ (80132b0 <AD_Init+0x290>)
 801317c:	88db      	ldrh	r3, [r3, #6]
 801317e:	9302      	str	r3, [sp, #8]
 8013180:	4b51      	ldr	r3, [pc, #324]	@ (80132c8 <AD_Init+0x2a8>)
 8013182:	9301      	str	r3, [sp, #4]
 8013184:	f240 730c 	movw	r3, #1804	@ 0x70c
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	4b4e      	ldr	r3, [pc, #312]	@ (80132c4 <AD_Init+0x2a4>)
 801318c:	2121      	movs	r1, #33	@ 0x21
 801318e:	2001      	movs	r0, #1
 8013190:	f7fa fa5a 	bl	800d648 <ABCC_LogHandler>
                  ad_ReadMapInfo.iNumMappedAdi,
                  "Too many read mappings. Max: %" PRIu16 "\n",
                  ad_ReadMapInfo.iMaxNumMappedAdi );

               return( ABCC_EC_ERROR_IN_PD_MAP_CONFIG );
 8013194:	2321      	movs	r3, #33	@ 0x21
 8013196:	e0db      	b.n	8013350 <AD_Init+0x330>
            }

            ad_ReadMapInfo.paiMappedAdiList[ ad_ReadMapInfo.iNumMappedAdi ].bNumElements = bNumElem;
 8013198:	4b45      	ldr	r3, [pc, #276]	@ (80132b0 <AD_Init+0x290>)
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	4b44      	ldr	r3, [pc, #272]	@ (80132b0 <AD_Init+0x290>)
 801319e:	889b      	ldrh	r3, [r3, #4]
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	4413      	add	r3, r2
 80131a4:	7cfa      	ldrb	r2, [r7, #19]
 80131a6:	709a      	strb	r2, [r3, #2]
            ad_ReadMapInfo.paiMappedAdiList[ ad_ReadMapInfo.iNumMappedAdi ].bStartIndex = bElemStartIndex;
 80131a8:	4b41      	ldr	r3, [pc, #260]	@ (80132b0 <AD_Init+0x290>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	4b40      	ldr	r3, [pc, #256]	@ (80132b0 <AD_Init+0x290>)
 80131ae:	889b      	ldrh	r3, [r3, #4]
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	7cba      	ldrb	r2, [r7, #18]
 80131b6:	70da      	strb	r2, [r3, #3]
            ad_ReadMapInfo.paiMappedAdiList[ ad_ReadMapInfo.iNumMappedAdi ].iAdiIndex = iAdiIndex;
 80131b8:	4b3d      	ldr	r3, [pc, #244]	@ (80132b0 <AD_Init+0x290>)
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	4b3c      	ldr	r3, [pc, #240]	@ (80132b0 <AD_Init+0x290>)
 80131be:	889b      	ldrh	r3, [r3, #4]
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	4413      	add	r3, r2
 80131c4:	8aba      	ldrh	r2, [r7, #20]
 80131c6:	801a      	strh	r2, [r3, #0]
            ad_ReadMapInfo.iNumMappedAdi++;
 80131c8:	4b39      	ldr	r3, [pc, #228]	@ (80132b0 <AD_Init+0x290>)
 80131ca:	889b      	ldrh	r3, [r3, #4]
 80131cc:	3301      	adds	r3, #1
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	4b37      	ldr	r3, [pc, #220]	@ (80132b0 <AD_Init+0x290>)
 80131d2:	809a      	strh	r2, [r3, #4]
 80131d4:	e035      	b.n	8013242 <AD_Init+0x222>
         }
         else
         {
            if( ad_WriteMapInfo.iNumMappedAdi >= ad_WriteMapInfo.iMaxNumMappedAdi )
 80131d6:	4b38      	ldr	r3, [pc, #224]	@ (80132b8 <AD_Init+0x298>)
 80131d8:	889a      	ldrh	r2, [r3, #4]
 80131da:	4b37      	ldr	r3, [pc, #220]	@ (80132b8 <AD_Init+0x298>)
 80131dc:	88db      	ldrh	r3, [r3, #6]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d311      	bcc.n	8013206 <AD_Init+0x1e6>
            {
               ABCC_LOG_ERROR( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 80131e2:	4b35      	ldr	r3, [pc, #212]	@ (80132b8 <AD_Init+0x298>)
 80131e4:	889b      	ldrh	r3, [r3, #4]
 80131e6:	461a      	mov	r2, r3
 80131e8:	4b33      	ldr	r3, [pc, #204]	@ (80132b8 <AD_Init+0x298>)
 80131ea:	88db      	ldrh	r3, [r3, #6]
 80131ec:	9302      	str	r3, [sp, #8]
 80131ee:	4b37      	ldr	r3, [pc, #220]	@ (80132cc <AD_Init+0x2ac>)
 80131f0:	9301      	str	r3, [sp, #4]
 80131f2:	f240 731d 	movw	r3, #1821	@ 0x71d
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	4b32      	ldr	r3, [pc, #200]	@ (80132c4 <AD_Init+0x2a4>)
 80131fa:	2121      	movs	r1, #33	@ 0x21
 80131fc:	2001      	movs	r0, #1
 80131fe:	f7fa fa23 	bl	800d648 <ABCC_LogHandler>
                  ad_WriteMapInfo.iNumMappedAdi,
                  "Too many write mappings. Max: %" PRIu16 "\n",
                  ad_WriteMapInfo.iMaxNumMappedAdi );

               return( ABCC_EC_ERROR_IN_PD_MAP_CONFIG );
 8013202:	2321      	movs	r3, #33	@ 0x21
 8013204:	e0a4      	b.n	8013350 <AD_Init+0x330>
            }

            ad_WriteMapInfo.paiMappedAdiList[ ad_WriteMapInfo.iNumMappedAdi ].bNumElements = bNumElem;
 8013206:	4b2c      	ldr	r3, [pc, #176]	@ (80132b8 <AD_Init+0x298>)
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	4b2b      	ldr	r3, [pc, #172]	@ (80132b8 <AD_Init+0x298>)
 801320c:	889b      	ldrh	r3, [r3, #4]
 801320e:	009b      	lsls	r3, r3, #2
 8013210:	4413      	add	r3, r2
 8013212:	7cfa      	ldrb	r2, [r7, #19]
 8013214:	709a      	strb	r2, [r3, #2]
            ad_WriteMapInfo.paiMappedAdiList[ ad_WriteMapInfo.iNumMappedAdi ].bStartIndex = bElemStartIndex;
 8013216:	4b28      	ldr	r3, [pc, #160]	@ (80132b8 <AD_Init+0x298>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	4b27      	ldr	r3, [pc, #156]	@ (80132b8 <AD_Init+0x298>)
 801321c:	889b      	ldrh	r3, [r3, #4]
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	4413      	add	r3, r2
 8013222:	7cba      	ldrb	r2, [r7, #18]
 8013224:	70da      	strb	r2, [r3, #3]
            ad_WriteMapInfo.paiMappedAdiList[ ad_WriteMapInfo.iNumMappedAdi ].iAdiIndex = iAdiIndex;
 8013226:	4b24      	ldr	r3, [pc, #144]	@ (80132b8 <AD_Init+0x298>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	4b23      	ldr	r3, [pc, #140]	@ (80132b8 <AD_Init+0x298>)
 801322c:	889b      	ldrh	r3, [r3, #4]
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	4413      	add	r3, r2
 8013232:	8aba      	ldrh	r2, [r7, #20]
 8013234:	801a      	strh	r2, [r3, #0]
            ad_WriteMapInfo.iNumMappedAdi++;
 8013236:	4b20      	ldr	r3, [pc, #128]	@ (80132b8 <AD_Init+0x298>)
 8013238:	889b      	ldrh	r3, [r3, #4]
 801323a:	3301      	adds	r3, #1
 801323c:	b29a      	uxth	r2, r3
 801323e:	4b1e      	ldr	r3, [pc, #120]	@ (80132b8 <AD_Init+0x298>)
 8013240:	809a      	strh	r2, [r3, #4]
         }
         iMapIndex++;
 8013242:	8afb      	ldrh	r3, [r7, #22]
 8013244:	3301      	adds	r3, #1
 8013246:	82fb      	strh	r3, [r7, #22]
      while( ad_asDefaultMap[ iMapIndex ].eDir != PD_END_MAP )
 8013248:	4b16      	ldr	r3, [pc, #88]	@ (80132a4 <AD_Init+0x284>)
 801324a:	6819      	ldr	r1, [r3, #0]
 801324c:	8afa      	ldrh	r2, [r7, #22]
 801324e:	4613      	mov	r3, r2
 8013250:	005b      	lsls	r3, r3, #1
 8013252:	4413      	add	r3, r2
 8013254:	005b      	lsls	r3, r3, #1
 8013256:	440b      	add	r3, r1
 8013258:	789b      	ldrb	r3, [r3, #2]
 801325a:	2b02      	cmp	r3, #2
 801325c:	f47f af15 	bne.w	801308a <AD_Init+0x6a>
      }
   }

   UpdateMapSize( &ad_WriteMapInfo );
 8013260:	4815      	ldr	r0, [pc, #84]	@ (80132b8 <AD_Init+0x298>)
 8013262:	f7ff f81d 	bl	80122a0 <UpdateMapSize>
   UpdateMapSize( &ad_ReadMapInfo );
 8013266:	4812      	ldr	r0, [pc, #72]	@ (80132b0 <AD_Init+0x290>)
 8013268:	f7ff f81a 	bl	80122a0 <UpdateMapSize>

   if( ad_ReadMapInfo.iPdSize > ABCC_CFG_MAX_PROCESS_DATA_SIZE )
 801326c:	4b10      	ldr	r3, [pc, #64]	@ (80132b0 <AD_Init+0x290>)
 801326e:	891b      	ldrh	r3, [r3, #8]
 8013270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013274:	d92e      	bls.n	80132d4 <AD_Init+0x2b4>
   {
      ABCC_LOG_ERROR( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 8013276:	4b0e      	ldr	r3, [pc, #56]	@ (80132b0 <AD_Init+0x290>)
 8013278:	891b      	ldrh	r3, [r3, #8]
 801327a:	461a      	mov	r2, r3
 801327c:	4b0c      	ldr	r3, [pc, #48]	@ (80132b0 <AD_Init+0x290>)
 801327e:	891b      	ldrh	r3, [r3, #8]
 8013280:	9303      	str	r3, [sp, #12]
 8013282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013286:	9302      	str	r3, [sp, #8]
 8013288:	4b11      	ldr	r3, [pc, #68]	@ (80132d0 <AD_Init+0x2b0>)
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	f240 7333 	movw	r3, #1843	@ 0x733
 8013290:	9300      	str	r3, [sp, #0]
 8013292:	4b0c      	ldr	r3, [pc, #48]	@ (80132c4 <AD_Init+0x2a4>)
 8013294:	2121      	movs	r1, #33	@ 0x21
 8013296:	2001      	movs	r0, #1
 8013298:	f7fa f9d6 	bl	800d648 <ABCC_LogHandler>
         ad_ReadMapInfo.iPdSize,
         "Read map size too big. Max: %d Actual: %" PRIu16 "\n",
         ABCC_CFG_MAX_PROCESS_DATA_SIZE,
         ad_ReadMapInfo.iPdSize );

      return( ABCC_EC_ERROR_IN_PD_MAP_CONFIG );
 801329c:	2321      	movs	r3, #33	@ 0x21
 801329e:	e057      	b.n	8013350 <AD_Init+0x330>
 80132a0:	24003f84 	.word	0x24003f84
 80132a4:	24003f80 	.word	0x24003f80
 80132a8:	24003f88 	.word	0x24003f88
 80132ac:	24003f8a 	.word	0x24003f8a
 80132b0:	2400418c 	.word	0x2400418c
 80132b4:	24003f8c 	.word	0x24003f8c
 80132b8:	24004198 	.word	0x24004198
 80132bc:	2400408c 	.word	0x2400408c
 80132c0:	080172f4 	.word	0x080172f4
 80132c4:	0801722c 	.word	0x0801722c
 80132c8:	0801731c 	.word	0x0801731c
 80132cc:	08017340 	.word	0x08017340
 80132d0:	08017364 	.word	0x08017364
   }

   if( ad_WriteMapInfo.iPdSize > ABCC_CFG_MAX_PROCESS_DATA_SIZE )
 80132d4:	4b20      	ldr	r3, [pc, #128]	@ (8013358 <AD_Init+0x338>)
 80132d6:	891b      	ldrh	r3, [r3, #8]
 80132d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80132dc:	d914      	bls.n	8013308 <AD_Init+0x2e8>
   {
      ABCC_LOG_ERROR( ABCC_EC_ERROR_IN_PD_MAP_CONFIG,
 80132de:	4b1e      	ldr	r3, [pc, #120]	@ (8013358 <AD_Init+0x338>)
 80132e0:	891b      	ldrh	r3, [r3, #8]
 80132e2:	461a      	mov	r2, r3
 80132e4:	4b1c      	ldr	r3, [pc, #112]	@ (8013358 <AD_Init+0x338>)
 80132e6:	891b      	ldrh	r3, [r3, #8]
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80132ee:	9302      	str	r3, [sp, #8]
 80132f0:	4b1a      	ldr	r3, [pc, #104]	@ (801335c <AD_Init+0x33c>)
 80132f2:	9301      	str	r3, [sp, #4]
 80132f4:	f240 733e 	movw	r3, #1854	@ 0x73e
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	4b19      	ldr	r3, [pc, #100]	@ (8013360 <AD_Init+0x340>)
 80132fc:	2121      	movs	r1, #33	@ 0x21
 80132fe:	2001      	movs	r0, #1
 8013300:	f7fa f9a2 	bl	800d648 <ABCC_LogHandler>
         ad_WriteMapInfo.iPdSize,
         "Write map size too big. Max: %d Actual: %" PRIu16 "\n",
         ABCC_CFG_MAX_PROCESS_DATA_SIZE,
         ad_WriteMapInfo.iPdSize );

      return( ABCC_EC_ERROR_IN_PD_MAP_CONFIG );
 8013304:	2321      	movs	r3, #33	@ 0x21
 8013306:	e023      	b.n	8013350 <AD_Init+0x330>
   }

   for( iAdiIndex = 0; iAdiIndex < ad_iNumOfADIs; iAdiIndex++ )
 8013308:	2300      	movs	r3, #0
 801330a:	82bb      	strh	r3, [r7, #20]
 801330c:	e01a      	b.n	8013344 <AD_Init+0x324>
   {
      if( ad_asADIEntryList[ iAdiIndex ].iInstance > ad_iHighestInstanceNumber )
 801330e:	4b15      	ldr	r3, [pc, #84]	@ (8013364 <AD_Init+0x344>)
 8013310:	6819      	ldr	r1, [r3, #0]
 8013312:	8aba      	ldrh	r2, [r7, #20]
 8013314:	4613      	mov	r3, r2
 8013316:	009b      	lsls	r3, r3, #2
 8013318:	4413      	add	r3, r2
 801331a:	009b      	lsls	r3, r3, #2
 801331c:	440b      	add	r3, r1
 801331e:	881a      	ldrh	r2, [r3, #0]
 8013320:	4b11      	ldr	r3, [pc, #68]	@ (8013368 <AD_Init+0x348>)
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	429a      	cmp	r2, r3
 8013326:	d90a      	bls.n	801333e <AD_Init+0x31e>
      {
         ad_iHighestInstanceNumber = ad_asADIEntryList[ iAdiIndex ].iInstance;
 8013328:	4b0e      	ldr	r3, [pc, #56]	@ (8013364 <AD_Init+0x344>)
 801332a:	6819      	ldr	r1, [r3, #0]
 801332c:	8aba      	ldrh	r2, [r7, #20]
 801332e:	4613      	mov	r3, r2
 8013330:	009b      	lsls	r3, r3, #2
 8013332:	4413      	add	r3, r2
 8013334:	009b      	lsls	r3, r3, #2
 8013336:	440b      	add	r3, r1
 8013338:	881a      	ldrh	r2, [r3, #0]
 801333a:	4b0b      	ldr	r3, [pc, #44]	@ (8013368 <AD_Init+0x348>)
 801333c:	801a      	strh	r2, [r3, #0]
   for( iAdiIndex = 0; iAdiIndex < ad_iNumOfADIs; iAdiIndex++ )
 801333e:	8abb      	ldrh	r3, [r7, #20]
 8013340:	3301      	adds	r3, #1
 8013342:	82bb      	strh	r3, [r7, #20]
 8013344:	4b09      	ldr	r3, [pc, #36]	@ (801336c <AD_Init+0x34c>)
 8013346:	881b      	ldrh	r3, [r3, #0]
 8013348:	8aba      	ldrh	r2, [r7, #20]
 801334a:	429a      	cmp	r2, r3
 801334c:	d3df      	bcc.n	801330e <AD_Init+0x2ee>
      }
   }

   return( ABCC_EC_NO_ERROR );
 801334e:	2300      	movs	r3, #0
}
 8013350:	4618      	mov	r0, r3
 8013352:	3718      	adds	r7, #24
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	24004198 	.word	0x24004198
 801335c:	08017390 	.word	0x08017390
 8013360:	0801722c 	.word	0x0801722c
 8013364:	24003f84 	.word	0x24003f84
 8013368:	24003f8a 	.word	0x24003f8a
 801336c:	24003f88 	.word	0x24003f88

08013370 <AD_GetAdiInstEntry>:

const AD_AdiEntryType* AD_GetAdiInstEntry( UINT16 iInstance )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	4603      	mov	r3, r0
 8013378:	80fb      	strh	r3, [r7, #6]
   UINT16 iIndex;
   const AD_AdiEntryType* psEntry = NULL;
 801337a:	2300      	movs	r3, #0
 801337c:	60fb      	str	r3, [r7, #12]

   iIndex = GetAdiIndex( iInstance );
 801337e:	88fb      	ldrh	r3, [r7, #6]
 8013380:	4618      	mov	r0, r3
 8013382:	f7fe ffff 	bl	8012384 <GetAdiIndex>
 8013386:	4603      	mov	r3, r0
 8013388:	817b      	strh	r3, [r7, #10]

   if( ( iIndex != AD_INVALID_ADI_INDEX ) &&
 801338a:	897b      	ldrh	r3, [r7, #10]
 801338c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013390:	4293      	cmp	r3, r2
 8013392:	d00d      	beq.n	80133b0 <AD_GetAdiInstEntry+0x40>
 8013394:	897b      	ldrh	r3, [r7, #10]
 8013396:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801339a:	4293      	cmp	r3, r2
 801339c:	d008      	beq.n	80133b0 <AD_GetAdiInstEntry+0x40>
       ( iIndex != AD_MAP_PAD_INDEX ) )
   {
      psEntry = &ad_asADIEntryList[ iIndex ];
 801339e:	4b07      	ldr	r3, [pc, #28]	@ (80133bc <AD_GetAdiInstEntry+0x4c>)
 80133a0:	6819      	ldr	r1, [r3, #0]
 80133a2:	897a      	ldrh	r2, [r7, #10]
 80133a4:	4613      	mov	r3, r2
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	4413      	add	r3, r2
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	440b      	add	r3, r1
 80133ae:	60fb      	str	r3, [r7, #12]
   }

   return( psEntry );
 80133b0:	68fb      	ldr	r3, [r7, #12]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	24003f84 	.word	0x24003f84

080133c0 <AD_ProcObjectRequest>:

   return( iNumAdis );
}

void AD_ProcObjectRequest( ABP_MsgType* psMsgBuffer )
{
 80133c0:	b5b0      	push	{r4, r5, r7, lr}
 80133c2:	b090      	sub	sp, #64	@ 0x40
 80133c4:	af04      	add	r7, sp, #16
 80133c6:	6078      	str	r0, [r7, #4]
   UINT16 iItemSize;
   UINT16 iTemp;
   UINT16 iDataSize;
   UINT8  bErrCode;

   iMsgBitOffset = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	81bb      	strh	r3, [r7, #12]
   iDataSize = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
   bErrCode = ABP_ERR_NO_ERROR;
 80133d0:	2300      	movs	r3, #0
 80133d2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

   if( iLeTOi( psMsgBuffer->sHeader.iInstance ) == ABP_INST_OBJ )
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	88db      	ldrh	r3, [r3, #6]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	2b00      	cmp	r3, #0
 80133de:	f040 82e0 	bne.w	80139a2 <AD_ProcObjectRequest+0x5e2>
   {
      /*
      ** A request to the object instance.
      */
      switch( ABCC_GetMsgCmdBits( psMsgBuffer ) )
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7a1b      	ldrb	r3, [r3, #8]
 80133e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80133ea:	3b01      	subs	r3, #1
 80133ec:	2b14      	cmp	r3, #20
 80133ee:	f200 82d4 	bhi.w	801399a <AD_ProcObjectRequest+0x5da>
 80133f2:	a201      	add	r2, pc, #4	@ (adr r2, 80133f8 <AD_ProcObjectRequest+0x38>)
 80133f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f8:	0801344d 	.word	0x0801344d
 80133fc:	0801399b 	.word	0x0801399b
 8013400:	0801399b 	.word	0x0801399b
 8013404:	0801399b 	.word	0x0801399b
 8013408:	0801399b 	.word	0x0801399b
 801340c:	0801399b 	.word	0x0801399b
 8013410:	0801399b 	.word	0x0801399b
 8013414:	0801399b 	.word	0x0801399b
 8013418:	0801399b 	.word	0x0801399b
 801341c:	0801399b 	.word	0x0801399b
 8013420:	0801399b 	.word	0x0801399b
 8013424:	0801399b 	.word	0x0801399b
 8013428:	0801399b 	.word	0x0801399b
 801342c:	0801399b 	.word	0x0801399b
 8013430:	0801399b 	.word	0x0801399b
 8013434:	08013721 	.word	0x08013721
 8013438:	0801399b 	.word	0x0801399b
 801343c:	0801399b 	.word	0x0801399b
 8013440:	080137b3 	.word	0x080137b3
 8013444:	080137c1 	.word	0x080137c1
 8013448:	080137cf 	.word	0x080137cf
      {
      case ABP_CMD_GET_ATTR:
         switch( ABCC_GetMsgCmdExt0( psMsgBuffer ) )
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	7a9b      	ldrb	r3, [r3, #10]
 8013450:	3b01      	subs	r3, #1
 8013452:	2b0c      	cmp	r3, #12
 8013454:	f200 815f 	bhi.w	8013716 <AD_ProcObjectRequest+0x356>
 8013458:	a201      	add	r2, pc, #4	@ (adr r2, 8013460 <AD_ProcObjectRequest+0xa0>)
 801345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801345e:	bf00      	nop
 8013460:	08013495 	.word	0x08013495
 8013464:	080134d9 	.word	0x080134d9
 8013468:	0801351b 	.word	0x0801351b
 801346c:	0801355f 	.word	0x0801355f
 8013470:	08013717 	.word	0x08013717
 8013474:	08013717 	.word	0x08013717
 8013478:	08013717 	.word	0x08013717
 801347c:	08013717 	.word	0x08013717
 8013480:	08013717 	.word	0x08013717
 8013484:	08013717 	.word	0x08013717
 8013488:	080135a3 	.word	0x080135a3
 801348c:	0801361f 	.word	0x0801361f
 8013490:	0801369b 	.word	0x0801369b
         {
         case ABP_OA_NAME:
            ABCC_SetMsgString( psMsgBuffer, "Application data", 16, 0 );
 8013494:	f7f8 fd5e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013498:	4603      	mov	r3, r0
 801349a:	2b0f      	cmp	r3, #15
 801349c:	d811      	bhi.n	80134c2 <AD_ProcObjectRequest+0x102>
 801349e:	f7f8 fd59 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80134a2:	4603      	mov	r3, r0
 80134a4:	9303      	str	r3, [sp, #12]
 80134a6:	2310      	movs	r3, #16
 80134a8:	9302      	str	r3, [sp, #8]
 80134aa:	4ba6      	ldr	r3, [pc, #664]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 80134ac:	9301      	str	r3, [sp, #4]
 80134ae:	f240 73c2 	movw	r3, #1986	@ 0x7c2
 80134b2:	9300      	str	r3, [sp, #0]
 80134b4:	4ba4      	ldr	r3, [pc, #656]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 80134b6:	2210      	movs	r2, #16
 80134b8:	2127      	movs	r1, #39	@ 0x27
 80134ba:	2001      	movs	r0, #1
 80134bc:	f7fa f8c4 	bl	800d648 <ABCC_LogHandler>
 80134c0:	e007      	b.n	80134d2 <AD_ProcObjectRequest+0x112>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f103 000c 	add.w	r0, r3, #12
 80134c8:	2300      	movs	r3, #0
 80134ca:	2210      	movs	r2, #16
 80134cc:	499f      	ldr	r1, [pc, #636]	@ (801374c <AD_ProcObjectRequest+0x38c>)
 80134ce:	f7f9 fcb9 	bl	800ce44 <ABCC_SetString>
            iDataSize = 16;
 80134d2:	2310      	movs	r3, #16
 80134d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 80134d6:	e122      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_OA_REV:
            ABCC_SetMsgData8( psMsgBuffer, AD_OA_REV_VALUE, 0 );
 80134d8:	f7f8 fd3c 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d111      	bne.n	8013506 <AD_ProcObjectRequest+0x146>
 80134e2:	f7f8 fd37 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80134e6:	4603      	mov	r3, r0
 80134e8:	9303      	str	r3, [sp, #12]
 80134ea:	2301      	movs	r3, #1
 80134ec:	9302      	str	r3, [sp, #8]
 80134ee:	4b95      	ldr	r3, [pc, #596]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 80134f0:	9301      	str	r3, [sp, #4]
 80134f2:	f240 73c7 	movw	r3, #1991	@ 0x7c7
 80134f6:	9300      	str	r3, [sp, #0]
 80134f8:	4b93      	ldr	r3, [pc, #588]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 80134fa:	2201      	movs	r2, #1
 80134fc:	2127      	movs	r1, #39	@ 0x27
 80134fe:	2001      	movs	r0, #1
 8013500:	f7fa f8a2 	bl	800d648 <ABCC_LogHandler>
 8013504:	e006      	b.n	8013514 <AD_ProcObjectRequest+0x154>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	330c      	adds	r3, #12
 801350a:	2200      	movs	r2, #0
 801350c:	2103      	movs	r1, #3
 801350e:	4618      	mov	r0, r3
 8013510:	f7f9 fcc2 	bl	800ce98 <ABCC_SetData8>
            iDataSize = ABP_OA_REV_DS;
 8013514:	2301      	movs	r3, #1
 8013516:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 8013518:	e101      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_OA_NUM_INST:
            ABCC_SetMsgData16( psMsgBuffer, ad_iNumOfADIs, 0 );
 801351a:	f7f8 fd1b 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801351e:	4603      	mov	r3, r0
 8013520:	2b01      	cmp	r3, #1
 8013522:	d811      	bhi.n	8013548 <AD_ProcObjectRequest+0x188>
 8013524:	f7f8 fd16 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013528:	4603      	mov	r3, r0
 801352a:	9303      	str	r3, [sp, #12]
 801352c:	2302      	movs	r3, #2
 801352e:	9302      	str	r3, [sp, #8]
 8013530:	4b84      	ldr	r3, [pc, #528]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 8013532:	9301      	str	r3, [sp, #4]
 8013534:	f240 73cc 	movw	r3, #1996	@ 0x7cc
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	4b83      	ldr	r3, [pc, #524]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 801353c:	2202      	movs	r2, #2
 801353e:	2127      	movs	r1, #39	@ 0x27
 8013540:	2001      	movs	r0, #1
 8013542:	f7fa f881 	bl	800d648 <ABCC_LogHandler>
 8013546:	e007      	b.n	8013558 <AD_ProcObjectRequest+0x198>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	330c      	adds	r3, #12
 801354c:	4a80      	ldr	r2, [pc, #512]	@ (8013750 <AD_ProcObjectRequest+0x390>)
 801354e:	8811      	ldrh	r1, [r2, #0]
 8013550:	2200      	movs	r2, #0
 8013552:	4618      	mov	r0, r3
 8013554:	f7f9 fccb 	bl	800ceee <ABCC_SetData16>
            iDataSize = ABP_OA_NUM_INST_DS;
 8013558:	2302      	movs	r3, #2
 801355a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 801355c:	e0df      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_OA_HIGHEST_INST:
            ABCC_SetMsgData16( psMsgBuffer, ad_iHighestInstanceNumber, 0 );
 801355e:	f7f8 fcf9 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013562:	4603      	mov	r3, r0
 8013564:	2b01      	cmp	r3, #1
 8013566:	d811      	bhi.n	801358c <AD_ProcObjectRequest+0x1cc>
 8013568:	f7f8 fcf4 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801356c:	4603      	mov	r3, r0
 801356e:	9303      	str	r3, [sp, #12]
 8013570:	2302      	movs	r3, #2
 8013572:	9302      	str	r3, [sp, #8]
 8013574:	4b73      	ldr	r3, [pc, #460]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 8013576:	9301      	str	r3, [sp, #4]
 8013578:	f240 73d1 	movw	r3, #2001	@ 0x7d1
 801357c:	9300      	str	r3, [sp, #0]
 801357e:	4b72      	ldr	r3, [pc, #456]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 8013580:	2202      	movs	r2, #2
 8013582:	2127      	movs	r1, #39	@ 0x27
 8013584:	2001      	movs	r0, #1
 8013586:	f7fa f85f 	bl	800d648 <ABCC_LogHandler>
 801358a:	e007      	b.n	801359c <AD_ProcObjectRequest+0x1dc>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	330c      	adds	r3, #12
 8013590:	4a70      	ldr	r2, [pc, #448]	@ (8013754 <AD_ProcObjectRequest+0x394>)
 8013592:	8811      	ldrh	r1, [r2, #0]
 8013594:	2200      	movs	r2, #0
 8013596:	4618      	mov	r0, r3
 8013598:	f7f9 fca9 	bl	800ceee <ABCC_SetData16>
            iDataSize = ABP_OA_HIGHEST_INST_DS;
 801359c:	2302      	movs	r3, #2
 801359e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 80135a0:	e0bd      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_APPD_OA_NR_READ_PD_MAPPABLE_INSTANCES:
            {
               UINT16 iIndex;
               UINT16 iCnt = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	853b      	strh	r3, [r7, #40]	@ 0x28

               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 80135a6:	2300      	movs	r3, #0
 80135a8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80135aa:	e012      	b.n	80135d2 <AD_ProcObjectRequest+0x212>
               {
                  if( ad_asADIEntryList[iIndex ].bDesc & ABP_APPD_DESCR_MAPPABLE_READ_PD )
 80135ac:	4b6a      	ldr	r3, [pc, #424]	@ (8013758 <AD_ProcObjectRequest+0x398>)
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80135b2:	4613      	mov	r3, r2
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	4413      	add	r3, r2
 80135b8:	009b      	lsls	r3, r3, #2
 80135ba:	440b      	add	r3, r1
 80135bc:	7a9b      	ldrb	r3, [r3, #10]
 80135be:	f003 0310 	and.w	r3, r3, #16
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d002      	beq.n	80135cc <AD_ProcObjectRequest+0x20c>
                  {
                     iCnt++;
 80135c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80135c8:	3301      	adds	r3, #1
 80135ca:	853b      	strh	r3, [r7, #40]	@ 0x28
               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 80135cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80135ce:	3301      	adds	r3, #1
 80135d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80135d2:	4b5f      	ldr	r3, [pc, #380]	@ (8013750 <AD_ProcObjectRequest+0x390>)
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80135d8:	429a      	cmp	r2, r3
 80135da:	d3e7      	bcc.n	80135ac <AD_ProcObjectRequest+0x1ec>
                  }
               }
               ABCC_SetMsgData16( psMsgBuffer, iCnt, 0 );
 80135dc:	f7f8 fcba 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d811      	bhi.n	801360a <AD_ProcObjectRequest+0x24a>
 80135e6:	f7f8 fcb5 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80135ea:	4603      	mov	r3, r0
 80135ec:	9303      	str	r3, [sp, #12]
 80135ee:	2302      	movs	r3, #2
 80135f0:	9302      	str	r3, [sp, #8]
 80135f2:	4b54      	ldr	r3, [pc, #336]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 80135f4:	9301      	str	r3, [sp, #4]
 80135f6:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 80135fa:	9300      	str	r3, [sp, #0]
 80135fc:	4b52      	ldr	r3, [pc, #328]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 80135fe:	2202      	movs	r2, #2
 8013600:	2127      	movs	r1, #39	@ 0x27
 8013602:	2001      	movs	r0, #1
 8013604:	f7fa f820 	bl	800d648 <ABCC_LogHandler>
 8013608:	e006      	b.n	8013618 <AD_ProcObjectRequest+0x258>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	330c      	adds	r3, #12
 801360e:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8013610:	2200      	movs	r2, #0
 8013612:	4618      	mov	r0, r3
 8013614:	f7f9 fc6b 	bl	800ceee <ABCC_SetData16>
               iDataSize = ABP_UINT16_SIZEOF;
 8013618:	2302      	movs	r3, #2
 801361a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 801361c:	e07f      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_APPD_OA_NR_WRITE_PD_MAPPABLE_INSTANCES:
            {
               UINT16 iIndex;
               UINT16 iCnt = 0;
 801361e:	2300      	movs	r3, #0
 8013620:	84bb      	strh	r3, [r7, #36]	@ 0x24

               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 8013622:	2300      	movs	r3, #0
 8013624:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013626:	e012      	b.n	801364e <AD_ProcObjectRequest+0x28e>
               {
                  if( ad_asADIEntryList[ iIndex ].bDesc & ABP_APPD_DESCR_MAPPABLE_WRITE_PD )
 8013628:	4b4b      	ldr	r3, [pc, #300]	@ (8013758 <AD_ProcObjectRequest+0x398>)
 801362a:	6819      	ldr	r1, [r3, #0]
 801362c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801362e:	4613      	mov	r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	4413      	add	r3, r2
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	440b      	add	r3, r1
 8013638:	7a9b      	ldrb	r3, [r3, #10]
 801363a:	f003 0308 	and.w	r3, r3, #8
 801363e:	2b00      	cmp	r3, #0
 8013640:	d002      	beq.n	8013648 <AD_ProcObjectRequest+0x288>
                  {
                     iCnt++;
 8013642:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013644:	3301      	adds	r3, #1
 8013646:	84bb      	strh	r3, [r7, #36]	@ 0x24
               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 8013648:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801364a:	3301      	adds	r3, #1
 801364c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801364e:	4b40      	ldr	r3, [pc, #256]	@ (8013750 <AD_ProcObjectRequest+0x390>)
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013654:	429a      	cmp	r2, r3
 8013656:	d3e7      	bcc.n	8013628 <AD_ProcObjectRequest+0x268>
                  }
               }
               ABCC_SetMsgData16( psMsgBuffer, iCnt, 0 );
 8013658:	f7f8 fc7c 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801365c:	4603      	mov	r3, r0
 801365e:	2b01      	cmp	r3, #1
 8013660:	d811      	bhi.n	8013686 <AD_ProcObjectRequest+0x2c6>
 8013662:	f7f8 fc77 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013666:	4603      	mov	r3, r0
 8013668:	9303      	str	r3, [sp, #12]
 801366a:	2302      	movs	r3, #2
 801366c:	9302      	str	r3, [sp, #8]
 801366e:	4b35      	ldr	r3, [pc, #212]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 8013670:	9301      	str	r3, [sp, #4]
 8013672:	f240 73f2 	movw	r3, #2034	@ 0x7f2
 8013676:	9300      	str	r3, [sp, #0]
 8013678:	4b33      	ldr	r3, [pc, #204]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 801367a:	2202      	movs	r2, #2
 801367c:	2127      	movs	r1, #39	@ 0x27
 801367e:	2001      	movs	r0, #1
 8013680:	f7f9 ffe2 	bl	800d648 <ABCC_LogHandler>
 8013684:	e006      	b.n	8013694 <AD_ProcObjectRequest+0x2d4>
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	330c      	adds	r3, #12
 801368a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 801368c:	2200      	movs	r2, #0
 801368e:	4618      	mov	r0, r3
 8013690:	f7f9 fc2d 	bl	800ceee <ABCC_SetData16>
               iDataSize = ABP_UINT16_SIZEOF;
 8013694:	2302      	movs	r3, #2
 8013696:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8013698:	e041      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         case ABP_APPD_OA_NR_NV_INSTANCES:
            {
               UINT16 iIndex;
               UINT16 iCnt = 0;
 801369a:	2300      	movs	r3, #0
 801369c:	843b      	strh	r3, [r7, #32]

               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 801369e:	2300      	movs	r3, #0
 80136a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80136a2:	e012      	b.n	80136ca <AD_ProcObjectRequest+0x30a>
               {
                  if( ad_asADIEntryList[ iIndex ].bDesc & ABP_APPD_DESCR_NVS_PARAMETER )
 80136a4:	4b2c      	ldr	r3, [pc, #176]	@ (8013758 <AD_ProcObjectRequest+0x398>)
 80136a6:	6819      	ldr	r1, [r3, #0]
 80136a8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80136aa:	4613      	mov	r3, r2
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	4413      	add	r3, r2
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	440b      	add	r3, r1
 80136b4:	7a9b      	ldrb	r3, [r3, #10]
 80136b6:	f003 0320 	and.w	r3, r3, #32
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d002      	beq.n	80136c4 <AD_ProcObjectRequest+0x304>
                  {
                     iCnt++;
 80136be:	8c3b      	ldrh	r3, [r7, #32]
 80136c0:	3301      	adds	r3, #1
 80136c2:	843b      	strh	r3, [r7, #32]
               for( iIndex = 0; iIndex < ad_iNumOfADIs; iIndex++ )
 80136c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136c6:	3301      	adds	r3, #1
 80136c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80136ca:	4b21      	ldr	r3, [pc, #132]	@ (8013750 <AD_ProcObjectRequest+0x390>)
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d3e7      	bcc.n	80136a4 <AD_ProcObjectRequest+0x2e4>
                  }
               }
               ABCC_SetMsgData16( psMsgBuffer, iCnt, 0 );
 80136d4:	f7f8 fc3e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b01      	cmp	r3, #1
 80136dc:	d811      	bhi.n	8013702 <AD_ProcObjectRequest+0x342>
 80136de:	f7f8 fc39 	bl	800bf54 <ABCC_GetMaxMessageSize>
 80136e2:	4603      	mov	r3, r0
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	2302      	movs	r3, #2
 80136e8:	9302      	str	r3, [sp, #8]
 80136ea:	4b16      	ldr	r3, [pc, #88]	@ (8013744 <AD_ProcObjectRequest+0x384>)
 80136ec:	9301      	str	r3, [sp, #4]
 80136ee:	f640 0303 	movw	r3, #2051	@ 0x803
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4b14      	ldr	r3, [pc, #80]	@ (8013748 <AD_ProcObjectRequest+0x388>)
 80136f6:	2202      	movs	r2, #2
 80136f8:	2127      	movs	r1, #39	@ 0x27
 80136fa:	2001      	movs	r0, #1
 80136fc:	f7f9 ffa4 	bl	800d648 <ABCC_LogHandler>
 8013700:	e006      	b.n	8013710 <AD_ProcObjectRequest+0x350>
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	330c      	adds	r3, #12
 8013706:	8c39      	ldrh	r1, [r7, #32]
 8013708:	2200      	movs	r2, #0
 801370a:	4618      	mov	r0, r3
 801370c:	f7f9 fbef 	bl	800ceee <ABCC_SetData16>
               iDataSize = ABP_UINT16_SIZEOF;
 8013710:	2302      	movs	r3, #2
 8013712:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8013714:	e003      	b.n	801371e <AD_ProcObjectRequest+0x35e>

         default:
            /*
            ** Unsupported attribute.
            */
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8013716:	2306      	movs	r3, #6
 8013718:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 801371c:	bf00      	nop
         }
         break;
 801371e:	e3e5      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

      case ABP_APPD_CMD_GET_INST_BY_ORDER:
         iTemp = ABCC_GetMsgCmdExt( psMsgBuffer );
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	7a9a      	ldrb	r2, [r3, #10]
 8013724:	7adb      	ldrb	r3, [r3, #11]
 8013726:	021b      	lsls	r3, r3, #8
 8013728:	4313      	orrs	r3, r2
 801372a:	81fb      	strh	r3, [r7, #14]

         if( ( iTemp == 0 ) ||
 801372c:	89fb      	ldrh	r3, [r7, #14]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d004      	beq.n	801373c <AD_ProcObjectRequest+0x37c>
             ( iTemp > ad_iNumOfADIs ) )
 8013732:	4b07      	ldr	r3, [pc, #28]	@ (8013750 <AD_ProcObjectRequest+0x390>)
 8013734:	881b      	ldrh	r3, [r3, #0]
         if( ( iTemp == 0 ) ||
 8013736:	89fa      	ldrh	r2, [r7, #14]
 8013738:	429a      	cmp	r2, r3
 801373a:	d90f      	bls.n	801375c <AD_ProcObjectRequest+0x39c>
         {
            /*
            ** Requested order number does not exist.
            */
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 801373c:	2306      	movs	r3, #6
 801373e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            ABCC_SetMsgData16( psMsgBuffer,
                               ad_asADIEntryList[ iTemp - 1 ].iInstance,
                               0 );
            iDataSize = ABP_UINT16_SIZEOF;
         }
         break;
 8013742:	e3d3      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
 8013744:	08017288 	.word	0x08017288
 8013748:	0801722c 	.word	0x0801722c
 801374c:	080173c0 	.word	0x080173c0
 8013750:	24003f88 	.word	0x24003f88
 8013754:	24003f8a 	.word	0x24003f8a
 8013758:	24003f84 	.word	0x24003f84
            ABCC_SetMsgData16( psMsgBuffer,
 801375c:	f7f8 fbfa 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013760:	4603      	mov	r3, r0
 8013762:	2b01      	cmp	r3, #1
 8013764:	d811      	bhi.n	801378a <AD_ProcObjectRequest+0x3ca>
 8013766:	f7f8 fbf5 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801376a:	4603      	mov	r3, r0
 801376c:	9303      	str	r3, [sp, #12]
 801376e:	2302      	movs	r3, #2
 8013770:	9302      	str	r3, [sp, #8]
 8013772:	4bad      	ldr	r3, [pc, #692]	@ (8013a28 <AD_ProcObjectRequest+0x668>)
 8013774:	9301      	str	r3, [sp, #4]
 8013776:	f640 031e 	movw	r3, #2078	@ 0x81e
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4bab      	ldr	r3, [pc, #684]	@ (8013a2c <AD_ProcObjectRequest+0x66c>)
 801377e:	2202      	movs	r2, #2
 8013780:	2127      	movs	r1, #39	@ 0x27
 8013782:	2001      	movs	r0, #1
 8013784:	f7f9 ff60 	bl	800d648 <ABCC_LogHandler>
 8013788:	e010      	b.n	80137ac <AD_ProcObjectRequest+0x3ec>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f103 000c 	add.w	r0, r3, #12
 8013790:	4ba7      	ldr	r3, [pc, #668]	@ (8013a30 <AD_ProcObjectRequest+0x670>)
 8013792:	6819      	ldr	r1, [r3, #0]
 8013794:	89fa      	ldrh	r2, [r7, #14]
 8013796:	4613      	mov	r3, r2
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	4413      	add	r3, r2
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	3b14      	subs	r3, #20
 80137a0:	440b      	add	r3, r1
 80137a2:	881b      	ldrh	r3, [r3, #0]
 80137a4:	2200      	movs	r2, #0
 80137a6:	4619      	mov	r1, r3
 80137a8:	f7f9 fba1 	bl	800ceee <ABCC_SetData16>
            iDataSize = ABP_UINT16_SIZEOF;
 80137ac:	2302      	movs	r3, #2
 80137ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         break;
 80137b0:	e39c      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

#if( ABCC_CFG_REMAP_SUPPORT_ENABLED )
      case ABP_APPD_REMAP_ADI_WRITE_AREA:
         RemapProcessDataCommand( psMsgBuffer, &ad_WriteMapInfo );
 80137b2:	49a0      	ldr	r1, [pc, #640]	@ (8013a34 <AD_ProcObjectRequest+0x674>)
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7fe fe65 	bl	8012484 <RemapProcessDataCommand>
         psMsgBuffer = NULL;
 80137ba:	2300      	movs	r3, #0
 80137bc:	607b      	str	r3, [r7, #4]
         break;
 80137be:	e395      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

      case ABP_APPD_REMAP_ADI_READ_AREA:
         RemapProcessDataCommand( psMsgBuffer, &ad_ReadMapInfo );
 80137c0:	499d      	ldr	r1, [pc, #628]	@ (8013a38 <AD_ProcObjectRequest+0x678>)
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7fe fe5e 	bl	8012484 <RemapProcessDataCommand>
         psMsgBuffer = NULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	607b      	str	r3, [r7, #4]
         break;
 80137cc:	e38e      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
      {
         UINT16 iStartingOrder;
         UINT16 iReqInstances;
         UINT16 iAdiIndex;
         UINT16 iLocalOrder;
         UINT8  bDescrMask = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	76fb      	strb	r3, [r7, #27]

         if( ABCC_GetMsgCmdExt0( psMsgBuffer ) != 0 )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	7a9b      	ldrb	r3, [r3, #10]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d003      	beq.n	80137e2 <AD_ProcObjectRequest+0x422>
         {
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 80137da:	2306      	movs	r3, #6
 80137dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 80137e0:	e384      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
         }

         switch( ABCC_GetMsgCmdExt1( psMsgBuffer ) )
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	7adb      	ldrb	r3, [r3, #11]
 80137e6:	3b01      	subs	r3, #1
 80137e8:	2b03      	cmp	r3, #3
 80137ea:	d814      	bhi.n	8013816 <AD_ProcObjectRequest+0x456>
 80137ec:	a201      	add	r2, pc, #4	@ (adr r2, 80137f4 <AD_ProcObjectRequest+0x434>)
 80137ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137f2:	bf00      	nop
 80137f4:	0801381f 	.word	0x0801381f
 80137f8:	08013805 	.word	0x08013805
 80137fc:	0801380b 	.word	0x0801380b
 8013800:	08013811 	.word	0x08013811
         {
         case ABP_APPD_LIST_TYPE_ALL:
            break;

         case ABP_APPD_LIST_TYPE_RD_PD_MAPPABLE:
            bDescrMask = ABP_APPD_DESCR_MAPPABLE_READ_PD;
 8013804:	2310      	movs	r3, #16
 8013806:	76fb      	strb	r3, [r7, #27]
            break;
 8013808:	e00a      	b.n	8013820 <AD_ProcObjectRequest+0x460>

         case ABP_APPD_LIST_TYPE_WR_PD_MAPPABLE:
            bDescrMask = ABP_APPD_DESCR_MAPPABLE_WRITE_PD;
 801380a:	2308      	movs	r3, #8
 801380c:	76fb      	strb	r3, [r7, #27]
            break;
 801380e:	e007      	b.n	8013820 <AD_ProcObjectRequest+0x460>

         case ABP_APPD_LIST_TYPE_NVS_PARAMS:
            bDescrMask = ABP_APPD_DESCR_NVS_PARAMETER;
 8013810:	2320      	movs	r3, #32
 8013812:	76fb      	strb	r3, [r7, #27]
            break;
 8013814:	e004      	b.n	8013820 <AD_ProcObjectRequest+0x460>

         default:
            bErrCode = ABP_ERR_INV_CMD_EXT_1;
 8013816:	2307      	movs	r3, #7
 8013818:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 801381c:	e000      	b.n	8013820 <AD_ProcObjectRequest+0x460>
            break;
 801381e:	bf00      	nop
         }
         if( bErrCode != ABP_ERR_NO_ERROR )
 8013820:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013824:	2b00      	cmp	r3, #0
 8013826:	f040 8360 	bne.w	8013eea <AD_ProcObjectRequest+0xb2a>
         {
            break;
         }

         ABCC_GetMsgData16( psMsgBuffer, &iStartingOrder, 0 );
 801382a:	f7f8 fb93 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801382e:	4603      	mov	r3, r0
 8013830:	2b01      	cmp	r3, #1
 8013832:	d811      	bhi.n	8013858 <AD_ProcObjectRequest+0x498>
 8013834:	f7f8 fb8e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013838:	4603      	mov	r3, r0
 801383a:	9303      	str	r3, [sp, #12]
 801383c:	2302      	movs	r3, #2
 801383e:	9302      	str	r3, [sp, #8]
 8013840:	4b79      	ldr	r3, [pc, #484]	@ (8013a28 <AD_ProcObjectRequest+0x668>)
 8013842:	9301      	str	r3, [sp, #4]
 8013844:	f640 0358 	movw	r3, #2136	@ 0x858
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	4b78      	ldr	r3, [pc, #480]	@ (8013a2c <AD_ProcObjectRequest+0x66c>)
 801384c:	2202      	movs	r2, #2
 801384e:	2127      	movs	r1, #39	@ 0x27
 8013850:	2001      	movs	r0, #1
 8013852:	f7f9 fef9 	bl	800d648 <ABCC_LogHandler>
 8013856:	e007      	b.n	8013868 <AD_ProcObjectRequest+0x4a8>
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	330c      	adds	r3, #12
 801385c:	f107 010a 	add.w	r1, r7, #10
 8013860:	2200      	movs	r2, #0
 8013862:	4618      	mov	r0, r3
 8013864:	f7f9 fb2b 	bl	800cebe <ABCC_GetData16>
         if( iStartingOrder < 1 )
 8013868:	897b      	ldrh	r3, [r7, #10]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d103      	bne.n	8013876 <AD_ProcObjectRequest+0x4b6>
         {
            bErrCode = ABP_ERR_OUT_OF_RANGE;
 801386e:	230c      	movs	r3, #12
 8013870:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013874:	e33a      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
         }

         ABCC_GetMsgData16( psMsgBuffer, &iReqInstances, 2 );
 8013876:	f7f8 fb6d 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801387a:	4603      	mov	r3, r0
 801387c:	2b03      	cmp	r3, #3
 801387e:	d811      	bhi.n	80138a4 <AD_ProcObjectRequest+0x4e4>
 8013880:	f7f8 fb68 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013884:	4603      	mov	r3, r0
 8013886:	9303      	str	r3, [sp, #12]
 8013888:	2304      	movs	r3, #4
 801388a:	9302      	str	r3, [sp, #8]
 801388c:	4b66      	ldr	r3, [pc, #408]	@ (8013a28 <AD_ProcObjectRequest+0x668>)
 801388e:	9301      	str	r3, [sp, #4]
 8013890:	f640 035f 	movw	r3, #2143	@ 0x85f
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	4b65      	ldr	r3, [pc, #404]	@ (8013a2c <AD_ProcObjectRequest+0x66c>)
 8013898:	2204      	movs	r2, #4
 801389a:	2127      	movs	r1, #39	@ 0x27
 801389c:	2001      	movs	r0, #1
 801389e:	f7f9 fed3 	bl	800d648 <ABCC_LogHandler>
 80138a2:	e007      	b.n	80138b4 <AD_ProcObjectRequest+0x4f4>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	330c      	adds	r3, #12
 80138a8:	f107 0108 	add.w	r1, r7, #8
 80138ac:	2202      	movs	r2, #2
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7f9 fb05 	bl	800cebe <ABCC_GetData16>
         if( iReqInstances < 1 )
 80138b4:	893b      	ldrh	r3, [r7, #8]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d103      	bne.n	80138c2 <AD_ProcObjectRequest+0x502>
         {
            bErrCode = ABP_ERR_OUT_OF_RANGE;
 80138ba:	230c      	movs	r3, #12
 80138bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 80138c0:	e314      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
         }

         iDataSize = 0;
 80138c2:	2300      	movs	r3, #0
 80138c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         iLocalOrder = 0;
 80138c6:	2300      	movs	r3, #0
 80138c8:	83bb      	strh	r3, [r7, #28]
         for( iAdiIndex = 0; iAdiIndex < ad_iNumOfADIs; iAdiIndex++ )
 80138ca:	2300      	movs	r3, #0
 80138cc:	83fb      	strh	r3, [r7, #30]
 80138ce:	e05c      	b.n	801398a <AD_ProcObjectRequest+0x5ca>
         {
            if( ( bDescrMask == 0 ) || ( ad_asADIEntryList[ iAdiIndex ].bDesc & bDescrMask ) )
 80138d0:	7efb      	ldrb	r3, [r7, #27]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00d      	beq.n	80138f2 <AD_ProcObjectRequest+0x532>
 80138d6:	4b56      	ldr	r3, [pc, #344]	@ (8013a30 <AD_ProcObjectRequest+0x670>)
 80138d8:	6819      	ldr	r1, [r3, #0]
 80138da:	8bfa      	ldrh	r2, [r7, #30]
 80138dc:	4613      	mov	r3, r2
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	4413      	add	r3, r2
 80138e2:	009b      	lsls	r3, r3, #2
 80138e4:	440b      	add	r3, r1
 80138e6:	7a9a      	ldrb	r2, [r3, #10]
 80138e8:	7efb      	ldrb	r3, [r7, #27]
 80138ea:	4013      	ands	r3, r2
 80138ec:	b2db      	uxtb	r3, r3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d048      	beq.n	8013984 <AD_ProcObjectRequest+0x5c4>
            {
               iLocalOrder++;
 80138f2:	8bbb      	ldrh	r3, [r7, #28]
 80138f4:	3301      	adds	r3, #1
 80138f6:	83bb      	strh	r3, [r7, #28]
               if( iLocalOrder >= iStartingOrder )
 80138f8:	897b      	ldrh	r3, [r7, #10]
 80138fa:	8bba      	ldrh	r2, [r7, #28]
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d341      	bcc.n	8013984 <AD_ProcObjectRequest+0x5c4>
               {
                  if( ( iDataSize + ABP_UINT16_SIZEOF ) > ABCC_GetMaxMessageSize() )
 8013900:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013902:	1c5c      	adds	r4, r3, #1
 8013904:	f7f8 fb26 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013908:	4603      	mov	r3, r0
 801390a:	429c      	cmp	r4, r3
 801390c:	db03      	blt.n	8013916 <AD_ProcObjectRequest+0x556>
                  {
                     bErrCode = ABP_ERR_OUT_OF_RANGE;
 801390e:	230c      	movs	r3, #12
 8013910:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                     break;
 8013914:	e040      	b.n	8013998 <AD_ProcObjectRequest+0x5d8>
                  }
                  ABCC_SetMsgData16( psMsgBuffer, ad_asADIEntryList[ iAdiIndex ].iInstance, iDataSize );
 8013916:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013918:	1c5c      	adds	r4, r3, #1
 801391a:	f7f8 fb1b 	bl	800bf54 <ABCC_GetMaxMessageSize>
 801391e:	4603      	mov	r3, r0
 8013920:	429c      	cmp	r4, r3
 8013922:	db15      	blt.n	8013950 <AD_ProcObjectRequest+0x590>
 8013924:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013926:	3302      	adds	r3, #2
 8013928:	461d      	mov	r5, r3
 801392a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801392c:	1c9c      	adds	r4, r3, #2
 801392e:	f7f8 fb11 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013932:	4603      	mov	r3, r0
 8013934:	9303      	str	r3, [sp, #12]
 8013936:	9402      	str	r4, [sp, #8]
 8013938:	4b3b      	ldr	r3, [pc, #236]	@ (8013a28 <AD_ProcObjectRequest+0x668>)
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	f640 0374 	movw	r3, #2164	@ 0x874
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	4b3a      	ldr	r3, [pc, #232]	@ (8013a2c <AD_ProcObjectRequest+0x66c>)
 8013944:	462a      	mov	r2, r5
 8013946:	2127      	movs	r1, #39	@ 0x27
 8013948:	2001      	movs	r0, #1
 801394a:	f7f9 fe7d 	bl	800d648 <ABCC_LogHandler>
 801394e:	e00f      	b.n	8013970 <AD_ProcObjectRequest+0x5b0>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f103 000c 	add.w	r0, r3, #12
 8013956:	4b36      	ldr	r3, [pc, #216]	@ (8013a30 <AD_ProcObjectRequest+0x670>)
 8013958:	6819      	ldr	r1, [r3, #0]
 801395a:	8bfa      	ldrh	r2, [r7, #30]
 801395c:	4613      	mov	r3, r2
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	4413      	add	r3, r2
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	440b      	add	r3, r1
 8013966:	881b      	ldrh	r3, [r3, #0]
 8013968:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801396a:	4619      	mov	r1, r3
 801396c:	f7f9 fabf 	bl	800ceee <ABCC_SetData16>
                  iDataSize += ABP_UINT16_SIZEOF;
 8013970:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013972:	3302      	adds	r3, #2
 8013974:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                  iReqInstances--;
 8013976:	893b      	ldrh	r3, [r7, #8]
 8013978:	3b01      	subs	r3, #1
 801397a:	b29b      	uxth	r3, r3
 801397c:	813b      	strh	r3, [r7, #8]
                  if( iReqInstances == 0 )
 801397e:	893b      	ldrh	r3, [r7, #8]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d008      	beq.n	8013996 <AD_ProcObjectRequest+0x5d6>
         for( iAdiIndex = 0; iAdiIndex < ad_iNumOfADIs; iAdiIndex++ )
 8013984:	8bfb      	ldrh	r3, [r7, #30]
 8013986:	3301      	adds	r3, #1
 8013988:	83fb      	strh	r3, [r7, #30]
 801398a:	4b2c      	ldr	r3, [pc, #176]	@ (8013a3c <AD_ProcObjectRequest+0x67c>)
 801398c:	881b      	ldrh	r3, [r3, #0]
 801398e:	8bfa      	ldrh	r2, [r7, #30]
 8013990:	429a      	cmp	r2, r3
 8013992:	d39d      	bcc.n	80138d0 <AD_ProcObjectRequest+0x510>
                     break;
                  }
               }
            }
         }
         break;
 8013994:	e2aa      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
                     break;
 8013996:	bf00      	nop
         break;
 8013998:	e2a8      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
      }

      default:
         bErrCode = ABP_ERR_UNSUP_CMD;
 801399a:	2305      	movs	r3, #5
 801399c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
         break;
 80139a0:	e2a4      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
      }
   }
   else if( ( psAdiEntry = AD_GetAdiInstEntry( ABCC_GetMsgInstance( psMsgBuffer ) ) ) != NULL )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	88db      	ldrh	r3, [r3, #6]
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	4618      	mov	r0, r3
 80139aa:	f7ff fce1 	bl	8013370 <AD_GetAdiInstEntry>
 80139ae:	6178      	str	r0, [r7, #20]
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f000 8295 	beq.w	8013ee2 <AD_ProcObjectRequest+0xb22>
   {
      /*
      ** The ADI instance was found. Now switch on command.
      */
      switch( ABCC_GetMsgCmdBits( psMsgBuffer ) )
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	7a1b      	ldrb	r3, [r3, #8]
 80139bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80139c0:	3b01      	subs	r3, #1
 80139c2:	2b07      	cmp	r3, #7
 80139c4:	f200 8289 	bhi.w	8013eda <AD_ProcObjectRequest+0xb1a>
 80139c8:	a201      	add	r2, pc, #4	@ (adr r2, 80139d0 <AD_ProcObjectRequest+0x610>)
 80139ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139ce:	bf00      	nop
 80139d0:	080139f1 	.word	0x080139f1
 80139d4:	08013c19 	.word	0x08013c19
 80139d8:	08013edb 	.word	0x08013edb
 80139dc:	08013edb 	.word	0x08013edb
 80139e0:	08013edb 	.word	0x08013edb
 80139e4:	08013cbd 	.word	0x08013cbd
 80139e8:	08013dd9 	.word	0x08013dd9
 80139ec:	08013e3f 	.word	0x08013e3f
      {
      case ABP_CMD_GET_ATTR:
         /*
         ** Switch on attribute.
         */
         switch( ABCC_GetMsgCmdExt0( psMsgBuffer ) )
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	7a9b      	ldrb	r3, [r3, #10]
 80139f4:	3b01      	subs	r3, #1
 80139f6:	2b08      	cmp	r3, #8
 80139f8:	f200 8109 	bhi.w	8013c0e <AD_ProcObjectRequest+0x84e>
 80139fc:	a201      	add	r2, pc, #4	@ (adr r2, 8013a04 <AD_ProcObjectRequest+0x644>)
 80139fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a02:	bf00      	nop
 8013a04:	08013a41 	.word	0x08013a41
 8013a08:	08013aa5 	.word	0x08013aa5
 8013a0c:	08013aeb 	.word	0x08013aeb
 8013a10:	08013b31 	.word	0x08013b31
 8013a14:	08013bbd 	.word	0x08013bbd
 8013a18:	08013c0f 	.word	0x08013c0f
 8013a1c:	08013c0f 	.word	0x08013c0f
 8013a20:	08013c0f 	.word	0x08013c0f
 8013a24:	08013c07 	.word	0x08013c07
 8013a28:	08017288 	.word	0x08017288
 8013a2c:	0801722c 	.word	0x0801722c
 8013a30:	24003f84 	.word	0x24003f84
 8013a34:	24004198 	.word	0x24004198
 8013a38:	2400418c 	.word	0x2400418c
 8013a3c:	24003f88 	.word	0x24003f88
         {
         case ABP_APPD_IA_NAME:
            if( psAdiEntry->pacName )
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	685b      	ldr	r3, [r3, #4]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d02a      	beq.n	8013a9e <AD_ProcObjectRequest+0x6de>
            {
               iDataSize = (UINT16)strlen( psAdiEntry->pacName );
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ec fc47 	bl	80002e0 <strlen>
 8013a52:	4603      	mov	r3, r0
 8013a54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               ABCC_SetMsgString( psMsgBuffer,
 8013a56:	f7f8 fa7d 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d912      	bls.n	8013a8a <AD_ProcObjectRequest+0x6ca>
 8013a64:	8dfd      	ldrh	r5, [r7, #46]	@ 0x2e
 8013a66:	8dfc      	ldrh	r4, [r7, #46]	@ 0x2e
 8013a68:	f7f8 fa74 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	9303      	str	r3, [sp, #12]
 8013a70:	9402      	str	r4, [sp, #8]
 8013a72:	4ba7      	ldr	r3, [pc, #668]	@ (8013d10 <AD_ProcObjectRequest+0x950>)
 8013a74:	9301      	str	r3, [sp, #4]
 8013a76:	f640 0397 	movw	r3, #2199	@ 0x897
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	4ba5      	ldr	r3, [pc, #660]	@ (8013d14 <AD_ProcObjectRequest+0x954>)
 8013a7e:	462a      	mov	r2, r5
 8013a80:	2127      	movs	r1, #39	@ 0x27
 8013a82:	2001      	movs	r0, #1
 8013a84:	f7f9 fde0 	bl	800d648 <ABCC_LogHandler>
            }
            else
            {
               iDataSize = 0;
            }
            break;
 8013a88:	e0c5      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
               ABCC_SetMsgString( psMsgBuffer,
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f103 000c 	add.w	r0, r3, #12
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	6859      	ldr	r1, [r3, #4]
 8013a94:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a96:	2300      	movs	r3, #0
 8013a98:	f7f9 f9d4 	bl	800ce44 <ABCC_SetString>
            break;
 8013a9c:	e0bb      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
               iDataSize = 0;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 8013aa2:	e0b8      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
               }
            }
            else
#endif
            {
               ABCC_SetMsgData8( psMsgBuffer, psAdiEntry->bDataType, 0 );
 8013aa4:	f7f8 fa56 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d111      	bne.n	8013ad2 <AD_ProcObjectRequest+0x712>
 8013aae:	f7f8 fa51 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	9303      	str	r3, [sp, #12]
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	9302      	str	r3, [sp, #8]
 8013aba:	4b95      	ldr	r3, [pc, #596]	@ (8013d10 <AD_ProcObjectRequest+0x950>)
 8013abc:	9301      	str	r3, [sp, #4]
 8013abe:	f44f 630b 	mov.w	r3, #2224	@ 0x8b0
 8013ac2:	9300      	str	r3, [sp, #0]
 8013ac4:	4b93      	ldr	r3, [pc, #588]	@ (8013d14 <AD_ProcObjectRequest+0x954>)
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	2127      	movs	r1, #39	@ 0x27
 8013aca:	2001      	movs	r0, #1
 8013acc:	f7f9 fdbc 	bl	800d648 <ABCC_LogHandler>
 8013ad0:	e008      	b.n	8013ae4 <AD_ProcObjectRequest+0x724>
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f103 000c 	add.w	r0, r3, #12
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	7a1b      	ldrb	r3, [r3, #8]
 8013adc:	2200      	movs	r2, #0
 8013ade:	4619      	mov	r1, r3
 8013ae0:	f7f9 f9da 	bl	800ce98 <ABCC_SetData8>
               iDataSize = ABP_APPD_IA_DATA_TYPE_DS;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8013ae8:	e095      	b.n	8013c16 <AD_ProcObjectRequest+0x856>

         case ABP_APPD_IA_NUM_ELEM:
            ABCC_SetMsgData8( psMsgBuffer, psAdiEntry->bNumOfElements, 0 );
 8013aea:	f7f8 fa33 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d111      	bne.n	8013b18 <AD_ProcObjectRequest+0x758>
 8013af4:	f7f8 fa2e 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013af8:	4603      	mov	r3, r0
 8013afa:	9303      	str	r3, [sp, #12]
 8013afc:	2301      	movs	r3, #1
 8013afe:	9302      	str	r3, [sp, #8]
 8013b00:	4b83      	ldr	r3, [pc, #524]	@ (8013d10 <AD_ProcObjectRequest+0x950>)
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	f640 03b6 	movw	r3, #2230	@ 0x8b6
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	4b82      	ldr	r3, [pc, #520]	@ (8013d14 <AD_ProcObjectRequest+0x954>)
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	2127      	movs	r1, #39	@ 0x27
 8013b10:	2001      	movs	r0, #1
 8013b12:	f7f9 fd99 	bl	800d648 <ABCC_LogHandler>
 8013b16:	e008      	b.n	8013b2a <AD_ProcObjectRequest+0x76a>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f103 000c 	add.w	r0, r3, #12
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	7a5b      	ldrb	r3, [r3, #9]
 8013b22:	2200      	movs	r2, #0
 8013b24:	4619      	mov	r1, r3
 8013b26:	f7f9 f9b7 	bl	800ce98 <ABCC_SetData8>
            iDataSize = ABP_APPD_IA_NUM_ELEM_DS;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 8013b2e:	e072      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
               }
            }
            else
#endif
            {
               UINT8 bDesc = psAdiEntry->bDesc;
 8013b30:	697b      	ldr	r3, [r7, #20]
 8013b32:	7a9b      	ldrb	r3, [r3, #10]
 8013b34:	747b      	strb	r3, [r7, #17]
               bDesc |= bDesc & bSetAccessMask ? bSetAccessMask : 0;
 8013b36:	4b78      	ldr	r3, [pc, #480]	@ (8013d18 <AD_ProcObjectRequest+0x958>)
 8013b38:	781a      	ldrb	r2, [r3, #0]
 8013b3a:	7c7b      	ldrb	r3, [r7, #17]
 8013b3c:	4013      	ands	r3, r2
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d003      	beq.n	8013b4c <AD_ProcObjectRequest+0x78c>
 8013b44:	4b74      	ldr	r3, [pc, #464]	@ (8013d18 <AD_ProcObjectRequest+0x958>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	b25b      	sxtb	r3, r3
 8013b4a:	e000      	b.n	8013b4e <AD_ProcObjectRequest+0x78e>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8013b52:	4313      	orrs	r3, r2
 8013b54:	b25b      	sxtb	r3, r3
 8013b56:	747b      	strb	r3, [r7, #17]
               bDesc |= bDesc & bGetAccessMask ? bGetAccessMask : 0;
 8013b58:	4b70      	ldr	r3, [pc, #448]	@ (8013d1c <AD_ProcObjectRequest+0x95c>)
 8013b5a:	781a      	ldrb	r2, [r3, #0]
 8013b5c:	7c7b      	ldrb	r3, [r7, #17]
 8013b5e:	4013      	ands	r3, r2
 8013b60:	b2db      	uxtb	r3, r3
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d003      	beq.n	8013b6e <AD_ProcObjectRequest+0x7ae>
 8013b66:	4b6d      	ldr	r3, [pc, #436]	@ (8013d1c <AD_ProcObjectRequest+0x95c>)
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	b25b      	sxtb	r3, r3
 8013b6c:	e000      	b.n	8013b70 <AD_ProcObjectRequest+0x7b0>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	f997 2011 	ldrsb.w	r2, [r7, #17]
 8013b74:	4313      	orrs	r3, r2
 8013b76:	b25b      	sxtb	r3, r3
 8013b78:	747b      	strb	r3, [r7, #17]
               ABCC_SetMsgData8( psMsgBuffer, bDesc, 0 );
 8013b7a:	f7f8 f9eb 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d111      	bne.n	8013ba8 <AD_ProcObjectRequest+0x7e8>
 8013b84:	f7f8 f9e6 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	9303      	str	r3, [sp, #12]
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	9302      	str	r3, [sp, #8]
 8013b90:	4b5f      	ldr	r3, [pc, #380]	@ (8013d10 <AD_ProcObjectRequest+0x950>)
 8013b92:	9301      	str	r3, [sp, #4]
 8013b94:	f640 03cf 	movw	r3, #2255	@ 0x8cf
 8013b98:	9300      	str	r3, [sp, #0]
 8013b9a:	4b5e      	ldr	r3, [pc, #376]	@ (8013d14 <AD_ProcObjectRequest+0x954>)
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	2127      	movs	r1, #39	@ 0x27
 8013ba0:	2001      	movs	r0, #1
 8013ba2:	f7f9 fd51 	bl	800d648 <ABCC_LogHandler>
 8013ba6:	e006      	b.n	8013bb6 <AD_ProcObjectRequest+0x7f6>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	330c      	adds	r3, #12
 8013bac:	7c79      	ldrb	r1, [r7, #17]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7f9 f971 	bl	800ce98 <ABCC_SetData8>
               iDataSize = ABP_APPD_IA_DESCRIPTOR_DS;
 8013bb6:	2301      	movs	r3, #1
 8013bb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
            break;
 8013bba:	e02c      	b.n	8013c16 <AD_ProcObjectRequest+0x856>

         case ABP_APPD_IA_VALUE: /* Value. */
            if( !( psAdiEntry->bDesc & bGetAccessMask ) )
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	7a9a      	ldrb	r2, [r3, #10]
 8013bc0:	4b56      	ldr	r3, [pc, #344]	@ (8013d1c <AD_ProcObjectRequest+0x95c>)
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d103      	bne.n	8013bd4 <AD_ProcObjectRequest+0x814>
            {
               bErrCode = ABP_ERR_ATTR_NOT_GETABLE;
 8013bcc:	2309      	movs	r3, #9
 8013bce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
               break;
 8013bd2:	e020      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
            {
               bErrCode = ABP_ERR_ATTR_NOT_GETABLE;
               break;
            }
#endif
            ABCC_GetMsgDataPtr( psMsgBuffer )[ 0 ] = 0;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	731a      	strb	r2, [r3, #12]

            AD_GetAdiValue( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f103 010c 	add.w	r1, r3, #12
                            psAdiEntry->bNumOfElements, 0,
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	7a5a      	ldrb	r2, [r3, #9]
            AD_GetAdiValue( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013be4:	2301      	movs	r3, #1
 8013be6:	9301      	str	r3, [sp, #4]
 8013be8:	f107 030c 	add.w	r3, r7, #12
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	2300      	movs	r3, #0
 8013bf0:	6978      	ldr	r0, [r7, #20]
 8013bf2:	f000 fa31 	bl	8014058 <AD_GetAdiValue>
                            &iMsgBitOffset, TRUE );
            iDataSize = SizeInOctets( 0, iMsgBitOffset );
 8013bf6:	89bb      	ldrh	r3, [r7, #12]
 8013bf8:	3307      	adds	r3, #7
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	da00      	bge.n	8013c00 <AD_ProcObjectRequest+0x840>
 8013bfe:	3307      	adds	r3, #7
 8013c00:	10db      	asrs	r3, r3, #3
 8013c02:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            break;
 8013c04:	e007      	b.n	8013c16 <AD_ProcObjectRequest+0x856>
               }
            }
            else
#endif
            {
               bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8013c06:	2306      	movs	r3, #6
 8013c08:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            }
            break;
 8013c0c:	e003      	b.n	8013c16 <AD_ProcObjectRequest+0x856>

         default:
            /*
            ** Unsupported attribute.
            */
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8013c0e:	2306      	movs	r3, #6
 8013c10:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013c14:	bf00      	nop
         }
         break;
 8013c16:	e169      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
      case ABP_CMD_SET_ATTR:
         switch( ABCC_GetMsgCmdExt0( psMsgBuffer ) )
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	7a9b      	ldrb	r3, [r3, #10]
 8013c1c:	2b0a      	cmp	r3, #10
 8013c1e:	d009      	beq.n	8013c34 <AD_ProcObjectRequest+0x874>
 8013c20:	2b0a      	cmp	r3, #10
 8013c22:	dc45      	bgt.n	8013cb0 <AD_ProcObjectRequest+0x8f0>
 8013c24:	2b04      	cmp	r3, #4
 8013c26:	dc02      	bgt.n	8013c2e <AD_ProcObjectRequest+0x86e>
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	dc03      	bgt.n	8013c34 <AD_ProcObjectRequest+0x874>
 8013c2c:	e040      	b.n	8013cb0 <AD_ProcObjectRequest+0x8f0>
 8013c2e:	2b05      	cmp	r3, #5
 8013c30:	d004      	beq.n	8013c3c <AD_ProcObjectRequest+0x87c>
 8013c32:	e03d      	b.n	8013cb0 <AD_ProcObjectRequest+0x8f0>
         case ABP_APPD_IA_DESCRIPTOR:
         case ABP_APPD_IA_ELEM_NAME:
            /*
            ** Attributes are not settable.
            */
            bErrCode = ABP_ERR_ATTR_NOT_SETABLE;
 8013c34:	2308      	movs	r3, #8
 8013c36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013c3a:	e03e      	b.n	8013cba <AD_ProcObjectRequest+0x8fa>

         case ABP_APPD_IA_VALUE:

            if( !( psAdiEntry->bDesc & bSetAccessMask ) )
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	7a9a      	ldrb	r2, [r3, #10]
 8013c40:	4b35      	ldr	r3, [pc, #212]	@ (8013d18 <AD_ProcObjectRequest+0x958>)
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	4013      	ands	r3, r2
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d103      	bne.n	8013c54 <AD_ProcObjectRequest+0x894>
            {
               bErrCode = ABP_ERR_ATTR_NOT_SETABLE;
 8013c4c:	2308      	movs	r3, #8
 8013c4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
               break;
 8013c52:	e032      	b.n	8013cba <AD_ProcObjectRequest+0x8fa>
            }

            /*
            ** Check the length of each array.
            */
            iItemSize = GetAdiSizeInOctets( psAdiEntry );
 8013c54:	6978      	ldr	r0, [r7, #20]
 8013c56:	f7fe fb09 	bl	801226c <GetAdiSizeInOctets>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	827b      	strh	r3, [r7, #18]
            if( iLeTOi( psMsgBuffer->sHeader.iDataSize ) > iItemSize )
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	881b      	ldrh	r3, [r3, #0]
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	8a7a      	ldrh	r2, [r7, #18]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d203      	bcs.n	8013c72 <AD_ProcObjectRequest+0x8b2>
            {
               bErrCode = ABP_ERR_TOO_MUCH_DATA;
 8013c6a:	230a      	movs	r3, #10
 8013c6c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
               break;
 8013c70:	e023      	b.n	8013cba <AD_ProcObjectRequest+0x8fa>
            }
            else if( iLeTOi( psMsgBuffer->sHeader.iDataSize ) < iItemSize )
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	8a7a      	ldrh	r2, [r7, #18]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d903      	bls.n	8013c86 <AD_ProcObjectRequest+0x8c6>
            {
               bErrCode = ABP_ERR_NOT_ENOUGH_DATA;
 8013c7e:	230b      	movs	r3, #11
 8013c80:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
               break;
 8013c84:	e019      	b.n	8013cba <AD_ProcObjectRequest+0x8fa>
#if( AD_IA_MIN_MAX_DEFAULT_ENABLE )
            bErrCode = VerifyRange( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
                                    AD_ALL_ADI_INDEX );
#endif

            if( bErrCode == ABP_ERR_NO_ERROR )
 8013c86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d114      	bne.n	8013cb8 <AD_ProcObjectRequest+0x8f8>
                                                                   ABCC_GetMsgDataPtr( psMsgBuffer ) );
               }
               else
#endif
               {
                  SetAdiValue( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f103 010c 	add.w	r1, r3, #12
                               psAdiEntry->bNumOfElements, 0,
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	7a5a      	ldrb	r2, [r3, #9]
                  SetAdiValue( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013c98:	2301      	movs	r3, #1
 8013c9a:	9301      	str	r3, [sp, #4]
 8013c9c:	f107 030c 	add.w	r3, r7, #12
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	6978      	ldr	r0, [r7, #20]
 8013ca6:	f7ff f8c5 	bl	8012e34 <SetAdiValue>
                               &iMsgBitOffset, TRUE );
                  /*
                  ** Success.
                  */
                  iDataSize = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               }
            }

            break;
 8013cae:	e003      	b.n	8013cb8 <AD_ProcObjectRequest+0x8f8>

         default:
            /*
            ** Unsupported attribute.
            */
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8013cb0:	2306      	movs	r3, #6
 8013cb2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013cb6:	e000      	b.n	8013cba <AD_ProcObjectRequest+0x8fa>
            break;
 8013cb8:	bf00      	nop
         }
         break;
 8013cba:	e117      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

      case ABP_CMD_GET_ENUM_STR:

         if( ( ABCC_GetMsgCmdExt0( psMsgBuffer ) == ABP_APPD_IA_VALUE ) &&
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	7a9b      	ldrb	r3, [r3, #10]
 8013cc0:	2b05      	cmp	r3, #5
 8013cc2:	f040 8084 	bne.w	8013dce <AD_ProcObjectRequest+0xa0e>
             ( psAdiEntry->bDataType == ABP_ENUM ) )
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	7a1b      	ldrb	r3, [r3, #8]
         if( ( ABCC_GetMsgCmdExt0( psMsgBuffer ) == ABP_APPD_IA_VALUE ) &&
 8013cca:	2b08      	cmp	r3, #8
 8013ccc:	d17f      	bne.n	8013dce <AD_ProcObjectRequest+0xa0e>
         {
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d004      	beq.n	8013ce0 <AD_ProcObjectRequest+0x920>
                ( psAdiEntry->uData.sENUM.psValueProps->pasEnumStrings == NULL ) )
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	691b      	ldr	r3, [r3, #16]
 8013cda:	685b      	ldr	r3, [r3, #4]
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d113      	bne.n	8013d08 <AD_ProcObjectRequest+0x948>
               /*
               ** The application has not defined properties or strings for
               ** this ABP_ENUM ADI, and the ABP_ENUM data type is quite
               ** pointless without those. Notify the user.
               */
               ABCC_LOG_WARNING( ABCC_EC_NO_RESOURCES,
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	881b      	ldrh	r3, [r3, #0]
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	881b      	ldrh	r3, [r3, #0]
 8013cea:	9302      	str	r3, [sp, #8]
 8013cec:	4b0c      	ldr	r3, [pc, #48]	@ (8013d20 <AD_ProcObjectRequest+0x960>)
 8013cee:	9301      	str	r3, [sp, #4]
 8013cf0:	f640 13a2 	movw	r3, #2466	@ 0x9a2
 8013cf4:	9300      	str	r3, [sp, #0]
 8013cf6:	4b07      	ldr	r3, [pc, #28]	@ (8013d14 <AD_ProcObjectRequest+0x954>)
 8013cf8:	211a      	movs	r1, #26
 8013cfa:	2002      	movs	r0, #2
 8013cfc:	f7f9 fca4 	bl	800d648 <ABCC_LogHandler>
                  (UINT32)psAdiEntry->iInstance,
                  "Properties not defined for ENUM ADI (instance %" PRIu16 ")\n",
                  psAdiEntry->iInstance );
               bErrCode = ABP_ERR_NO_RESOURCES;
 8013d00:	230e      	movs	r3, #14
 8013d02:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013d06:	e066      	b.n	8013dd6 <AD_ProcObjectRequest+0xa16>
            }
            else
            {
               UINT8 bStringIndex;

               for( bStringIndex = 0; bStringIndex < psAdiEntry->uData.sENUM.psValueProps->bNumOfEnumStrings; bStringIndex++ )
 8013d08:	2300      	movs	r3, #0
 8013d0a:	76bb      	strb	r3, [r7, #26]
 8013d0c:	e018      	b.n	8013d40 <AD_ProcObjectRequest+0x980>
 8013d0e:	bf00      	nop
 8013d10:	08017288 	.word	0x08017288
 8013d14:	0801722c 	.word	0x0801722c
 8013d18:	24000069 	.word	0x24000069
 8013d1c:	24000068 	.word	0x24000068
 8013d20:	080173d4 	.word	0x080173d4
               {
                  if( psAdiEntry->uData.sENUM.psValueProps->pasEnumStrings[ bStringIndex ].eValue ==
 8013d24:	697b      	ldr	r3, [r7, #20]
 8013d26:	691b      	ldr	r3, [r3, #16]
 8013d28:	685a      	ldr	r2, [r3, #4]
 8013d2a:	7ebb      	ldrb	r3, [r7, #26]
 8013d2c:	00db      	lsls	r3, r3, #3
 8013d2e:	4413      	add	r3, r2
 8013d30:	781a      	ldrb	r2, [r3, #0]
                      ABCC_GetMsgCmdExt1( psMsgBuffer ) )
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	7adb      	ldrb	r3, [r3, #11]
                  if( psAdiEntry->uData.sENUM.psValueProps->pasEnumStrings[ bStringIndex ].eValue ==
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d009      	beq.n	8013d4e <AD_ProcObjectRequest+0x98e>
               for( bStringIndex = 0; bStringIndex < psAdiEntry->uData.sENUM.psValueProps->bNumOfEnumStrings; bStringIndex++ )
 8013d3a:	7ebb      	ldrb	r3, [r7, #26]
 8013d3c:	3301      	adds	r3, #1
 8013d3e:	76bb      	strb	r3, [r7, #26]
 8013d40:	697b      	ldr	r3, [r7, #20]
 8013d42:	691b      	ldr	r3, [r3, #16]
 8013d44:	78db      	ldrb	r3, [r3, #3]
 8013d46:	7eba      	ldrb	r2, [r7, #26]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d3eb      	bcc.n	8013d24 <AD_ProcObjectRequest+0x964>
 8013d4c:	e000      	b.n	8013d50 <AD_ProcObjectRequest+0x990>
                  {
                     break;
 8013d4e:	bf00      	nop
                  }
               }

               if( bStringIndex < psAdiEntry->uData.sENUM.psValueProps->bNumOfEnumStrings )
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	691b      	ldr	r3, [r3, #16]
 8013d54:	78db      	ldrb	r3, [r3, #3]
 8013d56:	7eba      	ldrb	r2, [r7, #26]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d234      	bcs.n	8013dc6 <AD_ProcObjectRequest+0xa06>
               {
                  iDataSize = (UINT16)strlen( psAdiEntry->uData.sENUM.psValueProps->pasEnumStrings[ bStringIndex ].acEnumStr );
 8013d5c:	697b      	ldr	r3, [r7, #20]
 8013d5e:	691b      	ldr	r3, [r3, #16]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	7ebb      	ldrb	r3, [r7, #26]
 8013d64:	00db      	lsls	r3, r3, #3
 8013d66:	4413      	add	r3, r2
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7ec fab8 	bl	80002e0 <strlen>
 8013d70:	4603      	mov	r3, r0
 8013d72:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                  ABCC_SetMsgString( psMsgBuffer,
 8013d74:	f7f8 f8ee 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013d7e:	4293      	cmp	r3, r2
 8013d80:	d912      	bls.n	8013da8 <AD_ProcObjectRequest+0x9e8>
 8013d82:	8dfd      	ldrh	r5, [r7, #46]	@ 0x2e
 8013d84:	8dfc      	ldrh	r4, [r7, #46]	@ 0x2e
 8013d86:	f7f8 f8e5 	bl	800bf54 <ABCC_GetMaxMessageSize>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	9303      	str	r3, [sp, #12]
 8013d8e:	9402      	str	r4, [sp, #8]
 8013d90:	4b6f      	ldr	r3, [pc, #444]	@ (8013f50 <AD_ProcObjectRequest+0xb90>)
 8013d92:	9301      	str	r3, [sp, #4]
 8013d94:	f640 13b8 	movw	r3, #2488	@ 0x9b8
 8013d98:	9300      	str	r3, [sp, #0]
 8013d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8013f54 <AD_ProcObjectRequest+0xb94>)
 8013d9c:	462a      	mov	r2, r5
 8013d9e:	2127      	movs	r1, #39	@ 0x27
 8013da0:	2001      	movs	r0, #1
 8013da2:	f7f9 fc51 	bl	800d648 <ABCC_LogHandler>
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013da6:	e016      	b.n	8013dd6 <AD_ProcObjectRequest+0xa16>
                  ABCC_SetMsgString( psMsgBuffer,
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f103 000c 	add.w	r0, r3, #12
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	685a      	ldr	r2, [r3, #4]
 8013db4:	7ebb      	ldrb	r3, [r7, #26]
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	4413      	add	r3, r2
 8013dba:	6859      	ldr	r1, [r3, #4]
 8013dbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	f7f9 f840 	bl	800ce44 <ABCC_SetString>
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013dc4:	e007      	b.n	8013dd6 <AD_ProcObjectRequest+0xa16>
               else
               {
                  /*
                  ** The enum value was not found in the string lookup.
                  */
                  bErrCode = ABP_ERR_INV_CMD_EXT_1;
 8013dc6:	2307      	movs	r3, #7
 8013dc8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            if( ( psAdiEntry->uData.sENUM.psValueProps == NULL ) ||
 8013dcc:	e003      	b.n	8013dd6 <AD_ProcObjectRequest+0xa16>
         {
            /*
            ** The attribute targeted by CmdExt0 does not exist, or is not an
            ** ABP_ENUM.
            */
            bErrCode = ABP_ERR_INV_CMD_EXT_0;
 8013dce:	2306      	movs	r3, #6
 8013dd0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
         }
         break;
 8013dd4:	e08a      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
 8013dd6:	e089      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

      case ABP_CMD_GET_INDEXED_ATTR:
         switch( ABCC_GetMsgCmdExt0( psMsgBuffer ) )
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	7a9b      	ldrb	r3, [r3, #10]
 8013ddc:	2b05      	cmp	r3, #5
 8013dde:	d128      	bne.n	8013e32 <AD_ProcObjectRequest+0xa72>
         {
            case ABP_APPD_IA_VALUE:
               if( !( psAdiEntry->bDesc & bGetAccessMask ) )
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	7a9a      	ldrb	r2, [r3, #10]
 8013de4:	4b5c      	ldr	r3, [pc, #368]	@ (8013f58 <AD_ProcObjectRequest+0xb98>)
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	4013      	ands	r3, r2
 8013dea:	b2db      	uxtb	r3, r3
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d103      	bne.n	8013df8 <AD_ProcObjectRequest+0xa38>
               {
                  bErrCode = ABP_ERR_ATTR_NOT_GETABLE;
 8013df0:	2309      	movs	r3, #9
 8013df2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                  break;
 8013df6:	e021      	b.n	8013e3c <AD_ProcObjectRequest+0xa7c>
                  break;
               }
#endif
               else
               {
                  AD_GetAdiValue( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f103 010c 	add.w	r1, r3, #12
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	7ada      	ldrb	r2, [r3, #11]
 8013e02:	2301      	movs	r3, #1
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	f107 030c 	add.w	r3, r7, #12
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	2201      	movs	r2, #1
 8013e10:	6978      	ldr	r0, [r7, #20]
 8013e12:	f000 f921 	bl	8014058 <AD_GetAdiValue>
                                  1, ABCC_GetMsgCmdExt1( psMsgBuffer ),
                                  &iMsgBitOffset, TRUE );

                  iDataSize = SizeInOctets( 0, iMsgBitOffset );
 8013e16:	89bb      	ldrh	r3, [r7, #12]
 8013e18:	3307      	adds	r3, #7
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	da00      	bge.n	8013e20 <AD_ProcObjectRequest+0xa60>
 8013e1e:	3307      	adds	r3, #7
 8013e20:	10db      	asrs	r3, r3, #3
 8013e22:	85fb      	strh	r3, [r7, #46]	@ 0x2e

                  if( iDataSize == 0 )
 8013e24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d107      	bne.n	8013e3a <AD_ProcObjectRequest+0xa7a>
                  {
                     bErrCode = ABP_ERR_OUT_OF_RANGE;
 8013e2a:	230c      	movs	r3, #12
 8013e2c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                  }
               }
            break;
 8013e30:	e003      	b.n	8013e3a <AD_ProcObjectRequest+0xa7a>
               }
               break;
#endif

         default:
            bErrCode = ABP_ERR_UNSUP_CMD;
 8013e32:	2305      	movs	r3, #5
 8013e34:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013e38:	e000      	b.n	8013e3c <AD_ProcObjectRequest+0xa7c>
            break;
 8013e3a:	bf00      	nop
         }
         break;
 8013e3c:	e056      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
      case ABP_CMD_SET_INDEXED_ATTR:
         switch( ABCC_GetMsgCmdExt0( psMsgBuffer ) )
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	7a9b      	ldrb	r3, [r3, #10]
 8013e42:	2b05      	cmp	r3, #5
 8013e44:	d143      	bne.n	8013ece <AD_ProcObjectRequest+0xb0e>
         {
            case ABP_APPD_IA_VALUE:
               if( !( psAdiEntry->bDesc & bSetAccessMask ) )
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	7a9a      	ldrb	r2, [r3, #10]
 8013e4a:	4b44      	ldr	r3, [pc, #272]	@ (8013f5c <AD_ProcObjectRequest+0xb9c>)
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	4013      	ands	r3, r2
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d103      	bne.n	8013e5e <AD_ProcObjectRequest+0xa9e>
               {
                  bErrCode = ABP_ERR_ATTR_NOT_SETABLE;
 8013e56:	2308      	movs	r3, #8
 8013e58:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                  break;
 8013e5c:	e03c      	b.n	8013ed8 <AD_ProcObjectRequest+0xb18>
                  break;
               }
#endif
               else
               {
                  iItemSize = ( GetAdiSizeInBits( psAdiEntry, 1, ABCC_GetMsgCmdExt1( psMsgBuffer ) ) + 7 ) / 8;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7adb      	ldrb	r3, [r3, #11]
 8013e62:	461a      	mov	r2, r3
 8013e64:	2101      	movs	r1, #1
 8013e66:	6978      	ldr	r0, [r7, #20]
 8013e68:	f7fe f9e7 	bl	801223a <GetAdiSizeInBits>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	3307      	adds	r3, #7
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	da00      	bge.n	8013e76 <AD_ProcObjectRequest+0xab6>
 8013e74:	3307      	adds	r3, #7
 8013e76:	10db      	asrs	r3, r3, #3
 8013e78:	827b      	strh	r3, [r7, #18]

                  if( ABCC_GetMsgDataSize( psMsgBuffer ) > iItemSize )
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	8a7a      	ldrh	r2, [r7, #18]
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d203      	bcs.n	8013e8e <AD_ProcObjectRequest+0xace>
                  {
                     bErrCode = ABP_ERR_TOO_MUCH_DATA;
 8013e86:	230a      	movs	r3, #10
 8013e88:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                     break;
 8013e8c:	e024      	b.n	8013ed8 <AD_ProcObjectRequest+0xb18>
                  }
                  else if( ABCC_GetMsgDataSize( psMsgBuffer ) < iItemSize )
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	881b      	ldrh	r3, [r3, #0]
 8013e92:	b29b      	uxth	r3, r3
 8013e94:	8a7a      	ldrh	r2, [r7, #18]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d903      	bls.n	8013ea2 <AD_ProcObjectRequest+0xae2>
                  {
                     bErrCode = ABP_ERR_NOT_ENOUGH_DATA;
 8013e9a:	230b      	movs	r3, #11
 8013e9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                     break;
 8013ea0:	e01a      	b.n	8013ed8 <AD_ProcObjectRequest+0xb18>

#if( AD_IA_MIN_MAX_DEFAULT_ENABLE )
                  bErrCode = VerifyRange( psAdiEntry, ABCC_GetMsgDataPtr( psMsgBuffer ),
                                          ABCC_GetMsgCmdExt1( psMsgBuffer ) );
#endif
                  if( bErrCode == ABP_ERR_NO_ERROR )
 8013ea2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d115      	bne.n	8013ed6 <AD_ProcObjectRequest+0xb16>
                     }
                     else
#endif
                     {
                        SetAdiValue( psAdiEntry,
                                     ABCC_GetMsgDataPtr( psMsgBuffer ),
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f103 010c 	add.w	r1, r3, #12
                        SetAdiValue( psAdiEntry,
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	7ada      	ldrb	r2, [r3, #11]
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	9301      	str	r3, [sp, #4]
 8013eb8:	f107 030c 	add.w	r3, r7, #12
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	6978      	ldr	r0, [r7, #20]
 8013ec4:	f7fe ffb6 	bl	8012e34 <SetAdiValue>
                                     1, ABCC_GetMsgCmdExt1( psMsgBuffer ),
                                     &iMsgBitOffset, TRUE );
                        /*
                        ** Success.
                        */
                        iDataSize = 0;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                     }
                  }
               }
               break;
 8013ecc:	e003      	b.n	8013ed6 <AD_ProcObjectRequest+0xb16>

         default:
            bErrCode =  ABP_ERR_UNSUP_CMD;
 8013ece:	2305      	movs	r3, #5
 8013ed0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            break;
 8013ed4:	e000      	b.n	8013ed8 <AD_ProcObjectRequest+0xb18>
               break;
 8013ed6:	bf00      	nop
         }
         break;
 8013ed8:	e008      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>

      default:
         /*
         ** Unsupported command.
         */
         bErrCode = ABP_ERR_UNSUP_CMD;
 8013eda:	2305      	movs	r3, #5
 8013edc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
         break;
 8013ee0:	e004      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
   else
   {
      /*
      ** The instance was not found.
      */
      bErrCode = ABP_ERR_UNSUP_INST;
 8013ee2:	2304      	movs	r3, #4
 8013ee4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8013ee8:	e000      	b.n	8013eec <AD_ProcObjectRequest+0xb2c>
            break;
 8013eea:	bf00      	nop
   }

   /*
   ** Special handling. The remap response is already handled.
   */
   if( psMsgBuffer != NULL )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d02a      	beq.n	8013f48 <AD_ProcObjectRequest+0xb88>
   {
      if( bErrCode == ABP_ERR_NO_ERROR )
 8013ef2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d10a      	bne.n	8013f10 <AD_ProcObjectRequest+0xb50>
      {
         ABP_SetMsgResponse( psMsgBuffer, iDataSize );
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	7a1b      	ldrb	r3, [r3, #8]
 8013efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f02:	b2da      	uxtb	r2, r3
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	721a      	strb	r2, [r3, #8]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013f0c:	801a      	strh	r2, [r3, #0]
 8013f0e:	e018      	b.n	8013f42 <AD_ProcObjectRequest+0xb82>
      }
      else
      {
         ABP_SetMsgErrorResponse( psMsgBuffer, 1, bErrCode );
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	7a1b      	ldrb	r3, [r3, #8]
 8013f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f18:	b2da      	uxtb	r2, r3
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	721a      	strb	r2, [r3, #8]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	7a1b      	ldrb	r3, [r3, #8]
 8013f22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013f26:	b2da      	uxtb	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	721a      	strb	r2, [r3, #8]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f042 0201 	orr.w	r2, r2, #1
 8013f34:	701a      	strb	r2, [r3, #0]
 8013f36:	2200      	movs	r2, #0
 8013f38:	705a      	strb	r2, [r3, #1]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8013f40:	731a      	strb	r2, [r3, #12]
      }

      ABCC_SendRespMsg( psMsgBuffer );
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f7f8 fbe1 	bl	800c70a <ABCC_SendRespMsg>
   }
}
 8013f48:	bf00      	nop
 8013f4a:	3730      	adds	r7, #48	@ 0x30
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f50:	08017288 	.word	0x08017288
 8013f54:	0801722c 	.word	0x0801722c
 8013f58:	24000068 	.word	0x24000068
 8013f5c:	24000069 	.word	0x24000069

08013f60 <AD_UpdatePdReadData>:

void AD_UpdatePdReadData( void* pxPdDataBuf )
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
   if( ad_ReadMapInfo.paiMappedAdiList )
 8013f68:	4b08      	ldr	r3, [pc, #32]	@ (8013f8c <AD_UpdatePdReadData+0x2c>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d008      	beq.n	8013f82 <AD_UpdatePdReadData+0x22>
   {
      UINT16 iBitOffset = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	81fb      	strh	r3, [r7, #14]

      WritePdMapFromBuffer( &ad_ReadMapInfo,
 8013f74:	f107 030e 	add.w	r3, r7, #14
 8013f78:	461a      	mov	r2, r3
 8013f7a:	6879      	ldr	r1, [r7, #4]
 8013f7c:	4803      	ldr	r0, [pc, #12]	@ (8013f8c <AD_UpdatePdReadData+0x2c>)
 8013f7e:	f7fe ffed 	bl	8012f5c <WritePdMapFromBuffer>
                            pxPdDataBuf,
                            &iBitOffset );
   }
}
 8013f82:	bf00      	nop
 8013f84:	3710      	adds	r7, #16
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	2400418c 	.word	0x2400418c

08013f90 <AD_UpdatePdWriteData>:

BOOL AD_UpdatePdWriteData( void* pxPdDataBuf )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b084      	sub	sp, #16
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
   if( ad_WriteMapInfo.paiMappedAdiList )
 8013f98:	4b09      	ldr	r3, [pc, #36]	@ (8013fc0 <AD_UpdatePdWriteData+0x30>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d00a      	beq.n	8013fb6 <AD_UpdatePdWriteData+0x26>
   {
      UINT16 iBitOffset = 0;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	81fb      	strh	r3, [r7, #14]

      WriteBufferFromPdMap( pxPdDataBuf,
 8013fa4:	f107 030e 	add.w	r3, r7, #14
 8013fa8:	4a05      	ldr	r2, [pc, #20]	@ (8013fc0 <AD_UpdatePdWriteData+0x30>)
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7fe ff73 	bl	8012e98 <WriteBufferFromPdMap>
   else
   {
      return( FALSE );
   }

   return( TRUE );
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	e000      	b.n	8013fb8 <AD_UpdatePdWriteData+0x28>
      return( FALSE );
 8013fb6:	2300      	movs	r3, #0
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3710      	adds	r7, #16
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	24004198 	.word	0x24004198

08013fc4 <AD_AdiMappingReq>:
   }
}

UINT16 AD_AdiMappingReq( const AD_AdiEntryType** ppsAdiEntry,
                         const AD_MapType** ppsDefaultMap )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
   ABCC_NetFormatType eNetFormat;
   eNetFormat = ABCC_NetFormat();
 8013fce:	f7fa ff67 	bl	800eea0 <ABCC_NetFormat>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	73fb      	strb	r3, [r7, #15]
#ifdef ABCC_SYS_BIG_ENDIAN
   ad_fDoNetworkEndianSwap = ( eNetFormat == NET_LITTLEENDIAN ) ? TRUE : FALSE;
#else
   ad_fDoNetworkEndianSwap = ( eNetFormat == NET_LITTLEENDIAN ) ? FALSE : TRUE;
 8013fd6:	7bfb      	ldrb	r3, [r7, #15]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	bf14      	ite	ne
 8013fdc:	2301      	movne	r3, #1
 8013fde:	2300      	moveq	r3, #0
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	4b11      	ldr	r3, [pc, #68]	@ (801402c <AD_AdiMappingReq+0x68>)
 8013fe6:	601a      	str	r2, [r3, #0]

   /*
   ** Some protocols require get access on write process data and set access on read
   ** process data. This logic ensures this is done.
   */
   UINT16 bNetworkType = ABCC_NetworkType();
 8013fe8:	f7fa ff4e 	bl	800ee88 <ABCC_NetworkType>
 8013fec:	4603      	mov	r3, r0
 8013fee:	81bb      	strh	r3, [r7, #12]
   if( ( bNetworkType == ABP_NW_TYPE_ECT ) ||
 8013ff0:	89bb      	ldrh	r3, [r7, #12]
 8013ff2:	2b87      	cmp	r3, #135	@ 0x87
 8013ff4:	d005      	beq.n	8014002 <AD_AdiMappingReq+0x3e>
 8013ff6:	89bb      	ldrh	r3, [r7, #12]
 8013ff8:	2b20      	cmp	r3, #32
 8013ffa:	d002      	beq.n	8014002 <AD_AdiMappingReq+0x3e>
       ( bNetworkType == ABP_NW_TYPE_COP ) ||
 8013ffc:	89bb      	ldrh	r3, [r7, #12]
 8013ffe:	2b9f      	cmp	r3, #159	@ 0x9f
 8014000:	d105      	bne.n	801400e <AD_AdiMappingReq+0x4a>
       ( bNetworkType == ABP_NW_TYPE_EPL ) )
   {
      bGetAccessMask = ABP_APPD_DESCR_GET_ACCESS | ABP_APPD_DESCR_MAPPABLE_WRITE_PD;
 8014002:	4b0b      	ldr	r3, [pc, #44]	@ (8014030 <AD_AdiMappingReq+0x6c>)
 8014004:	2209      	movs	r2, #9
 8014006:	701a      	strb	r2, [r3, #0]
      bSetAccessMask = ABP_APPD_DESCR_SET_ACCESS | ABP_APPD_DESCR_MAPPABLE_READ_PD;
 8014008:	4b0a      	ldr	r3, [pc, #40]	@ (8014034 <AD_AdiMappingReq+0x70>)
 801400a:	2212      	movs	r2, #18
 801400c:	701a      	strb	r2, [r3, #0]
   }

   *ppsAdiEntry = ad_asADIEntryList;
 801400e:	4b0a      	ldr	r3, [pc, #40]	@ (8014038 <AD_AdiMappingReq+0x74>)
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	601a      	str	r2, [r3, #0]
   *ppsDefaultMap = ad_asDefaultMap;
 8014016:	4b09      	ldr	r3, [pc, #36]	@ (801403c <AD_AdiMappingReq+0x78>)
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	601a      	str	r2, [r3, #0]

   return( ad_iNumOfADIs );
 801401e:	4b08      	ldr	r3, [pc, #32]	@ (8014040 <AD_AdiMappingReq+0x7c>)
 8014020:	881b      	ldrh	r3, [r3, #0]
}
 8014022:	4618      	mov	r0, r3
 8014024:	3710      	adds	r7, #16
 8014026:	46bd      	mov	sp, r7
 8014028:	bd80      	pop	{r7, pc}
 801402a:	bf00      	nop
 801402c:	24003f7c 	.word	0x24003f7c
 8014030:	24000068 	.word	0x24000068
 8014034:	24000069 	.word	0x24000069
 8014038:	24003f84 	.word	0x24003f84
 801403c:	24003f80 	.word	0x24003f80
 8014040:	24003f88 	.word	0x24003f88

08014044 <AD_RemapDone>:

void AD_RemapDone( void )
{
 8014044:	b580      	push	{r7, lr}
 8014046:	af00      	add	r7, sp, #0
   /*
   ** This Write Process Data update is to ensure that the write process data
   ** is updated with the right content.
   */
   ABCC_TriggerWrPdUpdate();
 8014048:	4b02      	ldr	r3, [pc, #8]	@ (8014054 <AD_RemapDone+0x10>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4798      	blx	r3
}
 801404e:	bf00      	nop
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	2400146c 	.word	0x2400146c

08014058 <AD_GetAdiValue>:
                     void* pxDest,
                     UINT8 bNumElements,
                     UINT8 bStartIndex,
                     UINT16* piDestBitOffset,
                     BOOL fExplicit )
{
 8014058:	b590      	push	{r4, r7, lr}
 801405a:	b089      	sub	sp, #36	@ 0x24
 801405c:	af02      	add	r7, sp, #8
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	4611      	mov	r1, r2
 8014064:	461a      	mov	r2, r3
 8014066:	460b      	mov	r3, r1
 8014068:	71fb      	strb	r3, [r7, #7]
 801406a:	4613      	mov	r3, r2
 801406c:	71bb      	strb	r3, [r7, #6]
   else
#else
   (void)fExplicit;
#endif
   {
      iSrcBitOffset = CalcStartIndexBitOffset( psAdiEntry->bDataType, bStartIndex );
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	7a1b      	ldrb	r3, [r3, #8]
 8014072:	4618      	mov	r0, r3
 8014074:	f7f8 fdcc 	bl	800cc10 <ABCC_GetDataTypeSizeInBits>
 8014078:	4603      	mov	r3, r0
 801407a:	461a      	mov	r2, r3
 801407c:	79bb      	ldrb	r3, [r7, #6]
 801407e:	b29b      	uxth	r3, r3
 8014080:	fb12 f303 	smulbb	r3, r2, r3
 8014084:	82fb      	strh	r3, [r7, #22]
      *piDestBitOffset += CopyValue( pxDest,
 8014086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014088:	8819      	ldrh	r1, [r3, #0]
                                     *piDestBitOffset,
                                     psAdiEntry->uData.sVOID.pxValuePtr,
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	68d8      	ldr	r0, [r3, #12]
                                     iSrcBitOffset,
                                     psAdiEntry->bDataType,
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	7a1b      	ldrb	r3, [r3, #8]
      *piDestBitOffset += CopyValue( pxDest,
 8014092:	79fa      	ldrb	r2, [r7, #7]
 8014094:	b292      	uxth	r2, r2
 8014096:	8afc      	ldrh	r4, [r7, #22]
 8014098:	9201      	str	r2, [sp, #4]
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	4623      	mov	r3, r4
 801409e:	4602      	mov	r2, r0
 80140a0:	68b8      	ldr	r0, [r7, #8]
 80140a2:	f7fe fe17 	bl	8012cd4 <CopyValue>
 80140a6:	4603      	mov	r3, r0
 80140a8:	461a      	mov	r2, r3
 80140aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ac:	881b      	ldrh	r3, [r3, #0]
 80140ae:	4413      	add	r3, r2
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b4:	801a      	strh	r2, [r3, #0]
                                     bNumElements );
   }
}
 80140b6:	bf00      	nop
 80140b8:	371c      	adds	r7, #28
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd90      	pop	{r4, r7, pc}
	...

080140c0 <ABCC_HAL_Set_I2C_Handle>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction_aux.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_Set_I2C_Handle( I2C_HandleTypeDef* pxNewHandle )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af04      	add	r7, sp, #16
 80140c6:	6078      	str	r0, [r7, #4]
   if( ( ( pxI2C_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 80140c8:	4b11      	ldr	r3, [pc, #68]	@ (8014110 <ABCC_HAL_Set_I2C_Handle+0x50>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d102      	bne.n	80140d6 <ABCC_HAL_Set_I2C_Handle+0x16>
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <ABCC_HAL_Set_I2C_Handle+0x24>
       ( ( pxI2C_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 80140d6:	4b0e      	ldr	r3, [pc, #56]	@ (8014110 <ABCC_HAL_Set_I2C_Handle+0x50>)
 80140d8:	681b      	ldr	r3, [r3, #0]
   if( ( ( pxI2C_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d007      	beq.n	80140ee <ABCC_HAL_Set_I2C_Handle+0x2e>
       ( ( pxI2C_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d104      	bne.n	80140ee <ABCC_HAL_Set_I2C_Handle+0x2e>
   {
      pxI2C_Handle = pxNewHandle;
 80140e4:	4a0a      	ldr	r2, [pc, #40]	@ (8014110 <ABCC_HAL_Set_I2C_Handle+0x50>)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	6013      	str	r3, [r2, #0]
      return( TRUE );
 80140ea:	2301      	movs	r3, #1
 80140ec:	e00c      	b.n	8014108 <ABCC_HAL_Set_I2C_Handle+0x48>
   }

   ABCC_LOG_WARNING( ABCC_EC_PARAMETER_NOT_VALID,
 80140ee:	687a      	ldr	r2, [r7, #4]
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	9302      	str	r3, [sp, #8]
 80140f4:	4b07      	ldr	r3, [pc, #28]	@ (8014114 <ABCC_HAL_Set_I2C_Handle+0x54>)
 80140f6:	9301      	str	r3, [sp, #4]
 80140f8:	23a0      	movs	r3, #160	@ 0xa0
 80140fa:	9300      	str	r3, [sp, #0]
 80140fc:	4b06      	ldr	r3, [pc, #24]	@ (8014118 <ABCC_HAL_Set_I2C_Handle+0x58>)
 80140fe:	210e      	movs	r1, #14
 8014100:	2002      	movs	r0, #2
 8014102:	f7f9 faa1 	bl	800d648 <ABCC_LogHandler>
      (UINT32)pxNewHandle,
      "Provided I2C handle not supported in this state %p\n",
      (void*)pxNewHandle );
   return( FALSE );
 8014106:	2300      	movs	r3, #0
}
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	240041a8 	.word	0x240041a8
 8014114:	0801744c 	.word	0x0801744c
 8014118:	08017430 	.word	0x08017430

0801411c <ABCC_HAL_Set_SPI_Handle>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction_aux.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_Set_SPI_Handle( SPI_HandleTypeDef* pxNewHandle )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af04      	add	r7, sp, #16
 8014122:	6078      	str	r0, [r7, #4]
   if( ( ( pxSPI_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 8014124:	4b11      	ldr	r3, [pc, #68]	@ (801416c <ABCC_HAL_Set_SPI_Handle+0x50>)
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d102      	bne.n	8014132 <ABCC_HAL_Set_SPI_Handle+0x16>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d106      	bne.n	8014140 <ABCC_HAL_Set_SPI_Handle+0x24>
       ( ( pxSPI_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 8014132:	4b0e      	ldr	r3, [pc, #56]	@ (801416c <ABCC_HAL_Set_SPI_Handle+0x50>)
 8014134:	681b      	ldr	r3, [r3, #0]
   if( ( ( pxSPI_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 8014136:	2b00      	cmp	r3, #0
 8014138:	d007      	beq.n	801414a <ABCC_HAL_Set_SPI_Handle+0x2e>
       ( ( pxSPI_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d104      	bne.n	801414a <ABCC_HAL_Set_SPI_Handle+0x2e>
   {
      pxSPI_Handle = pxNewHandle;
 8014140:	4a0a      	ldr	r2, [pc, #40]	@ (801416c <ABCC_HAL_Set_SPI_Handle+0x50>)
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6013      	str	r3, [r2, #0]
      return( TRUE );
 8014146:	2301      	movs	r3, #1
 8014148:	e00c      	b.n	8014164 <ABCC_HAL_Set_SPI_Handle+0x48>
   }

   ABCC_LOG_WARNING( ABCC_EC_PARAMETER_NOT_VALID,
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	9302      	str	r3, [sp, #8]
 8014150:	4b07      	ldr	r3, [pc, #28]	@ (8014170 <ABCC_HAL_Set_SPI_Handle+0x54>)
 8014152:	9301      	str	r3, [sp, #4]
 8014154:	23b5      	movs	r3, #181	@ 0xb5
 8014156:	9300      	str	r3, [sp, #0]
 8014158:	4b06      	ldr	r3, [pc, #24]	@ (8014174 <ABCC_HAL_Set_SPI_Handle+0x58>)
 801415a:	210e      	movs	r1, #14
 801415c:	2002      	movs	r0, #2
 801415e:	f7f9 fa73 	bl	800d648 <ABCC_LogHandler>
      (UINT32)pxNewHandle,
      "Provided SPI handle not supported in this state %p\n",
      (void*)pxNewHandle );
   return( FALSE );
 8014162:	2300      	movs	r3, #0
}
 8014164:	4618      	mov	r0, r3
 8014166:	3708      	adds	r7, #8
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	240041ac 	.word	0x240041ac
 8014170:	08017480 	.word	0x08017480
 8014174:	08017430 	.word	0x08017430

08014178 <ABCC_HAL_Set_UART_Handle>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction_aux.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_Set_UART_Handle( UART_HandleTypeDef* pxNewHandle )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b086      	sub	sp, #24
 801417c:	af04      	add	r7, sp, #16
 801417e:	6078      	str	r0, [r7, #4]
   if( ( ( pxUART_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 8014180:	4b11      	ldr	r3, [pc, #68]	@ (80141c8 <ABCC_HAL_Set_UART_Handle+0x50>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d102      	bne.n	801418e <ABCC_HAL_Set_UART_Handle+0x16>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d106      	bne.n	801419c <ABCC_HAL_Set_UART_Handle+0x24>
       ( ( pxUART_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 801418e:	4b0e      	ldr	r3, [pc, #56]	@ (80141c8 <ABCC_HAL_Set_UART_Handle+0x50>)
 8014190:	681b      	ldr	r3, [r3, #0]
   if( ( ( pxUART_Handle == NULL ) && ( pxNewHandle != NULL ) ) ||
 8014192:	2b00      	cmp	r3, #0
 8014194:	d007      	beq.n	80141a6 <ABCC_HAL_Set_UART_Handle+0x2e>
       ( ( pxUART_Handle != NULL ) && ( pxNewHandle == NULL ) ) )
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d104      	bne.n	80141a6 <ABCC_HAL_Set_UART_Handle+0x2e>
   {
      pxUART_Handle = pxNewHandle;
 801419c:	4a0a      	ldr	r2, [pc, #40]	@ (80141c8 <ABCC_HAL_Set_UART_Handle+0x50>)
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6013      	str	r3, [r2, #0]
      return( TRUE );
 80141a2:	2301      	movs	r3, #1
 80141a4:	e00c      	b.n	80141c0 <ABCC_HAL_Set_UART_Handle+0x48>
   }

   ABCC_LOG_WARNING( ABCC_EC_PARAMETER_NOT_VALID,
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	9302      	str	r3, [sp, #8]
 80141ac:	4b07      	ldr	r3, [pc, #28]	@ (80141cc <ABCC_HAL_Set_UART_Handle+0x54>)
 80141ae:	9301      	str	r3, [sp, #4]
 80141b0:	23cb      	movs	r3, #203	@ 0xcb
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	4b06      	ldr	r3, [pc, #24]	@ (80141d0 <ABCC_HAL_Set_UART_Handle+0x58>)
 80141b6:	210e      	movs	r1, #14
 80141b8:	2002      	movs	r0, #2
 80141ba:	f7f9 fa45 	bl	800d648 <ABCC_LogHandler>
      (UINT32)pxNewHandle,
      "Provided UART handle not supported in this state %p\n",
      (void*)pxNewHandle );
   return( FALSE );
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	240041b0 	.word	0x240041b0
 80141cc:	080174b4 	.word	0x080174b4
 80141d0:	08017430 	.word	0x08017430

080141d4 <ABCC_HAL_Refresh_I2C_In>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction_aux.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_Refresh_I2C_In( void )
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af04      	add	r7, sp, #16
   HAL_StatusTypeDef    xHalStatus;
   UINT8                abBuffer[ 2 ];

   if( pxI2C_Handle == NULL )
 80141da:	4b52      	ldr	r3, [pc, #328]	@ (8014324 <ABCC_HAL_Refresh_I2C_In+0x150>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d10b      	bne.n	80141fa <ABCC_HAL_Refresh_I2C_In+0x26>
   {
      /* No I2C interface handle registered, this should not happen! */
      ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No I2C interface handle registered\n" );
 80141e2:	4b51      	ldr	r3, [pc, #324]	@ (8014328 <ABCC_HAL_Refresh_I2C_In+0x154>)
 80141e4:	9301      	str	r3, [sp, #4]
 80141e6:	23df      	movs	r3, #223	@ 0xdf
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	4b50      	ldr	r3, [pc, #320]	@ (801432c <ABCC_HAL_Refresh_I2C_In+0x158>)
 80141ec:	2200      	movs	r2, #0
 80141ee:	211a      	movs	r1, #26
 80141f0:	2000      	movs	r0, #0
 80141f2:	f7f9 fa29 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 80141f6:	2300      	movs	r3, #0
 80141f8:	e090      	b.n	801431c <ABCC_HAL_Refresh_I2C_In+0x148>
   }

   /* Read both ports of U8 and copy the data to the correct variables. */
   xHalStatus = HAL_I2C_Master_Receive( pxI2C_Handle, M00765_U8_I2C_ADDRESS, abBuffer, 2, 1000 );
 80141fa:	4b4a      	ldr	r3, [pc, #296]	@ (8014324 <ABCC_HAL_Refresh_I2C_In+0x150>)
 80141fc:	6818      	ldr	r0, [r3, #0]
 80141fe:	1d3a      	adds	r2, r7, #4
 8014200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	2302      	movs	r3, #2
 8014208:	214e      	movs	r1, #78	@ 0x4e
 801420a:	f7f0 ff7b 	bl	8005104 <HAL_I2C_Master_Receive>
 801420e:	4603      	mov	r3, r0
 8014210:	71fb      	strb	r3, [r7, #7]
   if( xHalStatus != HAL_OK )
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d00d      	beq.n	8014234 <ABCC_HAL_Refresh_I2C_In+0x60>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, (UINT32)xHalStatus, "I2C read failed (%d)\n", xHalStatus );
 8014218:	79fa      	ldrb	r2, [r7, #7]
 801421a:	79fb      	ldrb	r3, [r7, #7]
 801421c:	9302      	str	r3, [sp, #8]
 801421e:	4b44      	ldr	r3, [pc, #272]	@ (8014330 <ABCC_HAL_Refresh_I2C_In+0x15c>)
 8014220:	9301      	str	r3, [sp, #4]
 8014222:	23e7      	movs	r3, #231	@ 0xe7
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	4b41      	ldr	r3, [pc, #260]	@ (801432c <ABCC_HAL_Refresh_I2C_In+0x158>)
 8014228:	2120      	movs	r1, #32
 801422a:	2002      	movs	r0, #2
 801422c:	f7f9 fa0c 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 8014230:	2300      	movs	r3, #0
 8014232:	e073      	b.n	801431c <ABCC_HAL_Refresh_I2C_In+0x148>
   }

   /* S2, P0[3..0] */
   sI2C_Inputs.bS2 = abBuffer[ 0 ] & 0xf;
 8014234:	793b      	ldrb	r3, [r7, #4]
 8014236:	f003 030f 	and.w	r3, r3, #15
 801423a:	b2da      	uxtb	r2, r3
 801423c:	4b3d      	ldr	r3, [pc, #244]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 801423e:	701a      	strb	r2, [r3, #0]

   /* S3, P0[7..4] */
   sI2C_Inputs.bS3 = ( abBuffer[ 0 ] & 0xf0 ) >> 4;
 8014240:	793b      	ldrb	r3, [r7, #4]
 8014242:	091b      	lsrs	r3, r3, #4
 8014244:	b2da      	uxtb	r2, r3
 8014246:	4b3b      	ldr	r3, [pc, #236]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 8014248:	705a      	strb	r2, [r3, #1]

   /* JP11, P1[5..0] */
   sI2C_Inputs.bJP11 = abBuffer[ 1 ] & 0x3f;
 801424a:	797b      	ldrb	r3, [r7, #5]
 801424c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014250:	b2da      	uxtb	r2, r3
 8014252:	4b38      	ldr	r3, [pc, #224]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 8014254:	711a      	strb	r2, [r3, #4]

   /* Read both ports of U8 and copy the data to the correct variables. */
   xHalStatus = HAL_I2C_Master_Receive( pxI2C_Handle, M00765_U9_I2C_ADDRESS, abBuffer, 2, 1000 );
 8014256:	4b33      	ldr	r3, [pc, #204]	@ (8014324 <ABCC_HAL_Refresh_I2C_In+0x150>)
 8014258:	6818      	ldr	r0, [r3, #0]
 801425a:	1d3a      	adds	r2, r7, #4
 801425c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	2302      	movs	r3, #2
 8014264:	214c      	movs	r1, #76	@ 0x4c
 8014266:	f7f0 ff4d 	bl	8005104 <HAL_I2C_Master_Receive>
 801426a:	4603      	mov	r3, r0
 801426c:	71fb      	strb	r3, [r7, #7]
   if( xHalStatus != HAL_OK )
 801426e:	79fb      	ldrb	r3, [r7, #7]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00d      	beq.n	8014290 <ABCC_HAL_Refresh_I2C_In+0xbc>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, (UINT32)xHalStatus, "I2C read failed (%d)\n", xHalStatus );
 8014274:	79fa      	ldrb	r2, [r7, #7]
 8014276:	79fb      	ldrb	r3, [r7, #7]
 8014278:	9302      	str	r3, [sp, #8]
 801427a:	4b2d      	ldr	r3, [pc, #180]	@ (8014330 <ABCC_HAL_Refresh_I2C_In+0x15c>)
 801427c:	9301      	str	r3, [sp, #4]
 801427e:	23f8      	movs	r3, #248	@ 0xf8
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	4b2a      	ldr	r3, [pc, #168]	@ (801432c <ABCC_HAL_Refresh_I2C_In+0x158>)
 8014284:	2120      	movs	r1, #32
 8014286:	2002      	movs	r0, #2
 8014288:	f7f9 f9de 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 801428c:	2300      	movs	r3, #0
 801428e:	e045      	b.n	801431c <ABCC_HAL_Refresh_I2C_In+0x148>
   }

   /* S5, P0[3..0] */
   sI2C_Inputs.bS5 = abBuffer[ 0 ] & 0xf;
 8014290:	793b      	ldrb	r3, [r7, #4]
 8014292:	f003 030f 	and.w	r3, r3, #15
 8014296:	b2da      	uxtb	r2, r3
 8014298:	4b26      	ldr	r3, [pc, #152]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 801429a:	70da      	strb	r2, [r3, #3]

   /* S4, P0[7..4], bit needs to be reversed for OM0 to end up at LSB. */
   sI2C_Inputs.bS4 = 0;
 801429c:	4b25      	ldr	r3, [pc, #148]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 801429e:	2200      	movs	r2, #0
 80142a0:	709a      	strb	r2, [r3, #2]
   if( ( abBuffer[ 0 ] & 0x10 ) != 0 )
 80142a2:	793b      	ldrb	r3, [r7, #4]
 80142a4:	f003 0310 	and.w	r3, r3, #16
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d006      	beq.n	80142ba <ABCC_HAL_Refresh_I2C_In+0xe6>
   {
      sI2C_Inputs.bS4 |= 0x8;
 80142ac:	4b21      	ldr	r3, [pc, #132]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142ae:	789b      	ldrb	r3, [r3, #2]
 80142b0:	f043 0308 	orr.w	r3, r3, #8
 80142b4:	b2da      	uxtb	r2, r3
 80142b6:	4b1f      	ldr	r3, [pc, #124]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142b8:	709a      	strb	r2, [r3, #2]
   }
   if( ( abBuffer[ 0 ] & 0x20 ) != 0 )
 80142ba:	793b      	ldrb	r3, [r7, #4]
 80142bc:	f003 0320 	and.w	r3, r3, #32
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d006      	beq.n	80142d2 <ABCC_HAL_Refresh_I2C_In+0xfe>
   {
      sI2C_Inputs.bS4 |= 0x4;
 80142c4:	4b1b      	ldr	r3, [pc, #108]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142c6:	789b      	ldrb	r3, [r3, #2]
 80142c8:	f043 0304 	orr.w	r3, r3, #4
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	4b19      	ldr	r3, [pc, #100]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142d0:	709a      	strb	r2, [r3, #2]
   }
   if( ( abBuffer[ 0 ] & 0x40 ) != 0 )
 80142d2:	793b      	ldrb	r3, [r7, #4]
 80142d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d006      	beq.n	80142ea <ABCC_HAL_Refresh_I2C_In+0x116>
   {
      sI2C_Inputs.bS4 |= 0x2;
 80142dc:	4b15      	ldr	r3, [pc, #84]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142de:	789b      	ldrb	r3, [r3, #2]
 80142e0:	f043 0302 	orr.w	r3, r3, #2
 80142e4:	b2da      	uxtb	r2, r3
 80142e6:	4b13      	ldr	r3, [pc, #76]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142e8:	709a      	strb	r2, [r3, #2]
   }
   if( ( abBuffer[ 0 ] & 0x80 ) != 0 )
 80142ea:	793b      	ldrb	r3, [r7, #4]
 80142ec:	b25b      	sxtb	r3, r3
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	da06      	bge.n	8014300 <ABCC_HAL_Refresh_I2C_In+0x12c>
   {
      sI2C_Inputs.bS4 |= 0x1;
 80142f2:	4b10      	ldr	r3, [pc, #64]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142f4:	789b      	ldrb	r3, [r3, #2]
 80142f6:	f043 0301 	orr.w	r3, r3, #1
 80142fa:	b2da      	uxtb	r2, r3
 80142fc:	4b0d      	ldr	r3, [pc, #52]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 80142fe:	709a      	strb	r2, [r3, #2]
   }

   /* ABCC MI1 & MI0, P1[5..4] */
   sI2C_Inputs.bMI = ( abBuffer[ 1 ] & 0x30 ) >> 4;
 8014300:	797b      	ldrb	r3, [r7, #5]
 8014302:	111b      	asrs	r3, r3, #4
 8014304:	b2db      	uxtb	r3, r3
 8014306:	f003 0303 	and.w	r3, r3, #3
 801430a:	b2da      	uxtb	r2, r3
 801430c:	4b09      	ldr	r3, [pc, #36]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 801430e:	715a      	strb	r2, [r3, #5]

   /* ABCC MD1 & MD0, P1[7..6] */
   sI2C_Inputs.bMD = ( abBuffer[ 1 ] & 0xc0 ) >> 6;
 8014310:	797b      	ldrb	r3, [r7, #5]
 8014312:	099b      	lsrs	r3, r3, #6
 8014314:	b2da      	uxtb	r2, r3
 8014316:	4b07      	ldr	r3, [pc, #28]	@ (8014334 <ABCC_HAL_Refresh_I2C_In+0x160>)
 8014318:	719a      	strb	r2, [r3, #6]

   return( TRUE );
 801431a:	2301      	movs	r3, #1
}
 801431c:	4618      	mov	r0, r3
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	240041a8 	.word	0x240041a8
 8014328:	080174ec 	.word	0x080174ec
 801432c:	08017430 	.word	0x08017430
 8014330:	08017510 	.word	0x08017510
 8014334:	240041bc 	.word	0x240041bc

08014338 <ABCC_HAL_GetRestartButton>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction_aux.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_GetRestartButton( void )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	af00      	add	r7, sp, #0
   if( HAL_GPIO_ReadPin( M00765_BTN_S1_GPIO_Port, M00765_BTN_S1_Pin ) == GPIO_PIN_RESET )
 801433c:	2108      	movs	r1, #8
 801433e:	4805      	ldr	r0, [pc, #20]	@ (8014354 <ABCC_HAL_GetRestartButton+0x1c>)
 8014340:	f7f0 fcfa 	bl	8004d38 <HAL_GPIO_ReadPin>
 8014344:	4603      	mov	r3, r0
 8014346:	2b00      	cmp	r3, #0
 8014348:	d101      	bne.n	801434e <ABCC_HAL_GetRestartButton+0x16>
   {
      return( TRUE );
 801434a:	2301      	movs	r3, #1
 801434c:	e000      	b.n	8014350 <ABCC_HAL_GetRestartButton+0x18>
   }

   return( FALSE );
 801434e:	2300      	movs	r3, #0
}
 8014350:	4618      	mov	r0, r3
 8014352:	bd80      	pop	{r7, pc}
 8014354:	58021400 	.word	0x58021400

08014358 <HAL_SPI_TxRxCpltCallback>:
/*------------------------------------------------------------------------------
** See "stm32...hal_spi.h" and "stm32...hal_spi.c" for more information.
**------------------------------------------------------------------------------
*/
void HAL_SPI_TxRxCpltCallback( SPI_HandleTypeDef* pxHandle )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b084      	sub	sp, #16
 801435c:	af02      	add	r7, sp, #8
 801435e:	6078      	str	r0, [r7, #4]
   if( pxHandle == pxSPI_Handle )
 8014360:	4b17      	ldr	r3, [pc, #92]	@ (80143c0 <HAL_SPI_TxRxCpltCallback+0x68>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	687a      	ldr	r2, [r7, #4]
 8014366:	429a      	cmp	r2, r3
 8014368:	d127      	bne.n	80143ba <HAL_SPI_TxRxCpltCallback+0x62>
   {
      /* Deactivate SS, i.e. set it high. */
      HAL_GPIO_WritePin( M00765_SPI_SS_GPIO_Port, M00765_SPI_SS_Pin, GPIO_PIN_SET );
 801436a:	2201      	movs	r2, #1
 801436c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014370:	4814      	ldr	r0, [pc, #80]	@ (80143c4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8014372:	f7f0 fcf9 	bl	8004d68 <HAL_GPIO_WritePin>

      /* Did the SPI transfer finish correctly? */
      if( pxHandle->ErrorCode != HAL_OK )
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801437c:	2b00      	cmp	r3, #0
 801437e:	d11b      	bne.n	80143b8 <HAL_SPI_TxRxCpltCallback+0x60>
      {
         return;
      }

      /* Copy the MISO data from the I/O buffer (SRAMx) to the driver buffer (DTCM-RAM). */
      memcpy( pxInboundDest, abSpiMisoDmaBuff, iInboundSize );
 8014380:	4b11      	ldr	r3, [pc, #68]	@ (80143c8 <HAL_SPI_TxRxCpltCallback+0x70>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	4a11      	ldr	r2, [pc, #68]	@ (80143cc <HAL_SPI_TxRxCpltCallback+0x74>)
 8014386:	8812      	ldrh	r2, [r2, #0]
 8014388:	4911      	ldr	r1, [pc, #68]	@ (80143d0 <HAL_SPI_TxRxCpltCallback+0x78>)
 801438a:	4618      	mov	r0, r3
 801438c:	f000 fee9 	bl	8015162 <memcpy>

      /* And notify the driver that we have a MISO frame to process. */
      if( pnTransferCompleteCbf != NULL )
 8014390:	4b10      	ldr	r3, [pc, #64]	@ (80143d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d003      	beq.n	80143a0 <HAL_SPI_TxRxCpltCallback+0x48>
      {
         pnTransferCompleteCbf();
 8014398:	4b0e      	ldr	r3, [pc, #56]	@ (80143d4 <HAL_SPI_TxRxCpltCallback+0x7c>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4798      	blx	r3
         return;
 801439e:	e00c      	b.n	80143ba <HAL_SPI_TxRxCpltCallback+0x62>
      }
      else
      {
         /* No completion callback registered, this should not happen! */
         ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No SPI transfer completion callback registered\n" );
 80143a0:	4b0d      	ldr	r3, [pc, #52]	@ (80143d8 <HAL_SPI_TxRxCpltCallback+0x80>)
 80143a2:	9301      	str	r3, [sp, #4]
 80143a4:	f240 1381 	movw	r3, #385	@ 0x181
 80143a8:	9300      	str	r3, [sp, #0]
 80143aa:	4b0c      	ldr	r3, [pc, #48]	@ (80143dc <HAL_SPI_TxRxCpltCallback+0x84>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	211a      	movs	r1, #26
 80143b0:	2000      	movs	r0, #0
 80143b2:	f7f9 f949 	bl	800d648 <ABCC_LogHandler>
         return;
 80143b6:	e000      	b.n	80143ba <HAL_SPI_TxRxCpltCallback+0x62>
         return;
 80143b8:	bf00      	nop
      ** This function, and/or the contents of it, will probably have to be
      ** placed elsewhere if the DMAx controllers are used for other
      ** operations than the ABCC.
      */
   }
}
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	240041ac 	.word	0x240041ac
 80143c4:	58020c00 	.word	0x58020c00
 80143c8:	240041b4 	.word	0x240041b4
 80143cc:	240041b8 	.word	0x240041b8
 80143d0:	24000504 	.word	0x24000504
 80143d4:	240041a4 	.word	0x240041a4
 80143d8:	08017540 	.word	0x08017540
 80143dc:	08017430 	.word	0x08017430

080143e0 <HAL_UART_RxCpltCallback>:
/*------------------------------------------------------------------------------
** See "stm32...hal_uart.h" and "stm32...hal_uart.c"for more information.
**------------------------------------------------------------------------------
*/
void HAL_UART_RxCpltCallback( UART_HandleTypeDef* pxHandle )
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af02      	add	r7, sp, #8
 80143e6:	6078      	str	r0, [r7, #4]
   UINT32   lTemp;

   if( pxHandle == pxUART_Handle )
 80143e8:	4b18      	ldr	r3, [pc, #96]	@ (801444c <HAL_UART_RxCpltCallback+0x6c>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d128      	bne.n	8014444 <HAL_UART_RxCpltCallback+0x64>
   {
      lTemp = pxHandle->ErrorCode;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80143f8:	60fb      	str	r3, [r7, #12]
      ** UART back to HAL_UART_STATE_READY, it does not seem to happen on its
      ** own when the DMA transfers has been finished.
      **
      ** TODO - Is there a better way to do this?
      */
      HAL_UART_Abort( pxUART_Handle );
 80143fa:	4b14      	ldr	r3, [pc, #80]	@ (801444c <HAL_UART_RxCpltCallback+0x6c>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	4618      	mov	r0, r3
 8014400:	f7f5 fa2a 	bl	8009858 <HAL_UART_Abort>

      /* Did the UART transfer finish correctly? */
      if( lTemp != HAL_OK )
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d11b      	bne.n	8014442 <HAL_UART_RxCpltCallback+0x62>
      {
         return;
      }

      /* Copy the RX data from the I/O buffer (SRAMx) to the driver buffer (DTCM-RAM). */
      memcpy( pxInboundDest, abUartRxDmaBuff, iInboundSize );
 801440a:	4b11      	ldr	r3, [pc, #68]	@ (8014450 <HAL_UART_RxCpltCallback+0x70>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	4a11      	ldr	r2, [pc, #68]	@ (8014454 <HAL_UART_RxCpltCallback+0x74>)
 8014410:	8812      	ldrh	r2, [r2, #0]
 8014412:	4911      	ldr	r1, [pc, #68]	@ (8014458 <HAL_UART_RxCpltCallback+0x78>)
 8014414:	4618      	mov	r0, r3
 8014416:	f000 fea4 	bl	8015162 <memcpy>

      /* And notify the driver that we have a RX frame to process. */
      if( pnTransferCompleteCbf != NULL )
 801441a:	4b10      	ldr	r3, [pc, #64]	@ (801445c <HAL_UART_RxCpltCallback+0x7c>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d003      	beq.n	801442a <HAL_UART_RxCpltCallback+0x4a>
      {
         pnTransferCompleteCbf();
 8014422:	4b0e      	ldr	r3, [pc, #56]	@ (801445c <HAL_UART_RxCpltCallback+0x7c>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4798      	blx	r3
         return;
 8014428:	e00c      	b.n	8014444 <HAL_UART_RxCpltCallback+0x64>
      }
      else
      {
         /* No completion callback registered, this should not happen! */
         ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No UART transfer completion callback registered\n" );
 801442a:	4b0d      	ldr	r3, [pc, #52]	@ (8014460 <HAL_UART_RxCpltCallback+0x80>)
 801442c:	9301      	str	r3, [sp, #4]
 801442e:	f240 13bd 	movw	r3, #445	@ 0x1bd
 8014432:	9300      	str	r3, [sp, #0]
 8014434:	4b0b      	ldr	r3, [pc, #44]	@ (8014464 <HAL_UART_RxCpltCallback+0x84>)
 8014436:	2200      	movs	r2, #0
 8014438:	211a      	movs	r1, #26
 801443a:	2000      	movs	r0, #0
 801443c:	f7f9 f904 	bl	800d648 <ABCC_LogHandler>
         return;
 8014440:	e000      	b.n	8014444 <HAL_UART_RxCpltCallback+0x64>
         return;
 8014442:	bf00      	nop
      ** This function, and/or the contents of it, will probably have to be
      ** placed elsewhere if the DMAx controllers are used for other
      ** operations than the ABCC.
      */
   }
}
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
 801444a:	bf00      	nop
 801444c:	240041b0 	.word	0x240041b0
 8014450:	240041b4 	.word	0x240041b4
 8014454:	240041b8 	.word	0x240041b8
 8014458:	24000a38 	.word	0x24000a38
 801445c:	240041a4 	.word	0x240041a4
 8014460:	08017570 	.word	0x08017570
 8014464:	08017430 	.word	0x08017430

08014468 <ABCC_HAL_HwInit>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_HwInit( void )
{
 8014468:	b580      	push	{r7, lr}
 801446a:	b086      	sub	sp, #24
 801446c:	af04      	add	r7, sp, #16
   HAL_StatusTypeDef    xHalStatus;
   UINT8                abBuffer[ 2 ];

   if( pxI2C_Handle == NULL )
 801446e:	4b34      	ldr	r3, [pc, #208]	@ (8014540 <ABCC_HAL_HwInit+0xd8>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d10c      	bne.n	8014490 <ABCC_HAL_HwInit+0x28>
   {
      /* No I2C interface handle registered, this should not happen! */
      ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No I2C interface handle registered\n" );
 8014476:	4b33      	ldr	r3, [pc, #204]	@ (8014544 <ABCC_HAL_HwInit+0xdc>)
 8014478:	9301      	str	r3, [sp, #4]
 801447a:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	4b31      	ldr	r3, [pc, #196]	@ (8014548 <ABCC_HAL_HwInit+0xe0>)
 8014482:	2200      	movs	r2, #0
 8014484:	211a      	movs	r1, #26
 8014486:	2000      	movs	r0, #0
 8014488:	f7f9 f8de 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 801448c:	2300      	movs	r3, #0
 801448e:	e052      	b.n	8014536 <ABCC_HAL_HwInit+0xce>

   /*
   ** Reset the I2C IO expanders to 'all inputs'. Check the datasheet for the
   ** NXP PCF8575 I/O expander for more information.
   */
   abBuffer[ 0 ] = 0xFF;
 8014490:	23ff      	movs	r3, #255	@ 0xff
 8014492:	713b      	strb	r3, [r7, #4]
   abBuffer[ 1 ] = 0xFF;
 8014494:	23ff      	movs	r3, #255	@ 0xff
 8014496:	717b      	strb	r3, [r7, #5]

   xHalStatus = HAL_I2C_Master_Transmit( pxI2C_Handle, M00765_U8_I2C_ADDRESS, abBuffer, 2, 1000 );
 8014498:	4b29      	ldr	r3, [pc, #164]	@ (8014540 <ABCC_HAL_HwInit+0xd8>)
 801449a:	6818      	ldr	r0, [r3, #0]
 801449c:	1d3a      	adds	r2, r7, #4
 801449e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	2302      	movs	r3, #2
 80144a6:	214e      	movs	r1, #78	@ 0x4e
 80144a8:	f7f0 fd14 	bl	8004ed4 <HAL_I2C_Master_Transmit>
 80144ac:	4603      	mov	r3, r0
 80144ae:	71fb      	strb	r3, [r7, #7]
   if( xHalStatus != HAL_OK )
 80144b0:	79fb      	ldrb	r3, [r7, #7]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00e      	beq.n	80144d4 <ABCC_HAL_HwInit+0x6c>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, (UINT32)xHalStatus, "I2C write failed (%d)\n", xHalStatus );
 80144b6:	79fa      	ldrb	r2, [r7, #7]
 80144b8:	79fb      	ldrb	r3, [r7, #7]
 80144ba:	9302      	str	r3, [sp, #8]
 80144bc:	4b23      	ldr	r3, [pc, #140]	@ (801454c <ABCC_HAL_HwInit+0xe4>)
 80144be:	9301      	str	r3, [sp, #4]
 80144c0:	f44f 73f5 	mov.w	r3, #490	@ 0x1ea
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	4b20      	ldr	r3, [pc, #128]	@ (8014548 <ABCC_HAL_HwInit+0xe0>)
 80144c8:	2120      	movs	r1, #32
 80144ca:	2002      	movs	r0, #2
 80144cc:	f7f9 f8bc 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 80144d0:	2300      	movs	r3, #0
 80144d2:	e030      	b.n	8014536 <ABCC_HAL_HwInit+0xce>
   }

   xHalStatus = HAL_I2C_Master_Transmit( pxI2C_Handle, M00765_U9_I2C_ADDRESS, abBuffer, 2, 1000 );
 80144d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014540 <ABCC_HAL_HwInit+0xd8>)
 80144d6:	6818      	ldr	r0, [r3, #0]
 80144d8:	1d3a      	adds	r2, r7, #4
 80144da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	2302      	movs	r3, #2
 80144e2:	214c      	movs	r1, #76	@ 0x4c
 80144e4:	f7f0 fcf6 	bl	8004ed4 <HAL_I2C_Master_Transmit>
 80144e8:	4603      	mov	r3, r0
 80144ea:	71fb      	strb	r3, [r7, #7]
   if( xHalStatus != HAL_OK )
 80144ec:	79fb      	ldrb	r3, [r7, #7]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d00e      	beq.n	8014510 <ABCC_HAL_HwInit+0xa8>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, (UINT32)xHalStatus, "I2C write failed (%d)\n", xHalStatus );
 80144f2:	79fa      	ldrb	r2, [r7, #7]
 80144f4:	79fb      	ldrb	r3, [r7, #7]
 80144f6:	9302      	str	r3, [sp, #8]
 80144f8:	4b14      	ldr	r3, [pc, #80]	@ (801454c <ABCC_HAL_HwInit+0xe4>)
 80144fa:	9301      	str	r3, [sp, #4]
 80144fc:	f240 13f1 	movw	r3, #497	@ 0x1f1
 8014500:	9300      	str	r3, [sp, #0]
 8014502:	4b11      	ldr	r3, [pc, #68]	@ (8014548 <ABCC_HAL_HwInit+0xe0>)
 8014504:	2120      	movs	r1, #32
 8014506:	2002      	movs	r0, #2
 8014508:	f7f9 f89e 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 801450c:	2300      	movs	r3, #0
 801450e:	e012      	b.n	8014536 <ABCC_HAL_HwInit+0xce>
   }

   /*
   ** Refresh the I2C inputs so that MD and MI contains up-to-date values.
   */
   if( !ABCC_HAL_Refresh_I2C_In() )
 8014510:	f7ff fe60 	bl	80141d4 <ABCC_HAL_Refresh_I2C_In>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d10c      	bne.n	8014534 <ABCC_HAL_HwInit+0xcc>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, 0, "I2C refresh failed\n" );
 801451a:	4b0d      	ldr	r3, [pc, #52]	@ (8014550 <ABCC_HAL_HwInit+0xe8>)
 801451c:	9301      	str	r3, [sp, #4]
 801451e:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 8014522:	9300      	str	r3, [sp, #0]
 8014524:	4b08      	ldr	r3, [pc, #32]	@ (8014548 <ABCC_HAL_HwInit+0xe0>)
 8014526:	2200      	movs	r2, #0
 8014528:	2120      	movs	r1, #32
 801452a:	2002      	movs	r0, #2
 801452c:	f7f9 f88c 	bl	800d648 <ABCC_LogHandler>
      return( FALSE );
 8014530:	2300      	movs	r3, #0
 8014532:	e000      	b.n	8014536 <ABCC_HAL_HwInit+0xce>
   }

   return( TRUE );
 8014534:	2301      	movs	r3, #1
}
 8014536:	4618      	mov	r0, r3
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	240041a8 	.word	0x240041a8
 8014544:	080174ec 	.word	0x080174ec
 8014548:	08017430 	.word	0x08017430
 801454c:	08017528 	.word	0x08017528
 8014550:	080175a4 	.word	0x080175a4

08014554 <ABCC_HAL_Init>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_Init( void )
{
 8014554:	b580      	push	{r7, lr}
 8014556:	af00      	add	r7, sp, #0
   /* Pull the RESET signal low. */
   HAL_GPIO_WritePin( M00765_RESET_GPIO_Port, M00765_RESET_Pin, GPIO_PIN_RESET );
 8014558:	2200      	movs	r2, #0
 801455a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801455e:	4803      	ldr	r0, [pc, #12]	@ (801456c <ABCC_HAL_Init+0x18>)
 8014560:	f7f0 fc02 	bl	8004d68 <HAL_GPIO_WritePin>

   return( TRUE );
 8014564:	2301      	movs	r3, #1
}
 8014566:	4618      	mov	r0, r3
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	58021800 	.word	0x58021800

08014570 <ABCC_HAL_Close>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_Close( void )
{
 8014570:	b480      	push	{r7}
 8014572:	af00      	add	r7, sp, #0
   /* Nothing to do. */
}
 8014574:	bf00      	nop
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr
	...

08014580 <ABCC_HAL_SetOpmode>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SetOpmode( UINT8 bOpmode )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b088      	sub	sp, #32
 8014584:	af04      	add	r7, sp, #16
 8014586:	4603      	mov	r3, r0
 8014588:	71fb      	strb	r3, [r7, #7]

   /*
   ** Step 1, update the OM pins on the ABCC.
   */

   if( ( bOpmode & 0x1 ) != 0 )
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	f003 0301 	and.w	r3, r3, #1
 8014590:	2b00      	cmp	r3, #0
 8014592:	d006      	beq.n	80145a2 <ABCC_HAL_SetOpmode+0x22>
   {
      HAL_GPIO_WritePin( M00765_OM0_GPIO_Port, M00765_OM0_Pin, GPIO_PIN_SET );
 8014594:	2201      	movs	r2, #1
 8014596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801459a:	4865      	ldr	r0, [pc, #404]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 801459c:	f7f0 fbe4 	bl	8004d68 <HAL_GPIO_WritePin>
 80145a0:	e005      	b.n	80145ae <ABCC_HAL_SetOpmode+0x2e>
   }
   else
   {
      HAL_GPIO_WritePin( M00765_OM0_GPIO_Port, M00765_OM0_Pin, GPIO_PIN_RESET );
 80145a2:	2200      	movs	r2, #0
 80145a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80145a8:	4861      	ldr	r0, [pc, #388]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 80145aa:	f7f0 fbdd 	bl	8004d68 <HAL_GPIO_WritePin>
   }

   if( ( bOpmode & 0x2 ) != 0 )
 80145ae:	79fb      	ldrb	r3, [r7, #7]
 80145b0:	f003 0302 	and.w	r3, r3, #2
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d006      	beq.n	80145c6 <ABCC_HAL_SetOpmode+0x46>
   {
      HAL_GPIO_WritePin( M00765_OM1_GPIO_Port, M00765_OM1_Pin, GPIO_PIN_SET );
 80145b8:	2201      	movs	r2, #1
 80145ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80145be:	485c      	ldr	r0, [pc, #368]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 80145c0:	f7f0 fbd2 	bl	8004d68 <HAL_GPIO_WritePin>
 80145c4:	e005      	b.n	80145d2 <ABCC_HAL_SetOpmode+0x52>
   }
   else
   {
      HAL_GPIO_WritePin( M00765_OM1_GPIO_Port, M00765_OM1_Pin, GPIO_PIN_RESET );
 80145c6:	2200      	movs	r2, #0
 80145c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80145cc:	4858      	ldr	r0, [pc, #352]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 80145ce:	f7f0 fbcb 	bl	8004d68 <HAL_GPIO_WritePin>
   }

   if( ( bOpmode & 0x4 ) != 0 )
 80145d2:	79fb      	ldrb	r3, [r7, #7]
 80145d4:	f003 0304 	and.w	r3, r3, #4
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d006      	beq.n	80145ea <ABCC_HAL_SetOpmode+0x6a>
   {
      HAL_GPIO_WritePin( M00765_OM2_GPIO_Port, M00765_OM2_Pin, GPIO_PIN_SET );
 80145dc:	2201      	movs	r2, #1
 80145de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80145e2:	4853      	ldr	r0, [pc, #332]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 80145e4:	f7f0 fbc0 	bl	8004d68 <HAL_GPIO_WritePin>
 80145e8:	e005      	b.n	80145f6 <ABCC_HAL_SetOpmode+0x76>
   }
   else
   {
      HAL_GPIO_WritePin( M00765_OM2_GPIO_Port, M00765_OM2_Pin, GPIO_PIN_RESET );
 80145ea:	2200      	movs	r2, #0
 80145ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80145f0:	484f      	ldr	r0, [pc, #316]	@ (8014730 <ABCC_HAL_SetOpmode+0x1b0>)
 80145f2:	f7f0 fbb9 	bl	8004d68 <HAL_GPIO_WritePin>
   }

   if( ( bOpmode & 0x8 ) != 0 ) {
 80145f6:	79fb      	ldrb	r3, [r7, #7]
 80145f8:	f003 0308 	and.w	r3, r3, #8
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d006      	beq.n	801460e <ABCC_HAL_SetOpmode+0x8e>
      HAL_GPIO_WritePin( M00765_OM3_GPIO_Port, M00765_OM3_Pin, GPIO_PIN_SET );
 8014600:	2201      	movs	r2, #1
 8014602:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014606:	484b      	ldr	r0, [pc, #300]	@ (8014734 <ABCC_HAL_SetOpmode+0x1b4>)
 8014608:	f7f0 fbae 	bl	8004d68 <HAL_GPIO_WritePin>
 801460c:	e005      	b.n	801461a <ABCC_HAL_SetOpmode+0x9a>
   }
   else
   {
      HAL_GPIO_WritePin( M00765_OM3_GPIO_Port, M00765_OM3_Pin, GPIO_PIN_RESET );
 801460e:	2200      	movs	r2, #0
 8014610:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8014614:	4847      	ldr	r0, [pc, #284]	@ (8014734 <ABCC_HAL_SetOpmode+0x1b4>)
 8014616:	f7f0 fba7 	bl	8004d68 <HAL_GPIO_WritePin>

   /*
   ** Step 2, any other OpMode-dependent initialisations that are needed.
   */

   switch( bOpmode )
 801461a:	79fb      	ldrb	r3, [r7, #7]
 801461c:	2b01      	cmp	r3, #1
 801461e:	d005      	beq.n	801462c <ABCC_HAL_SetOpmode+0xac>
 8014620:	2b00      	cmp	r3, #0
 8014622:	dd70      	ble.n	8014706 <ABCC_HAL_SetOpmode+0x186>
 8014624:	3b09      	subs	r3, #9
 8014626:	2b03      	cmp	r3, #3
 8014628:	d86d      	bhi.n	8014706 <ABCC_HAL_SetOpmode+0x186>
 801462a:	e00f      	b.n	801464c <ABCC_HAL_SetOpmode+0xcc>
   {
#if( ABCC_CFG_DRV_SPI_ENABLED )
   case ABP_OP_MODE_SPI:

      /* Is any handle registered for the HW interface in question? */
      if( pxSPI_Handle == NULL )
 801462c:	4b42      	ldr	r3, [pc, #264]	@ (8014738 <ABCC_HAL_SetOpmode+0x1b8>)
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d176      	bne.n	8014722 <ABCC_HAL_SetOpmode+0x1a2>
      {
         /* No SPI interface handle registered, this should not happen! */
         ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No SPI interface handle registered\n" );
 8014634:	4b41      	ldr	r3, [pc, #260]	@ (801473c <ABCC_HAL_SetOpmode+0x1bc>)
 8014636:	9301      	str	r3, [sp, #4]
 8014638:	f240 2353 	movw	r3, #595	@ 0x253
 801463c:	9300      	str	r3, [sp, #0]
 801463e:	4b40      	ldr	r3, [pc, #256]	@ (8014740 <ABCC_HAL_SetOpmode+0x1c0>)
 8014640:	2200      	movs	r2, #0
 8014642:	211a      	movs	r1, #26
 8014644:	2000      	movs	r0, #0
 8014646:	f7f8 ffff 	bl	800d648 <ABCC_LogHandler>
         return;
 801464a:	e06e      	b.n	801472a <ABCC_HAL_SetOpmode+0x1aa>
   case ABP_OP_MODE_SERIAL_57_6:
   case ABP_OP_MODE_SERIAL_115_2:
   case ABP_OP_MODE_SERIAL_625:

      /* Is any handle registered for the HW interface in question? */
      if( pxUART_Handle == NULL )
 801464c:	4b3d      	ldr	r3, [pc, #244]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d10b      	bne.n	801466c <ABCC_HAL_SetOpmode+0xec>
      {
         /* No UART interface handle registered, this should not happen! */
         ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES,
 8014654:	79fa      	ldrb	r2, [r7, #7]
 8014656:	4b3c      	ldr	r3, [pc, #240]	@ (8014748 <ABCC_HAL_SetOpmode+0x1c8>)
 8014658:	9301      	str	r3, [sp, #4]
 801465a:	f240 2367 	movw	r3, #615	@ 0x267
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	4b37      	ldr	r3, [pc, #220]	@ (8014740 <ABCC_HAL_SetOpmode+0x1c0>)
 8014662:	211a      	movs	r1, #26
 8014664:	2000      	movs	r0, #0
 8014666:	f7f8 ffef 	bl	800d648 <ABCC_LogHandler>
            bOpmode,
            "No UART interface handle registered\n" );
         return;
 801466a:	e05e      	b.n	801472a <ABCC_HAL_SetOpmode+0x1aa>
      }

      /* Update any interface-dependent settings that depends on the OpMode. */
      switch( bOpmode )
 801466c:	79fb      	ldrb	r3, [r7, #7]
 801466e:	3b09      	subs	r3, #9
 8014670:	2b03      	cmp	r3, #3
 8014672:	d822      	bhi.n	80146ba <ABCC_HAL_SetOpmode+0x13a>
 8014674:	a201      	add	r2, pc, #4	@ (adr r2, 801467c <ABCC_HAL_SetOpmode+0xfc>)
 8014676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801467a:	bf00      	nop
 801467c:	0801468d 	.word	0x0801468d
 8014680:	08014699 	.word	0x08014699
 8014684:	080146a5 	.word	0x080146a5
 8014688:	080146b1 	.word	0x080146b1
      {
      case ABP_OP_MODE_SERIAL_19_2:
         pxUART_Handle->Init.BaudRate = 19200;
 801468c:	4b2d      	ldr	r3, [pc, #180]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8014694:	605a      	str	r2, [r3, #4]
         break;
 8014696:	e01e      	b.n	80146d6 <ABCC_HAL_SetOpmode+0x156>
      case ABP_OP_MODE_SERIAL_57_6:
         pxUART_Handle->Init.BaudRate = 57600;
 8014698:	4b2a      	ldr	r3, [pc, #168]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80146a0:	605a      	str	r2, [r3, #4]
         break;
 80146a2:	e018      	b.n	80146d6 <ABCC_HAL_SetOpmode+0x156>
      case ABP_OP_MODE_SERIAL_115_2:
         pxUART_Handle->Init.BaudRate = 115200;
 80146a4:	4b27      	ldr	r3, [pc, #156]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80146ac:	605a      	str	r2, [r3, #4]
         break;
 80146ae:	e012      	b.n	80146d6 <ABCC_HAL_SetOpmode+0x156>
      case ABP_OP_MODE_SERIAL_625:
         pxUART_Handle->Init.BaudRate = 625000;
 80146b0:	4b24      	ldr	r3, [pc, #144]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	4a25      	ldr	r2, [pc, #148]	@ (801474c <ABCC_HAL_SetOpmode+0x1cc>)
 80146b6:	605a      	str	r2, [r3, #4]
         break;
 80146b8:	e00d      	b.n	80146d6 <ABCC_HAL_SetOpmode+0x156>
      default:
         ABCC_LOG_FATAL( ABCC_EC_INCORRECT_OPERATING_MODE,
 80146ba:	79fa      	ldrb	r2, [r7, #7]
 80146bc:	79fb      	ldrb	r3, [r7, #7]
 80146be:	9302      	str	r3, [sp, #8]
 80146c0:	4b23      	ldr	r3, [pc, #140]	@ (8014750 <ABCC_HAL_SetOpmode+0x1d0>)
 80146c2:	9301      	str	r3, [sp, #4]
 80146c4:	f240 237d 	movw	r3, #637	@ 0x27d
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	4b1d      	ldr	r3, [pc, #116]	@ (8014740 <ABCC_HAL_SetOpmode+0x1c0>)
 80146cc:	2106      	movs	r1, #6
 80146ce:	2000      	movs	r0, #0
 80146d0:	f7f8 ffba 	bl	800d648 <ABCC_LogHandler>
            bOpmode,
            "Incorrect operating mode %d\n",
            bOpmode );
         break;
 80146d4:	bf00      	nop
      }

      /* Re-initialise the interface HW with the new settings. */
      xHalStatus = HAL_UART_Init( pxUART_Handle );
 80146d6:	4b1b      	ldr	r3, [pc, #108]	@ (8014744 <ABCC_HAL_SetOpmode+0x1c4>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4618      	mov	r0, r3
 80146dc:	f7f4 fed7 	bl	800948e <HAL_UART_Init>
 80146e0:	4603      	mov	r3, r0
 80146e2:	73fb      	strb	r3, [r7, #15]
      if( xHalStatus != HAL_OK )
 80146e4:	7bfb      	ldrb	r3, [r7, #15]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d01d      	beq.n	8014726 <ABCC_HAL_SetOpmode+0x1a6>
      {
         ABCC_LOG_WARNING( ABCC_EC_HAL_ERR,
 80146ea:	7bfa      	ldrb	r2, [r7, #15]
 80146ec:	7bfb      	ldrb	r3, [r7, #15]
 80146ee:	9302      	str	r3, [sp, #8]
 80146f0:	4b18      	ldr	r3, [pc, #96]	@ (8014754 <ABCC_HAL_SetOpmode+0x1d4>)
 80146f2:	9301      	str	r3, [sp, #4]
 80146f4:	f44f 7322 	mov.w	r3, #648	@ 0x288
 80146f8:	9300      	str	r3, [sp, #0]
 80146fa:	4b11      	ldr	r3, [pc, #68]	@ (8014740 <ABCC_HAL_SetOpmode+0x1c0>)
 80146fc:	2120      	movs	r1, #32
 80146fe:	2002      	movs	r0, #2
 8014700:	f7f8 ffa2 	bl	800d648 <ABCC_LogHandler>
            (UINT32)xHalStatus,
            "UART init failed (%d)\n",
            xHalStatus );
         return;
 8014704:	e011      	b.n	801472a <ABCC_HAL_SetOpmode+0x1aa>
      }

      break;
#endif
   default:
      ABCC_LOG_FATAL( ABCC_EC_INCORRECT_OPERATING_MODE,
 8014706:	79fa      	ldrb	r2, [r7, #7]
 8014708:	79fb      	ldrb	r3, [r7, #7]
 801470a:	9302      	str	r3, [sp, #8]
 801470c:	4b10      	ldr	r3, [pc, #64]	@ (8014750 <ABCC_HAL_SetOpmode+0x1d0>)
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	f240 2392 	movw	r3, #658	@ 0x292
 8014714:	9300      	str	r3, [sp, #0]
 8014716:	4b0a      	ldr	r3, [pc, #40]	@ (8014740 <ABCC_HAL_SetOpmode+0x1c0>)
 8014718:	2106      	movs	r1, #6
 801471a:	2000      	movs	r0, #0
 801471c:	f7f8 ff94 	bl	800d648 <ABCC_LogHandler>
         bOpmode,
         "Incorrect operating mode %d\n",
         bOpmode );
      break;
 8014720:	e002      	b.n	8014728 <ABCC_HAL_SetOpmode+0x1a8>
   break;
 8014722:	bf00      	nop
 8014724:	e000      	b.n	8014728 <ABCC_HAL_SetOpmode+0x1a8>
      break;
 8014726:	bf00      	nop
   }

   return;
 8014728:	bf00      	nop
}
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}
 8014730:	58021000 	.word	0x58021000
 8014734:	58021800 	.word	0x58021800
 8014738:	240041ac 	.word	0x240041ac
 801473c:	080175b8 	.word	0x080175b8
 8014740:	08017430 	.word	0x08017430
 8014744:	240041b0 	.word	0x240041b0
 8014748:	080175dc 	.word	0x080175dc
 801474c:	00098968 	.word	0x00098968
 8014750:	08017604 	.word	0x08017604
 8014754:	08017624 	.word	0x08017624

08014758 <ABCC_HAL_GetOpmode>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
UINT8 ABCC_HAL_GetOpmode( void )
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af02      	add	r7, sp, #8
   if( !ABCC_HAL_Refresh_I2C_In() )
 801475e:	f7ff fd39 	bl	80141d4 <ABCC_HAL_Refresh_I2C_In>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d10c      	bne.n	8014782 <ABCC_HAL_GetOpmode+0x2a>
   {
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR, 0, "I2C refresh failed\n" );
 8014768:	4b08      	ldr	r3, [pc, #32]	@ (801478c <ABCC_HAL_GetOpmode+0x34>)
 801476a:	9301      	str	r3, [sp, #4]
 801476c:	f240 23a6 	movw	r3, #678	@ 0x2a6
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	4b07      	ldr	r3, [pc, #28]	@ (8014790 <ABCC_HAL_GetOpmode+0x38>)
 8014774:	2200      	movs	r2, #0
 8014776:	2120      	movs	r1, #32
 8014778:	2002      	movs	r0, #2
 801477a:	f7f8 ff65 	bl	800d648 <ABCC_LogHandler>
      return( 0xf ); /* Service mode. */
 801477e:	230f      	movs	r3, #15
 8014780:	e001      	b.n	8014786 <ABCC_HAL_GetOpmode+0x2e>
   }

   return( sI2C_Inputs.bS4 );
 8014782:	4b04      	ldr	r3, [pc, #16]	@ (8014794 <ABCC_HAL_GetOpmode+0x3c>)
 8014784:	789b      	ldrb	r3, [r3, #2]
}
 8014786:	4618      	mov	r0, r3
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	080175a4 	.word	0x080175a4
 8014790:	08017430 	.word	0x08017430
 8014794:	240041bc 	.word	0x240041bc

08014798 <ABCC_HAL_HWReset>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_HWReset( void )
{
 8014798:	b580      	push	{r7, lr}
 801479a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin( M00765_RESET_GPIO_Port, M00765_RESET_Pin, GPIO_PIN_RESET );
 801479c:	2200      	movs	r2, #0
 801479e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80147a2:	4802      	ldr	r0, [pc, #8]	@ (80147ac <ABCC_HAL_HWReset+0x14>)
 80147a4:	f7f0 fae0 	bl	8004d68 <HAL_GPIO_WritePin>
}
 80147a8:	bf00      	nop
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	58021800 	.word	0x58021800

080147b0 <ABCC_HAL_HWReleaseReset>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_HWReleaseReset( void )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin( M00765_RESET_GPIO_Port, M00765_RESET_Pin, GPIO_PIN_SET );
 80147b4:	2201      	movs	r2, #1
 80147b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80147ba:	4802      	ldr	r0, [pc, #8]	@ (80147c4 <ABCC_HAL_HWReleaseReset+0x14>)
 80147bc:	f7f0 fad4 	bl	8004d68 <HAL_GPIO_WritePin>
}
 80147c0:	bf00      	nop
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	58021800 	.word	0x58021800

080147c8 <ABCC_HAL_ReadModuleId>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
UINT8 ABCC_HAL_ReadModuleId( void )
{
 80147c8:	b480      	push	{r7}
 80147ca:	af00      	add	r7, sp, #0
   return( sI2C_Inputs.bMI );
 80147cc:	4b03      	ldr	r3, [pc, #12]	@ (80147dc <ABCC_HAL_ReadModuleId+0x14>)
 80147ce:	795b      	ldrb	r3, [r3, #5]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr
 80147da:	bf00      	nop
 80147dc:	240041bc 	.word	0x240041bc

080147e0 <ABCC_HAL_ModuleDetect>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_ModuleDetect( void )
{
 80147e0:	b480      	push	{r7}
 80147e2:	af00      	add	r7, sp, #0
   if( sI2C_Inputs.bMD == 0 )
 80147e4:	4b05      	ldr	r3, [pc, #20]	@ (80147fc <ABCC_HAL_ModuleDetect+0x1c>)
 80147e6:	799b      	ldrb	r3, [r3, #6]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d101      	bne.n	80147f0 <ABCC_HAL_ModuleDetect+0x10>
   {
      return( TRUE );
 80147ec:	2301      	movs	r3, #1
 80147ee:	e000      	b.n	80147f2 <ABCC_HAL_ModuleDetect+0x12>
   }

   return( FALSE );
 80147f0:	2300      	movs	r3, #0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	46bd      	mov	sp, r7
 80147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fa:	4770      	bx	lr
 80147fc:	240041bc 	.word	0x240041bc

08014800 <ABCC_HAL_IsAbccInterruptActive>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
BOOL ABCC_HAL_IsAbccInterruptActive( void )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	af00      	add	r7, sp, #0
   if( HAL_GPIO_ReadPin( M00765_IRQ_GPIO_Port, M00765_IRQ_Pin ) == GPIO_PIN_RESET )
 8014804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8014808:	4805      	ldr	r0, [pc, #20]	@ (8014820 <ABCC_HAL_IsAbccInterruptActive+0x20>)
 801480a:	f7f0 fa95 	bl	8004d38 <HAL_GPIO_ReadPin>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	d101      	bne.n	8014818 <ABCC_HAL_IsAbccInterruptActive+0x18>
   {
      return( TRUE );
 8014814:	2301      	movs	r3, #1
 8014816:	e000      	b.n	801481a <ABCC_HAL_IsAbccInterruptActive+0x1a>
   }

   return( FALSE );
 8014818:	2300      	movs	r3, #0
}
 801481a:	4618      	mov	r0, r3
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	58021000 	.word	0x58021000

08014824 <ABCC_HAL_SpiRegDataReceived>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SpiRegDataReceived( ABCC_HAL_SpiDataReceivedCbfType pnDataReceived  )
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b086      	sub	sp, #24
 8014828:	af04      	add	r7, sp, #16
 801482a:	6078      	str	r0, [r7, #4]
   if( pnDataReceived != NULL )
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d003      	beq.n	801483a <ABCC_HAL_SpiRegDataReceived+0x16>
   {
      pnTransferCompleteCbf = pnDataReceived;
 8014832:	4a0a      	ldr	r2, [pc, #40]	@ (801485c <ABCC_HAL_SpiRegDataReceived+0x38>)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6013      	str	r3, [r2, #0]
         (UINT32)pnDataReceived,
         "Provided SPI data received callback not valid %" PRIx32 "\n",
         (UINT32)pnDataReceived );
   }

   return;
 8014838:	e00d      	b.n	8014856 <ABCC_HAL_SpiRegDataReceived+0x32>
      ABCC_LOG_ERROR( ABCC_EC_PARAMETER_NOT_VALID,
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	9302      	str	r3, [sp, #8]
 8014840:	4b07      	ldr	r3, [pc, #28]	@ (8014860 <ABCC_HAL_SpiRegDataReceived+0x3c>)
 8014842:	9301      	str	r3, [sp, #4]
 8014844:	f240 332a 	movw	r3, #810	@ 0x32a
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	4b06      	ldr	r3, [pc, #24]	@ (8014864 <ABCC_HAL_SpiRegDataReceived+0x40>)
 801484c:	210e      	movs	r1, #14
 801484e:	2001      	movs	r0, #1
 8014850:	f7f8 fefa 	bl	800d648 <ABCC_LogHandler>
   return;
 8014854:	bf00      	nop
}
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	240041a4 	.word	0x240041a4
 8014860:	0801763c 	.word	0x0801763c
 8014864:	08017430 	.word	0x08017430

08014868 <ABCC_HAL_SpiSendReceive>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SpiSendReceive( void* pxSendDataBuffer, void* pxReceiveDataBuffer, UINT16 iLength )
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b08a      	sub	sp, #40	@ 0x28
 801486c:	af04      	add	r7, sp, #16
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	4613      	mov	r3, r2
 8014874:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef    xHalStatus;

   if( pxSPI_Handle == NULL )
 8014876:	4b22      	ldr	r3, [pc, #136]	@ (8014900 <ABCC_HAL_SpiSendReceive+0x98>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d10b      	bne.n	8014896 <ABCC_HAL_SpiSendReceive+0x2e>
   {
      /* No SPI interface handle registered, this should not happen! */
      ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No SPI interface handle registered\n" );
 801487e:	4b21      	ldr	r3, [pc, #132]	@ (8014904 <ABCC_HAL_SpiSendReceive+0x9c>)
 8014880:	9301      	str	r3, [sp, #4]
 8014882:	f240 333e 	movw	r3, #830	@ 0x33e
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	4b1f      	ldr	r3, [pc, #124]	@ (8014908 <ABCC_HAL_SpiSendReceive+0xa0>)
 801488a:	2200      	movs	r2, #0
 801488c:	211a      	movs	r1, #26
 801488e:	2000      	movs	r0, #0
 8014890:	f7f8 feda 	bl	800d648 <ABCC_LogHandler>
      return;
 8014894:	e031      	b.n	80148fa <ABCC_HAL_SpiSendReceive+0x92>
   }

   /* Save the destination pointer and size for later. */
   pxInboundDest = pxReceiveDataBuffer;
 8014896:	4a1d      	ldr	r2, [pc, #116]	@ (801490c <ABCC_HAL_SpiSendReceive+0xa4>)
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	6013      	str	r3, [r2, #0]
   iInboundSize = iLength;
 801489c:	4a1c      	ldr	r2, [pc, #112]	@ (8014910 <ABCC_HAL_SpiSendReceive+0xa8>)
 801489e:	88fb      	ldrh	r3, [r7, #6]
 80148a0:	8013      	strh	r3, [r2, #0]

   /* Activate SS, i.e. set it low. */
   /* TODO - The SPI interface should have some kind of logic to directly    */
   /* TODO - control the SS signal, investigate if this can be used instead. */
   HAL_GPIO_WritePin( M00765_SPI_SS_GPIO_Port, M00765_SPI_SS_Pin, GPIO_PIN_RESET );
 80148a2:	2200      	movs	r2, #0
 80148a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80148a8:	481a      	ldr	r0, [pc, #104]	@ (8014914 <ABCC_HAL_SpiSendReceive+0xac>)
 80148aa:	f7f0 fa5d 	bl	8004d68 <HAL_GPIO_WritePin>

   /* Copy the MOSI data from the driver buffer (DTCM-RAM) to the I/O buffer (SRAMx). */
   memcpy( abSpiMosiDmaBuff, pxSendDataBuffer, iLength );
 80148ae:	88fb      	ldrh	r3, [r7, #6]
 80148b0:	461a      	mov	r2, r3
 80148b2:	68f9      	ldr	r1, [r7, #12]
 80148b4:	4818      	ldr	r0, [pc, #96]	@ (8014918 <ABCC_HAL_SpiSendReceive+0xb0>)
 80148b6:	f000 fc54 	bl	8015162 <memcpy>

   /* Start the SPI transfer. */
   xHalStatus = HAL_SPI_TransmitReceive_DMA( pxSPI_Handle, abSpiMosiDmaBuff, abSpiMisoDmaBuff, iLength );
 80148ba:	4b11      	ldr	r3, [pc, #68]	@ (8014900 <ABCC_HAL_SpiSendReceive+0x98>)
 80148bc:	6818      	ldr	r0, [r3, #0]
 80148be:	88fb      	ldrh	r3, [r7, #6]
 80148c0:	4a16      	ldr	r2, [pc, #88]	@ (801491c <ABCC_HAL_SpiSendReceive+0xb4>)
 80148c2:	4915      	ldr	r1, [pc, #84]	@ (8014918 <ABCC_HAL_SpiSendReceive+0xb0>)
 80148c4:	f7f4 f902 	bl	8008acc <HAL_SPI_TransmitReceive_DMA>
 80148c8:	4603      	mov	r3, r0
 80148ca:	75fb      	strb	r3, [r7, #23]
   if( xHalStatus != HAL_OK )
 80148cc:	7dfb      	ldrb	r3, [r7, #23]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d012      	beq.n	80148f8 <ABCC_HAL_SpiSendReceive+0x90>
   {
      /* SPI transfer could not be started. */
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR,
 80148d2:	7dfa      	ldrb	r2, [r7, #23]
 80148d4:	7dfb      	ldrb	r3, [r7, #23]
 80148d6:	9302      	str	r3, [sp, #8]
 80148d8:	4b11      	ldr	r3, [pc, #68]	@ (8014920 <ABCC_HAL_SpiSendReceive+0xb8>)
 80148da:	9301      	str	r3, [sp, #4]
 80148dc:	f240 3353 	movw	r3, #851	@ 0x353
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	4b09      	ldr	r3, [pc, #36]	@ (8014908 <ABCC_HAL_SpiSendReceive+0xa0>)
 80148e4:	2120      	movs	r1, #32
 80148e6:	2002      	movs	r0, #2
 80148e8:	f7f8 feae 	bl	800d648 <ABCC_LogHandler>
         (UINT32)xHalStatus,
         "SPI transfer failed (%d)\n",
         xHalStatus );

      /* Deactivate SS, i.e. set it high. */
      HAL_GPIO_WritePin( M00765_SPI_SS_GPIO_Port, M00765_SPI_SS_Pin, GPIO_PIN_SET );
 80148ec:	2201      	movs	r2, #1
 80148ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80148f2:	4808      	ldr	r0, [pc, #32]	@ (8014914 <ABCC_HAL_SpiSendReceive+0xac>)
 80148f4:	f7f0 fa38 	bl	8004d68 <HAL_GPIO_WritePin>
   }

   return;
 80148f8:	bf00      	nop
}
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	240041ac 	.word	0x240041ac
 8014904:	080175b8 	.word	0x080175b8
 8014908:	08017430 	.word	0x08017430
 801490c:	240041b4 	.word	0x240041b4
 8014910:	240041b8 	.word	0x240041b8
 8014914:	58020c00 	.word	0x58020c00
 8014918:	240000e4 	.word	0x240000e4
 801491c:	24000504 	.word	0x24000504
 8014920:	08017670 	.word	0x08017670

08014924 <ABCC_HAL_SerRegDataReceived>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SerRegDataReceived( ABCC_HAL_SpiDataReceivedCbfType pnDataReceived  )
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b086      	sub	sp, #24
 8014928:	af04      	add	r7, sp, #16
 801492a:	6078      	str	r0, [r7, #4]
   if( pnDataReceived != NULL )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d003      	beq.n	801493a <ABCC_HAL_SerRegDataReceived+0x16>
   {
      pnTransferCompleteCbf = pnDataReceived;
 8014932:	4a0a      	ldr	r2, [pc, #40]	@ (801495c <ABCC_HAL_SerRegDataReceived+0x38>)
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	6013      	str	r3, [r2, #0]
      return;
 8014938:	e00d      	b.n	8014956 <ABCC_HAL_SerRegDataReceived+0x32>
   }

   ABCC_LOG_ERROR( ABCC_EC_PARAMETER_NOT_VALID,
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	9302      	str	r3, [sp, #8]
 8014940:	4b07      	ldr	r3, [pc, #28]	@ (8014960 <ABCC_HAL_SerRegDataReceived+0x3c>)
 8014942:	9301      	str	r3, [sp, #4]
 8014944:	f240 33b5 	movw	r3, #949	@ 0x3b5
 8014948:	9300      	str	r3, [sp, #0]
 801494a:	4b06      	ldr	r3, [pc, #24]	@ (8014964 <ABCC_HAL_SerRegDataReceived+0x40>)
 801494c:	210e      	movs	r1, #14
 801494e:	2001      	movs	r0, #1
 8014950:	f7f8 fe7a 	bl	800d648 <ABCC_LogHandler>
      (UINT32)pnDataReceived,
      "Provided UART data received callback not valid %" PRIx32 "\n",
      (UINT32)pnDataReceived );
   return;
 8014954:	bf00      	nop
}
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	240041a4 	.word	0x240041a4
 8014960:	0801768c 	.word	0x0801768c
 8014964:	08017430 	.word	0x08017430

08014968 <ABCC_HAL_SerSendReceive>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SerSendReceive( void* pxTxDataBuffer, void* pxRxDataBuffer, UINT16 iTxSize, UINT16 iRxSize )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b08a      	sub	sp, #40	@ 0x28
 801496c:	af04      	add	r7, sp, #16
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	4611      	mov	r1, r2
 8014974:	461a      	mov	r2, r3
 8014976:	460b      	mov	r3, r1
 8014978:	80fb      	strh	r3, [r7, #6]
 801497a:	4613      	mov	r3, r2
 801497c:	80bb      	strh	r3, [r7, #4]
   HAL_StatusTypeDef    xHalStatus;

   if( pxUART_Handle == NULL )
 801497e:	4b2a      	ldr	r3, [pc, #168]	@ (8014a28 <ABCC_HAL_SerSendReceive+0xc0>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d10b      	bne.n	801499e <ABCC_HAL_SerSendReceive+0x36>
   {
      /* No UART interface handle registered, this should not happen! */
      ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No UART interface handle registered\n" );
 8014986:	4b29      	ldr	r3, [pc, #164]	@ (8014a2c <ABCC_HAL_SerSendReceive+0xc4>)
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	f240 33c7 	movw	r3, #967	@ 0x3c7
 801498e:	9300      	str	r3, [sp, #0]
 8014990:	4b27      	ldr	r3, [pc, #156]	@ (8014a30 <ABCC_HAL_SerSendReceive+0xc8>)
 8014992:	2200      	movs	r2, #0
 8014994:	211a      	movs	r1, #26
 8014996:	2000      	movs	r0, #0
 8014998:	f7f8 fe56 	bl	800d648 <ABCC_LogHandler>
      return;
 801499c:	e040      	b.n	8014a20 <ABCC_HAL_SerSendReceive+0xb8>
   }

   /* Save the destination pointer and size for later. */
   pxInboundDest = pxRxDataBuffer;
 801499e:	4a25      	ldr	r2, [pc, #148]	@ (8014a34 <ABCC_HAL_SerSendReceive+0xcc>)
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	6013      	str	r3, [r2, #0]
   iInboundSize = iRxSize;
 80149a4:	4a24      	ldr	r2, [pc, #144]	@ (8014a38 <ABCC_HAL_SerSendReceive+0xd0>)
 80149a6:	88bb      	ldrh	r3, [r7, #4]
 80149a8:	8013      	strh	r3, [r2, #0]

   /* Copy the TX data from the driver buffer (DTCM-RAM) to the I/O buffer (SRAMx). */
   memcpy( abUartTxDmaBuff, pxTxDataBuffer, iTxSize );
 80149aa:	88fb      	ldrh	r3, [r7, #6]
 80149ac:	461a      	mov	r2, r3
 80149ae:	68f9      	ldr	r1, [r7, #12]
 80149b0:	4822      	ldr	r0, [pc, #136]	@ (8014a3c <ABCC_HAL_SerSendReceive+0xd4>)
 80149b2:	f000 fbd6 	bl	8015162 <memcpy>

   /* Start the UART transmission. */
   xHalStatus = HAL_UART_Transmit_DMA( pxUART_Handle, abUartTxDmaBuff, iTxSize );
 80149b6:	4b1c      	ldr	r3, [pc, #112]	@ (8014a28 <ABCC_HAL_SerSendReceive+0xc0>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	88fa      	ldrh	r2, [r7, #6]
 80149bc:	491f      	ldr	r1, [pc, #124]	@ (8014a3c <ABCC_HAL_SerSendReceive+0xd4>)
 80149be:	4618      	mov	r0, r3
 80149c0:	f7f4 fe7e 	bl	80096c0 <HAL_UART_Transmit_DMA>
 80149c4:	4603      	mov	r3, r0
 80149c6:	75fb      	strb	r3, [r7, #23]
   if( xHalStatus != HAL_OK )
 80149c8:	7dfb      	ldrb	r3, [r7, #23]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d00d      	beq.n	80149ea <ABCC_HAL_SerSendReceive+0x82>
   {
      /* UART transmit could not be executed. */
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR,
 80149ce:	7dfa      	ldrb	r2, [r7, #23]
 80149d0:	7dfb      	ldrb	r3, [r7, #23]
 80149d2:	9302      	str	r3, [sp, #8]
 80149d4:	4b1a      	ldr	r3, [pc, #104]	@ (8014a40 <ABCC_HAL_SerSendReceive+0xd8>)
 80149d6:	9301      	str	r3, [sp, #4]
 80149d8:	f240 33d7 	movw	r3, #983	@ 0x3d7
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	4b14      	ldr	r3, [pc, #80]	@ (8014a30 <ABCC_HAL_SerSendReceive+0xc8>)
 80149e0:	2120      	movs	r1, #32
 80149e2:	2002      	movs	r0, #2
 80149e4:	f7f8 fe30 	bl	800d648 <ABCC_LogHandler>
         (UINT32)xHalStatus,
         "UART transmit failed (%d)\n",
         xHalStatus );
      return;
 80149e8:	e01a      	b.n	8014a20 <ABCC_HAL_SerSendReceive+0xb8>
   }

   /* Start the UART reception. */
   xHalStatus = HAL_UART_Receive_DMA( pxUART_Handle, abUartRxDmaBuff, iRxSize );
 80149ea:	4b0f      	ldr	r3, [pc, #60]	@ (8014a28 <ABCC_HAL_SerSendReceive+0xc0>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	88ba      	ldrh	r2, [r7, #4]
 80149f0:	4914      	ldr	r1, [pc, #80]	@ (8014a44 <ABCC_HAL_SerSendReceive+0xdc>)
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7f4 fee4 	bl	80097c0 <HAL_UART_Receive_DMA>
 80149f8:	4603      	mov	r3, r0
 80149fa:	75fb      	strb	r3, [r7, #23]
   if( xHalStatus != HAL_OK )
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d00d      	beq.n	8014a1e <ABCC_HAL_SerSendReceive+0xb6>
   {
      /* UART transmit could not be executed. */
      ABCC_LOG_WARNING( ABCC_EC_HAL_ERR,
 8014a02:	7dfa      	ldrb	r2, [r7, #23]
 8014a04:	7dfb      	ldrb	r3, [r7, #23]
 8014a06:	9302      	str	r3, [sp, #8]
 8014a08:	4b0f      	ldr	r3, [pc, #60]	@ (8014a48 <ABCC_HAL_SerSendReceive+0xe0>)
 8014a0a:	9301      	str	r3, [sp, #4]
 8014a0c:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	4b07      	ldr	r3, [pc, #28]	@ (8014a30 <ABCC_HAL_SerSendReceive+0xc8>)
 8014a14:	2120      	movs	r1, #32
 8014a16:	2002      	movs	r0, #2
 8014a18:	f7f8 fe16 	bl	800d648 <ABCC_LogHandler>
         (UINT32)xHalStatus,
         "UART receive failed (%d)\n",
         xHalStatus );
      return;
 8014a1c:	e000      	b.n	8014a20 <ABCC_HAL_SerSendReceive+0xb8>
   }

   return;
 8014a1e:	bf00      	nop
}
 8014a20:	3718      	adds	r7, #24
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	240041b0 	.word	0x240041b0
 8014a2c:	080175dc 	.word	0x080175dc
 8014a30:	08017430 	.word	0x08017430
 8014a34:	240041b4 	.word	0x240041b4
 8014a38:	240041b8 	.word	0x240041b8
 8014a3c:	24000924 	.word	0x24000924
 8014a40:	080176c0 	.word	0x080176c0
 8014a44:	24000a38 	.word	0x24000a38
 8014a48:	080176dc 	.word	0x080176dc

08014a4c <ABCC_HAL_SerRestart>:
/*------------------------------------------------------------------------------
** See "abcc_hardware_abstraction.h" for more information.
**------------------------------------------------------------------------------
*/
void ABCC_HAL_SerRestart( void )
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af02      	add	r7, sp, #8
   if( pxUART_Handle == NULL )
 8014a52:	4b0c      	ldr	r3, [pc, #48]	@ (8014a84 <ABCC_HAL_SerRestart+0x38>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d10b      	bne.n	8014a72 <ABCC_HAL_SerRestart+0x26>
   {
      /* No UART interface handle registered, this should not happen! */
      ABCC_LOG_FATAL( ABCC_EC_NO_RESOURCES, 0, "No UART interface handle registered\n" );
 8014a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8014a88 <ABCC_HAL_SerRestart+0x3c>)
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	f240 33f6 	movw	r3, #1014	@ 0x3f6
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	4b09      	ldr	r3, [pc, #36]	@ (8014a8c <ABCC_HAL_SerRestart+0x40>)
 8014a66:	2200      	movs	r2, #0
 8014a68:	211a      	movs	r1, #26
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	f7f8 fdec 	bl	800d648 <ABCC_LogHandler>
      return;
 8014a70:	e005      	b.n	8014a7e <ABCC_HAL_SerRestart+0x32>
   }

   /* Terminate any ongoing UART operations. */
   HAL_UART_Abort( pxUART_Handle );
 8014a72:	4b04      	ldr	r3, [pc, #16]	@ (8014a84 <ABCC_HAL_SerRestart+0x38>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7f4 feee 	bl	8009858 <HAL_UART_Abort>

   return;
 8014a7c:	bf00      	nop
}
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}
 8014a82:	bf00      	nop
 8014a84:	240041b0 	.word	0x240041b0
 8014a88:	080175dc 	.word	0x080175dc
 8014a8c:	08017430 	.word	0x08017430

08014a90 <ABCC_API_CbfGetNumAdi>:
   { 2, PD_READ,  AD_MAP_ALL_ELEM, 0 },
   { AD_MAP_END_ENTRY }
};

UINT16 ABCC_API_CbfGetNumAdi( void )
{
 8014a90:	b480      	push	{r7}
 8014a92:	af00      	add	r7, sp, #0
   return( sizeof( ABCC_API_asAdiEntryList ) / sizeof( AD_AdiEntryType ) );
 8014a94:	2302      	movs	r3, #2
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a9e:	4770      	bx	lr

08014aa0 <ABCC_API_CbfCyclicalProcessing>:
/*------------------------------------------------------------------------------
** Example - electric motor control loop
**------------------------------------------------------------------------------
*/
void ABCC_API_CbfCyclicalProcessing()
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	af00      	add	r7, sp, #0
   if( ABCC_API_AnbState() == ABP_ANB_STATE_PROCESS_ACTIVE )
 8014aa4:	f7fd f944 	bl	8011d30 <ABCC_API_AnbState>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	2b04      	cmp	r3, #4
 8014aac:	d119      	bne.n	8014ae2 <ABCC_API_CbfCyclicalProcessing+0x42>
   {
      /*
      ** An example of ADI data handling.
      */
      if( appl_iSpeed > appl_iRefSpeed )
 8014aae:	4b0f      	ldr	r3, [pc, #60]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014ab0:	881a      	ldrh	r2, [r3, #0]
 8014ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8014af0 <ABCC_API_CbfCyclicalProcessing+0x50>)
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d906      	bls.n	8014ac8 <ABCC_API_CbfCyclicalProcessing+0x28>
      {
         /*
         ** Do something that lowers speed.
         */
         appl_iSpeed -= 1;
 8014aba:	4b0c      	ldr	r3, [pc, #48]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014abc:	881b      	ldrh	r3, [r3, #0]
 8014abe:	3b01      	subs	r3, #1
 8014ac0:	b29a      	uxth	r2, r3
 8014ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014ac4:	801a      	strh	r2, [r3, #0]
      ** We are not in process active, the default should be that the motor
      ** should not run.
      */
      appl_iSpeed = 0;
   }
}
 8014ac6:	e00f      	b.n	8014ae8 <ABCC_API_CbfCyclicalProcessing+0x48>
      else if( appl_iSpeed < appl_iRefSpeed )
 8014ac8:	4b08      	ldr	r3, [pc, #32]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014aca:	881a      	ldrh	r2, [r3, #0]
 8014acc:	4b08      	ldr	r3, [pc, #32]	@ (8014af0 <ABCC_API_CbfCyclicalProcessing+0x50>)
 8014ace:	881b      	ldrh	r3, [r3, #0]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d209      	bcs.n	8014ae8 <ABCC_API_CbfCyclicalProcessing+0x48>
         appl_iSpeed += 1;
 8014ad4:	4b05      	ldr	r3, [pc, #20]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	4b03      	ldr	r3, [pc, #12]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014ade:	801a      	strh	r2, [r3, #0]
}
 8014ae0:	e002      	b.n	8014ae8 <ABCC_API_CbfCyclicalProcessing+0x48>
      appl_iSpeed = 0;
 8014ae2:	4b02      	ldr	r3, [pc, #8]	@ (8014aec <ABCC_API_CbfCyclicalProcessing+0x4c>)
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	801a      	strh	r2, [r3, #0]
}
 8014ae8:	bf00      	nop
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	240041c4 	.word	0x240041c4
 8014af0:	240041c6 	.word	0x240041c6

08014af4 <ABCC_CbfApplicationObjSerialNum_Get>:
static UINT16 lProductCode_EtherNetIP = 0x4321;
static UINT16 lDeviceID_PROFINET = 0x1234;
static const char* pacProductName = "My dynamic product name";

UINT32 ABCC_CbfApplicationObjSerialNum_Get(void)
{
 8014af4:	b480      	push	{r7}
 8014af6:	af00      	add	r7, sp, #0
   return( lSerialNumber );
 8014af8:	4b03      	ldr	r3, [pc, #12]	@ (8014b08 <ABCC_CbfApplicationObjSerialNum_Get+0x14>)
 8014afa:	681b      	ldr	r3, [r3, #0]
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop
 8014b08:	24000074 	.word	0x24000074

08014b0c <ABCC_CbfApplicationObjProductName_Get>:

UINT16 ABCC_CbfApplicationObjProductName_Get( char* pPackedStrDest, UINT16 iBuffSize )
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
 8014b14:	460b      	mov	r3, r1
 8014b16:	807b      	strh	r3, [r7, #2]
   UINT16 iStrLength = (UINT16)strlen(pacProductName);
 8014b18:	4b0c      	ldr	r3, [pc, #48]	@ (8014b4c <ABCC_CbfApplicationObjProductName_Get+0x40>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7eb fbdf 	bl	80002e0 <strlen>
 8014b22:	4603      	mov	r3, r0
 8014b24:	81fb      	strh	r3, [r7, #14]

   iStrLength = iStrLength > iBuffSize ? iBuffSize : iStrLength;
 8014b26:	89fa      	ldrh	r2, [r7, #14]
 8014b28:	887b      	ldrh	r3, [r7, #2]
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	bf28      	it	cs
 8014b2e:	4613      	movcs	r3, r2
 8014b30:	81fb      	strh	r3, [r7, #14]
   memcpy( pPackedStrDest, pacProductName, iStrLength );
 8014b32:	4b06      	ldr	r3, [pc, #24]	@ (8014b4c <ABCC_CbfApplicationObjProductName_Get+0x40>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	89fa      	ldrh	r2, [r7, #14]
 8014b38:	4619      	mov	r1, r3
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 fb11 	bl	8015162 <memcpy>
   return( iStrLength );
 8014b40:	89fb      	ldrh	r3, [r7, #14]
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3710      	adds	r7, #16
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	24000080 	.word	0x24000080

08014b50 <ABCC_CbfApplicationObjFirmwareAvailable_Set>:

void ABCC_CbfApplicationObjFirmwareAvailable_Set( BOOL8 fValue )
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af04      	add	r7, sp, #16
 8014b56:	4603      	mov	r3, r0
 8014b58:	71fb      	strb	r3, [r7, #7]
   /* Store FW flag in non-volatile storage (NVS). */
   fFirmwareAvailable = fValue;
 8014b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8014b84 <ABCC_CbfApplicationObjFirmwareAvailable_Set+0x34>)
 8014b5c:	79fb      	ldrb	r3, [r7, #7]
 8014b5e:	7013      	strb	r3, [r2, #0]
   ABCC_LOG_INFO( "Candidate FW flag: %u\n", fValue );
 8014b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b64:	9302      	str	r3, [sp, #8]
 8014b66:	4b08      	ldr	r3, [pc, #32]	@ (8014b88 <ABCC_CbfApplicationObjFirmwareAvailable_Set+0x38>)
 8014b68:	9301      	str	r3, [sp, #4]
 8014b6a:	2329      	movs	r3, #41	@ 0x29
 8014b6c:	9300      	str	r3, [sp, #0]
 8014b6e:	4b07      	ldr	r3, [pc, #28]	@ (8014b8c <ABCC_CbfApplicationObjFirmwareAvailable_Set+0x3c>)
 8014b70:	2200      	movs	r2, #0
 8014b72:	2100      	movs	r1, #0
 8014b74:	2003      	movs	r0, #3
 8014b76:	f7f8 fd67 	bl	800d648 <ABCC_LogHandler>
}
 8014b7a:	bf00      	nop
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	240041c8 	.word	0x240041c8
 8014b88:	08017748 	.word	0x08017748
 8014b8c:	08017724 	.word	0x08017724

08014b90 <ABCC_CbfApplicationObjFirmwareAvailable_Get>:

BOOL8 ABCC_CbfApplicationObjFirmwareAvailable_Get( void )
{
 8014b90:	b480      	push	{r7}
 8014b92:	af00      	add	r7, sp, #0
   /* Return FW flag from non-volatile storage (NVS). */
   return( fFirmwareAvailable );
 8014b94:	4b03      	ldr	r3, [pc, #12]	@ (8014ba4 <ABCC_CbfApplicationObjFirmwareAvailable_Get+0x14>)
 8014b96:	f993 3000 	ldrsb.w	r3, [r3]
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr
 8014ba4:	240041c8 	.word	0x240041c8

08014ba8 <ABCC_CbfEthernetIpObjDeviceType_Get>:
      hardware. */
   return( FALSE );
}

UINT16 ABCC_CbfEthernetIpObjDeviceType_Get( void )
{
 8014ba8:	b480      	push	{r7}
 8014baa:	af00      	add	r7, sp, #0
   return( lDeviceType_EtherNetIP );
 8014bac:	4b03      	ldr	r3, [pc, #12]	@ (8014bbc <ABCC_CbfEthernetIpObjDeviceType_Get+0x14>)
 8014bae:	881b      	ldrh	r3, [r3, #0]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	24000078 	.word	0x24000078

08014bc0 <ABCC_CbfEthernetIpObjProductCode_Get>:

UINT16 ABCC_CbfEthernetIpObjProductCode_Get( void )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	af00      	add	r7, sp, #0
   return( lProductCode_EtherNetIP );
 8014bc4:	4b03      	ldr	r3, [pc, #12]	@ (8014bd4 <ABCC_CbfEthernetIpObjProductCode_Get+0x14>)
 8014bc6:	881b      	ldrh	r3, [r3, #0]
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd0:	4770      	bx	lr
 8014bd2:	bf00      	nop
 8014bd4:	2400007a 	.word	0x2400007a

08014bd8 <ABCC_CbfProfinetIoObjDeviceId_Get>:

UINT16 ABCC_CbfProfinetIoObjDeviceId_Get( void )
{
 8014bd8:	b480      	push	{r7}
 8014bda:	af00      	add	r7, sp, #0
   return( lDeviceID_PROFINET );
 8014bdc:	4b03      	ldr	r3, [pc, #12]	@ (8014bec <ABCC_CbfProfinetIoObjDeviceId_Get+0x14>)
 8014bde:	881b      	ldrh	r3, [r3, #0]
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	46bd      	mov	sp, r7
 8014be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be8:	4770      	bx	lr
 8014bea:	bf00      	nop
 8014bec:	2400007c 	.word	0x2400007c

08014bf0 <ABCC_CbfProfinetIoObjOrderId_Get>:

UINT16 ABCC_CbfProfinetIoObjOrderId_Get( char* pPackedStrDest, UINT16 iBuffSize )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b084      	sub	sp, #16
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	807b      	strh	r3, [r7, #2]
   static const char* my_product_name = "My dynamic OrderId";
   UINT16 iStrLength = (UINT16)strlen(my_product_name);
 8014bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8014c30 <ABCC_CbfProfinetIoObjOrderId_Get+0x40>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7eb fb6d 	bl	80002e0 <strlen>
 8014c06:	4603      	mov	r3, r0
 8014c08:	81fb      	strh	r3, [r7, #14]

   iStrLength = iStrLength > iBuffSize ? iBuffSize : iStrLength;
 8014c0a:	89fa      	ldrh	r2, [r7, #14]
 8014c0c:	887b      	ldrh	r3, [r7, #2]
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	bf28      	it	cs
 8014c12:	4613      	movcs	r3, r2
 8014c14:	81fb      	strh	r3, [r7, #14]
   memcpy( pPackedStrDest, my_product_name, iStrLength );
 8014c16:	4b06      	ldr	r3, [pc, #24]	@ (8014c30 <ABCC_CbfProfinetIoObjOrderId_Get+0x40>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	89fa      	ldrh	r2, [r7, #14]
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f000 fa9f 	bl	8015162 <memcpy>
   return( iStrLength );
 8014c24:	89fb      	ldrh	r3, [r7, #14]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	24000084 	.word	0x24000084

08014c34 <std>:
 8014c34:	2300      	movs	r3, #0
 8014c36:	b510      	push	{r4, lr}
 8014c38:	4604      	mov	r4, r0
 8014c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8014c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c42:	6083      	str	r3, [r0, #8]
 8014c44:	8181      	strh	r1, [r0, #12]
 8014c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8014c48:	81c2      	strh	r2, [r0, #14]
 8014c4a:	6183      	str	r3, [r0, #24]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	2208      	movs	r2, #8
 8014c50:	305c      	adds	r0, #92	@ 0x5c
 8014c52:	f000 fa0b 	bl	801506c <memset>
 8014c56:	4b0d      	ldr	r3, [pc, #52]	@ (8014c8c <std+0x58>)
 8014c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c90 <std+0x5c>)
 8014c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c94 <std+0x60>)
 8014c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014c62:	4b0d      	ldr	r3, [pc, #52]	@ (8014c98 <std+0x64>)
 8014c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8014c66:	4b0d      	ldr	r3, [pc, #52]	@ (8014c9c <std+0x68>)
 8014c68:	6224      	str	r4, [r4, #32]
 8014c6a:	429c      	cmp	r4, r3
 8014c6c:	d006      	beq.n	8014c7c <std+0x48>
 8014c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014c72:	4294      	cmp	r4, r2
 8014c74:	d002      	beq.n	8014c7c <std+0x48>
 8014c76:	33d0      	adds	r3, #208	@ 0xd0
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	d105      	bne.n	8014c88 <std+0x54>
 8014c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c84:	f000 ba6a 	b.w	801515c <__retarget_lock_init_recursive>
 8014c88:	bd10      	pop	{r4, pc}
 8014c8a:	bf00      	nop
 8014c8c:	08014ea9 	.word	0x08014ea9
 8014c90:	08014ecb 	.word	0x08014ecb
 8014c94:	08014f03 	.word	0x08014f03
 8014c98:	08014f27 	.word	0x08014f27
 8014c9c:	240041cc 	.word	0x240041cc

08014ca0 <stdio_exit_handler>:
 8014ca0:	4a02      	ldr	r2, [pc, #8]	@ (8014cac <stdio_exit_handler+0xc>)
 8014ca2:	4903      	ldr	r1, [pc, #12]	@ (8014cb0 <stdio_exit_handler+0x10>)
 8014ca4:	4803      	ldr	r0, [pc, #12]	@ (8014cb4 <stdio_exit_handler+0x14>)
 8014ca6:	f000 b869 	b.w	8014d7c <_fwalk_sglue>
 8014caa:	bf00      	nop
 8014cac:	24000088 	.word	0x24000088
 8014cb0:	08015a15 	.word	0x08015a15
 8014cb4:	24000098 	.word	0x24000098

08014cb8 <cleanup_stdio>:
 8014cb8:	6841      	ldr	r1, [r0, #4]
 8014cba:	4b0c      	ldr	r3, [pc, #48]	@ (8014cec <cleanup_stdio+0x34>)
 8014cbc:	4299      	cmp	r1, r3
 8014cbe:	b510      	push	{r4, lr}
 8014cc0:	4604      	mov	r4, r0
 8014cc2:	d001      	beq.n	8014cc8 <cleanup_stdio+0x10>
 8014cc4:	f000 fea6 	bl	8015a14 <_fflush_r>
 8014cc8:	68a1      	ldr	r1, [r4, #8]
 8014cca:	4b09      	ldr	r3, [pc, #36]	@ (8014cf0 <cleanup_stdio+0x38>)
 8014ccc:	4299      	cmp	r1, r3
 8014cce:	d002      	beq.n	8014cd6 <cleanup_stdio+0x1e>
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fe9f 	bl	8015a14 <_fflush_r>
 8014cd6:	68e1      	ldr	r1, [r4, #12]
 8014cd8:	4b06      	ldr	r3, [pc, #24]	@ (8014cf4 <cleanup_stdio+0x3c>)
 8014cda:	4299      	cmp	r1, r3
 8014cdc:	d004      	beq.n	8014ce8 <cleanup_stdio+0x30>
 8014cde:	4620      	mov	r0, r4
 8014ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ce4:	f000 be96 	b.w	8015a14 <_fflush_r>
 8014ce8:	bd10      	pop	{r4, pc}
 8014cea:	bf00      	nop
 8014cec:	240041cc 	.word	0x240041cc
 8014cf0:	24004234 	.word	0x24004234
 8014cf4:	2400429c 	.word	0x2400429c

08014cf8 <global_stdio_init.part.0>:
 8014cf8:	b510      	push	{r4, lr}
 8014cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8014d28 <global_stdio_init.part.0+0x30>)
 8014cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8014d2c <global_stdio_init.part.0+0x34>)
 8014cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8014d30 <global_stdio_init.part.0+0x38>)
 8014d00:	601a      	str	r2, [r3, #0]
 8014d02:	4620      	mov	r0, r4
 8014d04:	2200      	movs	r2, #0
 8014d06:	2104      	movs	r1, #4
 8014d08:	f7ff ff94 	bl	8014c34 <std>
 8014d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014d10:	2201      	movs	r2, #1
 8014d12:	2109      	movs	r1, #9
 8014d14:	f7ff ff8e 	bl	8014c34 <std>
 8014d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014d1c:	2202      	movs	r2, #2
 8014d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d22:	2112      	movs	r1, #18
 8014d24:	f7ff bf86 	b.w	8014c34 <std>
 8014d28:	24004304 	.word	0x24004304
 8014d2c:	240041cc 	.word	0x240041cc
 8014d30:	08014ca1 	.word	0x08014ca1

08014d34 <__sfp_lock_acquire>:
 8014d34:	4801      	ldr	r0, [pc, #4]	@ (8014d3c <__sfp_lock_acquire+0x8>)
 8014d36:	f000 ba12 	b.w	801515e <__retarget_lock_acquire_recursive>
 8014d3a:	bf00      	nop
 8014d3c:	2400430d 	.word	0x2400430d

08014d40 <__sfp_lock_release>:
 8014d40:	4801      	ldr	r0, [pc, #4]	@ (8014d48 <__sfp_lock_release+0x8>)
 8014d42:	f000 ba0d 	b.w	8015160 <__retarget_lock_release_recursive>
 8014d46:	bf00      	nop
 8014d48:	2400430d 	.word	0x2400430d

08014d4c <__sinit>:
 8014d4c:	b510      	push	{r4, lr}
 8014d4e:	4604      	mov	r4, r0
 8014d50:	f7ff fff0 	bl	8014d34 <__sfp_lock_acquire>
 8014d54:	6a23      	ldr	r3, [r4, #32]
 8014d56:	b11b      	cbz	r3, 8014d60 <__sinit+0x14>
 8014d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d5c:	f7ff bff0 	b.w	8014d40 <__sfp_lock_release>
 8014d60:	4b04      	ldr	r3, [pc, #16]	@ (8014d74 <__sinit+0x28>)
 8014d62:	6223      	str	r3, [r4, #32]
 8014d64:	4b04      	ldr	r3, [pc, #16]	@ (8014d78 <__sinit+0x2c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d1f5      	bne.n	8014d58 <__sinit+0xc>
 8014d6c:	f7ff ffc4 	bl	8014cf8 <global_stdio_init.part.0>
 8014d70:	e7f2      	b.n	8014d58 <__sinit+0xc>
 8014d72:	bf00      	nop
 8014d74:	08014cb9 	.word	0x08014cb9
 8014d78:	24004304 	.word	0x24004304

08014d7c <_fwalk_sglue>:
 8014d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d80:	4607      	mov	r7, r0
 8014d82:	4688      	mov	r8, r1
 8014d84:	4614      	mov	r4, r2
 8014d86:	2600      	movs	r6, #0
 8014d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8014d90:	d505      	bpl.n	8014d9e <_fwalk_sglue+0x22>
 8014d92:	6824      	ldr	r4, [r4, #0]
 8014d94:	2c00      	cmp	r4, #0
 8014d96:	d1f7      	bne.n	8014d88 <_fwalk_sglue+0xc>
 8014d98:	4630      	mov	r0, r6
 8014d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d9e:	89ab      	ldrh	r3, [r5, #12]
 8014da0:	2b01      	cmp	r3, #1
 8014da2:	d907      	bls.n	8014db4 <_fwalk_sglue+0x38>
 8014da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014da8:	3301      	adds	r3, #1
 8014daa:	d003      	beq.n	8014db4 <_fwalk_sglue+0x38>
 8014dac:	4629      	mov	r1, r5
 8014dae:	4638      	mov	r0, r7
 8014db0:	47c0      	blx	r8
 8014db2:	4306      	orrs	r6, r0
 8014db4:	3568      	adds	r5, #104	@ 0x68
 8014db6:	e7e9      	b.n	8014d8c <_fwalk_sglue+0x10>

08014db8 <iprintf>:
 8014db8:	b40f      	push	{r0, r1, r2, r3}
 8014dba:	b507      	push	{r0, r1, r2, lr}
 8014dbc:	4906      	ldr	r1, [pc, #24]	@ (8014dd8 <iprintf+0x20>)
 8014dbe:	ab04      	add	r3, sp, #16
 8014dc0:	6808      	ldr	r0, [r1, #0]
 8014dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dc6:	6881      	ldr	r1, [r0, #8]
 8014dc8:	9301      	str	r3, [sp, #4]
 8014dca:	f000 fafb 	bl	80153c4 <_vfiprintf_r>
 8014dce:	b003      	add	sp, #12
 8014dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014dd4:	b004      	add	sp, #16
 8014dd6:	4770      	bx	lr
 8014dd8:	24000094 	.word	0x24000094

08014ddc <putchar>:
 8014ddc:	4b02      	ldr	r3, [pc, #8]	@ (8014de8 <putchar+0xc>)
 8014dde:	4601      	mov	r1, r0
 8014de0:	6818      	ldr	r0, [r3, #0]
 8014de2:	6882      	ldr	r2, [r0, #8]
 8014de4:	f000 bea0 	b.w	8015b28 <_putc_r>
 8014de8:	24000094 	.word	0x24000094

08014dec <_puts_r>:
 8014dec:	6a03      	ldr	r3, [r0, #32]
 8014dee:	b570      	push	{r4, r5, r6, lr}
 8014df0:	6884      	ldr	r4, [r0, #8]
 8014df2:	4605      	mov	r5, r0
 8014df4:	460e      	mov	r6, r1
 8014df6:	b90b      	cbnz	r3, 8014dfc <_puts_r+0x10>
 8014df8:	f7ff ffa8 	bl	8014d4c <__sinit>
 8014dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014dfe:	07db      	lsls	r3, r3, #31
 8014e00:	d405      	bmi.n	8014e0e <_puts_r+0x22>
 8014e02:	89a3      	ldrh	r3, [r4, #12]
 8014e04:	0598      	lsls	r0, r3, #22
 8014e06:	d402      	bmi.n	8014e0e <_puts_r+0x22>
 8014e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e0a:	f000 f9a8 	bl	801515e <__retarget_lock_acquire_recursive>
 8014e0e:	89a3      	ldrh	r3, [r4, #12]
 8014e10:	0719      	lsls	r1, r3, #28
 8014e12:	d502      	bpl.n	8014e1a <_puts_r+0x2e>
 8014e14:	6923      	ldr	r3, [r4, #16]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d135      	bne.n	8014e86 <_puts_r+0x9a>
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	f000 f8cf 	bl	8014fc0 <__swsetup_r>
 8014e22:	b380      	cbz	r0, 8014e86 <_puts_r+0x9a>
 8014e24:	f04f 35ff 	mov.w	r5, #4294967295
 8014e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014e2a:	07da      	lsls	r2, r3, #31
 8014e2c:	d405      	bmi.n	8014e3a <_puts_r+0x4e>
 8014e2e:	89a3      	ldrh	r3, [r4, #12]
 8014e30:	059b      	lsls	r3, r3, #22
 8014e32:	d402      	bmi.n	8014e3a <_puts_r+0x4e>
 8014e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014e36:	f000 f993 	bl	8015160 <__retarget_lock_release_recursive>
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	bd70      	pop	{r4, r5, r6, pc}
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	da04      	bge.n	8014e4c <_puts_r+0x60>
 8014e42:	69a2      	ldr	r2, [r4, #24]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	dc17      	bgt.n	8014e78 <_puts_r+0x8c>
 8014e48:	290a      	cmp	r1, #10
 8014e4a:	d015      	beq.n	8014e78 <_puts_r+0x8c>
 8014e4c:	6823      	ldr	r3, [r4, #0]
 8014e4e:	1c5a      	adds	r2, r3, #1
 8014e50:	6022      	str	r2, [r4, #0]
 8014e52:	7019      	strb	r1, [r3, #0]
 8014e54:	68a3      	ldr	r3, [r4, #8]
 8014e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	60a3      	str	r3, [r4, #8]
 8014e5e:	2900      	cmp	r1, #0
 8014e60:	d1ed      	bne.n	8014e3e <_puts_r+0x52>
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	da11      	bge.n	8014e8a <_puts_r+0x9e>
 8014e66:	4622      	mov	r2, r4
 8014e68:	210a      	movs	r1, #10
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	f000 f86a 	bl	8014f44 <__swbuf_r>
 8014e70:	3001      	adds	r0, #1
 8014e72:	d0d7      	beq.n	8014e24 <_puts_r+0x38>
 8014e74:	250a      	movs	r5, #10
 8014e76:	e7d7      	b.n	8014e28 <_puts_r+0x3c>
 8014e78:	4622      	mov	r2, r4
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	f000 f862 	bl	8014f44 <__swbuf_r>
 8014e80:	3001      	adds	r0, #1
 8014e82:	d1e7      	bne.n	8014e54 <_puts_r+0x68>
 8014e84:	e7ce      	b.n	8014e24 <_puts_r+0x38>
 8014e86:	3e01      	subs	r6, #1
 8014e88:	e7e4      	b.n	8014e54 <_puts_r+0x68>
 8014e8a:	6823      	ldr	r3, [r4, #0]
 8014e8c:	1c5a      	adds	r2, r3, #1
 8014e8e:	6022      	str	r2, [r4, #0]
 8014e90:	220a      	movs	r2, #10
 8014e92:	701a      	strb	r2, [r3, #0]
 8014e94:	e7ee      	b.n	8014e74 <_puts_r+0x88>
	...

08014e98 <puts>:
 8014e98:	4b02      	ldr	r3, [pc, #8]	@ (8014ea4 <puts+0xc>)
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	6818      	ldr	r0, [r3, #0]
 8014e9e:	f7ff bfa5 	b.w	8014dec <_puts_r>
 8014ea2:	bf00      	nop
 8014ea4:	24000094 	.word	0x24000094

08014ea8 <__sread>:
 8014ea8:	b510      	push	{r4, lr}
 8014eaa:	460c      	mov	r4, r1
 8014eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eb0:	f000 f906 	bl	80150c0 <_read_r>
 8014eb4:	2800      	cmp	r0, #0
 8014eb6:	bfab      	itete	ge
 8014eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014eba:	89a3      	ldrhlt	r3, [r4, #12]
 8014ebc:	181b      	addge	r3, r3, r0
 8014ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014ec2:	bfac      	ite	ge
 8014ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ec6:	81a3      	strhlt	r3, [r4, #12]
 8014ec8:	bd10      	pop	{r4, pc}

08014eca <__swrite>:
 8014eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ece:	461f      	mov	r7, r3
 8014ed0:	898b      	ldrh	r3, [r1, #12]
 8014ed2:	05db      	lsls	r3, r3, #23
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	460c      	mov	r4, r1
 8014ed8:	4616      	mov	r6, r2
 8014eda:	d505      	bpl.n	8014ee8 <__swrite+0x1e>
 8014edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ee0:	2302      	movs	r3, #2
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f000 f8da 	bl	801509c <_lseek_r>
 8014ee8:	89a3      	ldrh	r3, [r4, #12]
 8014eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014ef2:	81a3      	strh	r3, [r4, #12]
 8014ef4:	4632      	mov	r2, r6
 8014ef6:	463b      	mov	r3, r7
 8014ef8:	4628      	mov	r0, r5
 8014efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014efe:	f000 b8f1 	b.w	80150e4 <_write_r>

08014f02 <__sseek>:
 8014f02:	b510      	push	{r4, lr}
 8014f04:	460c      	mov	r4, r1
 8014f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f0a:	f000 f8c7 	bl	801509c <_lseek_r>
 8014f0e:	1c43      	adds	r3, r0, #1
 8014f10:	89a3      	ldrh	r3, [r4, #12]
 8014f12:	bf15      	itete	ne
 8014f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014f1e:	81a3      	strheq	r3, [r4, #12]
 8014f20:	bf18      	it	ne
 8014f22:	81a3      	strhne	r3, [r4, #12]
 8014f24:	bd10      	pop	{r4, pc}

08014f26 <__sclose>:
 8014f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f2a:	f000 b8a7 	b.w	801507c <_close_r>
	...

08014f30 <viprintf>:
 8014f30:	460b      	mov	r3, r1
 8014f32:	4903      	ldr	r1, [pc, #12]	@ (8014f40 <viprintf+0x10>)
 8014f34:	4602      	mov	r2, r0
 8014f36:	6808      	ldr	r0, [r1, #0]
 8014f38:	6881      	ldr	r1, [r0, #8]
 8014f3a:	f000 ba43 	b.w	80153c4 <_vfiprintf_r>
 8014f3e:	bf00      	nop
 8014f40:	24000094 	.word	0x24000094

08014f44 <__swbuf_r>:
 8014f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f46:	460e      	mov	r6, r1
 8014f48:	4614      	mov	r4, r2
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	b118      	cbz	r0, 8014f56 <__swbuf_r+0x12>
 8014f4e:	6a03      	ldr	r3, [r0, #32]
 8014f50:	b90b      	cbnz	r3, 8014f56 <__swbuf_r+0x12>
 8014f52:	f7ff fefb 	bl	8014d4c <__sinit>
 8014f56:	69a3      	ldr	r3, [r4, #24]
 8014f58:	60a3      	str	r3, [r4, #8]
 8014f5a:	89a3      	ldrh	r3, [r4, #12]
 8014f5c:	071a      	lsls	r2, r3, #28
 8014f5e:	d501      	bpl.n	8014f64 <__swbuf_r+0x20>
 8014f60:	6923      	ldr	r3, [r4, #16]
 8014f62:	b943      	cbnz	r3, 8014f76 <__swbuf_r+0x32>
 8014f64:	4621      	mov	r1, r4
 8014f66:	4628      	mov	r0, r5
 8014f68:	f000 f82a 	bl	8014fc0 <__swsetup_r>
 8014f6c:	b118      	cbz	r0, 8014f76 <__swbuf_r+0x32>
 8014f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8014f72:	4638      	mov	r0, r7
 8014f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f76:	6823      	ldr	r3, [r4, #0]
 8014f78:	6922      	ldr	r2, [r4, #16]
 8014f7a:	1a98      	subs	r0, r3, r2
 8014f7c:	6963      	ldr	r3, [r4, #20]
 8014f7e:	b2f6      	uxtb	r6, r6
 8014f80:	4283      	cmp	r3, r0
 8014f82:	4637      	mov	r7, r6
 8014f84:	dc05      	bgt.n	8014f92 <__swbuf_r+0x4e>
 8014f86:	4621      	mov	r1, r4
 8014f88:	4628      	mov	r0, r5
 8014f8a:	f000 fd43 	bl	8015a14 <_fflush_r>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d1ed      	bne.n	8014f6e <__swbuf_r+0x2a>
 8014f92:	68a3      	ldr	r3, [r4, #8]
 8014f94:	3b01      	subs	r3, #1
 8014f96:	60a3      	str	r3, [r4, #8]
 8014f98:	6823      	ldr	r3, [r4, #0]
 8014f9a:	1c5a      	adds	r2, r3, #1
 8014f9c:	6022      	str	r2, [r4, #0]
 8014f9e:	701e      	strb	r6, [r3, #0]
 8014fa0:	6962      	ldr	r2, [r4, #20]
 8014fa2:	1c43      	adds	r3, r0, #1
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d004      	beq.n	8014fb2 <__swbuf_r+0x6e>
 8014fa8:	89a3      	ldrh	r3, [r4, #12]
 8014faa:	07db      	lsls	r3, r3, #31
 8014fac:	d5e1      	bpl.n	8014f72 <__swbuf_r+0x2e>
 8014fae:	2e0a      	cmp	r6, #10
 8014fb0:	d1df      	bne.n	8014f72 <__swbuf_r+0x2e>
 8014fb2:	4621      	mov	r1, r4
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f000 fd2d 	bl	8015a14 <_fflush_r>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d0d9      	beq.n	8014f72 <__swbuf_r+0x2e>
 8014fbe:	e7d6      	b.n	8014f6e <__swbuf_r+0x2a>

08014fc0 <__swsetup_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4b29      	ldr	r3, [pc, #164]	@ (8015068 <__swsetup_r+0xa8>)
 8014fc4:	4605      	mov	r5, r0
 8014fc6:	6818      	ldr	r0, [r3, #0]
 8014fc8:	460c      	mov	r4, r1
 8014fca:	b118      	cbz	r0, 8014fd4 <__swsetup_r+0x14>
 8014fcc:	6a03      	ldr	r3, [r0, #32]
 8014fce:	b90b      	cbnz	r3, 8014fd4 <__swsetup_r+0x14>
 8014fd0:	f7ff febc 	bl	8014d4c <__sinit>
 8014fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014fd8:	0719      	lsls	r1, r3, #28
 8014fda:	d422      	bmi.n	8015022 <__swsetup_r+0x62>
 8014fdc:	06da      	lsls	r2, r3, #27
 8014fde:	d407      	bmi.n	8014ff0 <__swsetup_r+0x30>
 8014fe0:	2209      	movs	r2, #9
 8014fe2:	602a      	str	r2, [r5, #0]
 8014fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014fe8:	81a3      	strh	r3, [r4, #12]
 8014fea:	f04f 30ff 	mov.w	r0, #4294967295
 8014fee:	e033      	b.n	8015058 <__swsetup_r+0x98>
 8014ff0:	0758      	lsls	r0, r3, #29
 8014ff2:	d512      	bpl.n	801501a <__swsetup_r+0x5a>
 8014ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ff6:	b141      	cbz	r1, 801500a <__swsetup_r+0x4a>
 8014ff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ffc:	4299      	cmp	r1, r3
 8014ffe:	d002      	beq.n	8015006 <__swsetup_r+0x46>
 8015000:	4628      	mov	r0, r5
 8015002:	f000 f8bd 	bl	8015180 <_free_r>
 8015006:	2300      	movs	r3, #0
 8015008:	6363      	str	r3, [r4, #52]	@ 0x34
 801500a:	89a3      	ldrh	r3, [r4, #12]
 801500c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015010:	81a3      	strh	r3, [r4, #12]
 8015012:	2300      	movs	r3, #0
 8015014:	6063      	str	r3, [r4, #4]
 8015016:	6923      	ldr	r3, [r4, #16]
 8015018:	6023      	str	r3, [r4, #0]
 801501a:	89a3      	ldrh	r3, [r4, #12]
 801501c:	f043 0308 	orr.w	r3, r3, #8
 8015020:	81a3      	strh	r3, [r4, #12]
 8015022:	6923      	ldr	r3, [r4, #16]
 8015024:	b94b      	cbnz	r3, 801503a <__swsetup_r+0x7a>
 8015026:	89a3      	ldrh	r3, [r4, #12]
 8015028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801502c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015030:	d003      	beq.n	801503a <__swsetup_r+0x7a>
 8015032:	4621      	mov	r1, r4
 8015034:	4628      	mov	r0, r5
 8015036:	f000 fd3b 	bl	8015ab0 <__smakebuf_r>
 801503a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801503e:	f013 0201 	ands.w	r2, r3, #1
 8015042:	d00a      	beq.n	801505a <__swsetup_r+0x9a>
 8015044:	2200      	movs	r2, #0
 8015046:	60a2      	str	r2, [r4, #8]
 8015048:	6962      	ldr	r2, [r4, #20]
 801504a:	4252      	negs	r2, r2
 801504c:	61a2      	str	r2, [r4, #24]
 801504e:	6922      	ldr	r2, [r4, #16]
 8015050:	b942      	cbnz	r2, 8015064 <__swsetup_r+0xa4>
 8015052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015056:	d1c5      	bne.n	8014fe4 <__swsetup_r+0x24>
 8015058:	bd38      	pop	{r3, r4, r5, pc}
 801505a:	0799      	lsls	r1, r3, #30
 801505c:	bf58      	it	pl
 801505e:	6962      	ldrpl	r2, [r4, #20]
 8015060:	60a2      	str	r2, [r4, #8]
 8015062:	e7f4      	b.n	801504e <__swsetup_r+0x8e>
 8015064:	2000      	movs	r0, #0
 8015066:	e7f7      	b.n	8015058 <__swsetup_r+0x98>
 8015068:	24000094 	.word	0x24000094

0801506c <memset>:
 801506c:	4402      	add	r2, r0
 801506e:	4603      	mov	r3, r0
 8015070:	4293      	cmp	r3, r2
 8015072:	d100      	bne.n	8015076 <memset+0xa>
 8015074:	4770      	bx	lr
 8015076:	f803 1b01 	strb.w	r1, [r3], #1
 801507a:	e7f9      	b.n	8015070 <memset+0x4>

0801507c <_close_r>:
 801507c:	b538      	push	{r3, r4, r5, lr}
 801507e:	4d06      	ldr	r5, [pc, #24]	@ (8015098 <_close_r+0x1c>)
 8015080:	2300      	movs	r3, #0
 8015082:	4604      	mov	r4, r0
 8015084:	4608      	mov	r0, r1
 8015086:	602b      	str	r3, [r5, #0]
 8015088:	f7ec f8cb 	bl	8001222 <_close>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d102      	bne.n	8015096 <_close_r+0x1a>
 8015090:	682b      	ldr	r3, [r5, #0]
 8015092:	b103      	cbz	r3, 8015096 <_close_r+0x1a>
 8015094:	6023      	str	r3, [r4, #0]
 8015096:	bd38      	pop	{r3, r4, r5, pc}
 8015098:	24004308 	.word	0x24004308

0801509c <_lseek_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4d07      	ldr	r5, [pc, #28]	@ (80150bc <_lseek_r+0x20>)
 80150a0:	4604      	mov	r4, r0
 80150a2:	4608      	mov	r0, r1
 80150a4:	4611      	mov	r1, r2
 80150a6:	2200      	movs	r2, #0
 80150a8:	602a      	str	r2, [r5, #0]
 80150aa:	461a      	mov	r2, r3
 80150ac:	f7ec f8e0 	bl	8001270 <_lseek>
 80150b0:	1c43      	adds	r3, r0, #1
 80150b2:	d102      	bne.n	80150ba <_lseek_r+0x1e>
 80150b4:	682b      	ldr	r3, [r5, #0]
 80150b6:	b103      	cbz	r3, 80150ba <_lseek_r+0x1e>
 80150b8:	6023      	str	r3, [r4, #0]
 80150ba:	bd38      	pop	{r3, r4, r5, pc}
 80150bc:	24004308 	.word	0x24004308

080150c0 <_read_r>:
 80150c0:	b538      	push	{r3, r4, r5, lr}
 80150c2:	4d07      	ldr	r5, [pc, #28]	@ (80150e0 <_read_r+0x20>)
 80150c4:	4604      	mov	r4, r0
 80150c6:	4608      	mov	r0, r1
 80150c8:	4611      	mov	r1, r2
 80150ca:	2200      	movs	r2, #0
 80150cc:	602a      	str	r2, [r5, #0]
 80150ce:	461a      	mov	r2, r3
 80150d0:	f7ec f88a 	bl	80011e8 <_read>
 80150d4:	1c43      	adds	r3, r0, #1
 80150d6:	d102      	bne.n	80150de <_read_r+0x1e>
 80150d8:	682b      	ldr	r3, [r5, #0]
 80150da:	b103      	cbz	r3, 80150de <_read_r+0x1e>
 80150dc:	6023      	str	r3, [r4, #0]
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	24004308 	.word	0x24004308

080150e4 <_write_r>:
 80150e4:	b538      	push	{r3, r4, r5, lr}
 80150e6:	4d07      	ldr	r5, [pc, #28]	@ (8015104 <_write_r+0x20>)
 80150e8:	4604      	mov	r4, r0
 80150ea:	4608      	mov	r0, r1
 80150ec:	4611      	mov	r1, r2
 80150ee:	2200      	movs	r2, #0
 80150f0:	602a      	str	r2, [r5, #0]
 80150f2:	461a      	mov	r2, r3
 80150f4:	f7eb fd51 	bl	8000b9a <_write>
 80150f8:	1c43      	adds	r3, r0, #1
 80150fa:	d102      	bne.n	8015102 <_write_r+0x1e>
 80150fc:	682b      	ldr	r3, [r5, #0]
 80150fe:	b103      	cbz	r3, 8015102 <_write_r+0x1e>
 8015100:	6023      	str	r3, [r4, #0]
 8015102:	bd38      	pop	{r3, r4, r5, pc}
 8015104:	24004308 	.word	0x24004308

08015108 <__errno>:
 8015108:	4b01      	ldr	r3, [pc, #4]	@ (8015110 <__errno+0x8>)
 801510a:	6818      	ldr	r0, [r3, #0]
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	24000094 	.word	0x24000094

08015114 <__libc_init_array>:
 8015114:	b570      	push	{r4, r5, r6, lr}
 8015116:	4d0d      	ldr	r5, [pc, #52]	@ (801514c <__libc_init_array+0x38>)
 8015118:	4c0d      	ldr	r4, [pc, #52]	@ (8015150 <__libc_init_array+0x3c>)
 801511a:	1b64      	subs	r4, r4, r5
 801511c:	10a4      	asrs	r4, r4, #2
 801511e:	2600      	movs	r6, #0
 8015120:	42a6      	cmp	r6, r4
 8015122:	d109      	bne.n	8015138 <__libc_init_array+0x24>
 8015124:	4d0b      	ldr	r5, [pc, #44]	@ (8015154 <__libc_init_array+0x40>)
 8015126:	4c0c      	ldr	r4, [pc, #48]	@ (8015158 <__libc_init_array+0x44>)
 8015128:	f000 fd64 	bl	8015bf4 <_init>
 801512c:	1b64      	subs	r4, r4, r5
 801512e:	10a4      	asrs	r4, r4, #2
 8015130:	2600      	movs	r6, #0
 8015132:	42a6      	cmp	r6, r4
 8015134:	d105      	bne.n	8015142 <__libc_init_array+0x2e>
 8015136:	bd70      	pop	{r4, r5, r6, pc}
 8015138:	f855 3b04 	ldr.w	r3, [r5], #4
 801513c:	4798      	blx	r3
 801513e:	3601      	adds	r6, #1
 8015140:	e7ee      	b.n	8015120 <__libc_init_array+0xc>
 8015142:	f855 3b04 	ldr.w	r3, [r5], #4
 8015146:	4798      	blx	r3
 8015148:	3601      	adds	r6, #1
 801514a:	e7f2      	b.n	8015132 <__libc_init_array+0x1e>
 801514c:	08017d80 	.word	0x08017d80
 8015150:	08017d80 	.word	0x08017d80
 8015154:	08017d80 	.word	0x08017d80
 8015158:	08017d84 	.word	0x08017d84

0801515c <__retarget_lock_init_recursive>:
 801515c:	4770      	bx	lr

0801515e <__retarget_lock_acquire_recursive>:
 801515e:	4770      	bx	lr

08015160 <__retarget_lock_release_recursive>:
 8015160:	4770      	bx	lr

08015162 <memcpy>:
 8015162:	440a      	add	r2, r1
 8015164:	4291      	cmp	r1, r2
 8015166:	f100 33ff 	add.w	r3, r0, #4294967295
 801516a:	d100      	bne.n	801516e <memcpy+0xc>
 801516c:	4770      	bx	lr
 801516e:	b510      	push	{r4, lr}
 8015170:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015174:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015178:	4291      	cmp	r1, r2
 801517a:	d1f9      	bne.n	8015170 <memcpy+0xe>
 801517c:	bd10      	pop	{r4, pc}
	...

08015180 <_free_r>:
 8015180:	b538      	push	{r3, r4, r5, lr}
 8015182:	4605      	mov	r5, r0
 8015184:	2900      	cmp	r1, #0
 8015186:	d041      	beq.n	801520c <_free_r+0x8c>
 8015188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801518c:	1f0c      	subs	r4, r1, #4
 801518e:	2b00      	cmp	r3, #0
 8015190:	bfb8      	it	lt
 8015192:	18e4      	addlt	r4, r4, r3
 8015194:	f000 f8e0 	bl	8015358 <__malloc_lock>
 8015198:	4a1d      	ldr	r2, [pc, #116]	@ (8015210 <_free_r+0x90>)
 801519a:	6813      	ldr	r3, [r2, #0]
 801519c:	b933      	cbnz	r3, 80151ac <_free_r+0x2c>
 801519e:	6063      	str	r3, [r4, #4]
 80151a0:	6014      	str	r4, [r2, #0]
 80151a2:	4628      	mov	r0, r5
 80151a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151a8:	f000 b8dc 	b.w	8015364 <__malloc_unlock>
 80151ac:	42a3      	cmp	r3, r4
 80151ae:	d908      	bls.n	80151c2 <_free_r+0x42>
 80151b0:	6820      	ldr	r0, [r4, #0]
 80151b2:	1821      	adds	r1, r4, r0
 80151b4:	428b      	cmp	r3, r1
 80151b6:	bf01      	itttt	eq
 80151b8:	6819      	ldreq	r1, [r3, #0]
 80151ba:	685b      	ldreq	r3, [r3, #4]
 80151bc:	1809      	addeq	r1, r1, r0
 80151be:	6021      	streq	r1, [r4, #0]
 80151c0:	e7ed      	b.n	801519e <_free_r+0x1e>
 80151c2:	461a      	mov	r2, r3
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	b10b      	cbz	r3, 80151cc <_free_r+0x4c>
 80151c8:	42a3      	cmp	r3, r4
 80151ca:	d9fa      	bls.n	80151c2 <_free_r+0x42>
 80151cc:	6811      	ldr	r1, [r2, #0]
 80151ce:	1850      	adds	r0, r2, r1
 80151d0:	42a0      	cmp	r0, r4
 80151d2:	d10b      	bne.n	80151ec <_free_r+0x6c>
 80151d4:	6820      	ldr	r0, [r4, #0]
 80151d6:	4401      	add	r1, r0
 80151d8:	1850      	adds	r0, r2, r1
 80151da:	4283      	cmp	r3, r0
 80151dc:	6011      	str	r1, [r2, #0]
 80151de:	d1e0      	bne.n	80151a2 <_free_r+0x22>
 80151e0:	6818      	ldr	r0, [r3, #0]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	6053      	str	r3, [r2, #4]
 80151e6:	4408      	add	r0, r1
 80151e8:	6010      	str	r0, [r2, #0]
 80151ea:	e7da      	b.n	80151a2 <_free_r+0x22>
 80151ec:	d902      	bls.n	80151f4 <_free_r+0x74>
 80151ee:	230c      	movs	r3, #12
 80151f0:	602b      	str	r3, [r5, #0]
 80151f2:	e7d6      	b.n	80151a2 <_free_r+0x22>
 80151f4:	6820      	ldr	r0, [r4, #0]
 80151f6:	1821      	adds	r1, r4, r0
 80151f8:	428b      	cmp	r3, r1
 80151fa:	bf04      	itt	eq
 80151fc:	6819      	ldreq	r1, [r3, #0]
 80151fe:	685b      	ldreq	r3, [r3, #4]
 8015200:	6063      	str	r3, [r4, #4]
 8015202:	bf04      	itt	eq
 8015204:	1809      	addeq	r1, r1, r0
 8015206:	6021      	streq	r1, [r4, #0]
 8015208:	6054      	str	r4, [r2, #4]
 801520a:	e7ca      	b.n	80151a2 <_free_r+0x22>
 801520c:	bd38      	pop	{r3, r4, r5, pc}
 801520e:	bf00      	nop
 8015210:	24004314 	.word	0x24004314

08015214 <sbrk_aligned>:
 8015214:	b570      	push	{r4, r5, r6, lr}
 8015216:	4e0f      	ldr	r6, [pc, #60]	@ (8015254 <sbrk_aligned+0x40>)
 8015218:	460c      	mov	r4, r1
 801521a:	6831      	ldr	r1, [r6, #0]
 801521c:	4605      	mov	r5, r0
 801521e:	b911      	cbnz	r1, 8015226 <sbrk_aligned+0x12>
 8015220:	f000 fcd8 	bl	8015bd4 <_sbrk_r>
 8015224:	6030      	str	r0, [r6, #0]
 8015226:	4621      	mov	r1, r4
 8015228:	4628      	mov	r0, r5
 801522a:	f000 fcd3 	bl	8015bd4 <_sbrk_r>
 801522e:	1c43      	adds	r3, r0, #1
 8015230:	d103      	bne.n	801523a <sbrk_aligned+0x26>
 8015232:	f04f 34ff 	mov.w	r4, #4294967295
 8015236:	4620      	mov	r0, r4
 8015238:	bd70      	pop	{r4, r5, r6, pc}
 801523a:	1cc4      	adds	r4, r0, #3
 801523c:	f024 0403 	bic.w	r4, r4, #3
 8015240:	42a0      	cmp	r0, r4
 8015242:	d0f8      	beq.n	8015236 <sbrk_aligned+0x22>
 8015244:	1a21      	subs	r1, r4, r0
 8015246:	4628      	mov	r0, r5
 8015248:	f000 fcc4 	bl	8015bd4 <_sbrk_r>
 801524c:	3001      	adds	r0, #1
 801524e:	d1f2      	bne.n	8015236 <sbrk_aligned+0x22>
 8015250:	e7ef      	b.n	8015232 <sbrk_aligned+0x1e>
 8015252:	bf00      	nop
 8015254:	24004310 	.word	0x24004310

08015258 <_malloc_r>:
 8015258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801525c:	1ccd      	adds	r5, r1, #3
 801525e:	f025 0503 	bic.w	r5, r5, #3
 8015262:	3508      	adds	r5, #8
 8015264:	2d0c      	cmp	r5, #12
 8015266:	bf38      	it	cc
 8015268:	250c      	movcc	r5, #12
 801526a:	2d00      	cmp	r5, #0
 801526c:	4606      	mov	r6, r0
 801526e:	db01      	blt.n	8015274 <_malloc_r+0x1c>
 8015270:	42a9      	cmp	r1, r5
 8015272:	d904      	bls.n	801527e <_malloc_r+0x26>
 8015274:	230c      	movs	r3, #12
 8015276:	6033      	str	r3, [r6, #0]
 8015278:	2000      	movs	r0, #0
 801527a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801527e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015354 <_malloc_r+0xfc>
 8015282:	f000 f869 	bl	8015358 <__malloc_lock>
 8015286:	f8d8 3000 	ldr.w	r3, [r8]
 801528a:	461c      	mov	r4, r3
 801528c:	bb44      	cbnz	r4, 80152e0 <_malloc_r+0x88>
 801528e:	4629      	mov	r1, r5
 8015290:	4630      	mov	r0, r6
 8015292:	f7ff ffbf 	bl	8015214 <sbrk_aligned>
 8015296:	1c43      	adds	r3, r0, #1
 8015298:	4604      	mov	r4, r0
 801529a:	d158      	bne.n	801534e <_malloc_r+0xf6>
 801529c:	f8d8 4000 	ldr.w	r4, [r8]
 80152a0:	4627      	mov	r7, r4
 80152a2:	2f00      	cmp	r7, #0
 80152a4:	d143      	bne.n	801532e <_malloc_r+0xd6>
 80152a6:	2c00      	cmp	r4, #0
 80152a8:	d04b      	beq.n	8015342 <_malloc_r+0xea>
 80152aa:	6823      	ldr	r3, [r4, #0]
 80152ac:	4639      	mov	r1, r7
 80152ae:	4630      	mov	r0, r6
 80152b0:	eb04 0903 	add.w	r9, r4, r3
 80152b4:	f000 fc8e 	bl	8015bd4 <_sbrk_r>
 80152b8:	4581      	cmp	r9, r0
 80152ba:	d142      	bne.n	8015342 <_malloc_r+0xea>
 80152bc:	6821      	ldr	r1, [r4, #0]
 80152be:	1a6d      	subs	r5, r5, r1
 80152c0:	4629      	mov	r1, r5
 80152c2:	4630      	mov	r0, r6
 80152c4:	f7ff ffa6 	bl	8015214 <sbrk_aligned>
 80152c8:	3001      	adds	r0, #1
 80152ca:	d03a      	beq.n	8015342 <_malloc_r+0xea>
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	442b      	add	r3, r5
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	f8d8 3000 	ldr.w	r3, [r8]
 80152d6:	685a      	ldr	r2, [r3, #4]
 80152d8:	bb62      	cbnz	r2, 8015334 <_malloc_r+0xdc>
 80152da:	f8c8 7000 	str.w	r7, [r8]
 80152de:	e00f      	b.n	8015300 <_malloc_r+0xa8>
 80152e0:	6822      	ldr	r2, [r4, #0]
 80152e2:	1b52      	subs	r2, r2, r5
 80152e4:	d420      	bmi.n	8015328 <_malloc_r+0xd0>
 80152e6:	2a0b      	cmp	r2, #11
 80152e8:	d917      	bls.n	801531a <_malloc_r+0xc2>
 80152ea:	1961      	adds	r1, r4, r5
 80152ec:	42a3      	cmp	r3, r4
 80152ee:	6025      	str	r5, [r4, #0]
 80152f0:	bf18      	it	ne
 80152f2:	6059      	strne	r1, [r3, #4]
 80152f4:	6863      	ldr	r3, [r4, #4]
 80152f6:	bf08      	it	eq
 80152f8:	f8c8 1000 	streq.w	r1, [r8]
 80152fc:	5162      	str	r2, [r4, r5]
 80152fe:	604b      	str	r3, [r1, #4]
 8015300:	4630      	mov	r0, r6
 8015302:	f000 f82f 	bl	8015364 <__malloc_unlock>
 8015306:	f104 000b 	add.w	r0, r4, #11
 801530a:	1d23      	adds	r3, r4, #4
 801530c:	f020 0007 	bic.w	r0, r0, #7
 8015310:	1ac2      	subs	r2, r0, r3
 8015312:	bf1c      	itt	ne
 8015314:	1a1b      	subne	r3, r3, r0
 8015316:	50a3      	strne	r3, [r4, r2]
 8015318:	e7af      	b.n	801527a <_malloc_r+0x22>
 801531a:	6862      	ldr	r2, [r4, #4]
 801531c:	42a3      	cmp	r3, r4
 801531e:	bf0c      	ite	eq
 8015320:	f8c8 2000 	streq.w	r2, [r8]
 8015324:	605a      	strne	r2, [r3, #4]
 8015326:	e7eb      	b.n	8015300 <_malloc_r+0xa8>
 8015328:	4623      	mov	r3, r4
 801532a:	6864      	ldr	r4, [r4, #4]
 801532c:	e7ae      	b.n	801528c <_malloc_r+0x34>
 801532e:	463c      	mov	r4, r7
 8015330:	687f      	ldr	r7, [r7, #4]
 8015332:	e7b6      	b.n	80152a2 <_malloc_r+0x4a>
 8015334:	461a      	mov	r2, r3
 8015336:	685b      	ldr	r3, [r3, #4]
 8015338:	42a3      	cmp	r3, r4
 801533a:	d1fb      	bne.n	8015334 <_malloc_r+0xdc>
 801533c:	2300      	movs	r3, #0
 801533e:	6053      	str	r3, [r2, #4]
 8015340:	e7de      	b.n	8015300 <_malloc_r+0xa8>
 8015342:	230c      	movs	r3, #12
 8015344:	6033      	str	r3, [r6, #0]
 8015346:	4630      	mov	r0, r6
 8015348:	f000 f80c 	bl	8015364 <__malloc_unlock>
 801534c:	e794      	b.n	8015278 <_malloc_r+0x20>
 801534e:	6005      	str	r5, [r0, #0]
 8015350:	e7d6      	b.n	8015300 <_malloc_r+0xa8>
 8015352:	bf00      	nop
 8015354:	24004314 	.word	0x24004314

08015358 <__malloc_lock>:
 8015358:	4801      	ldr	r0, [pc, #4]	@ (8015360 <__malloc_lock+0x8>)
 801535a:	f7ff bf00 	b.w	801515e <__retarget_lock_acquire_recursive>
 801535e:	bf00      	nop
 8015360:	2400430c 	.word	0x2400430c

08015364 <__malloc_unlock>:
 8015364:	4801      	ldr	r0, [pc, #4]	@ (801536c <__malloc_unlock+0x8>)
 8015366:	f7ff befb 	b.w	8015160 <__retarget_lock_release_recursive>
 801536a:	bf00      	nop
 801536c:	2400430c 	.word	0x2400430c

08015370 <__sfputc_r>:
 8015370:	6893      	ldr	r3, [r2, #8]
 8015372:	3b01      	subs	r3, #1
 8015374:	2b00      	cmp	r3, #0
 8015376:	b410      	push	{r4}
 8015378:	6093      	str	r3, [r2, #8]
 801537a:	da08      	bge.n	801538e <__sfputc_r+0x1e>
 801537c:	6994      	ldr	r4, [r2, #24]
 801537e:	42a3      	cmp	r3, r4
 8015380:	db01      	blt.n	8015386 <__sfputc_r+0x16>
 8015382:	290a      	cmp	r1, #10
 8015384:	d103      	bne.n	801538e <__sfputc_r+0x1e>
 8015386:	f85d 4b04 	ldr.w	r4, [sp], #4
 801538a:	f7ff bddb 	b.w	8014f44 <__swbuf_r>
 801538e:	6813      	ldr	r3, [r2, #0]
 8015390:	1c58      	adds	r0, r3, #1
 8015392:	6010      	str	r0, [r2, #0]
 8015394:	7019      	strb	r1, [r3, #0]
 8015396:	4608      	mov	r0, r1
 8015398:	f85d 4b04 	ldr.w	r4, [sp], #4
 801539c:	4770      	bx	lr

0801539e <__sfputs_r>:
 801539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153a0:	4606      	mov	r6, r0
 80153a2:	460f      	mov	r7, r1
 80153a4:	4614      	mov	r4, r2
 80153a6:	18d5      	adds	r5, r2, r3
 80153a8:	42ac      	cmp	r4, r5
 80153aa:	d101      	bne.n	80153b0 <__sfputs_r+0x12>
 80153ac:	2000      	movs	r0, #0
 80153ae:	e007      	b.n	80153c0 <__sfputs_r+0x22>
 80153b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153b4:	463a      	mov	r2, r7
 80153b6:	4630      	mov	r0, r6
 80153b8:	f7ff ffda 	bl	8015370 <__sfputc_r>
 80153bc:	1c43      	adds	r3, r0, #1
 80153be:	d1f3      	bne.n	80153a8 <__sfputs_r+0xa>
 80153c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153c4 <_vfiprintf_r>:
 80153c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c8:	460d      	mov	r5, r1
 80153ca:	b09d      	sub	sp, #116	@ 0x74
 80153cc:	4614      	mov	r4, r2
 80153ce:	4698      	mov	r8, r3
 80153d0:	4606      	mov	r6, r0
 80153d2:	b118      	cbz	r0, 80153dc <_vfiprintf_r+0x18>
 80153d4:	6a03      	ldr	r3, [r0, #32]
 80153d6:	b90b      	cbnz	r3, 80153dc <_vfiprintf_r+0x18>
 80153d8:	f7ff fcb8 	bl	8014d4c <__sinit>
 80153dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80153de:	07d9      	lsls	r1, r3, #31
 80153e0:	d405      	bmi.n	80153ee <_vfiprintf_r+0x2a>
 80153e2:	89ab      	ldrh	r3, [r5, #12]
 80153e4:	059a      	lsls	r2, r3, #22
 80153e6:	d402      	bmi.n	80153ee <_vfiprintf_r+0x2a>
 80153e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80153ea:	f7ff feb8 	bl	801515e <__retarget_lock_acquire_recursive>
 80153ee:	89ab      	ldrh	r3, [r5, #12]
 80153f0:	071b      	lsls	r3, r3, #28
 80153f2:	d501      	bpl.n	80153f8 <_vfiprintf_r+0x34>
 80153f4:	692b      	ldr	r3, [r5, #16]
 80153f6:	b99b      	cbnz	r3, 8015420 <_vfiprintf_r+0x5c>
 80153f8:	4629      	mov	r1, r5
 80153fa:	4630      	mov	r0, r6
 80153fc:	f7ff fde0 	bl	8014fc0 <__swsetup_r>
 8015400:	b170      	cbz	r0, 8015420 <_vfiprintf_r+0x5c>
 8015402:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015404:	07dc      	lsls	r4, r3, #31
 8015406:	d504      	bpl.n	8015412 <_vfiprintf_r+0x4e>
 8015408:	f04f 30ff 	mov.w	r0, #4294967295
 801540c:	b01d      	add	sp, #116	@ 0x74
 801540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015412:	89ab      	ldrh	r3, [r5, #12]
 8015414:	0598      	lsls	r0, r3, #22
 8015416:	d4f7      	bmi.n	8015408 <_vfiprintf_r+0x44>
 8015418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801541a:	f7ff fea1 	bl	8015160 <__retarget_lock_release_recursive>
 801541e:	e7f3      	b.n	8015408 <_vfiprintf_r+0x44>
 8015420:	2300      	movs	r3, #0
 8015422:	9309      	str	r3, [sp, #36]	@ 0x24
 8015424:	2320      	movs	r3, #32
 8015426:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801542a:	f8cd 800c 	str.w	r8, [sp, #12]
 801542e:	2330      	movs	r3, #48	@ 0x30
 8015430:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80155e0 <_vfiprintf_r+0x21c>
 8015434:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015438:	f04f 0901 	mov.w	r9, #1
 801543c:	4623      	mov	r3, r4
 801543e:	469a      	mov	sl, r3
 8015440:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015444:	b10a      	cbz	r2, 801544a <_vfiprintf_r+0x86>
 8015446:	2a25      	cmp	r2, #37	@ 0x25
 8015448:	d1f9      	bne.n	801543e <_vfiprintf_r+0x7a>
 801544a:	ebba 0b04 	subs.w	fp, sl, r4
 801544e:	d00b      	beq.n	8015468 <_vfiprintf_r+0xa4>
 8015450:	465b      	mov	r3, fp
 8015452:	4622      	mov	r2, r4
 8015454:	4629      	mov	r1, r5
 8015456:	4630      	mov	r0, r6
 8015458:	f7ff ffa1 	bl	801539e <__sfputs_r>
 801545c:	3001      	adds	r0, #1
 801545e:	f000 80a7 	beq.w	80155b0 <_vfiprintf_r+0x1ec>
 8015462:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015464:	445a      	add	r2, fp
 8015466:	9209      	str	r2, [sp, #36]	@ 0x24
 8015468:	f89a 3000 	ldrb.w	r3, [sl]
 801546c:	2b00      	cmp	r3, #0
 801546e:	f000 809f 	beq.w	80155b0 <_vfiprintf_r+0x1ec>
 8015472:	2300      	movs	r3, #0
 8015474:	f04f 32ff 	mov.w	r2, #4294967295
 8015478:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801547c:	f10a 0a01 	add.w	sl, sl, #1
 8015480:	9304      	str	r3, [sp, #16]
 8015482:	9307      	str	r3, [sp, #28]
 8015484:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015488:	931a      	str	r3, [sp, #104]	@ 0x68
 801548a:	4654      	mov	r4, sl
 801548c:	2205      	movs	r2, #5
 801548e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015492:	4853      	ldr	r0, [pc, #332]	@ (80155e0 <_vfiprintf_r+0x21c>)
 8015494:	f7ea ff2c 	bl	80002f0 <memchr>
 8015498:	9a04      	ldr	r2, [sp, #16]
 801549a:	b9d8      	cbnz	r0, 80154d4 <_vfiprintf_r+0x110>
 801549c:	06d1      	lsls	r1, r2, #27
 801549e:	bf44      	itt	mi
 80154a0:	2320      	movmi	r3, #32
 80154a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154a6:	0713      	lsls	r3, r2, #28
 80154a8:	bf44      	itt	mi
 80154aa:	232b      	movmi	r3, #43	@ 0x2b
 80154ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80154b0:	f89a 3000 	ldrb.w	r3, [sl]
 80154b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80154b6:	d015      	beq.n	80154e4 <_vfiprintf_r+0x120>
 80154b8:	9a07      	ldr	r2, [sp, #28]
 80154ba:	4654      	mov	r4, sl
 80154bc:	2000      	movs	r0, #0
 80154be:	f04f 0c0a 	mov.w	ip, #10
 80154c2:	4621      	mov	r1, r4
 80154c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154c8:	3b30      	subs	r3, #48	@ 0x30
 80154ca:	2b09      	cmp	r3, #9
 80154cc:	d94b      	bls.n	8015566 <_vfiprintf_r+0x1a2>
 80154ce:	b1b0      	cbz	r0, 80154fe <_vfiprintf_r+0x13a>
 80154d0:	9207      	str	r2, [sp, #28]
 80154d2:	e014      	b.n	80154fe <_vfiprintf_r+0x13a>
 80154d4:	eba0 0308 	sub.w	r3, r0, r8
 80154d8:	fa09 f303 	lsl.w	r3, r9, r3
 80154dc:	4313      	orrs	r3, r2
 80154de:	9304      	str	r3, [sp, #16]
 80154e0:	46a2      	mov	sl, r4
 80154e2:	e7d2      	b.n	801548a <_vfiprintf_r+0xc6>
 80154e4:	9b03      	ldr	r3, [sp, #12]
 80154e6:	1d19      	adds	r1, r3, #4
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	9103      	str	r1, [sp, #12]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	bfbb      	ittet	lt
 80154f0:	425b      	neglt	r3, r3
 80154f2:	f042 0202 	orrlt.w	r2, r2, #2
 80154f6:	9307      	strge	r3, [sp, #28]
 80154f8:	9307      	strlt	r3, [sp, #28]
 80154fa:	bfb8      	it	lt
 80154fc:	9204      	strlt	r2, [sp, #16]
 80154fe:	7823      	ldrb	r3, [r4, #0]
 8015500:	2b2e      	cmp	r3, #46	@ 0x2e
 8015502:	d10a      	bne.n	801551a <_vfiprintf_r+0x156>
 8015504:	7863      	ldrb	r3, [r4, #1]
 8015506:	2b2a      	cmp	r3, #42	@ 0x2a
 8015508:	d132      	bne.n	8015570 <_vfiprintf_r+0x1ac>
 801550a:	9b03      	ldr	r3, [sp, #12]
 801550c:	1d1a      	adds	r2, r3, #4
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	9203      	str	r2, [sp, #12]
 8015512:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015516:	3402      	adds	r4, #2
 8015518:	9305      	str	r3, [sp, #20]
 801551a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80155f0 <_vfiprintf_r+0x22c>
 801551e:	7821      	ldrb	r1, [r4, #0]
 8015520:	2203      	movs	r2, #3
 8015522:	4650      	mov	r0, sl
 8015524:	f7ea fee4 	bl	80002f0 <memchr>
 8015528:	b138      	cbz	r0, 801553a <_vfiprintf_r+0x176>
 801552a:	9b04      	ldr	r3, [sp, #16]
 801552c:	eba0 000a 	sub.w	r0, r0, sl
 8015530:	2240      	movs	r2, #64	@ 0x40
 8015532:	4082      	lsls	r2, r0
 8015534:	4313      	orrs	r3, r2
 8015536:	3401      	adds	r4, #1
 8015538:	9304      	str	r3, [sp, #16]
 801553a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801553e:	4829      	ldr	r0, [pc, #164]	@ (80155e4 <_vfiprintf_r+0x220>)
 8015540:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015544:	2206      	movs	r2, #6
 8015546:	f7ea fed3 	bl	80002f0 <memchr>
 801554a:	2800      	cmp	r0, #0
 801554c:	d03f      	beq.n	80155ce <_vfiprintf_r+0x20a>
 801554e:	4b26      	ldr	r3, [pc, #152]	@ (80155e8 <_vfiprintf_r+0x224>)
 8015550:	bb1b      	cbnz	r3, 801559a <_vfiprintf_r+0x1d6>
 8015552:	9b03      	ldr	r3, [sp, #12]
 8015554:	3307      	adds	r3, #7
 8015556:	f023 0307 	bic.w	r3, r3, #7
 801555a:	3308      	adds	r3, #8
 801555c:	9303      	str	r3, [sp, #12]
 801555e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015560:	443b      	add	r3, r7
 8015562:	9309      	str	r3, [sp, #36]	@ 0x24
 8015564:	e76a      	b.n	801543c <_vfiprintf_r+0x78>
 8015566:	fb0c 3202 	mla	r2, ip, r2, r3
 801556a:	460c      	mov	r4, r1
 801556c:	2001      	movs	r0, #1
 801556e:	e7a8      	b.n	80154c2 <_vfiprintf_r+0xfe>
 8015570:	2300      	movs	r3, #0
 8015572:	3401      	adds	r4, #1
 8015574:	9305      	str	r3, [sp, #20]
 8015576:	4619      	mov	r1, r3
 8015578:	f04f 0c0a 	mov.w	ip, #10
 801557c:	4620      	mov	r0, r4
 801557e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015582:	3a30      	subs	r2, #48	@ 0x30
 8015584:	2a09      	cmp	r2, #9
 8015586:	d903      	bls.n	8015590 <_vfiprintf_r+0x1cc>
 8015588:	2b00      	cmp	r3, #0
 801558a:	d0c6      	beq.n	801551a <_vfiprintf_r+0x156>
 801558c:	9105      	str	r1, [sp, #20]
 801558e:	e7c4      	b.n	801551a <_vfiprintf_r+0x156>
 8015590:	fb0c 2101 	mla	r1, ip, r1, r2
 8015594:	4604      	mov	r4, r0
 8015596:	2301      	movs	r3, #1
 8015598:	e7f0      	b.n	801557c <_vfiprintf_r+0x1b8>
 801559a:	ab03      	add	r3, sp, #12
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	462a      	mov	r2, r5
 80155a0:	4b12      	ldr	r3, [pc, #72]	@ (80155ec <_vfiprintf_r+0x228>)
 80155a2:	a904      	add	r1, sp, #16
 80155a4:	4630      	mov	r0, r6
 80155a6:	f3af 8000 	nop.w
 80155aa:	4607      	mov	r7, r0
 80155ac:	1c78      	adds	r0, r7, #1
 80155ae:	d1d6      	bne.n	801555e <_vfiprintf_r+0x19a>
 80155b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80155b2:	07d9      	lsls	r1, r3, #31
 80155b4:	d405      	bmi.n	80155c2 <_vfiprintf_r+0x1fe>
 80155b6:	89ab      	ldrh	r3, [r5, #12]
 80155b8:	059a      	lsls	r2, r3, #22
 80155ba:	d402      	bmi.n	80155c2 <_vfiprintf_r+0x1fe>
 80155bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80155be:	f7ff fdcf 	bl	8015160 <__retarget_lock_release_recursive>
 80155c2:	89ab      	ldrh	r3, [r5, #12]
 80155c4:	065b      	lsls	r3, r3, #25
 80155c6:	f53f af1f 	bmi.w	8015408 <_vfiprintf_r+0x44>
 80155ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80155cc:	e71e      	b.n	801540c <_vfiprintf_r+0x48>
 80155ce:	ab03      	add	r3, sp, #12
 80155d0:	9300      	str	r3, [sp, #0]
 80155d2:	462a      	mov	r2, r5
 80155d4:	4b05      	ldr	r3, [pc, #20]	@ (80155ec <_vfiprintf_r+0x228>)
 80155d6:	a904      	add	r1, sp, #16
 80155d8:	4630      	mov	r0, r6
 80155da:	f000 f879 	bl	80156d0 <_printf_i>
 80155de:	e7e4      	b.n	80155aa <_vfiprintf_r+0x1e6>
 80155e0:	08017d42 	.word	0x08017d42
 80155e4:	08017d4c 	.word	0x08017d4c
 80155e8:	00000000 	.word	0x00000000
 80155ec:	0801539f 	.word	0x0801539f
 80155f0:	08017d48 	.word	0x08017d48

080155f4 <_printf_common>:
 80155f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155f8:	4616      	mov	r6, r2
 80155fa:	4698      	mov	r8, r3
 80155fc:	688a      	ldr	r2, [r1, #8]
 80155fe:	690b      	ldr	r3, [r1, #16]
 8015600:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015604:	4293      	cmp	r3, r2
 8015606:	bfb8      	it	lt
 8015608:	4613      	movlt	r3, r2
 801560a:	6033      	str	r3, [r6, #0]
 801560c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015610:	4607      	mov	r7, r0
 8015612:	460c      	mov	r4, r1
 8015614:	b10a      	cbz	r2, 801561a <_printf_common+0x26>
 8015616:	3301      	adds	r3, #1
 8015618:	6033      	str	r3, [r6, #0]
 801561a:	6823      	ldr	r3, [r4, #0]
 801561c:	0699      	lsls	r1, r3, #26
 801561e:	bf42      	ittt	mi
 8015620:	6833      	ldrmi	r3, [r6, #0]
 8015622:	3302      	addmi	r3, #2
 8015624:	6033      	strmi	r3, [r6, #0]
 8015626:	6825      	ldr	r5, [r4, #0]
 8015628:	f015 0506 	ands.w	r5, r5, #6
 801562c:	d106      	bne.n	801563c <_printf_common+0x48>
 801562e:	f104 0a19 	add.w	sl, r4, #25
 8015632:	68e3      	ldr	r3, [r4, #12]
 8015634:	6832      	ldr	r2, [r6, #0]
 8015636:	1a9b      	subs	r3, r3, r2
 8015638:	42ab      	cmp	r3, r5
 801563a:	dc26      	bgt.n	801568a <_printf_common+0x96>
 801563c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015640:	6822      	ldr	r2, [r4, #0]
 8015642:	3b00      	subs	r3, #0
 8015644:	bf18      	it	ne
 8015646:	2301      	movne	r3, #1
 8015648:	0692      	lsls	r2, r2, #26
 801564a:	d42b      	bmi.n	80156a4 <_printf_common+0xb0>
 801564c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015650:	4641      	mov	r1, r8
 8015652:	4638      	mov	r0, r7
 8015654:	47c8      	blx	r9
 8015656:	3001      	adds	r0, #1
 8015658:	d01e      	beq.n	8015698 <_printf_common+0xa4>
 801565a:	6823      	ldr	r3, [r4, #0]
 801565c:	6922      	ldr	r2, [r4, #16]
 801565e:	f003 0306 	and.w	r3, r3, #6
 8015662:	2b04      	cmp	r3, #4
 8015664:	bf02      	ittt	eq
 8015666:	68e5      	ldreq	r5, [r4, #12]
 8015668:	6833      	ldreq	r3, [r6, #0]
 801566a:	1aed      	subeq	r5, r5, r3
 801566c:	68a3      	ldr	r3, [r4, #8]
 801566e:	bf0c      	ite	eq
 8015670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015674:	2500      	movne	r5, #0
 8015676:	4293      	cmp	r3, r2
 8015678:	bfc4      	itt	gt
 801567a:	1a9b      	subgt	r3, r3, r2
 801567c:	18ed      	addgt	r5, r5, r3
 801567e:	2600      	movs	r6, #0
 8015680:	341a      	adds	r4, #26
 8015682:	42b5      	cmp	r5, r6
 8015684:	d11a      	bne.n	80156bc <_printf_common+0xc8>
 8015686:	2000      	movs	r0, #0
 8015688:	e008      	b.n	801569c <_printf_common+0xa8>
 801568a:	2301      	movs	r3, #1
 801568c:	4652      	mov	r2, sl
 801568e:	4641      	mov	r1, r8
 8015690:	4638      	mov	r0, r7
 8015692:	47c8      	blx	r9
 8015694:	3001      	adds	r0, #1
 8015696:	d103      	bne.n	80156a0 <_printf_common+0xac>
 8015698:	f04f 30ff 	mov.w	r0, #4294967295
 801569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156a0:	3501      	adds	r5, #1
 80156a2:	e7c6      	b.n	8015632 <_printf_common+0x3e>
 80156a4:	18e1      	adds	r1, r4, r3
 80156a6:	1c5a      	adds	r2, r3, #1
 80156a8:	2030      	movs	r0, #48	@ 0x30
 80156aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80156ae:	4422      	add	r2, r4
 80156b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80156b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80156b8:	3302      	adds	r3, #2
 80156ba:	e7c7      	b.n	801564c <_printf_common+0x58>
 80156bc:	2301      	movs	r3, #1
 80156be:	4622      	mov	r2, r4
 80156c0:	4641      	mov	r1, r8
 80156c2:	4638      	mov	r0, r7
 80156c4:	47c8      	blx	r9
 80156c6:	3001      	adds	r0, #1
 80156c8:	d0e6      	beq.n	8015698 <_printf_common+0xa4>
 80156ca:	3601      	adds	r6, #1
 80156cc:	e7d9      	b.n	8015682 <_printf_common+0x8e>
	...

080156d0 <_printf_i>:
 80156d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80156d4:	7e0f      	ldrb	r7, [r1, #24]
 80156d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80156d8:	2f78      	cmp	r7, #120	@ 0x78
 80156da:	4691      	mov	r9, r2
 80156dc:	4680      	mov	r8, r0
 80156de:	460c      	mov	r4, r1
 80156e0:	469a      	mov	sl, r3
 80156e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80156e6:	d807      	bhi.n	80156f8 <_printf_i+0x28>
 80156e8:	2f62      	cmp	r7, #98	@ 0x62
 80156ea:	d80a      	bhi.n	8015702 <_printf_i+0x32>
 80156ec:	2f00      	cmp	r7, #0
 80156ee:	f000 80d1 	beq.w	8015894 <_printf_i+0x1c4>
 80156f2:	2f58      	cmp	r7, #88	@ 0x58
 80156f4:	f000 80b8 	beq.w	8015868 <_printf_i+0x198>
 80156f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80156fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015700:	e03a      	b.n	8015778 <_printf_i+0xa8>
 8015702:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015706:	2b15      	cmp	r3, #21
 8015708:	d8f6      	bhi.n	80156f8 <_printf_i+0x28>
 801570a:	a101      	add	r1, pc, #4	@ (adr r1, 8015710 <_printf_i+0x40>)
 801570c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015710:	08015769 	.word	0x08015769
 8015714:	0801577d 	.word	0x0801577d
 8015718:	080156f9 	.word	0x080156f9
 801571c:	080156f9 	.word	0x080156f9
 8015720:	080156f9 	.word	0x080156f9
 8015724:	080156f9 	.word	0x080156f9
 8015728:	0801577d 	.word	0x0801577d
 801572c:	080156f9 	.word	0x080156f9
 8015730:	080156f9 	.word	0x080156f9
 8015734:	080156f9 	.word	0x080156f9
 8015738:	080156f9 	.word	0x080156f9
 801573c:	0801587b 	.word	0x0801587b
 8015740:	080157a7 	.word	0x080157a7
 8015744:	08015835 	.word	0x08015835
 8015748:	080156f9 	.word	0x080156f9
 801574c:	080156f9 	.word	0x080156f9
 8015750:	0801589d 	.word	0x0801589d
 8015754:	080156f9 	.word	0x080156f9
 8015758:	080157a7 	.word	0x080157a7
 801575c:	080156f9 	.word	0x080156f9
 8015760:	080156f9 	.word	0x080156f9
 8015764:	0801583d 	.word	0x0801583d
 8015768:	6833      	ldr	r3, [r6, #0]
 801576a:	1d1a      	adds	r2, r3, #4
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	6032      	str	r2, [r6, #0]
 8015770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015774:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015778:	2301      	movs	r3, #1
 801577a:	e09c      	b.n	80158b6 <_printf_i+0x1e6>
 801577c:	6833      	ldr	r3, [r6, #0]
 801577e:	6820      	ldr	r0, [r4, #0]
 8015780:	1d19      	adds	r1, r3, #4
 8015782:	6031      	str	r1, [r6, #0]
 8015784:	0606      	lsls	r6, r0, #24
 8015786:	d501      	bpl.n	801578c <_printf_i+0xbc>
 8015788:	681d      	ldr	r5, [r3, #0]
 801578a:	e003      	b.n	8015794 <_printf_i+0xc4>
 801578c:	0645      	lsls	r5, r0, #25
 801578e:	d5fb      	bpl.n	8015788 <_printf_i+0xb8>
 8015790:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015794:	2d00      	cmp	r5, #0
 8015796:	da03      	bge.n	80157a0 <_printf_i+0xd0>
 8015798:	232d      	movs	r3, #45	@ 0x2d
 801579a:	426d      	negs	r5, r5
 801579c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80157a0:	4858      	ldr	r0, [pc, #352]	@ (8015904 <_printf_i+0x234>)
 80157a2:	230a      	movs	r3, #10
 80157a4:	e011      	b.n	80157ca <_printf_i+0xfa>
 80157a6:	6821      	ldr	r1, [r4, #0]
 80157a8:	6833      	ldr	r3, [r6, #0]
 80157aa:	0608      	lsls	r0, r1, #24
 80157ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80157b0:	d402      	bmi.n	80157b8 <_printf_i+0xe8>
 80157b2:	0649      	lsls	r1, r1, #25
 80157b4:	bf48      	it	mi
 80157b6:	b2ad      	uxthmi	r5, r5
 80157b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80157ba:	4852      	ldr	r0, [pc, #328]	@ (8015904 <_printf_i+0x234>)
 80157bc:	6033      	str	r3, [r6, #0]
 80157be:	bf14      	ite	ne
 80157c0:	230a      	movne	r3, #10
 80157c2:	2308      	moveq	r3, #8
 80157c4:	2100      	movs	r1, #0
 80157c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80157ca:	6866      	ldr	r6, [r4, #4]
 80157cc:	60a6      	str	r6, [r4, #8]
 80157ce:	2e00      	cmp	r6, #0
 80157d0:	db05      	blt.n	80157de <_printf_i+0x10e>
 80157d2:	6821      	ldr	r1, [r4, #0]
 80157d4:	432e      	orrs	r6, r5
 80157d6:	f021 0104 	bic.w	r1, r1, #4
 80157da:	6021      	str	r1, [r4, #0]
 80157dc:	d04b      	beq.n	8015876 <_printf_i+0x1a6>
 80157de:	4616      	mov	r6, r2
 80157e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80157e4:	fb03 5711 	mls	r7, r3, r1, r5
 80157e8:	5dc7      	ldrb	r7, [r0, r7]
 80157ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80157ee:	462f      	mov	r7, r5
 80157f0:	42bb      	cmp	r3, r7
 80157f2:	460d      	mov	r5, r1
 80157f4:	d9f4      	bls.n	80157e0 <_printf_i+0x110>
 80157f6:	2b08      	cmp	r3, #8
 80157f8:	d10b      	bne.n	8015812 <_printf_i+0x142>
 80157fa:	6823      	ldr	r3, [r4, #0]
 80157fc:	07df      	lsls	r7, r3, #31
 80157fe:	d508      	bpl.n	8015812 <_printf_i+0x142>
 8015800:	6923      	ldr	r3, [r4, #16]
 8015802:	6861      	ldr	r1, [r4, #4]
 8015804:	4299      	cmp	r1, r3
 8015806:	bfde      	ittt	le
 8015808:	2330      	movle	r3, #48	@ 0x30
 801580a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801580e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015812:	1b92      	subs	r2, r2, r6
 8015814:	6122      	str	r2, [r4, #16]
 8015816:	f8cd a000 	str.w	sl, [sp]
 801581a:	464b      	mov	r3, r9
 801581c:	aa03      	add	r2, sp, #12
 801581e:	4621      	mov	r1, r4
 8015820:	4640      	mov	r0, r8
 8015822:	f7ff fee7 	bl	80155f4 <_printf_common>
 8015826:	3001      	adds	r0, #1
 8015828:	d14a      	bne.n	80158c0 <_printf_i+0x1f0>
 801582a:	f04f 30ff 	mov.w	r0, #4294967295
 801582e:	b004      	add	sp, #16
 8015830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015834:	6823      	ldr	r3, [r4, #0]
 8015836:	f043 0320 	orr.w	r3, r3, #32
 801583a:	6023      	str	r3, [r4, #0]
 801583c:	4832      	ldr	r0, [pc, #200]	@ (8015908 <_printf_i+0x238>)
 801583e:	2778      	movs	r7, #120	@ 0x78
 8015840:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	6831      	ldr	r1, [r6, #0]
 8015848:	061f      	lsls	r7, r3, #24
 801584a:	f851 5b04 	ldr.w	r5, [r1], #4
 801584e:	d402      	bmi.n	8015856 <_printf_i+0x186>
 8015850:	065f      	lsls	r7, r3, #25
 8015852:	bf48      	it	mi
 8015854:	b2ad      	uxthmi	r5, r5
 8015856:	6031      	str	r1, [r6, #0]
 8015858:	07d9      	lsls	r1, r3, #31
 801585a:	bf44      	itt	mi
 801585c:	f043 0320 	orrmi.w	r3, r3, #32
 8015860:	6023      	strmi	r3, [r4, #0]
 8015862:	b11d      	cbz	r5, 801586c <_printf_i+0x19c>
 8015864:	2310      	movs	r3, #16
 8015866:	e7ad      	b.n	80157c4 <_printf_i+0xf4>
 8015868:	4826      	ldr	r0, [pc, #152]	@ (8015904 <_printf_i+0x234>)
 801586a:	e7e9      	b.n	8015840 <_printf_i+0x170>
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	f023 0320 	bic.w	r3, r3, #32
 8015872:	6023      	str	r3, [r4, #0]
 8015874:	e7f6      	b.n	8015864 <_printf_i+0x194>
 8015876:	4616      	mov	r6, r2
 8015878:	e7bd      	b.n	80157f6 <_printf_i+0x126>
 801587a:	6833      	ldr	r3, [r6, #0]
 801587c:	6825      	ldr	r5, [r4, #0]
 801587e:	6961      	ldr	r1, [r4, #20]
 8015880:	1d18      	adds	r0, r3, #4
 8015882:	6030      	str	r0, [r6, #0]
 8015884:	062e      	lsls	r6, r5, #24
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	d501      	bpl.n	801588e <_printf_i+0x1be>
 801588a:	6019      	str	r1, [r3, #0]
 801588c:	e002      	b.n	8015894 <_printf_i+0x1c4>
 801588e:	0668      	lsls	r0, r5, #25
 8015890:	d5fb      	bpl.n	801588a <_printf_i+0x1ba>
 8015892:	8019      	strh	r1, [r3, #0]
 8015894:	2300      	movs	r3, #0
 8015896:	6123      	str	r3, [r4, #16]
 8015898:	4616      	mov	r6, r2
 801589a:	e7bc      	b.n	8015816 <_printf_i+0x146>
 801589c:	6833      	ldr	r3, [r6, #0]
 801589e:	1d1a      	adds	r2, r3, #4
 80158a0:	6032      	str	r2, [r6, #0]
 80158a2:	681e      	ldr	r6, [r3, #0]
 80158a4:	6862      	ldr	r2, [r4, #4]
 80158a6:	2100      	movs	r1, #0
 80158a8:	4630      	mov	r0, r6
 80158aa:	f7ea fd21 	bl	80002f0 <memchr>
 80158ae:	b108      	cbz	r0, 80158b4 <_printf_i+0x1e4>
 80158b0:	1b80      	subs	r0, r0, r6
 80158b2:	6060      	str	r0, [r4, #4]
 80158b4:	6863      	ldr	r3, [r4, #4]
 80158b6:	6123      	str	r3, [r4, #16]
 80158b8:	2300      	movs	r3, #0
 80158ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80158be:	e7aa      	b.n	8015816 <_printf_i+0x146>
 80158c0:	6923      	ldr	r3, [r4, #16]
 80158c2:	4632      	mov	r2, r6
 80158c4:	4649      	mov	r1, r9
 80158c6:	4640      	mov	r0, r8
 80158c8:	47d0      	blx	sl
 80158ca:	3001      	adds	r0, #1
 80158cc:	d0ad      	beq.n	801582a <_printf_i+0x15a>
 80158ce:	6823      	ldr	r3, [r4, #0]
 80158d0:	079b      	lsls	r3, r3, #30
 80158d2:	d413      	bmi.n	80158fc <_printf_i+0x22c>
 80158d4:	68e0      	ldr	r0, [r4, #12]
 80158d6:	9b03      	ldr	r3, [sp, #12]
 80158d8:	4298      	cmp	r0, r3
 80158da:	bfb8      	it	lt
 80158dc:	4618      	movlt	r0, r3
 80158de:	e7a6      	b.n	801582e <_printf_i+0x15e>
 80158e0:	2301      	movs	r3, #1
 80158e2:	4632      	mov	r2, r6
 80158e4:	4649      	mov	r1, r9
 80158e6:	4640      	mov	r0, r8
 80158e8:	47d0      	blx	sl
 80158ea:	3001      	adds	r0, #1
 80158ec:	d09d      	beq.n	801582a <_printf_i+0x15a>
 80158ee:	3501      	adds	r5, #1
 80158f0:	68e3      	ldr	r3, [r4, #12]
 80158f2:	9903      	ldr	r1, [sp, #12]
 80158f4:	1a5b      	subs	r3, r3, r1
 80158f6:	42ab      	cmp	r3, r5
 80158f8:	dcf2      	bgt.n	80158e0 <_printf_i+0x210>
 80158fa:	e7eb      	b.n	80158d4 <_printf_i+0x204>
 80158fc:	2500      	movs	r5, #0
 80158fe:	f104 0619 	add.w	r6, r4, #25
 8015902:	e7f5      	b.n	80158f0 <_printf_i+0x220>
 8015904:	08017d53 	.word	0x08017d53
 8015908:	08017d64 	.word	0x08017d64

0801590c <__sflush_r>:
 801590c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015914:	0716      	lsls	r6, r2, #28
 8015916:	4605      	mov	r5, r0
 8015918:	460c      	mov	r4, r1
 801591a:	d454      	bmi.n	80159c6 <__sflush_r+0xba>
 801591c:	684b      	ldr	r3, [r1, #4]
 801591e:	2b00      	cmp	r3, #0
 8015920:	dc02      	bgt.n	8015928 <__sflush_r+0x1c>
 8015922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015924:	2b00      	cmp	r3, #0
 8015926:	dd48      	ble.n	80159ba <__sflush_r+0xae>
 8015928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801592a:	2e00      	cmp	r6, #0
 801592c:	d045      	beq.n	80159ba <__sflush_r+0xae>
 801592e:	2300      	movs	r3, #0
 8015930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015934:	682f      	ldr	r7, [r5, #0]
 8015936:	6a21      	ldr	r1, [r4, #32]
 8015938:	602b      	str	r3, [r5, #0]
 801593a:	d030      	beq.n	801599e <__sflush_r+0x92>
 801593c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801593e:	89a3      	ldrh	r3, [r4, #12]
 8015940:	0759      	lsls	r1, r3, #29
 8015942:	d505      	bpl.n	8015950 <__sflush_r+0x44>
 8015944:	6863      	ldr	r3, [r4, #4]
 8015946:	1ad2      	subs	r2, r2, r3
 8015948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801594a:	b10b      	cbz	r3, 8015950 <__sflush_r+0x44>
 801594c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801594e:	1ad2      	subs	r2, r2, r3
 8015950:	2300      	movs	r3, #0
 8015952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015954:	6a21      	ldr	r1, [r4, #32]
 8015956:	4628      	mov	r0, r5
 8015958:	47b0      	blx	r6
 801595a:	1c43      	adds	r3, r0, #1
 801595c:	89a3      	ldrh	r3, [r4, #12]
 801595e:	d106      	bne.n	801596e <__sflush_r+0x62>
 8015960:	6829      	ldr	r1, [r5, #0]
 8015962:	291d      	cmp	r1, #29
 8015964:	d82b      	bhi.n	80159be <__sflush_r+0xb2>
 8015966:	4a2a      	ldr	r2, [pc, #168]	@ (8015a10 <__sflush_r+0x104>)
 8015968:	40ca      	lsrs	r2, r1
 801596a:	07d6      	lsls	r6, r2, #31
 801596c:	d527      	bpl.n	80159be <__sflush_r+0xb2>
 801596e:	2200      	movs	r2, #0
 8015970:	6062      	str	r2, [r4, #4]
 8015972:	04d9      	lsls	r1, r3, #19
 8015974:	6922      	ldr	r2, [r4, #16]
 8015976:	6022      	str	r2, [r4, #0]
 8015978:	d504      	bpl.n	8015984 <__sflush_r+0x78>
 801597a:	1c42      	adds	r2, r0, #1
 801597c:	d101      	bne.n	8015982 <__sflush_r+0x76>
 801597e:	682b      	ldr	r3, [r5, #0]
 8015980:	b903      	cbnz	r3, 8015984 <__sflush_r+0x78>
 8015982:	6560      	str	r0, [r4, #84]	@ 0x54
 8015984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015986:	602f      	str	r7, [r5, #0]
 8015988:	b1b9      	cbz	r1, 80159ba <__sflush_r+0xae>
 801598a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801598e:	4299      	cmp	r1, r3
 8015990:	d002      	beq.n	8015998 <__sflush_r+0x8c>
 8015992:	4628      	mov	r0, r5
 8015994:	f7ff fbf4 	bl	8015180 <_free_r>
 8015998:	2300      	movs	r3, #0
 801599a:	6363      	str	r3, [r4, #52]	@ 0x34
 801599c:	e00d      	b.n	80159ba <__sflush_r+0xae>
 801599e:	2301      	movs	r3, #1
 80159a0:	4628      	mov	r0, r5
 80159a2:	47b0      	blx	r6
 80159a4:	4602      	mov	r2, r0
 80159a6:	1c50      	adds	r0, r2, #1
 80159a8:	d1c9      	bne.n	801593e <__sflush_r+0x32>
 80159aa:	682b      	ldr	r3, [r5, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d0c6      	beq.n	801593e <__sflush_r+0x32>
 80159b0:	2b1d      	cmp	r3, #29
 80159b2:	d001      	beq.n	80159b8 <__sflush_r+0xac>
 80159b4:	2b16      	cmp	r3, #22
 80159b6:	d11e      	bne.n	80159f6 <__sflush_r+0xea>
 80159b8:	602f      	str	r7, [r5, #0]
 80159ba:	2000      	movs	r0, #0
 80159bc:	e022      	b.n	8015a04 <__sflush_r+0xf8>
 80159be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159c2:	b21b      	sxth	r3, r3
 80159c4:	e01b      	b.n	80159fe <__sflush_r+0xf2>
 80159c6:	690f      	ldr	r7, [r1, #16]
 80159c8:	2f00      	cmp	r7, #0
 80159ca:	d0f6      	beq.n	80159ba <__sflush_r+0xae>
 80159cc:	0793      	lsls	r3, r2, #30
 80159ce:	680e      	ldr	r6, [r1, #0]
 80159d0:	bf08      	it	eq
 80159d2:	694b      	ldreq	r3, [r1, #20]
 80159d4:	600f      	str	r7, [r1, #0]
 80159d6:	bf18      	it	ne
 80159d8:	2300      	movne	r3, #0
 80159da:	eba6 0807 	sub.w	r8, r6, r7
 80159de:	608b      	str	r3, [r1, #8]
 80159e0:	f1b8 0f00 	cmp.w	r8, #0
 80159e4:	dde9      	ble.n	80159ba <__sflush_r+0xae>
 80159e6:	6a21      	ldr	r1, [r4, #32]
 80159e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80159ea:	4643      	mov	r3, r8
 80159ec:	463a      	mov	r2, r7
 80159ee:	4628      	mov	r0, r5
 80159f0:	47b0      	blx	r6
 80159f2:	2800      	cmp	r0, #0
 80159f4:	dc08      	bgt.n	8015a08 <__sflush_r+0xfc>
 80159f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159fe:	81a3      	strh	r3, [r4, #12]
 8015a00:	f04f 30ff 	mov.w	r0, #4294967295
 8015a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a08:	4407      	add	r7, r0
 8015a0a:	eba8 0800 	sub.w	r8, r8, r0
 8015a0e:	e7e7      	b.n	80159e0 <__sflush_r+0xd4>
 8015a10:	20400001 	.word	0x20400001

08015a14 <_fflush_r>:
 8015a14:	b538      	push	{r3, r4, r5, lr}
 8015a16:	690b      	ldr	r3, [r1, #16]
 8015a18:	4605      	mov	r5, r0
 8015a1a:	460c      	mov	r4, r1
 8015a1c:	b913      	cbnz	r3, 8015a24 <_fflush_r+0x10>
 8015a1e:	2500      	movs	r5, #0
 8015a20:	4628      	mov	r0, r5
 8015a22:	bd38      	pop	{r3, r4, r5, pc}
 8015a24:	b118      	cbz	r0, 8015a2e <_fflush_r+0x1a>
 8015a26:	6a03      	ldr	r3, [r0, #32]
 8015a28:	b90b      	cbnz	r3, 8015a2e <_fflush_r+0x1a>
 8015a2a:	f7ff f98f 	bl	8014d4c <__sinit>
 8015a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d0f3      	beq.n	8015a1e <_fflush_r+0xa>
 8015a36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015a38:	07d0      	lsls	r0, r2, #31
 8015a3a:	d404      	bmi.n	8015a46 <_fflush_r+0x32>
 8015a3c:	0599      	lsls	r1, r3, #22
 8015a3e:	d402      	bmi.n	8015a46 <_fflush_r+0x32>
 8015a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a42:	f7ff fb8c 	bl	801515e <__retarget_lock_acquire_recursive>
 8015a46:	4628      	mov	r0, r5
 8015a48:	4621      	mov	r1, r4
 8015a4a:	f7ff ff5f 	bl	801590c <__sflush_r>
 8015a4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a50:	07da      	lsls	r2, r3, #31
 8015a52:	4605      	mov	r5, r0
 8015a54:	d4e4      	bmi.n	8015a20 <_fflush_r+0xc>
 8015a56:	89a3      	ldrh	r3, [r4, #12]
 8015a58:	059b      	lsls	r3, r3, #22
 8015a5a:	d4e1      	bmi.n	8015a20 <_fflush_r+0xc>
 8015a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a5e:	f7ff fb7f 	bl	8015160 <__retarget_lock_release_recursive>
 8015a62:	e7dd      	b.n	8015a20 <_fflush_r+0xc>

08015a64 <__swhatbuf_r>:
 8015a64:	b570      	push	{r4, r5, r6, lr}
 8015a66:	460c      	mov	r4, r1
 8015a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	b096      	sub	sp, #88	@ 0x58
 8015a70:	4615      	mov	r5, r2
 8015a72:	461e      	mov	r6, r3
 8015a74:	da0d      	bge.n	8015a92 <__swhatbuf_r+0x2e>
 8015a76:	89a3      	ldrh	r3, [r4, #12]
 8015a78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a7c:	f04f 0100 	mov.w	r1, #0
 8015a80:	bf14      	ite	ne
 8015a82:	2340      	movne	r3, #64	@ 0x40
 8015a84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a88:	2000      	movs	r0, #0
 8015a8a:	6031      	str	r1, [r6, #0]
 8015a8c:	602b      	str	r3, [r5, #0]
 8015a8e:	b016      	add	sp, #88	@ 0x58
 8015a90:	bd70      	pop	{r4, r5, r6, pc}
 8015a92:	466a      	mov	r2, sp
 8015a94:	f000 f87c 	bl	8015b90 <_fstat_r>
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	dbec      	blt.n	8015a76 <__swhatbuf_r+0x12>
 8015a9c:	9901      	ldr	r1, [sp, #4]
 8015a9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015aa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015aa6:	4259      	negs	r1, r3
 8015aa8:	4159      	adcs	r1, r3
 8015aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015aae:	e7eb      	b.n	8015a88 <__swhatbuf_r+0x24>

08015ab0 <__smakebuf_r>:
 8015ab0:	898b      	ldrh	r3, [r1, #12]
 8015ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ab4:	079d      	lsls	r5, r3, #30
 8015ab6:	4606      	mov	r6, r0
 8015ab8:	460c      	mov	r4, r1
 8015aba:	d507      	bpl.n	8015acc <__smakebuf_r+0x1c>
 8015abc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015ac0:	6023      	str	r3, [r4, #0]
 8015ac2:	6123      	str	r3, [r4, #16]
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	6163      	str	r3, [r4, #20]
 8015ac8:	b003      	add	sp, #12
 8015aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015acc:	ab01      	add	r3, sp, #4
 8015ace:	466a      	mov	r2, sp
 8015ad0:	f7ff ffc8 	bl	8015a64 <__swhatbuf_r>
 8015ad4:	9f00      	ldr	r7, [sp, #0]
 8015ad6:	4605      	mov	r5, r0
 8015ad8:	4639      	mov	r1, r7
 8015ada:	4630      	mov	r0, r6
 8015adc:	f7ff fbbc 	bl	8015258 <_malloc_r>
 8015ae0:	b948      	cbnz	r0, 8015af6 <__smakebuf_r+0x46>
 8015ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ae6:	059a      	lsls	r2, r3, #22
 8015ae8:	d4ee      	bmi.n	8015ac8 <__smakebuf_r+0x18>
 8015aea:	f023 0303 	bic.w	r3, r3, #3
 8015aee:	f043 0302 	orr.w	r3, r3, #2
 8015af2:	81a3      	strh	r3, [r4, #12]
 8015af4:	e7e2      	b.n	8015abc <__smakebuf_r+0xc>
 8015af6:	89a3      	ldrh	r3, [r4, #12]
 8015af8:	6020      	str	r0, [r4, #0]
 8015afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015afe:	81a3      	strh	r3, [r4, #12]
 8015b00:	9b01      	ldr	r3, [sp, #4]
 8015b02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b06:	b15b      	cbz	r3, 8015b20 <__smakebuf_r+0x70>
 8015b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	f000 f851 	bl	8015bb4 <_isatty_r>
 8015b12:	b128      	cbz	r0, 8015b20 <__smakebuf_r+0x70>
 8015b14:	89a3      	ldrh	r3, [r4, #12]
 8015b16:	f023 0303 	bic.w	r3, r3, #3
 8015b1a:	f043 0301 	orr.w	r3, r3, #1
 8015b1e:	81a3      	strh	r3, [r4, #12]
 8015b20:	89a3      	ldrh	r3, [r4, #12]
 8015b22:	431d      	orrs	r5, r3
 8015b24:	81a5      	strh	r5, [r4, #12]
 8015b26:	e7cf      	b.n	8015ac8 <__smakebuf_r+0x18>

08015b28 <_putc_r>:
 8015b28:	b570      	push	{r4, r5, r6, lr}
 8015b2a:	460d      	mov	r5, r1
 8015b2c:	4614      	mov	r4, r2
 8015b2e:	4606      	mov	r6, r0
 8015b30:	b118      	cbz	r0, 8015b3a <_putc_r+0x12>
 8015b32:	6a03      	ldr	r3, [r0, #32]
 8015b34:	b90b      	cbnz	r3, 8015b3a <_putc_r+0x12>
 8015b36:	f7ff f909 	bl	8014d4c <__sinit>
 8015b3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b3c:	07d8      	lsls	r0, r3, #31
 8015b3e:	d405      	bmi.n	8015b4c <_putc_r+0x24>
 8015b40:	89a3      	ldrh	r3, [r4, #12]
 8015b42:	0599      	lsls	r1, r3, #22
 8015b44:	d402      	bmi.n	8015b4c <_putc_r+0x24>
 8015b46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b48:	f7ff fb09 	bl	801515e <__retarget_lock_acquire_recursive>
 8015b4c:	68a3      	ldr	r3, [r4, #8]
 8015b4e:	3b01      	subs	r3, #1
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	60a3      	str	r3, [r4, #8]
 8015b54:	da05      	bge.n	8015b62 <_putc_r+0x3a>
 8015b56:	69a2      	ldr	r2, [r4, #24]
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	db12      	blt.n	8015b82 <_putc_r+0x5a>
 8015b5c:	b2eb      	uxtb	r3, r5
 8015b5e:	2b0a      	cmp	r3, #10
 8015b60:	d00f      	beq.n	8015b82 <_putc_r+0x5a>
 8015b62:	6823      	ldr	r3, [r4, #0]
 8015b64:	1c5a      	adds	r2, r3, #1
 8015b66:	6022      	str	r2, [r4, #0]
 8015b68:	701d      	strb	r5, [r3, #0]
 8015b6a:	b2ed      	uxtb	r5, r5
 8015b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b6e:	07da      	lsls	r2, r3, #31
 8015b70:	d405      	bmi.n	8015b7e <_putc_r+0x56>
 8015b72:	89a3      	ldrh	r3, [r4, #12]
 8015b74:	059b      	lsls	r3, r3, #22
 8015b76:	d402      	bmi.n	8015b7e <_putc_r+0x56>
 8015b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b7a:	f7ff faf1 	bl	8015160 <__retarget_lock_release_recursive>
 8015b7e:	4628      	mov	r0, r5
 8015b80:	bd70      	pop	{r4, r5, r6, pc}
 8015b82:	4629      	mov	r1, r5
 8015b84:	4622      	mov	r2, r4
 8015b86:	4630      	mov	r0, r6
 8015b88:	f7ff f9dc 	bl	8014f44 <__swbuf_r>
 8015b8c:	4605      	mov	r5, r0
 8015b8e:	e7ed      	b.n	8015b6c <_putc_r+0x44>

08015b90 <_fstat_r>:
 8015b90:	b538      	push	{r3, r4, r5, lr}
 8015b92:	4d07      	ldr	r5, [pc, #28]	@ (8015bb0 <_fstat_r+0x20>)
 8015b94:	2300      	movs	r3, #0
 8015b96:	4604      	mov	r4, r0
 8015b98:	4608      	mov	r0, r1
 8015b9a:	4611      	mov	r1, r2
 8015b9c:	602b      	str	r3, [r5, #0]
 8015b9e:	f7eb fb4c 	bl	800123a <_fstat>
 8015ba2:	1c43      	adds	r3, r0, #1
 8015ba4:	d102      	bne.n	8015bac <_fstat_r+0x1c>
 8015ba6:	682b      	ldr	r3, [r5, #0]
 8015ba8:	b103      	cbz	r3, 8015bac <_fstat_r+0x1c>
 8015baa:	6023      	str	r3, [r4, #0]
 8015bac:	bd38      	pop	{r3, r4, r5, pc}
 8015bae:	bf00      	nop
 8015bb0:	24004308 	.word	0x24004308

08015bb4 <_isatty_r>:
 8015bb4:	b538      	push	{r3, r4, r5, lr}
 8015bb6:	4d06      	ldr	r5, [pc, #24]	@ (8015bd0 <_isatty_r+0x1c>)
 8015bb8:	2300      	movs	r3, #0
 8015bba:	4604      	mov	r4, r0
 8015bbc:	4608      	mov	r0, r1
 8015bbe:	602b      	str	r3, [r5, #0]
 8015bc0:	f7eb fb4b 	bl	800125a <_isatty>
 8015bc4:	1c43      	adds	r3, r0, #1
 8015bc6:	d102      	bne.n	8015bce <_isatty_r+0x1a>
 8015bc8:	682b      	ldr	r3, [r5, #0]
 8015bca:	b103      	cbz	r3, 8015bce <_isatty_r+0x1a>
 8015bcc:	6023      	str	r3, [r4, #0]
 8015bce:	bd38      	pop	{r3, r4, r5, pc}
 8015bd0:	24004308 	.word	0x24004308

08015bd4 <_sbrk_r>:
 8015bd4:	b538      	push	{r3, r4, r5, lr}
 8015bd6:	4d06      	ldr	r5, [pc, #24]	@ (8015bf0 <_sbrk_r+0x1c>)
 8015bd8:	2300      	movs	r3, #0
 8015bda:	4604      	mov	r4, r0
 8015bdc:	4608      	mov	r0, r1
 8015bde:	602b      	str	r3, [r5, #0]
 8015be0:	f7eb fb54 	bl	800128c <_sbrk>
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d102      	bne.n	8015bee <_sbrk_r+0x1a>
 8015be8:	682b      	ldr	r3, [r5, #0]
 8015bea:	b103      	cbz	r3, 8015bee <_sbrk_r+0x1a>
 8015bec:	6023      	str	r3, [r4, #0]
 8015bee:	bd38      	pop	{r3, r4, r5, pc}
 8015bf0:	24004308 	.word	0x24004308

08015bf4 <_init>:
 8015bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf6:	bf00      	nop
 8015bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bfa:	bc08      	pop	{r3}
 8015bfc:	469e      	mov	lr, r3
 8015bfe:	4770      	bx	lr

08015c00 <_fini>:
 8015c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c02:	bf00      	nop
 8015c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c06:	bc08      	pop	{r3}
 8015c08:	469e      	mov	lr, r3
 8015c0a:	4770      	bx	lr
